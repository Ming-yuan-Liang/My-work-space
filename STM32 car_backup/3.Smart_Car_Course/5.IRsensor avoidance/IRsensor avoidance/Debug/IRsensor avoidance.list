
IRsensor avoidance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800c9d8  0800c9d8  0000d9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d030  0800d030  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d030  0800d030  0000e030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d038  0800d038  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d038  0800d038  0000e038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d03c  0800d03c  0000e03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d040  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001f0  0800d230  0000f1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800d230  0000f75c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108f0  00000000  00000000  0000f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e1  00000000  00000000  0001fb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00022ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  000240c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc0b  00000000  00000000  00024da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb1c  00000000  00000000  000429b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0bb7  00000000  00000000  0005e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  000ff0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  00104980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c9c0 	.word	0x0800c9c0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0800c9c0 	.word	0x0800c9c0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	2200      	movs	r2, #0
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	f7ff fc09 	bl	8000a94 <__aeabi_dcmplt>
 8001282:	b928      	cbnz	r0, 8001290 <__aeabi_d2lz+0x1c>
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800128c:	f000 b80a 	b.w	80012a4 <__aeabi_d2ulz>
 8001290:	4620      	mov	r0, r4
 8001292:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001296:	f000 f805 	bl	80012a4 <__aeabi_d2ulz>
 800129a:	4240      	negs	r0, r0
 800129c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	bf00      	nop

080012a4 <__aeabi_d2ulz>:
 80012a4:	b5d0      	push	{r4, r6, r7, lr}
 80012a6:	2200      	movs	r2, #0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <__aeabi_d2ulz+0x34>)
 80012aa:	4606      	mov	r6, r0
 80012ac:	460f      	mov	r7, r1
 80012ae:	f7ff f97f 	bl	80005b0 <__aeabi_dmul>
 80012b2:	f7ff fc55 	bl	8000b60 <__aeabi_d2uiz>
 80012b6:	4604      	mov	r4, r0
 80012b8:	f7ff f900 	bl	80004bc <__aeabi_ui2d>
 80012bc:	2200      	movs	r2, #0
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <__aeabi_d2ulz+0x38>)
 80012c0:	f7ff f976 	bl	80005b0 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4630      	mov	r0, r6
 80012ca:	4639      	mov	r1, r7
 80012cc:	f7fe ffb8 	bl	8000240 <__aeabi_dsub>
 80012d0:	f7ff fc46 	bl	8000b60 <__aeabi_d2uiz>
 80012d4:	4621      	mov	r1, r4
 80012d6:	bdd0      	pop	{r4, r6, r7, pc}
 80012d8:	3df00000 	.word	0x3df00000
 80012dc:	41f00000 	.word	0x41f00000

080012e0 <Ir_Ultrasonic_avoid>:
			wheel_State(MOTION_RUN,250);
		}
}
*/
void Ir_Ultrasonic_avoid(uint16_t distance)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
    uint16_t left_data = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81bb      	strh	r3, [r7, #12]
    uint16_t right_data = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	817b      	strh	r3, [r7, #10]
    uint16_t dis;
    dis = Get_distance();  // 获取正前方的距离
 80012f2:	f001 f8e3 	bl	80024bc <Get_distance>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff9b 	bl	8001234 <__aeabi_f2uiz>
 80012fe:	4603      	mov	r3, r0
 8001300:	81fb      	strh	r3, [r7, #14]
    Get_Iravoid_Data(&left_data, &right_data); // 获取左前和右前的距离
 8001302:	f107 020a 	add.w	r2, r7, #10
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f875 	bl	80013fc <Get_Iravoid_Data>

    // 如果前方有障碍物
    if (dis < distance || left_data<150 || right_data<150)
 8001312:	89fa      	ldrh	r2, [r7, #14]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	429a      	cmp	r2, r3
 8001318:	d305      	bcc.n	8001326 <Ir_Ultrasonic_avoid+0x46>
 800131a:	89bb      	ldrh	r3, [r7, #12]
 800131c:	2b95      	cmp	r3, #149	@ 0x95
 800131e:	d902      	bls.n	8001326 <Ir_Ultrasonic_avoid+0x46>
 8001320:	897b      	ldrh	r3, [r7, #10]
 8001322:	2b95      	cmp	r3, #149	@ 0x95
 8001324:	d832      	bhi.n	800138c <Ir_Ultrasonic_avoid+0xac>
    {
        wheel_State(MOTION_STOP, 0);  // 停止前进
 8001326:	2100      	movs	r1, #0
 8001328:	2000      	movs	r0, #0
 800132a:	f000 fb8f 	bl	8001a4c <wheel_State>
        HAL_Delay(500);  // 暂停一会儿，避免碰撞过快
 800132e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001332:	f002 fa49 	bl	80037c8 <HAL_Delay>

        // 再次获取左侧和右侧的数据
        Get_Iravoid_Data(&left_data, &right_data);
 8001336:	f107 020a 	add.w	r2, r7, #10
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f85b 	bl	80013fc <Get_Iravoid_Data>

        // 判断转向策略
        if (left_data > right_data)  // 如果左侧更远或者右侧有障碍物
 8001346:	89ba      	ldrh	r2, [r7, #12]
 8001348:	897b      	ldrh	r3, [r7, #10]
 800134a:	429a      	cmp	r2, r3
 800134c:	d908      	bls.n	8001360 <Ir_Ultrasonic_avoid+0x80>
        {
            // 小车右转，保持较小的转角
            wheel_State(MOTION_SPIN_LEFT, 400);  // 小幅度右转
 800134e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001352:	2005      	movs	r0, #5
 8001354:	f000 fb7a 	bl	8001a4c <wheel_State>
            HAL_Delay(200);  // 等待转向完成
 8001358:	20c8      	movs	r0, #200	@ 0xc8
 800135a:	f002 fa35 	bl	80037c8 <HAL_Delay>
        if (left_data > right_data)  // 如果左侧更远或者右侧有障碍物
 800135e:	e01b      	b.n	8001398 <Ir_Ultrasonic_avoid+0xb8>
        }
        else if (right_data > left_data)  // 如果右侧更远
 8001360:	897a      	ldrh	r2, [r7, #10]
 8001362:	89bb      	ldrh	r3, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d908      	bls.n	800137a <Ir_Ultrasonic_avoid+0x9a>
        {
            // 小车左转，保持较小的转角
            wheel_State(MOTION_SPIN_RIGHT, 400);  // 小幅度左转
 8001368:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800136c:	2006      	movs	r0, #6
 800136e:	f000 fb6d 	bl	8001a4c <wheel_State>
            HAL_Delay(200);  // 等待转向完成
 8001372:	20c8      	movs	r0, #200	@ 0xc8
 8001374:	f002 fa28 	bl	80037c8 <HAL_Delay>
        if (left_data > right_data)  // 如果左侧更远或者右侧有障碍物
 8001378:	e00e      	b.n	8001398 <Ir_Ultrasonic_avoid+0xb8>
        }
        else  // 如果左右两侧差不多
        {
            // 可以尝试随机选择方向或者优先选择某一方向
            wheel_State(MOTION_RUN, 200);  // 小幅度左转
 800137a:	21c8      	movs	r1, #200	@ 0xc8
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fb65 	bl	8001a4c <wheel_State>
            HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f002 fa1f 	bl	80037c8 <HAL_Delay>
        if (left_data > right_data)  // 如果左侧更远或者右侧有障碍物
 800138a:	e005      	b.n	8001398 <Ir_Ultrasonic_avoid+0xb8>
        }
    }
    else
    {
        // 没有障碍物，可以继续前进
        wheel_State(MOTION_RUN, 500);
 800138c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fb5b 	bl	8001a4c <wheel_State>
    }
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Adc_Get_Iravoid>:
 *
 *Collect the voltage of the sensor
 * */

uint16_t Adc_Get_Iravoid(uint32_t ch)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ch;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013bc:	2307      	movs	r3, #7
 80013be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <Adc_Get_Iravoid+0x58>)
 80013c8:	f002 fdd4 	bl	8003f74 <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <Adc_Get_Iravoid+0x36>
  {
	Error_Handler();
 80013d2:	f001 fa87 	bl	80028e4 <Error_Handler>
  }

	HAL_ADC_Start(&hadc3);
 80013d6:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <Adc_Get_Iravoid+0x58>)
 80013d8:	f002 fbbc 	bl	8003b54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 500);
 80013dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <Adc_Get_Iravoid+0x58>)
 80013e2:	f002 fc7d 	bl	8003ce0 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc3);
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <Adc_Get_Iravoid+0x58>)
 80013e8:	f002 fd9c 	bl	8003f24 <HAL_ADC_GetValue>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29b      	uxth	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000350 	.word	0x20000350

080013fc <Get_Iravoid_Data>:
 * 串口打印采集的数据
 *
 *Serial port printing of collected data
 * */
void Get_Iravoid_Data(uint16_t *left_data,uint16_t *right_data)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]

	*left_data =  Adc_Get_Iravoid(ADC_CHANNEL_7);
 8001406:	2007      	movs	r0, #7
 8001408:	f7ff ffca 	bl	80013a0 <Adc_Get_Iravoid>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	801a      	strh	r2, [r3, #0]
	*right_data = Adc_Get_Iravoid(ADC_CHANNEL_8);
 8001414:	2008      	movs	r0, #8
 8001416:	f7ff ffc3 	bl	80013a0 <Adc_Get_Iravoid>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	801a      	strh	r2, [r3, #0]

	printf("L1:%d     R1:%d \r\n",*left_data,*right_data);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <Get_Iravoid_Data+0x40>)
 8001430:	f007 fe86 	bl	8009140 <iprintf>

}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800c9d8 	.word	0x0800c9d8

08001440 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&USART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF); // 阻塞方式打印,串口x
 8001448:	1d39      	adds	r1, r7, #4
 800144a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144e:	2201      	movs	r2, #1
 8001450:	4803      	ldr	r0, [pc, #12]	@ (8001460 <__io_putchar+0x20>)
 8001452:	f006 fd87 	bl	8007f64 <HAL_UART_Transmit>
  return ch;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200005c4 	.word	0x200005c4

08001464 <BSP_Init>:
#include "bsp.h"


void BSP_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	Bsp_Tim_Init();
 8001468:	f000 ff9e 	bl	80023a8 <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化 Motor PID initialization
 800146c:	f000 fca8 	bl	8001dc0 <PID_Param_Init>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <BSP_Loop>:


void BSP_Loop(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

	Ir_Ultrasonic_avoid(20);//设置避障距离为20cm Set the obstacle avoidance distance to 20cm
 8001478:	2014      	movs	r0, #20
 800147a:	f7ff ff31 	bl	80012e0 <Ir_Ultrasonic_avoid>

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <Delay_us>:
** 功能描述: 延时nus，nus为要延时的us数(用时钟摘取法来做us延时).
** 输入参数: nus
** 输出参数: 无
***********************************************************/
void Delay_us(uint32_t nus)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	uint32_t told, tnow, tcnt = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
	uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <Delay_us+0x74>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	617b      	str	r3, [r7, #20]
	ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <Delay_us+0x78>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	613b      	str	r3, [r7, #16]
	 told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Delay_us+0x74>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
	    while (1)
	    {
	        tnow = SysTick->VAL;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <Delay_us+0x74>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	60fb      	str	r3, [r7, #12]
	        if (tnow != told)
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d0f8      	beq.n	80014a8 <Delay_us+0x24>
	        {
	            if (tnow < told)
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d206      	bcs.n	80014cc <Delay_us+0x48>
	            {
	                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	e007      	b.n	80014dc <Delay_us+0x58>
	            }
	            else
	            {
	                tcnt += reload - tnow + told;
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad2      	subs	r2, r2, r3
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4413      	add	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
	            }
	            told = tnow;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	61fb      	str	r3, [r7, #28]
	            if (tcnt >= ticks)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d200      	bcs.n	80014ea <Delay_us+0x66>
	        tnow = SysTick->VAL;
 80014e8:	e7de      	b.n	80014a8 <Delay_us+0x24>
	            {
	                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 80014ea:	bf00      	nop
	            }
	        }
	    }
}
 80014ec:	bf00      	nop
 80014ee:	3724      	adds	r7, #36	@ 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010
 80014fc:	2000020c 	.word	0x2000020c

08001500 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d841      	bhi.n	8001598 <Encoder_Read_CNT+0x98>
 8001514:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <Encoder_Read_CNT+0x1c>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001547 	.word	0x08001547
 8001524:	08001565 	.word	0x08001565
 8001528:	0800157f 	.word	0x0800157f
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 800152c:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <Encoder_Read_CNT+0xa8>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	b29b      	uxth	r3, r3
 8001532:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001536:	337f      	adds	r3, #127	@ 0x7f
 8001538:	b29b      	uxth	r3, r3
 800153a:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <Encoder_Read_CNT+0xa8>)
 800153e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001544:	e029      	b.n	800159a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8001546:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	b29b      	uxth	r3, r3
 800154e:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001552:	337f      	adds	r3, #127	@ 0x7f
 8001554:	b29b      	uxth	r3, r3
 8001556:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8001558:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800155c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001562:	e01a      	b.n	800159a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <Encoder_Read_CNT+0xac>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	b29b      	uxth	r3, r3
 800156a:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 800156e:	337f      	adds	r3, #127	@ 0x7f
 8001570:	b29b      	uxth	r3, r3
 8001572:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8001574:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <Encoder_Read_CNT+0xac>)
 8001576:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 800157c:	e00d      	b.n	800159a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <Encoder_Read_CNT+0xb0>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	b29b      	uxth	r3, r3
 8001584:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001588:	337f      	adds	r3, #127	@ 0x7f
 800158a:	b29b      	uxth	r3, r3
 800158c:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <Encoder_Read_CNT+0xb0>)
 8001590:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001596:	e000      	b.n	800159a <Encoder_Read_CNT+0x9a>
	default:
		break;
 8001598:	bf00      	nop
	}
	return Encoder_TIM;
 800159a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40000800 	.word	0x40000800
 80015ac:	40000c00 	.word	0x40000c00
 80015b0:	40000400 	.word	0x40000400

080015b4 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <Encoder_Get_ALL+0x38>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <Encoder_Get_ALL+0x3c>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3308      	adds	r3, #8
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <Encoder_Get_ALL+0x40>)
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	330c      	adds	r3, #12
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <Encoder_Get_ALL+0x44>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000210 	.word	0x20000210
 80015f0:	20000214 	.word	0x20000214
 80015f4:	20000218 	.word	0x20000218
 80015f8:	2000021c 	.word	0x2000021c

080015fc <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ff7d 	bl	8001500 <Encoder_Read_CNT>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <Encoder_Update_Count+0x58>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <Encoder_Update_Count+0x58>)
 8001612:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff73 	bl	8001500 <Encoder_Read_CNT>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <Encoder_Update_Count+0x5c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <Encoder_Update_Count+0x5c>)
 8001626:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff ff69 	bl	8001500 <Encoder_Read_CNT>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <Encoder_Update_Count+0x60>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a08      	ldr	r2, [pc, #32]	@ (800165c <Encoder_Update_Count+0x60>)
 800163a:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 800163c:	2003      	movs	r0, #3
 800163e:	f7ff ff5f 	bl	8001500 <Encoder_Read_CNT>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <Encoder_Update_Count+0x64>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <Encoder_Update_Count+0x64>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000210 	.word	0x20000210
 8001658:	20000214 	.word	0x20000214
 800165c:	20000218 	.word	0x20000218
 8001660:	2000021c 	.word	0x2000021c

08001664 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8001668:	4b02      	ldr	r3, [pc, #8]	@ (8001674 <Motion_Get_Circle_Pulse+0x10>)
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	44820000 	.word	0x44820000

08001678 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <Motion_Set_Yaw_Adjust+0x28>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e002      	b.n	8001696 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <Motion_Set_Yaw_Adjust+0x28>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	200002a4 	.word	0x200002a4

080016a4 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	80fb      	strh	r3, [r7, #6]
 80016b6:	4603      	mov	r3, r0
 80016b8:	80bb      	strh	r3, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	807b      	strh	r3, [r7, #2]
 80016be:	4613      	mov	r3, r2
 80016c0:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80016ca:	db0a      	blt.n	80016e2 <Motion_Set_Pwm+0x3e>
 80016cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80016d4:	dc05      	bgt.n	80016e2 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	4619      	mov	r1, r3
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fdcf 	bl	8002280 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 80016e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80016ea:	db0a      	blt.n	8001702 <Motion_Set_Pwm+0x5e>
 80016ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80016f4:	dc05      	bgt.n	8001702 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 80016f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016fa:	4619      	mov	r1, r3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 fdbf 	bl	8002280 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8001702:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001706:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800170a:	db0a      	blt.n	8001722 <Motion_Set_Pwm+0x7e>
 800170c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001710:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001714:	dc05      	bgt.n	8001722 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8001716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800171a:	4619      	mov	r1, r3
 800171c:	2002      	movs	r0, #2
 800171e:	f000 fdaf 	bl	8002280 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8001722:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001726:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800172a:	db0a      	blt.n	8001742 <Motion_Set_Pwm+0x9e>
 800172c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001730:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001734:	dc05      	bgt.n	8001742 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8001736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800173a:	4619      	mov	r1, r3
 800173c:	2003      	movs	r0, #3
 800173e:	f000 fd9f 	bl	8002280 <Motor_Set_Pwm>
    }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
	...

0800174c <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8001756:	2300      	movs	r3, #0
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2000      	movs	r0, #0
 800175e:	f000 f815 	bl	800178c <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8001762:	2004      	movs	r0, #4
 8001764:	f000 fc64 	bl	8002030 <PID_Clear_Motor>
    g_start_ctrl = 0;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <Motion_Stop+0x38>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <Motion_Stop+0x3c>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fd36 	bl	80021e8 <Motor_Stop>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000270 	.word	0x20000270
 8001788:	200002a4 	.word	0x200002a4

0800178c <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	80fb      	strh	r3, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <Motion_Set_Speed+0x80>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <Motion_Set_Speed+0x84>)
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <Motion_Set_Speed+0x84>)
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 80017bc:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <Motion_Set_Speed+0x84>)
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <Motion_Set_Speed+0x84>)
 80017c4:	883b      	ldrh	r3, [r7, #0]
 80017c6:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e016      	b.n	80017fc <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <Motion_Set_Speed+0x84>)
 80017d2:	3310      	adds	r3, #16
 80017d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe7f 	bl	80004dc <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9db 	bl	8000ba0 <__aeabi_d2f>
 80017ea:	4602      	mov	r2, r0
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fca9 	bl	8002148 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	3301      	adds	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d9e5      	bls.n	80017ce <Motion_Set_Speed+0x42>
    }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	20000270 	.word	0x20000270
 8001810:	2000027c 	.word	0x2000027c

08001814 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    int i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 800182e:	f000 f8d3 	bl	80019d8 <Motion_Get_Circle_MM>
 8001832:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8001834:	f7ff ff16 	bl	8001664 <Motion_Get_Circle_Pulse>
 8001838:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 800183a:	f000 f8c3 	bl	80019c4 <Motion_Get_APB>
 800183e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8001840:	f000 f8d4 	bl	80019ec <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
 8001848:	e01e      	b.n	8001888 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 800184a:	4a5a      	ldr	r2, [pc, #360]	@ (80019b4 <Motion_Get_Speed+0x1a0>)
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	2264      	movs	r2, #100	@ 0x64
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff faab 	bl	8000db4 <__aeabi_i2f>
 800185e:	4603      	mov	r3, r0
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fafa 	bl	8000e5c <__aeabi_fmul>
 8001868:	4603      	mov	r3, r0
 800186a:	69f9      	ldr	r1, [r7, #28]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fba9 	bl	8000fc4 <__aeabi_fdiv>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	3328      	adds	r3, #40	@ 0x28
 800187c:	443b      	add	r3, r7
 800187e:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	3301      	adds	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	2b03      	cmp	r3, #3
 800188c:	dddd      	ble.n	800184a <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f9d9 	bl	8000c4c <__addsf3>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff f9d2 	bl	8000c4c <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f7ff f9cb 	bl	8000c4c <__addsf3>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb81 	bl	8000fc4 <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fc8f 	bl	80011e8 <__aeabi_f2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f9b5 	bl	8000c48 <__aeabi_fsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff f9ae 	bl	8000c48 <__aeabi_fsub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f7ff f9a9 	bl	8000c4c <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001900:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fb5d 	bl	8000fc4 <__aeabi_fdiv>
 800190a:	4603      	mov	r3, r0
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc6b 	bl	80011e8 <__aeabi_f2iz>
 8001912:	4603      	mov	r3, r0
 8001914:	b21a      	sxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f993 	bl	8000c4c <__addsf3>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f7ff f98a 	bl	8000c48 <__aeabi_fsub>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff f983 	bl	8000c48 <__aeabi_fsub>
 8001942:	4603      	mov	r3, r0
 8001944:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001948:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fb39 	bl	8000fc4 <__aeabi_fdiv>
 8001952:	4603      	mov	r3, r0
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fb34 	bl	8000fc4 <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	4916      	ldr	r1, [pc, #88]	@ (80019b8 <Motion_Get_Speed+0x1a4>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa7b 	bl	8000e5c <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fc3d 	bl	80011e8 <__aeabi_f2iz>
 800196e:	4603      	mov	r3, r0
 8001970:	b21a      	sxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <Motion_Get_Speed+0x1a8>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	e00c      	b.n	800199e <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	3328      	adds	r3, #40	@ 0x28
 800198a:	443b      	add	r3, r7
 800198c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001990:	490b      	ldr	r1, [pc, #44]	@ (80019c0 <Motion_Get_Speed+0x1ac>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	3301      	adds	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	ddef      	ble.n	8001984 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 80019a4:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <Motion_Get_Speed+0x1ac>)
 80019a6:	f000 fb1b 	bl	8001fe0 <PID_Calc_Motor>
    }
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000260 	.word	0x20000260
 80019b8:	447a0000 	.word	0x447a0000
 80019bc:	20000270 	.word	0x20000270
 80019c0:	2000027c 	.word	0x2000027c

080019c4 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 80019c8:	4b02      	ldr	r3, [pc, #8]	@ (80019d4 <Motion_Get_APB+0x10>)
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	431f0000 	.word	0x431f0000

080019d8 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 80019dc:	4b02      	ldr	r3, [pc, #8]	@ (80019e8 <Motion_Get_Circle_MM+0x10>)
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	434c33f8 	.word	0x434c33f8

080019ec <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 80019f2:	4813      	ldr	r0, [pc, #76]	@ (8001a40 <Motion_Get_Encoder+0x54>)
 80019f4:	f7ff fdde 	bl	80015b4 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e017      	b.n	8001a2e <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <Motion_Get_Encoder+0x54>)
 8001a02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <Motion_Get_Encoder+0x58>)
 8001a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	1a8a      	subs	r2, r1, r2
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <Motion_Get_Encoder+0x5c>)
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4908      	ldr	r1, [pc, #32]	@ (8001a40 <Motion_Get_Encoder+0x54>)
 8001a1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <Motion_Get_Encoder+0x58>)
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d9e4      	bls.n	80019fe <Motion_Get_Encoder+0x12>
    }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000240 	.word	0x20000240
 8001a44:	20000250 	.word	0x20000250
 8001a48:	20000260 	.word	0x20000260

08001a4c <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 8001a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001b5c <wheel_State+0x110>)
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	8013      	strh	r3, [r2, #0]
    switch (state)
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b07      	cmp	r3, #7
 8001a66:	d873      	bhi.n	8001b50 <wheel_State+0x104>
 8001a68:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <wheel_State+0x24>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001a91 	.word	0x08001a91
 8001a74:	08001aab 	.word	0x08001aab
 8001a78:	08001abb 	.word	0x08001abb
 8001a7c:	08001acf 	.word	0x08001acf
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001b09 	.word	0x08001b09
 8001a88:	08001b2b 	.word	0x08001b2b
 8001a8c:	08001b49 	.word	0x08001b49
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <wheel_State+0x110>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe52 	bl	800174c <Motion_Stop>
        break;
 8001aa8:	e053      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8001aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f854 	bl	8001b60 <wheel_Ctrl>
        break;
 8001ab8:	e04b      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	425b      	negs	r3, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f84a 	bl	8001b60 <wheel_Ctrl>
        break;
 8001acc:	e041      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b218      	sxth	r0, r3
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	03d2      	lsls	r2, r2, #15
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f000 f83a 	bl	8001b60 <wheel_Ctrl>
        break;
 8001aec:	e031      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8001aee:	88bb      	ldrh	r3, [r7, #4]
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b218      	sxth	r0, r3
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	2100      	movs	r1, #0
 8001b02:	f000 f82d 	bl	8001b60 <wheel_Ctrl>

        break;
 8001b06:	e024      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fdb5 	bl	8001678 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	0392      	lsls	r2, r2, #14
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f81c 	bl	8001b60 <wheel_Ctrl>
        break;
 8001b28:	e013      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff fda4 	bl	8001678 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f80d 	bl	8001b60 <wheel_Ctrl>
        break;
 8001b46:	e004      	b.n	8001b52 <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7ff fdff 	bl	800174c <Motion_Stop>
        break;
 8001b4e:	e000      	b.n	8001b52 <wheel_State+0x106>
    default:
        break;
 8001b50:	bf00      	nop
    }
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000023c 	.word	0x2000023c

08001b60 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	80bb      	strh	r3, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8001b72:	f7ff ff27 	bl	80019c4 <Motion_Get_APB>
 8001b76:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8001b78:	4b6f      	ldr	r3, [pc, #444]	@ (8001d38 <wheel_Ctrl+0x1d8>)
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8001b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f915 	bl	8000db4 <__aeabi_i2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d3c <wheel_Ctrl+0x1dc>)
 8001b8e:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8001b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f90d 	bl	8000db4 <__aeabi_i2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4968      	ldr	r1, [pc, #416]	@ (8001d40 <wheel_Ctrl+0x1e0>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fa10 	bl	8000fc4 <__aeabi_fdiv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f957 	bl	8000e5c <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b64      	ldr	r3, [pc, #400]	@ (8001d44 <wheel_Ctrl+0x1e4>)
 8001bb4:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <wheel_Ctrl+0x76>
 8001bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <wheel_Ctrl+0x76>
 8001bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fdbc 	bl	800174c <Motion_Stop>
        return;
 8001bd4:	e0ad      	b.n	8001d32 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001bd6:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <wheel_Ctrl+0x1dc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a57      	ldr	r2, [pc, #348]	@ (8001d38 <wheel_Ctrl+0x1d8>)
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f833 	bl	8000c4c <__addsf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b56      	ldr	r3, [pc, #344]	@ (8001d44 <wheel_Ctrl+0x1e4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f7ff f82b 	bl	8000c4c <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff faf5 	bl	80011e8 <__aeabi_f2iz>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a51      	ldr	r2, [pc, #324]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001c02:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001c04:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <wheel_Ctrl+0x1dc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	@ (8001d38 <wheel_Ctrl+0x1d8>)
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f81a 	bl	8000c48 <__aeabi_fsub>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <wheel_Ctrl+0x1e4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff f814 	bl	8000c4c <__addsf3>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fade 	bl	80011e8 <__aeabi_f2iz>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a47      	ldr	r2, [pc, #284]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001c30:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <wheel_Ctrl+0x1dc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a40      	ldr	r2, [pc, #256]	@ (8001d38 <wheel_Ctrl+0x1d8>)
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f803 	bl	8000c48 <__aeabi_fsub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <wheel_Ctrl+0x1e4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f7fe fffb 	bl	8000c48 <__aeabi_fsub>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fac7 	bl	80011e8 <__aeabi_f2iz>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001c5e:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <wheel_Ctrl+0x1dc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a34      	ldr	r2, [pc, #208]	@ (8001d38 <wheel_Ctrl+0x1d8>)
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ffee 	bl	8000c4c <__addsf3>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <wheel_Ctrl+0x1e4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7fe ffe4 	bl	8000c48 <__aeabi_fsub>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fab0 	bl	80011e8 <__aeabi_f2iz>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001c8c:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c96:	dd03      	ble.n	8001ca0 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001c9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c9e:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001ca8:	da02      	bge.n	8001cb0 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001cac:	4a2a      	ldr	r2, [pc, #168]	@ (8001d58 <wheel_Ctrl+0x1f8>)
 8001cae:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8001cb0:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb8:	dd03      	ble.n	8001cc2 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8001cba:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001cbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cc0:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001cca:	da02      	bge.n	8001cd2 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001cce:	4a22      	ldr	r2, [pc, #136]	@ (8001d58 <wheel_Ctrl+0x1f8>)
 8001cd0:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cda:	dd03      	ble.n	8001ce4 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001cde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ce2:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001cec:	da02      	bge.n	8001cf4 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001cf0:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <wheel_Ctrl+0x1f8>)
 8001cf2:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cfc:	dd03      	ble.n	8001d06 <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001d00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d04:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001d0e:	da02      	bge.n	8001d16 <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <wheel_Ctrl+0x1f8>)
 8001d14:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <wheel_Ctrl+0x1e8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b218      	sxth	r0, r3
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <wheel_Ctrl+0x1ec>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b219      	sxth	r1, r3
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <wheel_Ctrl+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <wheel_Ctrl+0x1f4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	f7ff fd2d 	bl	800178c <Motion_Set_Speed>
}
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000220 	.word	0x20000220
 8001d3c:	20000224 	.word	0x20000224
 8001d40:	447a0000 	.word	0x447a0000
 8001d44:	20000228 	.word	0x20000228
 8001d48:	2000022c 	.word	0x2000022c
 8001d4c:	20000230 	.word	0x20000230
 8001d50:	20000234 	.word	0x20000234
 8001d54:	20000238 	.word	0x20000238
 8001d58:	fffffc18 	.word	0xfffffc18

08001d5c <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001d60:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <Motion_Handle+0x58>)
 8001d62:	f7ff fd57 	bl	8001814 <Motion_Get_Speed>

    if (g_start_ctrl)
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <Motion_Handle+0x5c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <Motion_Handle+0x60>)
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa38 	bl	80011e8 <__aeabi_f2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b21c      	sxth	r4, r3
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <Motion_Handle+0x60>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fa31 	bl	80011e8 <__aeabi_f2iz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b21d      	sxth	r5, r3
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <Motion_Handle+0x60>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa2a 	bl	80011e8 <__aeabi_f2iz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b21e      	sxth	r6, r3
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <Motion_Handle+0x60>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fa23 	bl	80011e8 <__aeabi_f2iz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4632      	mov	r2, r6
 8001da8:	4629      	mov	r1, r5
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff fc7a 	bl	80016a4 <Motion_Set_Pwm>
    }
}
 8001db0:	bf00      	nop
 8001db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001db4:	20000274 	.word	0x20000274
 8001db8:	20000270 	.word	0x20000270
 8001dbc:	2000027c 	.word	0x2000027c

08001dc0 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	e062      	b.n	8001e92 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001dcc:	493a      	ldr	r1, [pc, #232]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001de0:	4935      	ldr	r1, [pc, #212]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	3308      	adds	r3, #8
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8001df6:	4930      	ldr	r1, [pc, #192]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3318      	adds	r3, #24
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8001e0c:	492a      	ldr	r1, [pc, #168]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	331c      	adds	r3, #28
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8001e22:	4925      	ldr	r1, [pc, #148]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3320      	adds	r3, #32
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8001e38:	491f      	ldr	r1, [pc, #124]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3324      	adds	r3, #36	@ 0x24
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001e4e:	491a      	ldr	r1, [pc, #104]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <PID_Param_Init+0xfc>)
 8001e60:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001e62:	4915      	ldr	r1, [pc, #84]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3310      	adds	r3, #16
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <PID_Param_Init+0x100>)
 8001e74:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8001e76:	4910      	ldr	r1, [pc, #64]	@ (8001eb8 <PID_Param_Init+0xf8>)
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3314      	adds	r3, #20
 8001e86:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e8a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	dd99      	ble.n	8001dcc <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <PID_Param_Init+0x104>)
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <PID_Param_Init+0x108>)
 8001e9c:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <PID_Param_Init+0x104>)
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <PID_Param_Init+0x104>)
 8001ea8:	4a08      	ldr	r2, [pc, #32]	@ (8001ecc <PID_Param_Init+0x10c>)
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002a8 	.word	0x200002a8
 8001ebc:	3f4ccccd 	.word	0x3f4ccccd
 8001ec0:	3d75c28f 	.word	0x3d75c28f
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	3ecccccd 	.word	0x3ecccccd
 8001ecc:	3dcccccd 	.word	0x3dcccccd

08001ed0 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe feb0 	bl	8000c48 <__aeabi_fsub>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689c      	ldr	r4, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68dd      	ldr	r5, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f7fe fea0 	bl	8000c48 <__aeabi_fsub>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f7fe ffa5 	bl	8000e5c <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461d      	mov	r5, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f7fe ff9b 	bl	8000e5c <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f7fe fe8e 	bl	8000c4c <__addsf3>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4698      	mov	r8, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695d      	ldr	r5, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699e      	ldr	r6, [r3, #24]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fe82 	bl	8000c4c <__addsf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f7fe fe7b 	bl	8000c48 <__aeabi_fsub>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f7fe fe75 	bl	8000c4c <__addsf3>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4628      	mov	r0, r5
 8001f68:	f7fe ff78 	bl	8000e5c <__aeabi_fmul>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4640      	mov	r0, r8
 8001f72:	f7fe fe6b 	bl	8000c4c <__addsf3>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7fe fe66 	bl	8000c4c <__addsf3>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <PID_Incre_Calc+0x108>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f918 	bl	80011d4 <__aeabi_fcmpgt>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <PID_Incre_Calc+0x108>)
 8001fae:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4909      	ldr	r1, [pc, #36]	@ (8001fdc <PID_Incre_Calc+0x10c>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f8ee 	bl	8001198 <__aeabi_fcmplt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <PID_Incre_Calc+0x10c>)
 8001fc6:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd6:	bf00      	nop
 8001fd8:	44c80000 	.word	0x44c80000
 8001fdc:	c4c80000 	.word	0xc4c80000

08001fe0 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e016      	b.n	800201c <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <PID_Calc_Motor+0x4c>)
 8001ffa:	1898      	adds	r0, r3, r2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	4619      	mov	r1, r3
 8002006:	f7ff ff63 	bl	8001ed0 <PID_Incre_Calc>
 800200a:	4601      	mov	r1, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	3204      	adds	r2, #4
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b03      	cmp	r3, #3
 8002020:	dde5      	ble.n	8001fee <PID_Calc_Motor+0xe>
    }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200002a8 	.word	0x200002a8

08002030 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d87b      	bhi.n	8002138 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d140      	bne.n	80020c8 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e039      	b.n	80020c0 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 800204c:	493d      	ldr	r1, [pc, #244]	@ (8002144 <PID_Clear_Motor+0x114>)
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3308      	adds	r3, #8
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8002062:	4938      	ldr	r1, [pc, #224]	@ (8002144 <PID_Clear_Motor+0x114>)
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3318      	adds	r3, #24
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8002078:	4932      	ldr	r1, [pc, #200]	@ (8002144 <PID_Clear_Motor+0x114>)
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	331c      	adds	r3, #28
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 800208e:	492d      	ldr	r1, [pc, #180]	@ (8002144 <PID_Clear_Motor+0x114>)
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3320      	adds	r3, #32
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 80020a4:	4927      	ldr	r1, [pc, #156]	@ (8002144 <PID_Clear_Motor+0x114>)
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3324      	adds	r3, #36	@ 0x24
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	ddc2      	ble.n	800204c <PID_Clear_Motor+0x1c>
 80020c6:	e038      	b.n	800213a <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	491e      	ldr	r1, [pc, #120]	@ (8002144 <PID_Clear_Motor+0x114>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	4918      	ldr	r1, [pc, #96]	@ (8002144 <PID_Clear_Motor+0x114>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3318      	adds	r3, #24
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4913      	ldr	r1, [pc, #76]	@ (8002144 <PID_Clear_Motor+0x114>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	331c      	adds	r3, #28
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	490d      	ldr	r1, [pc, #52]	@ (8002144 <PID_Clear_Motor+0x114>)
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3320      	adds	r3, #32
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	4908      	ldr	r1, [pc, #32]	@ (8002144 <PID_Clear_Motor+0x114>)
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3324      	adds	r3, #36	@ 0x24
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e000      	b.n	800213a <PID_Clear_Motor+0x10a>
        return;
 8002138:	bf00      	nop
    }
}
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	200002a8 	.word	0x200002a8

08002148 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d81f      	bhi.n	800219a <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d112      	bne.n	8002186 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e00b      	b.n	800217e <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8002166:	490f      	ldr	r1, [pc, #60]	@ (80021a4 <PID_Set_Motor_Target+0x5c>)
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b03      	cmp	r3, #3
 8002182:	ddf0      	ble.n	8002166 <PID_Set_Motor_Target+0x1e>
 8002184:	e00a      	b.n	800219c <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	4906      	ldr	r1, [pc, #24]	@ (80021a4 <PID_Set_Motor_Target+0x5c>)
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e000      	b.n	800219c <PID_Set_Motor_Target+0x54>
        return;
 800219a:	bf00      	nop
    }
}
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	200002a8 	.word	0x200002a8

080021a8 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dd05      	ble.n	80021c6 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	e00a      	b.n	80021dc <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 80021c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da05      	bge.n	80021da <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	e000      	b.n	80021dc <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <Motor_Stop+0x14>
        brake = 1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <Motor_Stop+0x90>)
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002210:	fb03 f202 	mul.w	r2, r3, r2
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <Motor_Stop+0x90>)
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800221e:	fb03 f202 	mul.w	r2, r3, r2
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <Motor_Stop+0x90>)
 8002224:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800222c:	fb03 f202 	mul.w	r2, r3, r2
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <Motor_Stop+0x90>)
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <Motor_Stop+0x94>)
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002248:	fb03 f202 	mul.w	r2, r3, r2
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <Motor_Stop+0x94>)
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <Motor_Stop+0x94>)
 800225c:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002264:	fb03 f202 	mul.w	r2, r3, r2
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <Motor_Stop+0x94>)
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40013400 	.word	0x40013400
 800227c:	40012c00 	.word	0x40012c00

08002280 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	4613      	mov	r3, r2
 800228e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002290:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff87 	bl	80021a8 <Motor_Ignore_Dead_Zone>
 800229a:	4603      	mov	r3, r0
 800229c:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800229e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022a2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80022a6:	db02      	blt.n	80022ae <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 80022a8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80022ac:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 80022ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b2:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80022b6:	dc02      	bgt.n	80022be <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 80022b8:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 80022bc:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d867      	bhi.n	8002394 <Motor_Set_Pwm+0x114>
 80022c4:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <Motor_Set_Pwm+0x4c>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	0800230f 	.word	0x0800230f
 80022d4:	08002341 	.word	0x08002341
 80022d8:	0800236b 	.word	0x0800236b
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	425b      	negs	r3, r3
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80022e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db07      	blt.n	80022fc <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 80022ec:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 80022ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80022fa:	e04c      	b.n	8002396 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002306:	425a      	negs	r2, r3
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 800230a:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800230c:	e043      	b.n	8002396 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	425b      	negs	r3, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db07      	blt.n	800232e <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800231e:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 8002320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002324:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 800232c:	e033      	b.n	8002396 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800232e:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 8002330:	2200      	movs	r2, #0
 8002332:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8002334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002338:	425a      	negs	r2, r3
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <Motor_Set_Pwm+0x120>)
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800233e:	e02a      	b.n	8002396 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8002340:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db07      	blt.n	8002358 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8002348:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 800234a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800234e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 8002352:	2200      	movs	r2, #0
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8002356:	e01e      	b.n	8002396 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 800235a:	2200      	movs	r2, #0
 800235c:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 800235e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002362:	425a      	negs	r2, r3
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 8002366:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8002368:	e015      	b.n	8002396 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 800236a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db07      	blt.n	8002382 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8002372:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 8002374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002378:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8002380:	e009      	b.n	8002396 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 8002384:	2200      	movs	r2, #0
 8002386:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8002388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238c:	425a      	negs	r2, r3
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <Motor_Set_Pwm+0x124>)
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002392:	e000      	b.n	8002396 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8002394:	bf00      	nop
    }
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013400 	.word	0x40013400
 80023a4:	40012c00 	.word	0x40012c00

080023a8 <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023ac:	2100      	movs	r1, #0
 80023ae:	4824      	ldr	r0, [pc, #144]	@ (8002440 <Bsp_Tim_Init+0x98>)
 80023b0:	f003 fe58 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	4822      	ldr	r0, [pc, #136]	@ (8002440 <Bsp_Tim_Init+0x98>)
 80023b8:	f003 fe54 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023bc:	2108      	movs	r1, #8
 80023be:	4820      	ldr	r0, [pc, #128]	@ (8002440 <Bsp_Tim_Init+0x98>)
 80023c0:	f003 fe50 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80023c4:	210c      	movs	r1, #12
 80023c6:	481e      	ldr	r0, [pc, #120]	@ (8002440 <Bsp_Tim_Init+0x98>)
 80023c8:	f003 fe4c 	bl	8006064 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80023cc:	2100      	movs	r1, #0
 80023ce:	481d      	ldr	r0, [pc, #116]	@ (8002444 <Bsp_Tim_Init+0x9c>)
 80023d0:	f003 fe48 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80023d4:	2104      	movs	r1, #4
 80023d6:	481b      	ldr	r0, [pc, #108]	@ (8002444 <Bsp_Tim_Init+0x9c>)
 80023d8:	f003 fe44 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80023dc:	2108      	movs	r1, #8
 80023de:	4819      	ldr	r0, [pc, #100]	@ (8002444 <Bsp_Tim_Init+0x9c>)
 80023e0:	f003 fe40 	bl	8006064 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80023e4:	210c      	movs	r1, #12
 80023e6:	4817      	ldr	r0, [pc, #92]	@ (8002444 <Bsp_Tim_Init+0x9c>)
 80023e8:	f003 fe3c 	bl	8006064 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 80023ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80023f6:	2104      	movs	r1, #4
 80023f8:	4813      	ldr	r0, [pc, #76]	@ (8002448 <Bsp_Tim_Init+0xa0>)
 80023fa:	f004 f8ff 	bl	80065fc <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <Bsp_Tim_Init+0xa4>)
 8002400:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002406:	2104      	movs	r1, #4
 8002408:	4811      	ldr	r0, [pc, #68]	@ (8002450 <Bsp_Tim_Init+0xa8>)
 800240a:	f004 f8f7 	bl	80065fc <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <Bsp_Tim_Init+0xac>)
 8002410:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002416:	2104      	movs	r1, #4
 8002418:	480f      	ldr	r0, [pc, #60]	@ (8002458 <Bsp_Tim_Init+0xb0>)
 800241a:	f004 f8ef 	bl	80065fc <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <Bsp_Tim_Init+0xb4>)
 8002420:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002426:	2104      	movs	r1, #4
 8002428:	480d      	ldr	r0, [pc, #52]	@ (8002460 <Bsp_Tim_Init+0xb8>)
 800242a:	f004 f8e7 	bl	80065fc <HAL_TIM_Encoder_Start>


	//启动定时6中断 Start timer 6 interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 800242e:	480d      	ldr	r0, [pc, #52]	@ (8002464 <Bsp_Tim_Init+0xbc>)
 8002430:	f003 fca8 	bl	8005d84 <HAL_TIM_Base_Start_IT>
	//启动定时7中断 Start timer 7 interrupt
	HAL_TIM_Base_Start_IT(&htim7);
 8002434:	480c      	ldr	r0, [pc, #48]	@ (8002468 <Bsp_Tim_Init+0xc0>)
 8002436:	f003 fca5 	bl	8005d84 <HAL_TIM_Base_Start_IT>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000384 	.word	0x20000384
 8002444:	2000057c 	.word	0x2000057c
 8002448:	200003cc 	.word	0x200003cc
 800244c:	40000400 	.word	0x40000400
 8002450:	20000414 	.word	0x20000414
 8002454:	40000800 	.word	0x40000800
 8002458:	2000045c 	.word	0x2000045c
 800245c:	40000c00 	.word	0x40000c00
 8002460:	200004a4 	.word	0x200004a4
 8002464:	200004ec 	.word	0x200004ec
 8002468:	20000534 	.word	0x20000534

0800246c <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数 Basic timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d103      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速 10ms speed test
 800247e:	f7ff f8bd 	bl	80015fc <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度 Call PID to control speed
 8002482:	f7ff fc6b 	bl	8001d5c <Motion_Handle>

	}


	if (htim->Instance == TIM7)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		 if(ultrasonic_flag) //开始测距--超声波 Start ranging--ultrasound
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x36>
			{
				ultrasonic_num++;
 8002498:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	4a06      	ldr	r2, [pc, #24]	@ (80024b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024a0:	6013      	str	r3, [r2, #0]
			}
	}
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40001000 	.word	0x40001000
 80024b0:	40001400 	.word	0x40001400
 80024b4:	2000034c 	.word	0x2000034c
 80024b8:	20000348 	.word	0x20000348

080024bc <Get_distance>:
 * 得到测5次平均值
 *
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
	float distance = 0,aveg = 0;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
	uint16_t tim,count;
	uint8_t i = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	72fb      	strb	r3, [r7, #11]

	while(i != 5)
 80024d2:	e061      	b.n	8002598 <Get_distance+0xdc>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024da:	4836      	ldr	r0, [pc, #216]	@ (80025b4 <Get_distance+0xf8>)
 80024dc:	f002 fba2 	bl	8004c24 <HAL_GPIO_WritePin>
		Delay_us(20);
 80024e0:	2014      	movs	r0, #20
 80024e2:	f7fe ffcf 	bl	8001484 <Delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024ec:	4831      	ldr	r0, [pc, #196]	@ (80025b4 <Get_distance+0xf8>)
 80024ee:	f002 fb99 	bl	8004c24 <HAL_GPIO_WritePin>


		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 80024f2:	bf00      	nop
 80024f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024f8:	482e      	ldr	r0, [pc, #184]	@ (80025b4 <Get_distance+0xf8>)
 80024fa:	f002 fb73 	bl	8004be4 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f7      	beq.n	80024f4 <Get_distance+0x38>
		ultrasonic_flag = 1;
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <Get_distance+0xfc>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]

		i+=1;
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	3301      	adds	r3, #1
 800250e:	72fb      	strb	r3, [r7, #11]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8002510:	e010      	b.n	8002534 <Get_distance+0x78>
	{
			count = ultrasonic_num;
 8002512:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <Get_distance+0x100>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	803b      	strh	r3, [r7, #0]
		if(count >= 10000)
 8002518:	883b      	ldrh	r3, [r7, #0]
 800251a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800251e:	4293      	cmp	r3, r2
 8002520:	d908      	bls.n	8002534 <Get_distance+0x78>
		{
			ultrasonic_flag = 0;
 8002522:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <Get_distance+0xfc>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
			ultrasonic_num = 0;
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <Get_distance+0x100>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
			return 0;
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e03b      	b.n	80025ac <Get_distance+0xf0>
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8002534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002538:	481e      	ldr	r0, [pc, #120]	@ (80025b4 <Get_distance+0xf8>)
 800253a:	f002 fb53 	bl	8004be4 <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d0e6      	beq.n	8002512 <Get_distance+0x56>
		}

	}

		ultrasonic_flag = 0;
 8002544:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <Get_distance+0xfc>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <Get_distance+0x104>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	807b      	strh	r3, [r7, #2]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 8002550:	8879      	ldrh	r1, [r7, #2]
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <Get_distance+0x100>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	440b      	add	r3, r1
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ffab 	bl	80004bc <__aeabi_ui2d>
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <Get_distance+0x108>)
 800256c:	f7fe f94a 	bl	8000804 <__aeabi_ddiv>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fb12 	bl	8000ba0 <__aeabi_d2f>
 800257c:	4603      	mov	r3, r0
 800257e:	607b      	str	r3, [r7, #4]
		aveg = distance + aveg;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f7fe fb62 	bl	8000c4c <__addsf3>
 8002588:	4603      	mov	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]
		ultrasonic_num = 0;
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <Get_distance+0x100>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8002592:	200a      	movs	r0, #10
 8002594:	f001 f918 	bl	80037c8 <HAL_Delay>
	while(i != 5)
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d19a      	bne.n	80024d4 <Get_distance+0x18>

	}
	distance = aveg / 5;
 800259e:	490a      	ldr	r1, [pc, #40]	@ (80025c8 <Get_distance+0x10c>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7fe fd0f 	bl	8000fc4 <__aeabi_fdiv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	607b      	str	r3, [r7, #4]
	return distance;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40011c00 	.word	0x40011c00
 80025b8:	2000034c 	.word	0x2000034c
 80025bc:	20000348 	.word	0x20000348
 80025c0:	40001400 	.word	0x40001400
 80025c4:	404d4000 	.word	0x404d4000
 80025c8:	40a00000 	.word	0x40a00000

080025cc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80025dc:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025de:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <MX_ADC3_Init+0x78>)
 80025e0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80025fa:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025fc:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <MX_ADC3_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8002602:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <MX_ADC3_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_ADC3_Init+0x74>)
 800260a:	f001 f901 	bl	8003810 <HAL_ADC_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8002614:	f000 f966 	bl	80028e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002618:	2307      	movs	r3, #7
 800261a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800261c:	2301      	movs	r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	@ (8002640 <MX_ADC3_Init+0x74>)
 800262a:	f001 fca3 	bl	8003f74 <HAL_ADC_ConfigChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8002634:	f000 f956 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000350 	.word	0x20000350
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_ADC_MspInit+0x70>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d122      	bne.n	80026ae <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 800266e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 8002686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_ADC_MspInit+0x74>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF9     ------> ADC3_IN7
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Left_SIG_Pin|Right_SIG_Pin;
 8002698:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800269c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800269e:	2303      	movs	r3, #3
 80026a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <HAL_ADC_MspInit+0x78>)
 80026aa:	f002 f807 	bl	80046bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40013c00 	.word	0x40013c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40011c00 	.word	0x40011c00

080026c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 0318 	add.w	r3, r7, #24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d8:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a3f      	ldr	r2, [pc, #252]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026f0:	4b3a      	ldr	r3, [pc, #232]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a39      	ldr	r2, [pc, #228]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <MX_GPIO_Init+0x118>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <MX_GPIO_Init+0x118>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a33      	ldr	r2, [pc, #204]	@ (80027dc <MX_GPIO_Init+0x118>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002720:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a2d      	ldr	r2, [pc, #180]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <MX_GPIO_Init+0x118>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <MX_GPIO_Init+0x118>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <MX_GPIO_Init+0x118>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <MX_GPIO_Init+0x118>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <MX_GPIO_Init+0x118>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2160      	movs	r1, #96	@ 0x60
 800276c:	481c      	ldr	r0, [pc, #112]	@ (80027e0 <MX_GPIO_Init+0x11c>)
 800276e:	f002 fa59 	bl	8004c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002778:	481a      	ldr	r0, [pc, #104]	@ (80027e4 <MX_GPIO_Init+0x120>)
 800277a:	f002 fa53 	bl	8004c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin;
 800277e:	2360      	movs	r3, #96	@ 0x60
 8002780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2302      	movs	r3, #2
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	4619      	mov	r1, r3
 8002794:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <MX_GPIO_Init+0x11c>)
 8002796:	f001 ff91 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800279a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2302      	movs	r3, #2
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	4619      	mov	r1, r3
 80027b2:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <MX_GPIO_Init+0x120>)
 80027b4:	f001 ff82 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80027b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_GPIO_Init+0x120>)
 80027ce:	f001 ff75 	bl	80046bc <HAL_GPIO_Init>

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40011800 	.word	0x40011800
 80027e4:	40011c00 	.word	0x40011c00

080027e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ec:	f000 ff8a 	bl	8003704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f0:	f000 f81b 	bl	800282a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f4:	f7ff ff66 	bl	80026c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80027f8:	f000 f9c0 	bl	8002b7c <MX_TIM1_Init>
  MX_TIM2_Init();
 80027fc:	f000 fa82 	bl	8002d04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002800:	f000 fad4 	bl	8002dac <MX_TIM3_Init>
  MX_TIM4_Init();
 8002804:	f000 fb26 	bl	8002e54 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002808:	f000 fb78 	bl	8002efc <MX_TIM5_Init>
  MX_TIM6_Init();
 800280c:	f000 fbca 	bl	8002fa4 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002810:	f000 fc32 	bl	8003078 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002814:	f000 feda 	bl	80035cc <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002818:	f000 fbfa 	bl	8003010 <MX_TIM7_Init>
  MX_ADC3_Init();
 800281c:	f7ff fed6 	bl	80025cc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 8002820:	f7fe fe20 	bl	8001464 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8002824:	f7fe fe26 	bl	8001474 <BSP_Loop>
 8002828:	e7fc      	b.n	8002824 <main+0x3c>

0800282a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b096      	sub	sp, #88	@ 0x58
 800282e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002830:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002834:	2228      	movs	r2, #40	@ 0x28
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f006 fcf6 	bl	800922a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
 800285c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800285e:	2301      	movs	r3, #1
 8002860:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800286c:	2301      	movs	r3, #1
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002870:	2302      	movs	r3, #2
 8002872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002878:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800287a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800287e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002884:	4618      	mov	r0, r3
 8002886:	f002 f9f9 	bl	8004c7c <HAL_RCC_OscConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002890:	f000 f828 	bl	80028e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002894:	230f      	movs	r3, #15
 8002896:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002898:	2302      	movs	r3, #2
 800289a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fd51 	bl	8005358 <HAL_RCC_ClockConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028bc:	f000 f812 	bl	80028e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028c0:	2302      	movs	r3, #2
 80028c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 ff77 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80028d8:	f000 f804 	bl	80028e4 <Error_Handler>
  }
}
 80028dc:	bf00      	nop
 80028de:	3758      	adds	r7, #88	@ 0x58
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <Error_Handler+0x8>

080028f0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_MspInit+0x60>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <HAL_MspInit+0x60>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6193      	str	r3, [r2, #24]
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_MspInit+0x60>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <HAL_MspInit+0x60>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4a0f      	ldr	r2, [pc, #60]	@ (8002964 <HAL_MspInit+0x60>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_MspInit+0x60>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800293a:	2005      	movs	r0, #5
 800293c:	f001 fe4e 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_MspInit+0x64>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4a04      	ldr	r2, [pc, #16]	@ (8002968 <HAL_MspInit+0x64>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	40010000 	.word	0x40010000

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029bc:	f000 fee8 	bl	8003790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <TIM6_IRQHandler+0x10>)
 80029ca:	f003 fed5 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200004ec 	.word	0x200004ec

080029d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <TIM7_IRQHandler+0x10>)
 80029de:	f003 fecb 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000534 	.word	0x20000534

080029ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
	return 1;
 80029f0:	2301      	movs	r3, #1
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <_kill>:

int _kill(int pid, int sig)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a04:	f006 fc64 	bl	80092d0 <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2216      	movs	r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_exit>:

void _exit (int status)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a22:	f04f 31ff 	mov.w	r1, #4294967295
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffe7 	bl	80029fa <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <_exit+0x12>

08002a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e00a      	b.n	8002a58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a42:	f3af 8000 	nop.w
 8002a46:	4601      	mov	r1, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	b2ca      	uxtb	r2, r1
 8002a50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dbf0      	blt.n	8002a42 <_read+0x12>
	}

return len;
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e009      	b.n	8002a90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fcdb 	bl	8001440 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	dbf1      	blt.n	8002a7c <_write+0x12>
	}
	return len;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_close>:

int _close(int file)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac8:	605a      	str	r2, [r3, #4]
	return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <_isatty>:

int _isatty(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	return 1;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
	return 0;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	@ (8002b60 <_sbrk+0x5c>)
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <_sbrk+0x60>)
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <_sbrk+0x64>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <_sbrk+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b34:	f006 fbcc 	bl	80092d0 <__errno>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e009      	b.n	8002b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <_sbrk+0x64>)
 8002b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20010000 	.word	0x20010000
 8002b64:	00000400 	.word	0x00000400
 8002b68:	20000380 	.word	0x20000380
 8002b6c:	20000760 	.word	0x20000760

08002b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b096      	sub	sp, #88	@ 0x58
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f006 fb38 	bl	800922a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bba:	4b50      	ldr	r3, [pc, #320]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bbc:	4a50      	ldr	r2, [pc, #320]	@ (8002d00 <MX_TIM1_Init+0x184>)
 8002bbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bce:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bda:	4b48      	ldr	r3, [pc, #288]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002be0:	4b46      	ldr	r3, [pc, #280]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002be6:	4845      	ldr	r0, [pc, #276]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002be8:	f002 fff8 	bl	8005bdc <HAL_TIM_Base_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002bf2:	f7ff fe77 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bfc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c00:	4619      	mov	r1, r3
 8002c02:	483e      	ldr	r0, [pc, #248]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c04:	f004 f862 	bl	8006ccc <HAL_TIM_ConfigClockSource>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002c0e:	f7ff fe69 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c12:	483a      	ldr	r0, [pc, #232]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c14:	f003 f948 	bl	8005ea8 <HAL_TIM_PWM_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c1e:	f7ff fe61 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4832      	ldr	r0, [pc, #200]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c32:	f004 ff2f 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002c3c:	f7ff fe52 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c40:	2360      	movs	r3, #96	@ 0x60
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c60:	2200      	movs	r2, #0
 8002c62:	4619      	mov	r1, r3
 8002c64:	4825      	ldr	r0, [pc, #148]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c66:	f003 fe8f 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002c70:	f7ff fe38 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481f      	ldr	r0, [pc, #124]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c7e:	f003 fe83 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002c88:	f7ff fe2c 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c90:	2208      	movs	r2, #8
 8002c92:	4619      	mov	r1, r3
 8002c94:	4819      	ldr	r0, [pc, #100]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002c96:	f003 fe77 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002ca0:	f7ff fe20 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca8:	220c      	movs	r2, #12
 8002caa:	4619      	mov	r1, r3
 8002cac:	4813      	ldr	r0, [pc, #76]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002cae:	f003 fe6b 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002cb8:	f7ff fe14 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002ce0:	f004 ffa8 	bl	8007c34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002cea:	f7ff fdfb 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cee:	4803      	ldr	r0, [pc, #12]	@ (8002cfc <MX_TIM1_Init+0x180>)
 8002cf0:	f000 fc02 	bl	80034f8 <HAL_TIM_MspPostInit>

}
 8002cf4:	bf00      	nop
 8002cf6:	3758      	adds	r7, #88	@ 0x58
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000384 	.word	0x20000384
 8002d00:	40012c00 	.word	0x40012c00

08002d04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	@ 0x30
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f006 fa89 	bl	800922a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d28:	4b1f      	ldr	r3, [pc, #124]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d50:	2301      	movs	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4619      	mov	r1, r3
 8002d72:	480d      	ldr	r0, [pc, #52]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d74:	f003 fa9e 	bl	80062b4 <HAL_TIM_Encoder_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d7e:	f7ff fdb1 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <MX_TIM2_Init+0xa4>)
 8002d90:	f004 fe80 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d9a:	f7ff fda3 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	3730      	adds	r7, #48	@ 0x30
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200003cc 	.word	0x200003cc

08002dac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	@ 0x30
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	2224      	movs	r2, #36	@ 0x24
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f006 fa35 	bl	800922a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dc8:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002dca:	4a21      	ldr	r2, [pc, #132]	@ (8002e50 <MX_TIM3_Init+0xa4>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dce:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dee:	2303      	movs	r3, #3
 8002df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002df6:	2301      	movs	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e06:	2301      	movs	r3, #1
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4619      	mov	r1, r3
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002e1a:	f003 fa4b 	bl	80062b4 <HAL_TIM_Encoder_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e24:	f7ff fd5e 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <MX_TIM3_Init+0xa0>)
 8002e36:	f004 fe2d 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e40:	f7ff fd50 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	3730      	adds	r7, #48	@ 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000414 	.word	0x20000414
 8002e50:	40000400 	.word	0x40000400

08002e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	@ 0x30
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 f9e1 	bl	800922a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e70:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e72:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <MX_TIM4_Init+0xa4>)
 8002e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e90:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e96:	2303      	movs	r3, #3
 8002e98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002ec2:	f003 f9f7 	bl	80062b4 <HAL_TIM_Encoder_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ecc:	f7ff fd0a 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	@ (8002ef4 <MX_TIM4_Init+0xa0>)
 8002ede:	f004 fdd9 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ee8:	f7ff fcfc 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	3730      	adds	r7, #48	@ 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000045c 	.word	0x2000045c
 8002ef8:	40000800 	.word	0x40000800

08002efc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	@ 0x30
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 f98d 	bl	800922a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f18:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f1a:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <MX_TIM5_Init+0xa4>)
 8002f1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f38:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f56:	2301      	movs	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	4619      	mov	r1, r3
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f6a:	f003 f9a3 	bl	80062b4 <HAL_TIM_Encoder_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002f74:	f7ff fcb6 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <MX_TIM5_Init+0xa0>)
 8002f86:	f004 fd85 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002f90:	f7ff fca8 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3730      	adds	r7, #48	@ 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200004a4 	.word	0x200004a4
 8002fa0:	40000c00 	.word	0x40000c00

08002fa4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002faa:	463b      	mov	r3, r7
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fb4:	4a15      	ldr	r2, [pc, #84]	@ (800300c <MX_TIM6_Init+0x68>)
 8002fb6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fba:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002fbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fc8:	2263      	movs	r2, #99	@ 0x63
 8002fca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fd2:	480d      	ldr	r0, [pc, #52]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002fd4:	f002 fe02 	bl	8005bdc <HAL_TIM_Base_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fde:	f7ff fc81 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fea:	463b      	mov	r3, r7
 8002fec:	4619      	mov	r1, r3
 8002fee:	4806      	ldr	r0, [pc, #24]	@ (8003008 <MX_TIM6_Init+0x64>)
 8002ff0:	f004 fd50 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002ffa:	f7ff fc73 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200004ec 	.word	0x200004ec
 800300c:	40001000 	.word	0x40001000

08003010 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003016:	463b      	mov	r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800301e:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <MX_TIM7_Init+0x60>)
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <MX_TIM7_Init+0x64>)
 8003022:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8003024:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <MX_TIM7_Init+0x60>)
 8003026:	2247      	movs	r2, #71	@ 0x47
 8003028:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302a:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <MX_TIM7_Init+0x60>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003030:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <MX_TIM7_Init+0x60>)
 8003032:	2209      	movs	r2, #9
 8003034:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <MX_TIM7_Init+0x60>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800303c:	480c      	ldr	r0, [pc, #48]	@ (8003070 <MX_TIM7_Init+0x60>)
 800303e:	f002 fdcd 	bl	8005bdc <HAL_TIM_Base_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003048:	f7ff fc4c 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304c:	2300      	movs	r3, #0
 800304e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003054:	463b      	mov	r3, r7
 8003056:	4619      	mov	r1, r3
 8003058:	4805      	ldr	r0, [pc, #20]	@ (8003070 <MX_TIM7_Init+0x60>)
 800305a:	f004 fd1b 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8003064:	f7ff fc3e 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000534 	.word	0x20000534
 8003074:	40001400 	.word	0x40001400

08003078 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b096      	sub	sp, #88	@ 0x58
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	611a      	str	r2, [r3, #16]
 80030a6:	615a      	str	r2, [r3, #20]
 80030a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2220      	movs	r2, #32
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f006 f8ba 	bl	800922a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030b6:	4b50      	ldr	r3, [pc, #320]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030b8:	4a50      	ldr	r2, [pc, #320]	@ (80031fc <MX_TIM8_Init+0x184>)
 80030ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030bc:	4b4e      	ldr	r3, [pc, #312]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030be:	2200      	movs	r2, #0
 80030c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b4d      	ldr	r3, [pc, #308]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 80030c8:	4b4b      	ldr	r3, [pc, #300]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030ca:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80030ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d0:	4b49      	ldr	r3, [pc, #292]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030d6:	4b48      	ldr	r3, [pc, #288]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030dc:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030de:	2280      	movs	r2, #128	@ 0x80
 80030e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030e2:	4845      	ldr	r0, [pc, #276]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80030e4:	f002 fd7a 	bl	8005bdc <HAL_TIM_Base_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80030ee:	f7ff fbf9 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030fc:	4619      	mov	r1, r3
 80030fe:	483e      	ldr	r0, [pc, #248]	@ (80031f8 <MX_TIM8_Init+0x180>)
 8003100:	f003 fde4 	bl	8006ccc <HAL_TIM_ConfigClockSource>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800310a:	f7ff fbeb 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800310e:	483a      	ldr	r0, [pc, #232]	@ (80031f8 <MX_TIM8_Init+0x180>)
 8003110:	f002 feca 	bl	8005ea8 <HAL_TIM_PWM_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800311a:	f7ff fbe3 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003126:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800312a:	4619      	mov	r1, r3
 800312c:	4832      	ldr	r0, [pc, #200]	@ (80031f8 <MX_TIM8_Init+0x180>)
 800312e:	f004 fcb1 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003138:	f7ff fbd4 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313c:	2360      	movs	r3, #96	@ 0x60
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003148:	2300      	movs	r3, #0
 800314a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800315c:	2200      	movs	r2, #0
 800315e:	4619      	mov	r1, r3
 8003160:	4825      	ldr	r0, [pc, #148]	@ (80031f8 <MX_TIM8_Init+0x180>)
 8003162:	f003 fc11 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800316c:	f7ff fbba 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003174:	2204      	movs	r2, #4
 8003176:	4619      	mov	r1, r3
 8003178:	481f      	ldr	r0, [pc, #124]	@ (80031f8 <MX_TIM8_Init+0x180>)
 800317a:	f003 fc05 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003184:	f7ff fbae 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318c:	2208      	movs	r2, #8
 800318e:	4619      	mov	r1, r3
 8003190:	4819      	ldr	r0, [pc, #100]	@ (80031f8 <MX_TIM8_Init+0x180>)
 8003192:	f003 fbf9 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800319c:	f7ff fba2 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031a4:	220c      	movs	r2, #12
 80031a6:	4619      	mov	r1, r3
 80031a8:	4813      	ldr	r0, [pc, #76]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80031aa:	f003 fbed 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80031b4:	f7ff fb96 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80031dc:	f004 fd2a 	bl	8007c34 <HAL_TIMEx_ConfigBreakDeadTime>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80031e6:	f7ff fb7d 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80031ea:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <MX_TIM8_Init+0x180>)
 80031ec:	f000 f984 	bl	80034f8 <HAL_TIM_MspPostInit>

}
 80031f0:	bf00      	nop
 80031f2:	3758      	adds	r7, #88	@ 0x58
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000057c 	.word	0x2000057c
 80031fc:	40013400 	.word	0x40013400

08003200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <HAL_TIM_Base_MspInit+0xc0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003212:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003218:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800321c:	6193      	str	r3, [r2, #24]
 800321e:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800322a:	e044      	b.n	80032b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <HAL_TIM_Base_MspInit+0xc8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d114      	bne.n	8003260 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003236:	4b23      	ldr	r3, [pc, #140]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	61d3      	str	r3, [r2, #28]
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	2036      	movs	r0, #54	@ 0x36
 8003254:	f001 f9e2 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003258:	2036      	movs	r0, #54	@ 0x36
 800325a:	f001 fa0b 	bl	8004674 <HAL_NVIC_EnableIRQ>
}
 800325e:	e02a      	b.n	80032b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_TIM_Base_MspInit+0xcc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d114      	bne.n	8003294 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800326a:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4a15      	ldr	r2, [pc, #84]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2037      	movs	r0, #55	@ 0x37
 8003288:	f001 f9c8 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800328c:	2037      	movs	r0, #55	@ 0x37
 800328e:	f001 f9f1 	bl	8004674 <HAL_NVIC_EnableIRQ>
}
 8003292:	e010      	b.n	80032b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <HAL_TIM_Base_MspInit+0xd0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10b      	bne.n	80032b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 80032a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032a8:	6193      	str	r3, [r2, #24]
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc4>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40001000 	.word	0x40001000
 80032cc:	40001400 	.word	0x40001400
 80032d0:	40013400 	.word	0x40013400

080032d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	@ 0x48
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f2:	d14f      	bne.n	8003394 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f4:	4b78      	ldr	r3, [pc, #480]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a77      	ldr	r2, [pc, #476]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	61d3      	str	r3, [r2, #28]
 8003300:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330c:	4b72      	ldr	r3, [pc, #456]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a71      	ldr	r2, [pc, #452]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a6b      	ldr	r2, [pc, #428]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b69      	ldr	r3, [pc, #420]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 800333c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003342:	2300      	movs	r3, #0
 8003344:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800334e:	4619      	mov	r1, r3
 8003350:	4862      	ldr	r0, [pc, #392]	@ (80034dc <HAL_TIM_Encoder_MspInit+0x208>)
 8003352:	f001 f9b3 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 8003356:	2308      	movs	r3, #8
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800335a:	2300      	movs	r3, #0
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 8003362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003366:	4619      	mov	r1, r3
 8003368:	485d      	ldr	r0, [pc, #372]	@ (80034e0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800336a:	f001 f9a7 	bl	80046bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800336e:	4b5d      	ldr	r3, [pc, #372]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800338c:	4a55      	ldr	r2, [pc, #340]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 800338e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003390:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003392:	e09d      	b.n	80034d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a53      	ldr	r2, [pc, #332]	@ (80034e8 <HAL_TIM_Encoder_MspInit+0x214>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d136      	bne.n	800340c <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800339e:	4b4e      	ldr	r3, [pc, #312]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a4d      	ldr	r2, [pc, #308]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b6:	4b48      	ldr	r3, [pc, #288]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	4a47      	ldr	r2, [pc, #284]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6193      	str	r3, [r2, #24]
 80033c2:	4b45      	ldr	r3, [pc, #276]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80033ce:	2330      	movs	r3, #48	@ 0x30
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d2:	2300      	movs	r3, #0
 80033d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033de:	4619      	mov	r1, r3
 80033e0:	483f      	ldr	r0, [pc, #252]	@ (80034e0 <HAL_TIM_Encoder_MspInit+0x20c>)
 80033e2:	f001 f96b 	bl	80046bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80033e6:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80033ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80033f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80033fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80033fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
 8003404:	4a37      	ldr	r2, [pc, #220]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8003406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003408:	6053      	str	r3, [r2, #4]
}
 800340a:	e061      	b.n	80034d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a36      	ldr	r2, [pc, #216]	@ (80034ec <HAL_TIM_Encoder_MspInit+0x218>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d133      	bne.n	800347e <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003416:	4b30      	ldr	r3, [pc, #192]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	61d3      	str	r3, [r2, #28]
 8003422:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800342e:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6193      	str	r3, [r2, #24]
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 8003446:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003458:	4619      	mov	r1, r3
 800345a:	4825      	ldr	r0, [pc, #148]	@ (80034f0 <HAL_TIM_Encoder_MspInit+0x21c>)
 800345c:	f001 f92e 	bl	80046bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003460:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
 8003466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003468:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800346c:	647b      	str	r3, [r7, #68]	@ 0x44
 800346e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003474:	647b      	str	r3, [r7, #68]	@ 0x44
 8003476:	4a1b      	ldr	r2, [pc, #108]	@ (80034e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8003478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347a:	6053      	str	r3, [r2, #4]
}
 800347c:	e028      	b.n	80034d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x220>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d123      	bne.n	80034d0 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003488:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	61d3      	str	r3, [r2, #28]
 8003494:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 80034b8:	2303      	movs	r3, #3
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c8:	4619      	mov	r1, r3
 80034ca:	4804      	ldr	r0, [pc, #16]	@ (80034dc <HAL_TIM_Encoder_MspInit+0x208>)
 80034cc:	f001 f8f6 	bl	80046bc <HAL_GPIO_Init>
}
 80034d0:	bf00      	nop
 80034d2:	3748      	adds	r7, #72	@ 0x48
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010800 	.word	0x40010800
 80034e0:	40010c00 	.word	0x40010c00
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40011400 	.word	0x40011400
 80034f4:	40000c00 	.word	0x40000c00

080034f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_TIM_MspPostInit+0xbc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d12b      	bne.n	8003570 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003518:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 800351e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003522:	6193      	str	r3, [r2, #24]
 8003524:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 8003530:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2302      	movs	r3, #2
 800353c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	481d      	ldr	r0, [pc, #116]	@ (80035bc <HAL_TIM_MspPostInit+0xc4>)
 8003546:	f001 f8b9 	bl	80046bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_TIM_MspPostInit+0xc8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
 8003568:	4a15      	ldr	r2, [pc, #84]	@ (80035c0 <HAL_TIM_MspPostInit+0xc8>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800356e:	e01d      	b.n	80035ac <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a13      	ldr	r2, [pc, #76]	@ (80035c4 <HAL_TIM_MspPostInit+0xcc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d118      	bne.n	80035ac <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357a:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4a0e      	ldr	r2, [pc, #56]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	6193      	str	r3, [r2, #24]
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <HAL_TIM_MspPostInit+0xc0>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 8003592:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4808      	ldr	r0, [pc, #32]	@ (80035c8 <HAL_TIM_MspPostInit+0xd0>)
 80035a8:	f001 f888 	bl	80046bc <HAL_GPIO_Init>
}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	@ 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40011800 	.word	0x40011800
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40011000 	.word	0x40011000

080035cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035d2:	4a12      	ldr	r2, [pc, #72]	@ (800361c <MX_USART1_UART_Init+0x50>)
 80035d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035d6:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035f2:	220c      	movs	r2, #12
 80035f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035f6:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003602:	4805      	ldr	r0, [pc, #20]	@ (8003618 <MX_USART1_UART_Init+0x4c>)
 8003604:	f004 fbf4 	bl	8007df0 <HAL_UART_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800360e:	f7ff f969 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200005c4 	.word	0x200005c4
 800361c:	40013800 	.word	0x40013800

08003620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	@ (80036ac <HAL_UART_MspInit+0x8c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d131      	bne.n	80036a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003640:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 8003646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800364a:	6193      	str	r3, [r2, #24]
 800364c:	4b18      	ldr	r3, [pc, #96]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003658:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_UART_MspInit+0x90>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800367a:	2303      	movs	r3, #3
 800367c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 0310 	add.w	r3, r7, #16
 8003682:	4619      	mov	r1, r3
 8003684:	480b      	ldr	r0, [pc, #44]	@ (80036b4 <HAL_UART_MspInit+0x94>)
 8003686:	f001 f819 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800368a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800368e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	4619      	mov	r1, r3
 800369e:	4805      	ldr	r0, [pc, #20]	@ (80036b4 <HAL_UART_MspInit+0x94>)
 80036a0:	f001 f80c 	bl	80046bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80036a4:	bf00      	nop
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40010800 	.word	0x40010800

080036b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036b8:	f7ff fa5a 	bl	8002b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036bc:	480b      	ldr	r0, [pc, #44]	@ (80036ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036be:	490c      	ldr	r1, [pc, #48]	@ (80036f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036c0:	4a0c      	ldr	r2, [pc, #48]	@ (80036f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d2:	4a09      	ldr	r2, [pc, #36]	@ (80036f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036d4:	4c09      	ldr	r4, [pc, #36]	@ (80036fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036e2:	f005 fdfb 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036e6:	f7ff f87f 	bl	80027e8 <main>
  bx lr
 80036ea:	4770      	bx	lr
  ldr r0, =_sdata
 80036ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80036f4:	0800d040 	.word	0x0800d040
  ldr r2, =_sbss
 80036f8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80036fc:	2000075c 	.word	0x2000075c

08003700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC1_2_IRQHandler>
	...

08003704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_Init+0x28>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a07      	ldr	r2, [pc, #28]	@ (800372c <HAL_Init+0x28>)
 800370e:	f043 0310 	orr.w	r3, r3, #16
 8003712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 ff61 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371a:	2003      	movs	r0, #3
 800371c:	f000 f808 	bl	8003730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003720:	f7ff f8f0 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40022000 	.word	0x40022000

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003738:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_InitTick+0x54>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x58>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003746:	fbb3 f3f1 	udiv	r3, r3, r1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ffa8 	bl	80046a4 <HAL_SYSTICK_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00e      	b.n	800377c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d80a      	bhi.n	800377a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003764:	2200      	movs	r2, #0
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f000 ff56 	bl	800461c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003770:	4a06      	ldr	r2, [pc, #24]	@ (800378c <HAL_InitTick+0x5c>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	2000001c 	.word	0x2000001c
 8003788:	20000024 	.word	0x20000024
 800378c:	20000020 	.word	0x20000020

08003790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <HAL_IncTick+0x1c>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_IncTick+0x20>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	4a03      	ldr	r2, [pc, #12]	@ (80037b0 <HAL_IncTick+0x20>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	20000024 	.word	0x20000024
 80037b0:	2000060c 	.word	0x2000060c

080037b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b02      	ldr	r3, [pc, #8]	@ (80037c4 <HAL_GetTick+0x10>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	2000060c 	.word	0x2000060c

080037c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d005      	beq.n	80037ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_Delay+0x44>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ee:	bf00      	nop
 80037f0:	f7ff ffe0 	bl	80037b4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d8f7      	bhi.n	80037f0 <HAL_Delay+0x28>
  {
  }
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000024 	.word	0x20000024

08003810 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e188      	b.n	8003b44 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a8c      	ldr	r2, [pc, #560]	@ (8003a68 <HAL_ADC_Init+0x258>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_ADC_Init+0x4a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a8a      	ldr	r2, [pc, #552]	@ (8003a6c <HAL_ADC_Init+0x25c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_ADC_Init+0x4a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a89      	ldr	r2, [pc, #548]	@ (8003a70 <HAL_ADC_Init+0x260>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_ADC_Init+0x4a>
 8003850:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8003854:	4887      	ldr	r0, [pc, #540]	@ (8003a74 <HAL_ADC_Init+0x264>)
 8003856:	f7ff f84b 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_ADC_Init+0x66>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386a:	d004      	beq.n	8003876 <HAL_ADC_Init+0x66>
 800386c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003870:	4880      	ldr	r0, [pc, #512]	@ (8003a74 <HAL_ADC_Init+0x264>)
 8003872:	f7ff f83d 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_ADC_Init+0x82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003886:	d004      	beq.n	8003892 <HAL_ADC_Init+0x82>
 8003888:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800388c:	4879      	ldr	r0, [pc, #484]	@ (8003a74 <HAL_ADC_Init+0x264>)
 800388e:	f7ff f82f 	bl	80028f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7b1b      	ldrb	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_ADC_Init+0x9c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7b1b      	ldrb	r3, [r3, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d004      	beq.n	80038ac <HAL_ADC_Init+0x9c>
 80038a2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80038a6:	4873      	ldr	r0, [pc, #460]	@ (8003a74 <HAL_ADC_Init+0x264>)
 80038a8:	f7ff f822 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d044      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038bc:	d03f      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80038c6:	d03a      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038d0:	d035      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 80038da:	d030      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038e4:	d02b      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d027      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f6:	d022      	beq.n	800393e <HAL_ADC_Init+0x12e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003900:	d01d      	beq.n	800393e <HAL_ADC_Init+0x12e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 800390a:	d018      	beq.n	800393e <HAL_ADC_Init+0x12e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003914:	d013      	beq.n	800393e <HAL_ADC_Init+0x12e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800391e:	d00e      	beq.n	800393e <HAL_ADC_Init+0x12e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003928:	d009      	beq.n	800393e <HAL_ADC_Init+0x12e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003932:	d004      	beq.n	800393e <HAL_ADC_Init+0x12e>
 8003934:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003938:	484e      	ldr	r0, [pc, #312]	@ (8003a74 <HAL_ADC_Init+0x264>)
 800393a:	f7fe ffd9 	bl	80028f0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02a      	beq.n	800399c <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_ADC_Init+0x146>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b10      	cmp	r3, #16
 8003954:	d904      	bls.n	8003960 <HAL_ADC_Init+0x150>
 8003956:	f240 11b1 	movw	r1, #433	@ 0x1b1
 800395a:	4846      	ldr	r0, [pc, #280]	@ (8003a74 <HAL_ADC_Init+0x264>)
 800395c:	f7fe ffc8 	bl	80028f0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7d1b      	ldrb	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_ADC_Init+0x16a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7d1b      	ldrb	r3, [r3, #20]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d004      	beq.n	800397a <HAL_ADC_Init+0x16a>
 8003970:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8003974:	483f      	ldr	r0, [pc, #252]	@ (8003a74 <HAL_ADC_Init+0x264>)
 8003976:	f7fe ffbb 	bl	80028f0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7d1b      	ldrb	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_ADC_Init+0x182>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d904      	bls.n	800399c <HAL_ADC_Init+0x18c>
 8003992:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8003996:	4837      	ldr	r0, [pc, #220]	@ (8003a74 <HAL_ADC_Init+0x264>)
 8003998:	f7fe ffaa 	bl	80028f0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fe48 	bl	8002648 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fd01 	bl	80043c0 <ADC_ConversionStop_Disable>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80b1 	bne.w	8003b32 <HAL_ADC_Init+0x322>
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 80ad 	bne.w	8003b32 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039e0:	f023 0302 	bic.w	r3, r3, #2
 80039e4:	f043 0202 	orr.w	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	491e      	ldr	r1, [pc, #120]	@ (8003a70 <HAL_ADC_Init+0x260>)
 80039f6:	428b      	cmp	r3, r1
 80039f8:	d10a      	bne.n	8003a10 <HAL_ADC_Init+0x200>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a02:	d002      	beq.n	8003a0a <HAL_ADC_Init+0x1fa>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	e004      	b.n	8003a14 <HAL_ADC_Init+0x204>
 8003a0a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003a0e:	e001      	b.n	8003a14 <HAL_ADC_Init+0x204>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7b1b      	ldrb	r3, [r3, #12]
 8003a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2c:	d003      	beq.n	8003a36 <HAL_ADC_Init+0x226>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_ADC_Init+0x22c>
 8003a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a3a:	e000      	b.n	8003a3e <HAL_ADC_Init+0x22e>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7d1b      	ldrb	r3, [r3, #20]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d121      	bne.n	8003a90 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7b1b      	ldrb	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	035a      	lsls	r2, r3, #13
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	e013      	b.n	8003a90 <HAL_ADC_Init+0x280>
 8003a68:	40012400 	.word	0x40012400
 8003a6c:	40012800 	.word	0x40012800
 8003a70:	40013c00 	.word	0x40013c00
 8003a74:	0800c9ec 	.word	0x0800c9ec
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_ADC_Init+0x33c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac0:	d003      	beq.n	8003aca <HAL_ADC_Init+0x2ba>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d104      	bne.n	8003ad4 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	051b      	lsls	r3, r3, #20
 8003ad2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <HAL_ADC_Init+0x340>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d10b      	bne.n	8003b10 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b0e:	e018      	b.n	8003b42 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	f023 0312 	bic.w	r3, r3, #18
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b30:	e007      	b.n	8003b42 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	ffe1f7fd 	.word	0xffe1f7fd
 8003b50:	ff1f0efe 	.word	0xff1f0efe

08003b54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd0 <HAL_ADC_Start+0x17c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_ADC_Start+0x34>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a59      	ldr	r2, [pc, #356]	@ (8003cd4 <HAL_ADC_Start+0x180>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_ADC_Start+0x34>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_ADC_Start+0x184>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_ADC_Start+0x34>
 8003b7e:	f240 4111 	movw	r1, #1041	@ 0x411
 8003b82:	4856      	ldr	r0, [pc, #344]	@ (8003cdc <HAL_ADC_Start+0x188>)
 8003b84:	f7fe feb4 	bl	80028f0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_Start+0x42>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e098      	b.n	8003cc8 <HAL_ADC_Start+0x174>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fbb4 	bl	800430c <ADC_Enable>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8087 	bne.w	8003cbe <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a42      	ldr	r2, [pc, #264]	@ (8003cd4 <HAL_ADC_Start+0x180>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d105      	bne.n	8003bda <HAL_ADC_Start+0x86>
 8003bce:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_ADC_Start+0x17c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d115      	bne.n	8003c06 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d026      	beq.n	8003c42 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bfc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c04:	e01d      	b.n	8003c42 <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <HAL_ADC_Start+0x17c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_ADC_Start+0xd2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd4 <HAL_ADC_Start+0x180>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <HAL_ADC_Start+0xee>
 8003c26:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <HAL_ADC_Start+0x17c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	f023 0206 	bic.w	r2, r3, #6
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c5a:	e002      	b.n	8003c62 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0202 	mvn.w	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c7e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003c82:	d113      	bne.n	8003cac <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c88:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <HAL_ADC_Start+0x180>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d105      	bne.n	8003c9a <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_ADC_Start+0x17c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	e00c      	b.n	8003cc6 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40012400 	.word	0x40012400
 8003cd4:	40012800 	.word	0x40012800
 8003cd8:	40013c00 	.word	0x40013c00
 8003cdc:	0800c9ec 	.word	0x0800c9ec

08003ce0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a80      	ldr	r2, [pc, #512]	@ (8003efc <HAL_ADC_PollForConversion+0x21c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_ADC_PollForConversion+0x3e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a7e      	ldr	r2, [pc, #504]	@ (8003f00 <HAL_ADC_PollForConversion+0x220>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_ADC_PollForConversion+0x3e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f04 <HAL_ADC_PollForConversion+0x224>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_ADC_PollForConversion+0x3e>
 8003d14:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 8003d18:	487b      	ldr	r0, [pc, #492]	@ (8003f08 <HAL_ADC_PollForConversion+0x228>)
 8003d1a:	f7fe fde9 	bl	80028f0 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d1e:	f7ff fd49 	bl	80037b4 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0d3      	b.n	8003ef2 <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d131      	bne.n	8003dbc <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d12a      	bne.n	8003dbc <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d66:	e021      	b.n	8003dac <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d01d      	beq.n	8003dac <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <HAL_ADC_PollForConversion+0xa6>
 8003d76:	f7ff fd1d 	bl	80037b4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d212      	bcs.n	8003dac <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0a2      	b.n	8003ef2 <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0d6      	beq.n	8003d68 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003dba:	e070      	b.n	8003e9e <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003dbc:	4b53      	ldr	r3, [pc, #332]	@ (8003f0c <HAL_ADC_PollForConversion+0x22c>)
 8003dbe:	681c      	ldr	r4, [r3, #0]
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f001 fe13 	bl	80059ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f10 <HAL_ADC_PollForConversion+0x230>)
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_ADC_PollForConversion+0x12c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	4b4c      	ldr	r3, [pc, #304]	@ (8003f14 <HAL_ADC_PollForConversion+0x234>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <HAL_ADC_PollForConversion+0x12c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	4b4a      	ldr	r3, [pc, #296]	@ (8003f18 <HAL_ADC_PollForConversion+0x238>)
 8003df0:	400b      	ands	r3, r1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <HAL_ADC_PollForConversion+0x128>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_ADC_PollForConversion+0x23c>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_PollForConversion+0x128>
 8003e04:	2314      	movs	r3, #20
 8003e06:	e020      	b.n	8003e4a <HAL_ADC_PollForConversion+0x16a>
 8003e08:	2329      	movs	r3, #41	@ 0x29
 8003e0a:	e01e      	b.n	8003e4a <HAL_ADC_PollForConversion+0x16a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	4b41      	ldr	r3, [pc, #260]	@ (8003f18 <HAL_ADC_PollForConversion+0x238>)
 8003e14:	400b      	ands	r3, r1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_ADC_PollForConversion+0x148>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68d9      	ldr	r1, [r3, #12]
 8003e20:	4b3e      	ldr	r3, [pc, #248]	@ (8003f1c <HAL_ADC_PollForConversion+0x23c>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <HAL_ADC_PollForConversion+0x164>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6919      	ldr	r1, [r3, #16]
 8003e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f20 <HAL_ADC_PollForConversion+0x240>)
 8003e30:	400b      	ands	r3, r1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x168>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <HAL_ADC_PollForConversion+0x240>)
 8003e3e:	400b      	ands	r3, r1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x168>
 8003e44:	2354      	movs	r3, #84	@ 0x54
 8003e46:	e000      	b.n	8003e4a <HAL_ADC_PollForConversion+0x16a>
 8003e48:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e50:	e021      	b.n	8003e96 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d01a      	beq.n	8003e90 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_ADC_PollForConversion+0x190>
 8003e60:	f7ff fca8 	bl	80037b4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d20f      	bcs.n	8003e90 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d90b      	bls.n	8003e90 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e030      	b.n	8003ef2 <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d8d9      	bhi.n	8003e52 <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0212 	mvn.w	r2, #18
 8003ea6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003ebe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ec2:	d115      	bne.n	8003ef0 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d111      	bne.n	8003ef0 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40012400 	.word	0x40012400
 8003f00:	40012800 	.word	0x40012800
 8003f04:	40013c00 	.word	0x40013c00
 8003f08:	0800c9ec 	.word	0x0800c9ec
 8003f0c:	2000001c 	.word	0x2000001c
 8003f10:	24924924 	.word	0x24924924
 8003f14:	00924924 	.word	0x00924924
 8003f18:	12492492 	.word	0x12492492
 8003f1c:	00492492 	.word	0x00492492
 8003f20:	00249249 	.word	0x00249249

08003f24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <HAL_ADC_GetValue+0x40>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_ADC_GetValue+0x30>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f68 <HAL_ADC_GetValue+0x44>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_ADC_GetValue+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <HAL_ADC_GetValue+0x48>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_ADC_GetValue+0x30>
 8003f4a:	f240 61e5 	movw	r1, #1765	@ 0x6e5
 8003f4e:	4808      	ldr	r0, [pc, #32]	@ (8003f70 <HAL_ADC_GetValue+0x4c>)
 8003f50:	f7fe fcce 	bl	80028f0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40012400 	.word	0x40012400
 8003f68:	40012800 	.word	0x40012800
 8003f6c:	40013c00 	.word	0x40013c00
 8003f70:	0800c9ec 	.word	0x0800c9ec

08003f74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a8b      	ldr	r2, [pc, #556]	@ (80041b8 <HAL_ADC_ConfigChannel+0x244>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x3a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a89      	ldr	r2, [pc, #548]	@ (80041bc <HAL_ADC_ConfigChannel+0x248>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x3a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a88      	ldr	r2, [pc, #544]	@ (80041c0 <HAL_ADC_ConfigChannel+0x24c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x3a>
 8003fa4:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8003fa8:	4886      	ldr	r0, [pc, #536]	@ (80041c4 <HAL_ADC_ConfigChannel+0x250>)
 8003faa:	f7fe fca1 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d048      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d044      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d040      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d03c      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d038      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d034      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d030      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	d02c      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d028      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b09      	cmp	r3, #9
 8003ffc:	d024      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b0a      	cmp	r3, #10
 8004004:	d020      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b0b      	cmp	r3, #11
 800400c:	d01c      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d018      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b0d      	cmp	r3, #13
 800401c:	d014      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b0e      	cmp	r3, #14
 8004024:	d010      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d00c      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b10      	cmp	r3, #16
 8004034:	d008      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b11      	cmp	r3, #17
 800403c:	d004      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xd4>
 800403e:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8004042:	4860      	ldr	r0, [pc, #384]	@ (80041c4 <HAL_ADC_ConfigChannel+0x250>)
 8004044:	f7fe fc54 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d040      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d03c      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d038      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d034      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b05      	cmp	r3, #5
 800406e:	d030      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d02c      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b07      	cmp	r3, #7
 800407e:	d028      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d024      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b09      	cmp	r3, #9
 800408e:	d020      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b0a      	cmp	r3, #10
 8004096:	d01c      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b0b      	cmp	r3, #11
 800409e:	d018      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d014      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b0d      	cmp	r3, #13
 80040ae:	d010      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b0e      	cmp	r3, #14
 80040b6:	d00c      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d008      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d004      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x15e>
 80040c8:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 80040cc:	483d      	ldr	r0, [pc, #244]	@ (80041c4 <HAL_ADC_ConfigChannel+0x250>)
 80040ce:	f7fe fc0f 	bl	80028f0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d020      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d01c      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d018      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d014      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d010      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d00c      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d008      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b07      	cmp	r3, #7
 8004110:	d004      	beq.n	800411c <HAL_ADC_ConfigChannel+0x1a8>
 8004112:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8004116:	482b      	ldr	r0, [pc, #172]	@ (80041c4 <HAL_ADC_ConfigChannel+0x250>)
 8004118:	f7fe fbea 	bl	80028f0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x1b6>
 8004126:	2302      	movs	r3, #2
 8004128:	e0e5      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x382>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d81c      	bhi.n	8004174 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	3b05      	subs	r3, #5
 800414c:	221f      	movs	r2, #31
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	4019      	ands	r1, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	3b05      	subs	r3, #5
 8004166:	fa00 f203 	lsl.w	r2, r0, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	635a      	str	r2, [r3, #52]	@ 0x34
 8004172:	e045      	b.n	8004200 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d825      	bhi.n	80041c8 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	3b23      	subs	r3, #35	@ 0x23
 800418e:	221f      	movs	r2, #31
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	4019      	ands	r1, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	3b23      	subs	r3, #35	@ 0x23
 80041a8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80041b4:	e024      	b.n	8004200 <HAL_ADC_ConfigChannel+0x28c>
 80041b6:	bf00      	nop
 80041b8:	40012400 	.word	0x40012400
 80041bc:	40012800 	.word	0x40012800
 80041c0:	40013c00 	.word	0x40013c00
 80041c4:	0800c9ec 	.word	0x0800c9ec
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	3b41      	subs	r3, #65	@ 0x41
 80041da:	221f      	movs	r2, #31
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	4019      	ands	r1, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	3b41      	subs	r3, #65	@ 0x41
 80041f4:	fa00 f203 	lsl.w	r2, r0, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b09      	cmp	r3, #9
 8004206:	d91c      	bls.n	8004242 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	3b1e      	subs	r3, #30
 800421a:	2207      	movs	r2, #7
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	4019      	ands	r1, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	3b1e      	subs	r3, #30
 8004234:	fa00 f203 	lsl.w	r2, r0, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	e019      	b.n	8004276 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6919      	ldr	r1, [r3, #16]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	2207      	movs	r2, #7
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	4019      	ands	r1, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6898      	ldr	r0, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b10      	cmp	r3, #16
 800427c:	d003      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004282:	2b11      	cmp	r3, #17
 8004284:	d132      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_ADC_ConfigChannel+0x38c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d126      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80042ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d11a      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042b6:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <HAL_ADC_ConfigChannel+0x390>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <HAL_ADC_ConfigChannel+0x394>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0c9a      	lsrs	r2, r3, #18
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042cc:	e002      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f9      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x35a>
 80042da:	e007      	b.n	80042ec <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40012400 	.word	0x40012400
 8004304:	2000001c 	.word	0x2000001c
 8004308:	431bde83 	.word	0x431bde83

0800430c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d040      	beq.n	80043ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800433a:	4b1f      	ldr	r3, [pc, #124]	@ (80043b8 <ADC_Enable+0xac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <ADC_Enable+0xb0>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004348:	e002      	b.n	8004350 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3b01      	subs	r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f9      	bne.n	800434a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004356:	f7ff fa2d 	bl	80037b4 <HAL_GetTick>
 800435a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800435c:	e01f      	b.n	800439e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800435e:	f7ff fa29 	bl	80037b4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d918      	bls.n	800439e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d011      	beq.n	800439e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	f043 0210 	orr.w	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d1d8      	bne.n	800435e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000001c 	.word	0x2000001c
 80043bc:	431bde83 	.word	0x431bde83

080043c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d12e      	bne.n	8004438 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043ea:	f7ff f9e3 	bl	80037b4 <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80043f0:	e01b      	b.n	800442a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043f2:	f7ff f9df 	bl	80037b4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d914      	bls.n	800442a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d10d      	bne.n	800442a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	f043 0210 	orr.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e007      	b.n	800443a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d0dc      	beq.n	80043f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004460:	4013      	ands	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800446c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004476:	4a04      	ldr	r2, [pc, #16]	@ (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	60d3      	str	r3, [r2, #12]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 0307 	and.w	r3, r3, #7
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db0b      	blt.n	80044d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4906      	ldr	r1, [pc, #24]	@ (80044dc <__NVIC_EnableIRQ+0x34>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0a      	blt.n	800450a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	490c      	ldr	r1, [pc, #48]	@ (800452c <__NVIC_SetPriority+0x4c>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	440b      	add	r3, r1
 8004504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004508:	e00a      	b.n	8004520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4908      	ldr	r1, [pc, #32]	@ (8004530 <__NVIC_SetPriority+0x50>)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3b04      	subs	r3, #4
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	440b      	add	r3, r1
 800451e:	761a      	strb	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000e100 	.word	0xe000e100
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	@ 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf28      	it	cs
 8004552:	2304      	movcs	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3304      	adds	r3, #4
 800455a:	2b06      	cmp	r3, #6
 800455c:	d902      	bls.n	8004564 <NVIC_EncodePriority+0x30>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3b03      	subs	r3, #3
 8004562:	e000      	b.n	8004566 <NVIC_EncodePriority+0x32>
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800457c:	f04f 31ff 	mov.w	r1, #4294967295
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	43d9      	mvns	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	4313      	orrs	r3, r2
         );
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	@ 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045a8:	d301      	bcc.n	80045ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00f      	b.n	80045ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ae:	4a0a      	ldr	r2, [pc, #40]	@ (80045d8 <SysTick_Config+0x40>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b6:	210f      	movs	r1, #15
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f7ff ff90 	bl	80044e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <SysTick_Config+0x40>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <SysTick_Config+0x40>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	d00f      	beq.n	800460a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d00c      	beq.n	800460a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d009      	beq.n	800460a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d006      	beq.n	800460a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d003      	beq.n	800460a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004602:	2191      	movs	r1, #145	@ 0x91
 8004604:	4804      	ldr	r0, [pc, #16]	@ (8004618 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004606:	f7fe f973 	bl	80028f0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff1a 	bl	8004444 <__NVIC_SetPriorityGrouping>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	0800ca24 	.word	0x0800ca24

0800461c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b0f      	cmp	r3, #15
 8004632:	d903      	bls.n	800463c <HAL_NVIC_SetPriority+0x20>
 8004634:	21a9      	movs	r1, #169	@ 0xa9
 8004636:	480e      	ldr	r0, [pc, #56]	@ (8004670 <HAL_NVIC_SetPriority+0x54>)
 8004638:	f7fe f95a 	bl	80028f0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d903      	bls.n	800464a <HAL_NVIC_SetPriority+0x2e>
 8004642:	21aa      	movs	r1, #170	@ 0xaa
 8004644:	480a      	ldr	r0, [pc, #40]	@ (8004670 <HAL_NVIC_SetPriority+0x54>)
 8004646:	f7fe f953 	bl	80028f0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800464a:	f7ff ff1f 	bl	800448c <__NVIC_GetPriorityGrouping>
 800464e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	6978      	ldr	r0, [r7, #20]
 8004656:	f7ff ff6d 	bl	8004534 <NVIC_EncodePriority>
 800465a:	4602      	mov	r2, r0
 800465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff3c 	bl	80044e0 <__NVIC_SetPriority>
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	0800ca24 	.word	0x0800ca24

08004674 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	da03      	bge.n	800468e <HAL_NVIC_EnableIRQ+0x1a>
 8004686:	21bd      	movs	r1, #189	@ 0xbd
 8004688:	4805      	ldr	r0, [pc, #20]	@ (80046a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800468a:	f7fe f931 	bl	80028f0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff08 	bl	80044a8 <__NVIC_EnableIRQ>
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	0800ca24 	.word	0x0800ca24

080046a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff73 	bl	8004598 <SysTick_Config>
 80046b2:	4603      	mov	r3, r0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	@ 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a94      	ldr	r2, [pc, #592]	@ (8004924 <HAL_GPIO_Init+0x268>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01b      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a93      	ldr	r2, [pc, #588]	@ (8004928 <HAL_GPIO_Init+0x26c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d017      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a92      	ldr	r2, [pc, #584]	@ (800492c <HAL_GPIO_Init+0x270>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a91      	ldr	r2, [pc, #580]	@ (8004930 <HAL_GPIO_Init+0x274>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00f      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a90      	ldr	r2, [pc, #576]	@ (8004934 <HAL_GPIO_Init+0x278>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a8f      	ldr	r2, [pc, #572]	@ (8004938 <HAL_GPIO_Init+0x27c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <HAL_GPIO_Init+0x52>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a8e      	ldr	r2, [pc, #568]	@ (800493c <HAL_GPIO_Init+0x280>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x52>
 8004706:	21bd      	movs	r1, #189	@ 0xbd
 8004708:	488d      	ldr	r0, [pc, #564]	@ (8004940 <HAL_GPIO_Init+0x284>)
 800470a:	f7fe f8f1 	bl	80028f0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_GPIO_Init+0x66>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d303      	bcc.n	800472a <HAL_GPIO_Init+0x6e>
 8004722:	21be      	movs	r1, #190	@ 0xbe
 8004724:	4886      	ldr	r0, [pc, #536]	@ (8004940 <HAL_GPIO_Init+0x284>)
 8004726:	f7fe f8e3 	bl	80028f0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8236 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b01      	cmp	r3, #1
 800473a:	f000 8231 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b11      	cmp	r3, #17
 8004744:	f000 822c 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b02      	cmp	r3, #2
 800474e:	f000 8227 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b12      	cmp	r3, #18
 8004758:	f000 8222 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a78      	ldr	r2, [pc, #480]	@ (8004944 <HAL_GPIO_Init+0x288>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f000 821c 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a76      	ldr	r2, [pc, #472]	@ (8004948 <HAL_GPIO_Init+0x28c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	f000 8216 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a74      	ldr	r2, [pc, #464]	@ (800494c <HAL_GPIO_Init+0x290>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f000 8210 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a72      	ldr	r2, [pc, #456]	@ (8004950 <HAL_GPIO_Init+0x294>)
 8004786:	4293      	cmp	r3, r2
 8004788:	f000 820a 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a70      	ldr	r2, [pc, #448]	@ (8004954 <HAL_GPIO_Init+0x298>)
 8004792:	4293      	cmp	r3, r2
 8004794:	f000 8204 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_GPIO_Init+0x29c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	f000 81fe 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	f000 81f9 	beq.w	8004ba0 <HAL_GPIO_Init+0x4e4>
 80047ae:	21bf      	movs	r1, #191	@ 0xbf
 80047b0:	4863      	ldr	r0, [pc, #396]	@ (8004940 <HAL_GPIO_Init+0x284>)
 80047b2:	f7fe f89d 	bl	80028f0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	e1f3      	b.n	8004ba0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047b8:	2201      	movs	r2, #1
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	f040 81e2 	bne.w	8004b9a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a52      	ldr	r2, [pc, #328]	@ (8004924 <HAL_GPIO_Init+0x268>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01b      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a51      	ldr	r2, [pc, #324]	@ (8004928 <HAL_GPIO_Init+0x26c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d017      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a50      	ldr	r2, [pc, #320]	@ (800492c <HAL_GPIO_Init+0x270>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004930 <HAL_GPIO_Init+0x274>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004934 <HAL_GPIO_Init+0x278>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4d      	ldr	r2, [pc, #308]	@ (8004938 <HAL_GPIO_Init+0x27c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4c      	ldr	r2, [pc, #304]	@ (800493c <HAL_GPIO_Init+0x280>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x15a>
 800480e:	21cd      	movs	r1, #205	@ 0xcd
 8004810:	484b      	ldr	r0, [pc, #300]	@ (8004940 <HAL_GPIO_Init+0x284>)
 8004812:	f7fe f86d 	bl	80028f0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4a4f      	ldr	r2, [pc, #316]	@ (8004958 <HAL_GPIO_Init+0x29c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	f000 80c7 	beq.w	80049b0 <HAL_GPIO_Init+0x2f4>
 8004822:	4a4d      	ldr	r2, [pc, #308]	@ (8004958 <HAL_GPIO_Init+0x29c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	f200 80ed 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 800482a:	4a48      	ldr	r2, [pc, #288]	@ (800494c <HAL_GPIO_Init+0x290>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f000 80bf 	beq.w	80049b0 <HAL_GPIO_Init+0x2f4>
 8004832:	4a46      	ldr	r2, [pc, #280]	@ (800494c <HAL_GPIO_Init+0x290>)
 8004834:	4293      	cmp	r3, r2
 8004836:	f200 80e5 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 800483a:	4a46      	ldr	r2, [pc, #280]	@ (8004954 <HAL_GPIO_Init+0x298>)
 800483c:	4293      	cmp	r3, r2
 800483e:	f000 80b7 	beq.w	80049b0 <HAL_GPIO_Init+0x2f4>
 8004842:	4a44      	ldr	r2, [pc, #272]	@ (8004954 <HAL_GPIO_Init+0x298>)
 8004844:	4293      	cmp	r3, r2
 8004846:	f200 80dd 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 800484a:	4a3f      	ldr	r2, [pc, #252]	@ (8004948 <HAL_GPIO_Init+0x28c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	f000 80af 	beq.w	80049b0 <HAL_GPIO_Init+0x2f4>
 8004852:	4a3d      	ldr	r2, [pc, #244]	@ (8004948 <HAL_GPIO_Init+0x28c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	f200 80d5 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 800485a:	4a3d      	ldr	r2, [pc, #244]	@ (8004950 <HAL_GPIO_Init+0x294>)
 800485c:	4293      	cmp	r3, r2
 800485e:	f000 80a7 	beq.w	80049b0 <HAL_GPIO_Init+0x2f4>
 8004862:	4a3b      	ldr	r2, [pc, #236]	@ (8004950 <HAL_GPIO_Init+0x294>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f200 80cd 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 800486a:	2b12      	cmp	r3, #18
 800486c:	d82c      	bhi.n	80048c8 <HAL_GPIO_Init+0x20c>
 800486e:	2b12      	cmp	r3, #18
 8004870:	f200 80c8 	bhi.w	8004a04 <HAL_GPIO_Init+0x348>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <HAL_GPIO_Init+0x1c0>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080049b1 	.word	0x080049b1
 8004880:	080048d1 	.word	0x080048d1
 8004884:	0800495d 	.word	0x0800495d
 8004888:	080049ff 	.word	0x080049ff
 800488c:	08004a05 	.word	0x08004a05
 8004890:	08004a05 	.word	0x08004a05
 8004894:	08004a05 	.word	0x08004a05
 8004898:	08004a05 	.word	0x08004a05
 800489c:	08004a05 	.word	0x08004a05
 80048a0:	08004a05 	.word	0x08004a05
 80048a4:	08004a05 	.word	0x08004a05
 80048a8:	08004a05 	.word	0x08004a05
 80048ac:	08004a05 	.word	0x08004a05
 80048b0:	08004a05 	.word	0x08004a05
 80048b4:	08004a05 	.word	0x08004a05
 80048b8:	08004a05 	.word	0x08004a05
 80048bc:	08004a05 	.word	0x08004a05
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	08004987 	.word	0x08004987
 80048c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004944 <HAL_GPIO_Init+0x288>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d070      	beq.n	80049b0 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048ce:	e099      	b.n	8004a04 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d00b      	beq.n	80048f0 <HAL_GPIO_Init+0x234>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d007      	beq.n	80048f0 <HAL_GPIO_Init+0x234>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x234>
 80048e8:	21d5      	movs	r1, #213	@ 0xd5
 80048ea:	4815      	ldr	r0, [pc, #84]	@ (8004940 <HAL_GPIO_Init+0x284>)
 80048ec:	f7fe f800 	bl	80028f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	623b      	str	r3, [r7, #32]
          break;
 80048f6:	e086      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d00b      	beq.n	8004918 <HAL_GPIO_Init+0x25c>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d007      	beq.n	8004918 <HAL_GPIO_Init+0x25c>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x25c>
 8004910:	21dc      	movs	r1, #220	@ 0xdc
 8004912:	480b      	ldr	r0, [pc, #44]	@ (8004940 <HAL_GPIO_Init+0x284>)
 8004914:	f7fd ffec 	bl	80028f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	3304      	adds	r3, #4
 800491e:	623b      	str	r3, [r7, #32]
          break;
 8004920:	e071      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
 8004922:	bf00      	nop
 8004924:	40010800 	.word	0x40010800
 8004928:	40010c00 	.word	0x40010c00
 800492c:	40011000 	.word	0x40011000
 8004930:	40011400 	.word	0x40011400
 8004934:	40011800 	.word	0x40011800
 8004938:	40011c00 	.word	0x40011c00
 800493c:	40012000 	.word	0x40012000
 8004940:	0800ca60 	.word	0x0800ca60
 8004944:	10110000 	.word	0x10110000
 8004948:	10210000 	.word	0x10210000
 800494c:	10310000 	.word	0x10310000
 8004950:	10120000 	.word	0x10120000
 8004954:	10220000 	.word	0x10220000
 8004958:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d00b      	beq.n	800497c <HAL_GPIO_Init+0x2c0>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d007      	beq.n	800497c <HAL_GPIO_Init+0x2c0>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2c0>
 8004974:	21e3      	movs	r1, #227	@ 0xe3
 8004976:	4891      	ldr	r0, [pc, #580]	@ (8004bbc <HAL_GPIO_Init+0x500>)
 8004978:	f7fd ffba 	bl	80028f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	3308      	adds	r3, #8
 8004982:	623b      	str	r3, [r7, #32]
          break;
 8004984:	e03f      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d00b      	beq.n	80049a6 <HAL_GPIO_Init+0x2ea>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d007      	beq.n	80049a6 <HAL_GPIO_Init+0x2ea>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x2ea>
 800499e:	21ea      	movs	r1, #234	@ 0xea
 80049a0:	4886      	ldr	r0, [pc, #536]	@ (8004bbc <HAL_GPIO_Init+0x500>)
 80049a2:	f7fd ffa5 	bl	80028f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	330c      	adds	r3, #12
 80049ac:	623b      	str	r3, [r7, #32]
          break;
 80049ae:	e02a      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_GPIO_Init+0x314>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d007      	beq.n	80049d0 <HAL_GPIO_Init+0x314>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x314>
 80049c8:	21f7      	movs	r1, #247	@ 0xf7
 80049ca:	487c      	ldr	r0, [pc, #496]	@ (8004bbc <HAL_GPIO_Init+0x500>)
 80049cc:	f7fd ff90 	bl	80028f0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049d8:	2304      	movs	r3, #4
 80049da:	623b      	str	r3, [r7, #32]
          break;
 80049dc:	e013      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049e6:	2308      	movs	r3, #8
 80049e8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	611a      	str	r2, [r3, #16]
          break;
 80049f0:	e009      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049f2:	2308      	movs	r3, #8
 80049f4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	615a      	str	r2, [r3, #20]
          break;
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
          break;
 8004a02:	e000      	b.n	8004a06 <HAL_GPIO_Init+0x34a>
          break;
 8004a04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2bff      	cmp	r3, #255	@ 0xff
 8004a0a:	d801      	bhi.n	8004a10 <HAL_GPIO_Init+0x354>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	e001      	b.n	8004a14 <HAL_GPIO_Init+0x358>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2bff      	cmp	r3, #255	@ 0xff
 8004a1a:	d802      	bhi.n	8004a22 <HAL_GPIO_Init+0x366>
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	e002      	b.n	8004a28 <HAL_GPIO_Init+0x36c>
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	3b08      	subs	r3, #8
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	210f      	movs	r1, #15
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	401a      	ands	r2, r3
 8004a3a:	6a39      	ldr	r1, [r7, #32]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	431a      	orrs	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a2 	beq.w	8004b9a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a56:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc0 <HAL_GPIO_Init+0x504>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4a59      	ldr	r2, [pc, #356]	@ (8004bc0 <HAL_GPIO_Init+0x504>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6193      	str	r3, [r2, #24]
 8004a62:	4b57      	ldr	r3, [pc, #348]	@ (8004bc0 <HAL_GPIO_Init+0x504>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a6e:	4a55      	ldr	r2, [pc, #340]	@ (8004bc4 <HAL_GPIO_Init+0x508>)
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	3302      	adds	r3, #2
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc8 <HAL_GPIO_Init+0x50c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <HAL_GPIO_Init+0x41e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004bcc <HAL_GPIO_Init+0x510>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x41a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <HAL_GPIO_Init+0x514>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x416>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <HAL_GPIO_Init+0x518>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x412>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a48      	ldr	r2, [pc, #288]	@ (8004bd8 <HAL_GPIO_Init+0x51c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x40e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a47      	ldr	r2, [pc, #284]	@ (8004bdc <HAL_GPIO_Init+0x520>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x40a>
 8004ac2:	2305      	movs	r3, #5
 8004ac4:	e00a      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	e008      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e006      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e004      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e002      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_GPIO_Init+0x420>
 8004ada:	2300      	movs	r3, #0
 8004adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ade:	f002 0203 	and.w	r2, r2, #3
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	4093      	lsls	r3, r2
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004aec:	4935      	ldr	r1, [pc, #212]	@ (8004bc4 <HAL_GPIO_Init+0x508>)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	3302      	adds	r3, #2
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b06:	4b36      	ldr	r3, [pc, #216]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	4935      	ldr	r1, [pc, #212]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
 8004b12:	e006      	b.n	8004b22 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b14:	4b32      	ldr	r3, [pc, #200]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	4930      	ldr	r1, [pc, #192]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	492b      	ldr	r1, [pc, #172]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60cb      	str	r3, [r1, #12]
 8004b3a:	e006      	b.n	8004b4a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b3c:	4b28      	ldr	r3, [pc, #160]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	4926      	ldr	r1, [pc, #152]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b56:	4b22      	ldr	r3, [pc, #136]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4921      	ldr	r1, [pc, #132]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 8004b62:	e006      	b.n	8004b72 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b64:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	491c      	ldr	r1, [pc, #112]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b7e:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4917      	ldr	r1, [pc, #92]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
 8004b8a:	e006      	b.n	8004b9a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b8c:	4b14      	ldr	r3, [pc, #80]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	4912      	ldr	r1, [pc, #72]	@ (8004be0 <HAL_GPIO_Init+0x524>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f47f ae04 	bne.w	80047b8 <HAL_GPIO_Init+0xfc>
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	@ 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0800ca60 	.word	0x0800ca60
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40010800 	.word	0x40010800
 8004bcc:	40010c00 	.word	0x40010c00
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	40011400 	.word	0x40011400
 8004bd8:	40011800 	.word	0x40011800
 8004bdc:	40011c00 	.word	0x40011c00
 8004be0:	40010400 	.word	0x40010400

08004be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_GPIO_ReadPin+0x1c>
 8004bf6:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8004bfa:	4809      	ldr	r0, [pc, #36]	@ (8004c20 <HAL_GPIO_ReadPin+0x3c>)
 8004bfc:	f7fd fe78 	bl	80028f0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e001      	b.n	8004c16 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	0800ca60 	.word	0x0800ca60

08004c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	807b      	strh	r3, [r7, #2]
 8004c30:	4613      	mov	r3, r2
 8004c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_GPIO_WritePin+0x20>
 8004c3a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8004c3e:	480e      	ldr	r0, [pc, #56]	@ (8004c78 <HAL_GPIO_WritePin+0x54>)
 8004c40:	f7fd fe56 	bl	80028f0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004c44:	787b      	ldrb	r3, [r7, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_GPIO_WritePin+0x36>
 8004c4a:	787b      	ldrb	r3, [r7, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d004      	beq.n	8004c5a <HAL_GPIO_WritePin+0x36>
 8004c50:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8004c54:	4808      	ldr	r0, [pc, #32]	@ (8004c78 <HAL_GPIO_WritePin+0x54>)
 8004c56:	f7fd fe4b 	bl	80028f0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004c5a:	787b      	ldrb	r3, [r7, #1]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c60:	887a      	ldrh	r2, [r7, #2]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c66:	e003      	b.n	8004c70 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	041a      	lsls	r2, r3, #16
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	611a      	str	r2, [r3, #16]
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	0800ca60 	.word	0x0800ca60

08004c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e35a      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x54>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x54>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d110      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x54>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x54>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x54>
 8004cc6:	f240 1165 	movw	r1, #357	@ 0x165
 8004cca:	488f      	ldr	r0, [pc, #572]	@ (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ccc:	f7fd fe10 	bl	80028f0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 809a 	beq.w	8004e12 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <HAL_RCC_OscConfig+0x88>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_OscConfig+0x88>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf8:	d004      	beq.n	8004d04 <HAL_RCC_OscConfig+0x88>
 8004cfa:	f240 116b 	movw	r1, #363	@ 0x16b
 8004cfe:	4882      	ldr	r0, [pc, #520]	@ (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d00:	f7fd fdf6 	bl	80028f0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d04:	4b81      	ldr	r3, [pc, #516]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d00c      	beq.n	8004d2a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d10:	4b7e      	ldr	r3, [pc, #504]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d112      	bne.n	8004d42 <HAL_RCC_OscConfig+0xc6>
 8004d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d10b      	bne.n	8004d42 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2a:	4b78      	ldr	r3, [pc, #480]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d06c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x194>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d168      	bne.n	8004e10 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e300      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0xde>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e02e      	b.n	8004db8 <HAL_RCC_OscConfig+0x13c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x100>
 8004d62:	4b6a      	ldr	r3, [pc, #424]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a69      	ldr	r2, [pc, #420]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a66      	ldr	r2, [pc, #408]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e01d      	b.n	8004db8 <HAL_RCC_OscConfig+0x13c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x124>
 8004d86:	4b61      	ldr	r3, [pc, #388]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a60      	ldr	r2, [pc, #384]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b5e      	ldr	r3, [pc, #376]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a5d      	ldr	r2, [pc, #372]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0x13c>
 8004da0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a59      	ldr	r2, [pc, #356]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4b57      	ldr	r3, [pc, #348]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a56      	ldr	r2, [pc, #344]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fcf8 	bl	80037b4 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fcf4 	bl	80037b4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e2b4      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x14c>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fe fce4 	bl	80037b4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fe fce0 	bl	80037b4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e2a0      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	4b42      	ldr	r3, [pc, #264]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x174>
 8004e0e:	e000      	b.n	8004e12 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8080 	beq.w	8004f20 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1be>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d004      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1be>
 8004e30:	f240 119f 	movw	r1, #415	@ 0x19f
 8004e34:	4834      	ldr	r0, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e36:	f7fd fd5b 	bl	80028f0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b1f      	cmp	r3, #31
 8004e40:	d904      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1d0>
 8004e42:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8004e46:	4830      	ldr	r0, [pc, #192]	@ (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e48:	f7fd fd52 	bl	80028f0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e58:	4b2c      	ldr	r3, [pc, #176]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d11c      	bne.n	8004e9e <HAL_RCC_OscConfig+0x222>
 8004e64:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e70:	4b26      	ldr	r3, [pc, #152]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x20c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e25d      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	491d      	ldr	r1, [pc, #116]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9c:	e040      	b.n	8004f20 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d020      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <HAL_RCC_OscConfig+0x294>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fe fc82 	bl	80037b4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb4:	f7fe fc7e 	bl	80037b4 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e23e      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	490a      	ldr	r1, [pc, #40]	@ (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]
 8004ee6:	e01b      	b.n	8004f20 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee8:	4b09      	ldr	r3, [pc, #36]	@ (8004f10 <HAL_RCC_OscConfig+0x294>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fe fc61 	bl	80037b4 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef4:	e00e      	b.n	8004f14 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef6:	f7fe fc5d 	bl	80037b4 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d907      	bls.n	8004f14 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e21d      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
 8004f08:	0800ca9c 	.word	0x0800ca9c
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f14:	4b7d      	ldr	r3, [pc, #500]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ea      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d040      	beq.n	8004fae <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2ca>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d004      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2ca>
 8004f3c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004f40:	4873      	ldr	r0, [pc, #460]	@ (8005110 <HAL_RCC_OscConfig+0x494>)
 8004f42:	f7fd fcd5 	bl	80028f0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d019      	beq.n	8004f82 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b71      	ldr	r3, [pc, #452]	@ (8005114 <HAL_RCC_OscConfig+0x498>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7fe fc2e 	bl	80037b4 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fe fc2a 	bl	80037b4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1ea      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b67      	ldr	r3, [pc, #412]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f000 fc02 	bl	8005784 <RCC_Delay>
 8004f80:	e015      	b.n	8004fae <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f82:	4b64      	ldr	r3, [pc, #400]	@ (8005114 <HAL_RCC_OscConfig+0x498>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fe fc14 	bl	80037b4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fe fc10 	bl	80037b4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1d0      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80bf 	beq.w	800513a <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x366>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x366>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d004      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x366>
 8004fd8:	f240 210f 	movw	r1, #527	@ 0x20f
 8004fdc:	484c      	ldr	r0, [pc, #304]	@ (8005110 <HAL_RCC_OscConfig+0x494>)
 8004fde:	f7fd fc87 	bl	80028f0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	4a46      	ldr	r2, [pc, #280]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	61d3      	str	r3, [r2, #28]
 8004ffa:	4b44      	ldr	r3, [pc, #272]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_RCC_OscConfig+0x49c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b40      	ldr	r3, [pc, #256]	@ (8005118 <HAL_RCC_OscConfig+0x49c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_RCC_OscConfig+0x49c>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fe fbc7 	bl	80037b4 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fe fbc3 	bl	80037b4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	@ 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e183      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <HAL_RCC_OscConfig+0x49c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x3e2>
 8005050:	4b2e      	ldr	r3, [pc, #184]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a2d      	ldr	r2, [pc, #180]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e02d      	b.n	80050ba <HAL_RCC_OscConfig+0x43e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x404>
 8005066:	4b29      	ldr	r3, [pc, #164]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	4a28      	ldr	r2, [pc, #160]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6213      	str	r3, [r2, #32]
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4a25      	ldr	r2, [pc, #148]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	6213      	str	r3, [r2, #32]
 800507e:	e01c      	b.n	80050ba <HAL_RCC_OscConfig+0x43e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b05      	cmp	r3, #5
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_OscConfig+0x426>
 8005088:	4b20      	ldr	r3, [pc, #128]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 800508e:	f043 0304 	orr.w	r3, r3, #4
 8005092:	6213      	str	r3, [r2, #32]
 8005094:	4b1d      	ldr	r3, [pc, #116]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6213      	str	r3, [r2, #32]
 80050a0:	e00b      	b.n	80050ba <HAL_RCC_OscConfig+0x43e>
 80050a2:	4b1a      	ldr	r3, [pc, #104]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a19      	ldr	r2, [pc, #100]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b17      	ldr	r3, [pc, #92]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a16      	ldr	r2, [pc, #88]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fe fb77 	bl	80037b4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fe fb73 	bl	80037b4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e131      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e0:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <HAL_RCC_OscConfig+0x490>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ee      	beq.n	80050ca <HAL_RCC_OscConfig+0x44e>
 80050ec:	e01c      	b.n	8005128 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ee:	f7fe fb61 	bl	80037b4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f4:	e012      	b.n	800511c <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fe fb5d 	bl	80037b4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d909      	bls.n	800511c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e11b      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
 800510c:	40021000 	.word	0x40021000
 8005110:	0800ca9c 	.word	0x0800ca9c
 8005114:	42420480 	.word	0x42420480
 8005118:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511c:	4b8b      	ldr	r3, [pc, #556]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512e:	4b87      	ldr	r3, [pc, #540]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4a86      	ldr	r2, [pc, #536]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 8005134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005138:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_RCC_OscConfig+0x4e0>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d008      	beq.n	800515c <HAL_RCC_OscConfig+0x4e0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d004      	beq.n	800515c <HAL_RCC_OscConfig+0x4e0>
 8005152:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8005156:	487e      	ldr	r0, [pc, #504]	@ (8005350 <HAL_RCC_OscConfig+0x6d4>)
 8005158:	f7fd fbca 	bl	80028f0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80ee 	beq.w	8005342 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005166:	4b79      	ldr	r3, [pc, #484]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b08      	cmp	r3, #8
 8005170:	f000 80ce 	beq.w	8005310 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b02      	cmp	r3, #2
 800517a:	f040 80b2 	bne.w	80052e2 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_OscConfig+0x51e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518e:	d004      	beq.n	800519a <HAL_RCC_OscConfig+0x51e>
 8005190:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8005194:	486e      	ldr	r0, [pc, #440]	@ (8005350 <HAL_RCC_OscConfig+0x6d4>)
 8005196:	f7fd fbab 	bl	80028f0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04a      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051aa:	d045      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051b4:	d040      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051be:	d03b      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051c8:	d036      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051d2:	d031      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80051dc:	d02c      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80051e6:	d027      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051f0:	d022      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80051fa:	d01d      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005204:	d018      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800520e:	d013      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005218:	d00e      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8005222:	d009      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 800522c:	d004      	beq.n	8005238 <HAL_RCC_OscConfig+0x5bc>
 800522e:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8005232:	4847      	ldr	r0, [pc, #284]	@ (8005350 <HAL_RCC_OscConfig+0x6d4>)
 8005234:	f7fd fb5c 	bl	80028f0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b46      	ldr	r3, [pc, #280]	@ (8005354 <HAL_RCC_OscConfig+0x6d8>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523e:	f7fe fab9 	bl	80037b4 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe fab5 	bl	80037b4 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e075      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005258:	4b3c      	ldr	r3, [pc, #240]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d116      	bne.n	800529c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCC_OscConfig+0x60e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800527e:	d004      	beq.n	800528a <HAL_RCC_OscConfig+0x60e>
 8005280:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8005284:	4832      	ldr	r0, [pc, #200]	@ (8005350 <HAL_RCC_OscConfig+0x6d4>)
 8005286:	f7fd fb33 	bl	80028f0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800528a:	4b30      	ldr	r3, [pc, #192]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	492d      	ldr	r1, [pc, #180]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a19      	ldr	r1, [r3, #32]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	430b      	orrs	r3, r1
 80052ae:	4927      	ldr	r1, [pc, #156]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b4:	4b27      	ldr	r3, [pc, #156]	@ (8005354 <HAL_RCC_OscConfig+0x6d8>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fe fa7b 	bl	80037b4 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fe fa77 	bl	80037b4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e037      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052d4:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x646>
 80052e0:	e02f      	b.n	8005342 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <HAL_RCC_OscConfig+0x6d8>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fa64 	bl	80037b4 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fe fa60 	bl	80037b4 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e020      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005302:	4b12      	ldr	r3, [pc, #72]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x674>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e013      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <HAL_RCC_OscConfig+0x6d0>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	0800ca9c 	.word	0x0800ca9c
 8005354:	42420060 	.word	0x42420060

08005358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e176      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d116      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x4e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d110      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x4e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x4e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x4e>
 800539c:	f240 3136 	movw	r1, #822	@ 0x336
 80053a0:	4874      	ldr	r0, [pc, #464]	@ (8005574 <HAL_RCC_ClockConfig+0x21c>)
 80053a2:	f7fd faa5 	bl	80028f0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x6a>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d007      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x6a>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d004      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x6a>
 80053b8:	f240 3137 	movw	r1, #823	@ 0x337
 80053bc:	486d      	ldr	r0, [pc, #436]	@ (8005574 <HAL_RCC_ClockConfig+0x21c>)
 80053be:	f7fd fa97 	bl	80028f0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d910      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d0:	4b69      	ldr	r3, [pc, #420]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f023 0207 	bic.w	r2, r3, #7
 80053d8:	4967      	ldr	r1, [pc, #412]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e0:	4b65      	ldr	r3, [pc, #404]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d001      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e133      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d049      	beq.n	8005492 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800540a:	4b5c      	ldr	r3, [pc, #368]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a5b      	ldr	r2, [pc, #364]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005410:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005414:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005422:	4b56      	ldr	r3, [pc, #344]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4a55      	ldr	r2, [pc, #340]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005428:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800542c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d024      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b80      	cmp	r3, #128	@ 0x80
 800543c:	d020      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b90      	cmp	r3, #144	@ 0x90
 8005444:	d01c      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2ba0      	cmp	r3, #160	@ 0xa0
 800544c:	d018      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2bb0      	cmp	r3, #176	@ 0xb0
 8005454:	d014      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2bc0      	cmp	r3, #192	@ 0xc0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2bd0      	cmp	r3, #208	@ 0xd0
 8005464:	d00c      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2be0      	cmp	r3, #224	@ 0xe0
 800546c:	d008      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2bf0      	cmp	r3, #240	@ 0xf0
 8005474:	d004      	beq.n	8005480 <HAL_RCC_ClockConfig+0x128>
 8005476:	f240 315d 	movw	r1, #861	@ 0x35d
 800547a:	483e      	ldr	r0, [pc, #248]	@ (8005574 <HAL_RCC_ClockConfig+0x21c>)
 800547c:	f7fd fa38 	bl	80028f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b3e      	ldr	r3, [pc, #248]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	493b      	ldr	r1, [pc, #236]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 800548e:	4313      	orrs	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d051      	beq.n	8005542 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x168>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d008      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x168>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d004      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x168>
 80054b6:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80054ba:	482e      	ldr	r0, [pc, #184]	@ (8005574 <HAL_RCC_ClockConfig+0x21c>)
 80054bc:	f7fd fa18 	bl	80028f0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c8:	4b2c      	ldr	r3, [pc, #176]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d115      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0c0      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	4b26      	ldr	r3, [pc, #152]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b4      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f0:	4b22      	ldr	r3, [pc, #136]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0ac      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005500:	4b1e      	ldr	r3, [pc, #120]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 0203 	bic.w	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	491b      	ldr	r1, [pc, #108]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005512:	f7fe f94f 	bl	80037b4 <HAL_GetTick>
 8005516:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005518:	e00a      	b.n	8005530 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551a:	f7fe f94b 	bl	80037b4 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e094      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005530:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_RCC_ClockConfig+0x224>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 020c 	and.w	r2, r3, #12
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	429a      	cmp	r2, r3
 8005540:	d1eb      	bne.n	800551a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d217      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 0207 	bic.w	r2, r3, #7
 8005558:	4907      	ldr	r1, [pc, #28]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <HAL_RCC_ClockConfig+0x220>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d008      	beq.n	8005580 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e073      	b.n	800565a <HAL_RCC_ClockConfig+0x302>
 8005572:	bf00      	nop
 8005574:	0800ca9c 	.word	0x0800ca9c
 8005578:	40022000 	.word	0x40022000
 800557c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d025      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d018      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x26e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800559c:	d013      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x26e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055a6:	d00e      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x26e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055b0:	d009      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x26e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055ba:	d004      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x26e>
 80055bc:	f240 31a2 	movw	r1, #930	@ 0x3a2
 80055c0:	4828      	ldr	r0, [pc, #160]	@ (8005664 <HAL_RCC_ClockConfig+0x30c>)
 80055c2:	f7fd f995 	bl	80028f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c6:	4b28      	ldr	r3, [pc, #160]	@ (8005668 <HAL_RCC_ClockConfig+0x310>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4925      	ldr	r1, [pc, #148]	@ (8005668 <HAL_RCC_ClockConfig+0x310>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d026      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d018      	beq.n	800561e <HAL_RCC_ClockConfig+0x2c6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f4:	d013      	beq.n	800561e <HAL_RCC_ClockConfig+0x2c6>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055fe:	d00e      	beq.n	800561e <HAL_RCC_ClockConfig+0x2c6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005608:	d009      	beq.n	800561e <HAL_RCC_ClockConfig+0x2c6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005612:	d004      	beq.n	800561e <HAL_RCC_ClockConfig+0x2c6>
 8005614:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8005618:	4812      	ldr	r0, [pc, #72]	@ (8005664 <HAL_RCC_ClockConfig+0x30c>)
 800561a:	f7fd f969 	bl	80028f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800561e:	4b12      	ldr	r3, [pc, #72]	@ (8005668 <HAL_RCC_ClockConfig+0x310>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	490e      	ldr	r1, [pc, #56]	@ (8005668 <HAL_RCC_ClockConfig+0x310>)
 800562e:	4313      	orrs	r3, r2
 8005630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005632:	f000 f821 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005636:	4602      	mov	r2, r0
 8005638:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <HAL_RCC_ClockConfig+0x310>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	490a      	ldr	r1, [pc, #40]	@ (800566c <HAL_RCC_ClockConfig+0x314>)
 8005644:	5ccb      	ldrb	r3, [r1, r3]
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	4a09      	ldr	r2, [pc, #36]	@ (8005670 <HAL_RCC_ClockConfig+0x318>)
 800564c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800564e:	4b09      	ldr	r3, [pc, #36]	@ (8005674 <HAL_RCC_ClockConfig+0x31c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe f86c 	bl	8003730 <HAL_InitTick>

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	0800ca9c 	.word	0x0800ca9c
 8005668:	40021000 	.word	0x40021000
 800566c:	0800cbc0 	.word	0x0800cbc0
 8005670:	2000001c 	.word	0x2000001c
 8005674:	20000020 	.word	0x20000020

08005678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005692:	4b1e      	ldr	r3, [pc, #120]	@ (800570c <HAL_RCC_GetSysClockFreq+0x94>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d002      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x30>
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d003      	beq.n	80056ae <HAL_RCC_GetSysClockFreq+0x36>
 80056a6:	e027      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a8:	4b19      	ldr	r3, [pc, #100]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x98>)
 80056aa:	613b      	str	r3, [r7, #16]
      break;
 80056ac:	e027      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	0c9b      	lsrs	r3, r3, #18
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056c6:	4b11      	ldr	r3, [pc, #68]	@ (800570c <HAL_RCC_GetSysClockFreq+0x94>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	0c5b      	lsrs	r3, r3, #17
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	4a11      	ldr	r2, [pc, #68]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056d2:	5cd3      	ldrb	r3, [r2, r3]
 80056d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x98>)
 80056da:	fb03 f202 	mul.w	r2, r3, r2
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e004      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	@ (800571c <HAL_RCC_GetSysClockFreq+0xa4>)
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	613b      	str	r3, [r7, #16]
      break;
 80056f6:	e002      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x98>)
 80056fa:	613b      	str	r3, [r7, #16]
      break;
 80056fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fe:	693b      	ldr	r3, [r7, #16]
}
 8005700:	4618      	mov	r0, r3
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
 8005710:	007a1200 	.word	0x007a1200
 8005714:	0800cbd8 	.word	0x0800cbd8
 8005718:	0800cbe8 	.word	0x0800cbe8
 800571c:	003d0900 	.word	0x003d0900

08005720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b02      	ldr	r3, [pc, #8]	@ (8005730 <HAL_RCC_GetHCLKFreq+0x10>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	2000001c 	.word	0x2000001c

08005734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005738:	f7ff fff2 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4903      	ldr	r1, [pc, #12]	@ (8005758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	0800cbd0 	.word	0x0800cbd0

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005760:	f7ff ffde 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	@ (800577c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	0adb      	lsrs	r3, r3, #11
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	@ (8005780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000
 8005780:	0800cbd0 	.word	0x0800cbd0

08005784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <RCC_Delay+0x34>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <RCC_Delay+0x38>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0a5b      	lsrs	r3, r3, #9
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057a0:	bf00      	nop
  }
  while (Delay --);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	60fa      	str	r2, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f9      	bne.n	80057a0 <RCC_Delay+0x1c>
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	2000001c 	.word	0x2000001c
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11b      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d115      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10f      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800580c:	216a      	movs	r1, #106	@ 0x6a
 800580e:	4873      	ldr	r0, [pc, #460]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005810:	f7fd f86e 	bl	80028f0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8095 	beq.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d012      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005836:	d00d      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005840:	d008      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d003      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800584c:	2172      	movs	r1, #114	@ 0x72
 800584e:	4863      	ldr	r0, [pc, #396]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005850:	f7fd f84e 	bl	80028f0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005854:	4b62      	ldr	r3, [pc, #392]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10d      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	4b5f      	ldr	r3, [pc, #380]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4a5e      	ldr	r2, [pc, #376]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586a:	61d3      	str	r3, [r2, #28]
 800586c:	4b5c      	ldr	r3, [pc, #368]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587c:	4b59      	ldr	r3, [pc, #356]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d118      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005888:	4b56      	ldr	r3, [pc, #344]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a55      	ldr	r2, [pc, #340]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800588e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005894:	f7fd ff8e 	bl	80037b4 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589a:	e008      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589c:	f7fd ff8a 	bl	80037b4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b64      	cmp	r3, #100	@ 0x64
 80058a8:	d901      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e092      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ba:	4b49      	ldr	r3, [pc, #292]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02e      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d027      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d8:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e2:	4b41      	ldr	r3, [pc, #260]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058e8:	4b3f      	ldr	r3, [pc, #252]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058ee:	4a3c      	ldr	r2, [pc, #240]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fd ff59 	bl	80037b4 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fd ff55 	bl	80037b4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e05b      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591c:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ee      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005928:	4b2d      	ldr	r3, [pc, #180]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	492a      	ldr	r1, [pc, #168]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005936:	4313      	orrs	r3, r2
 8005938:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d105      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005940:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800594a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01f      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d012      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005968:	d00d      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005972:	d008      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800597c:	d003      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800597e:	21b7      	movs	r1, #183	@ 0xb7
 8005980:	4816      	ldr	r0, [pc, #88]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005982:	f7fc ffb5 	bl	80028f0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005986:	4b16      	ldr	r3, [pc, #88]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4913      	ldr	r1, [pc, #76]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059ac:	d008      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059b6:	f240 1113 	movw	r1, #275	@ 0x113
 80059ba:	4808      	ldr	r0, [pc, #32]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80059bc:	f7fc ff98 	bl	80028f0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c0:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	4904      	ldr	r1, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	0800cad4 	.word	0x0800cad4
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40007000 	.word	0x40007000
 80059e8:	42420440 	.word	0x42420440

080059ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d118      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d113      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10e      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a3a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005a3e:	4860      	ldr	r0, [pc, #384]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005a40:	f7fc ff56 	bl	80028f0 <assert_failed>

  switch (PeriphClk)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	f200 80af 	bhi.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005b2b 	.word	0x08005b2b
 8005a58:	08005b91 	.word	0x08005b91
 8005a5c:	08005bad 	.word	0x08005bad
 8005a60:	08005b1b 	.word	0x08005b1b
 8005a64:	08005bad 	.word	0x08005bad
 8005a68:	08005bad 	.word	0x08005bad
 8005a6c:	08005bad 	.word	0x08005bad
 8005a70:	08005b23 	.word	0x08005b23
 8005a74:	08005bad 	.word	0x08005bad
 8005a78:	08005bad 	.word	0x08005bad
 8005a7c:	08005bad 	.word	0x08005bad
 8005a80:	08005bad 	.word	0x08005bad
 8005a84:	08005bad 	.word	0x08005bad
 8005a88:	08005bad 	.word	0x08005bad
 8005a8c:	08005bad 	.word	0x08005bad
 8005a90:	08005a95 	.word	0x08005a95
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005a94:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8084 	beq.w	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	0c9b      	lsrs	r3, r3, #18
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	4a45      	ldr	r2, [pc, #276]	@ (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005ab2:	5cd3      	ldrb	r3, [r2, r3]
 8005ab4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ac0:	4b40      	ldr	r3, [pc, #256]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	0c5b      	lsrs	r3, r3, #17
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	4a40      	ldr	r2, [pc, #256]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005acc:	5cd3      	ldrb	r3, [r2, r3]
 8005ace:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005ada:	4a3d      	ldr	r2, [pc, #244]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e004      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4a39      	ldr	r2, [pc, #228]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005af6:	4b33      	ldr	r3, [pc, #204]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b02:	d102      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005b08:	e052      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = (pllclk * 2) / 3;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4a32      	ldr	r2, [pc, #200]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	61bb      	str	r3, [r7, #24]
      break;
 8005b18:	e04a      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005b1a:	f7ff fdad 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005b1e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005b20:	e049      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005b22:	f7ff fda9 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005b26:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005b28:	e045      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005b2a:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3a:	d108      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e01f      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b58:	d109      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSI_VALUE;
 8005b66:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b78:	d11c      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
      {
        frequency = HSE_VALUE / 128U;
 8005b86:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005b8a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005b8c:	e012      	b.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8005b8e:	e011      	b.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b90:	f7ff fde4 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	0b9b      	lsrs	r3, r3, #14
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	61bb      	str	r3, [r7, #24]
      break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    default:
    {
      break;
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 8005bb4:	bf00      	nop
    }
  }
  return (frequency);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	0800cad4 	.word	0x0800cad4
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	0800cbec 	.word	0x0800cbec
 8005bcc:	0800cbfc 	.word	0x0800cbfc
 8005bd0:	007a1200 	.word	0x007a1200
 8005bd4:	003d0900 	.word	0x003d0900
 8005bd8:	aaaaaaab 	.word	0xaaaaaaab

08005bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0b5      	b.n	8005d5a <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5c      	ldr	r2, [pc, #368]	@ (8005d64 <HAL_TIM_Base_Init+0x188>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d027      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8005d68 <HAL_TIM_Base_Init+0x18c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a56      	ldr	r2, [pc, #344]	@ (8005d6c <HAL_TIM_Base_Init+0x190>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a55      	ldr	r2, [pc, #340]	@ (8005d70 <HAL_TIM_Base_Init+0x194>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a53      	ldr	r2, [pc, #332]	@ (8005d74 <HAL_TIM_Base_Init+0x198>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a52      	ldr	r2, [pc, #328]	@ (8005d78 <HAL_TIM_Base_Init+0x19c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a50      	ldr	r2, [pc, #320]	@ (8005d7c <HAL_TIM_Base_Init+0x1a0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_Base_Init+0x6c>
 8005c3e:	f240 1113 	movw	r1, #275	@ 0x113
 8005c42:	484f      	ldr	r0, [pc, #316]	@ (8005d80 <HAL_TIM_Base_Init+0x1a4>)
 8005c44:	f7fc fe54 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d014      	beq.n	8005c7a <HAL_TIM_Base_Init+0x9e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d010      	beq.n	8005c7a <HAL_TIM_Base_Init+0x9e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d00c      	beq.n	8005c7a <HAL_TIM_Base_Init+0x9e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d008      	beq.n	8005c7a <HAL_TIM_Base_Init+0x9e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b60      	cmp	r3, #96	@ 0x60
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIM_Base_Init+0x9e>
 8005c70:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005c74:	4842      	ldr	r0, [pc, #264]	@ (8005d80 <HAL_TIM_Base_Init+0x1a4>)
 8005c76:	f7fc fe3b 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <HAL_TIM_Base_Init+0xc4>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8a:	d009      	beq.n	8005ca0 <HAL_TIM_Base_Init+0xc4>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c94:	d004      	beq.n	8005ca0 <HAL_TIM_Base_Init+0xc4>
 8005c96:	f240 1115 	movw	r1, #277	@ 0x115
 8005c9a:	4839      	ldr	r0, [pc, #228]	@ (8005d80 <HAL_TIM_Base_Init+0x1a4>)
 8005c9c:	f7fc fe28 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_Base_Init+0xd6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb0:	d304      	bcc.n	8005cbc <HAL_TIM_Base_Init+0xe0>
 8005cb2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005cb6:	4832      	ldr	r0, [pc, #200]	@ (8005d80 <HAL_TIM_Base_Init+0x1a4>)
 8005cb8:	f7fc fe1a 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_TIM_Base_Init+0xfa>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b80      	cmp	r3, #128	@ 0x80
 8005cca:	d004      	beq.n	8005cd6 <HAL_TIM_Base_Init+0xfa>
 8005ccc:	f240 1117 	movw	r1, #279	@ 0x117
 8005cd0:	482b      	ldr	r0, [pc, #172]	@ (8005d80 <HAL_TIM_Base_Init+0x1a4>)
 8005cd2:	f7fc fe0d 	bl	80028f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fd fa88 	bl	8003200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f001 fb1c 	bl	8007340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40001000 	.word	0x40001000
 8005d7c:	40001400 	.word	0x40001400
 8005d80:	0800cb10 	.word	0x0800cb10

08005d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a3d      	ldr	r2, [pc, #244]	@ (8005e88 <HAL_TIM_Base_Start_IT+0x104>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e8c <HAL_TIM_Base_Start_IT+0x108>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_TIM_Base_Start_IT+0x10c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a36      	ldr	r2, [pc, #216]	@ (8005e94 <HAL_TIM_Base_Start_IT+0x110>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a35      	ldr	r2, [pc, #212]	@ (8005e98 <HAL_TIM_Base_Start_IT+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a33      	ldr	r2, [pc, #204]	@ (8005e9c <HAL_TIM_Base_Start_IT+0x118>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a32      	ldr	r2, [pc, #200]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0x11c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIM_Base_Start_IT+0x62>
 8005ddc:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8005de0:	4830      	ldr	r0, [pc, #192]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0x120>)
 8005de2:	f7fc fd85 	bl	80028f0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e044      	b.n	8005e80 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1d      	ldr	r2, [pc, #116]	@ (8005e88 <HAL_TIM_Base_Start_IT+0x104>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xc6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e8c <HAL_TIM_Base_Start_IT+0x108>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xc6>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xc6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a17      	ldr	r2, [pc, #92]	@ (8005e90 <HAL_TIM_Base_Start_IT+0x10c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xc6>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	@ (8005e94 <HAL_TIM_Base_Start_IT+0x110>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xc6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a14      	ldr	r2, [pc, #80]	@ (8005e98 <HAL_TIM_Base_Start_IT+0x114>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d111      	bne.n	8005e6e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d010      	beq.n	8005e7e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6c:	e007      	b.n	8005e7e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40001000 	.word	0x40001000
 8005ea0:	40001400 	.word	0x40001400
 8005ea4:	0800cb10 	.word	0x0800cb10

08005ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0b5      	b.n	8006026 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a5c      	ldr	r2, [pc, #368]	@ (8006030 <HAL_TIM_PWM_Init+0x188>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d027      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a5a      	ldr	r2, [pc, #360]	@ (8006034 <HAL_TIM_PWM_Init+0x18c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed6:	d01d      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a56      	ldr	r2, [pc, #344]	@ (8006038 <HAL_TIM_PWM_Init+0x190>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a55      	ldr	r2, [pc, #340]	@ (800603c <HAL_TIM_PWM_Init+0x194>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a53      	ldr	r2, [pc, #332]	@ (8006040 <HAL_TIM_PWM_Init+0x198>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a52      	ldr	r2, [pc, #328]	@ (8006044 <HAL_TIM_PWM_Init+0x19c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a50      	ldr	r2, [pc, #320]	@ (8006048 <HAL_TIM_PWM_Init+0x1a0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_TIM_PWM_Init+0x6c>
 8005f0a:	f240 512c 	movw	r1, #1324	@ 0x52c
 8005f0e:	484f      	ldr	r0, [pc, #316]	@ (800604c <HAL_TIM_PWM_Init+0x1a4>)
 8005f10:	f7fc fcee 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d014      	beq.n	8005f46 <HAL_TIM_PWM_Init+0x9e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d010      	beq.n	8005f46 <HAL_TIM_PWM_Init+0x9e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d00c      	beq.n	8005f46 <HAL_TIM_PWM_Init+0x9e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d008      	beq.n	8005f46 <HAL_TIM_PWM_Init+0x9e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b60      	cmp	r3, #96	@ 0x60
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIM_PWM_Init+0x9e>
 8005f3c:	f240 512d 	movw	r1, #1325	@ 0x52d
 8005f40:	4842      	ldr	r0, [pc, #264]	@ (800604c <HAL_TIM_PWM_Init+0x1a4>)
 8005f42:	f7fc fcd5 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <HAL_TIM_PWM_Init+0xc4>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f56:	d009      	beq.n	8005f6c <HAL_TIM_PWM_Init+0xc4>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f60:	d004      	beq.n	8005f6c <HAL_TIM_PWM_Init+0xc4>
 8005f62:	f240 512e 	movw	r1, #1326	@ 0x52e
 8005f66:	4839      	ldr	r0, [pc, #228]	@ (800604c <HAL_TIM_PWM_Init+0x1a4>)
 8005f68:	f7fc fcc2 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_TIM_PWM_Init+0xd6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7c:	d304      	bcc.n	8005f88 <HAL_TIM_PWM_Init+0xe0>
 8005f7e:	f240 512f 	movw	r1, #1327	@ 0x52f
 8005f82:	4832      	ldr	r0, [pc, #200]	@ (800604c <HAL_TIM_PWM_Init+0x1a4>)
 8005f84:	f7fc fcb4 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_TIM_PWM_Init+0xfa>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b80      	cmp	r3, #128	@ 0x80
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_PWM_Init+0xfa>
 8005f98:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8005f9c:	482b      	ldr	r0, [pc, #172]	@ (800604c <HAL_TIM_PWM_Init+0x1a4>)
 8005f9e:	f7fc fca7 	bl	80028f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f84a 	bl	8006050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f001 f9b6 	bl	8007340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40001000 	.word	0x40001000
 8006048:	40001400 	.word	0x40001400
 800604c:	0800cb10 	.word	0x0800cb10

08006050 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
	...

08006064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a8a      	ldr	r2, [pc, #552]	@ (800629c <HAL_TIM_PWM_Start+0x238>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10b      	bne.n	8006090 <HAL_TIM_PWM_Start+0x2c>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d062      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d05f      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b08      	cmp	r3, #8
 8006088:	d05c      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	d059      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a82      	ldr	r2, [pc, #520]	@ (80062a0 <HAL_TIM_PWM_Start+0x23c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10b      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x4e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d051      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d04e      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d04b      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b0c      	cmp	r3, #12
 80060b0:	d048      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ba:	d10b      	bne.n	80060d4 <HAL_TIM_PWM_Start+0x70>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d040      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d03d      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d03a      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d037      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a72      	ldr	r2, [pc, #456]	@ (80062a4 <HAL_TIM_PWM_Start+0x240>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10b      	bne.n	80060f6 <HAL_TIM_PWM_Start+0x92>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02f      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d02c      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d029      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b0c      	cmp	r3, #12
 80060f4:	d026      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6b      	ldr	r2, [pc, #428]	@ (80062a8 <HAL_TIM_PWM_Start+0x244>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10b      	bne.n	8006118 <HAL_TIM_PWM_Start+0xb4>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01e      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d01b      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b08      	cmp	r3, #8
 8006110:	d018      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	d015      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a63      	ldr	r2, [pc, #396]	@ (80062ac <HAL_TIM_PWM_Start+0x248>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10b      	bne.n	800613a <HAL_TIM_PWM_Start+0xd6>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00d      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b04      	cmp	r3, #4
 800612c:	d00a      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d007      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d004      	beq.n	8006144 <HAL_TIM_PWM_Start+0xe0>
 800613a:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800613e:	485c      	ldr	r0, [pc, #368]	@ (80062b0 <HAL_TIM_PWM_Start+0x24c>)
 8006140:	f7fc fbd6 	bl	80028f0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_TIM_PWM_Start+0xfa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	bf14      	ite	ne
 8006156:	2301      	movne	r3, #1
 8006158:	2300      	moveq	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e022      	b.n	80061a4 <HAL_TIM_PWM_Start+0x140>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d109      	bne.n	8006178 <HAL_TIM_PWM_Start+0x114>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e015      	b.n	80061a4 <HAL_TIM_PWM_Start+0x140>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b08      	cmp	r3, #8
 800617c:	d109      	bne.n	8006192 <HAL_TIM_PWM_Start+0x12e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b01      	cmp	r3, #1
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e008      	b.n	80061a4 <HAL_TIM_PWM_Start+0x140>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e072      	b.n	8006292 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_PWM_Start+0x158>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ba:	e013      	b.n	80061e4 <HAL_TIM_PWM_Start+0x180>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d104      	bne.n	80061cc <HAL_TIM_PWM_Start+0x168>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ca:	e00b      	b.n	80061e4 <HAL_TIM_PWM_Start+0x180>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d104      	bne.n	80061dc <HAL_TIM_PWM_Start+0x178>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061da:	e003      	b.n	80061e4 <HAL_TIM_PWM_Start+0x180>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fbf1 	bl	80079d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a29      	ldr	r2, [pc, #164]	@ (800629c <HAL_TIM_PWM_Start+0x238>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_PWM_Start+0x1a2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a27      	ldr	r2, [pc, #156]	@ (80062a0 <HAL_TIM_PWM_Start+0x23c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d101      	bne.n	800620a <HAL_TIM_PWM_Start+0x1a6>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <HAL_TIM_PWM_Start+0x1a8>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800621e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1d      	ldr	r2, [pc, #116]	@ (800629c <HAL_TIM_PWM_Start+0x238>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <HAL_TIM_PWM_Start+0x1f8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1c      	ldr	r2, [pc, #112]	@ (80062a0 <HAL_TIM_PWM_Start+0x23c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <HAL_TIM_PWM_Start+0x1f8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623c:	d00e      	beq.n	800625c <HAL_TIM_PWM_Start+0x1f8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a18      	ldr	r2, [pc, #96]	@ (80062a4 <HAL_TIM_PWM_Start+0x240>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <HAL_TIM_PWM_Start+0x1f8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <HAL_TIM_PWM_Start+0x244>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIM_PWM_Start+0x1f8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a15      	ldr	r2, [pc, #84]	@ (80062ac <HAL_TIM_PWM_Start+0x248>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d111      	bne.n	8006280 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b06      	cmp	r3, #6
 800626c:	d010      	beq.n	8006290 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627e:	e007      	b.n	8006290 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	0800cb10 	.word	0x0800cb10

080062b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e194      	b.n	80065f2 <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7f      	ldr	r2, [pc, #508]	@ (80064cc <HAL_TIM_Encoder_Init+0x218>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01d      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a7e      	ldr	r2, [pc, #504]	@ (80064d0 <HAL_TIM_Encoder_Init+0x21c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e4:	d013      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7a      	ldr	r2, [pc, #488]	@ (80064d4 <HAL_TIM_Encoder_Init+0x220>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a78      	ldr	r2, [pc, #480]	@ (80064d8 <HAL_TIM_Encoder_Init+0x224>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a77      	ldr	r2, [pc, #476]	@ (80064dc <HAL_TIM_Encoder_Init+0x228>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIM_Encoder_Init+0x5a>
 8006304:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8006308:	4875      	ldr	r0, [pc, #468]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800630a:	f7fc faf1 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d014      	beq.n	8006340 <HAL_TIM_Encoder_Init+0x8c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b10      	cmp	r3, #16
 800631c:	d010      	beq.n	8006340 <HAL_TIM_Encoder_Init+0x8c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b20      	cmp	r3, #32
 8006324:	d00c      	beq.n	8006340 <HAL_TIM_Encoder_Init+0x8c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	d008      	beq.n	8006340 <HAL_TIM_Encoder_Init+0x8c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b60      	cmp	r3, #96	@ 0x60
 8006334:	d004      	beq.n	8006340 <HAL_TIM_Encoder_Init+0x8c>
 8006336:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 800633a:	4869      	ldr	r0, [pc, #420]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800633c:	f7fc fad8 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <HAL_TIM_Encoder_Init+0xb2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006350:	d009      	beq.n	8006366 <HAL_TIM_Encoder_Init+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800635a:	d004      	beq.n	8006366 <HAL_TIM_Encoder_Init+0xb2>
 800635c:	f640 31da 	movw	r1, #3034	@ 0xbda
 8006360:	485f      	ldr	r0, [pc, #380]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 8006362:	f7fc fac5 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <HAL_TIM_Encoder_Init+0xcc>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b80      	cmp	r3, #128	@ 0x80
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Encoder_Init+0xcc>
 8006376:	f640 31db 	movw	r1, #3035	@ 0xbdb
 800637a:	4859      	ldr	r0, [pc, #356]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800637c:	f7fc fab8 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d00c      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0xee>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d008      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0xee>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d004      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0xee>
 8006398:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 800639c:	4850      	ldr	r0, [pc, #320]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800639e:	f7fc faa7 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d00c      	beq.n	80063c4 <HAL_TIM_Encoder_Init+0x110>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d008      	beq.n	80063c4 <HAL_TIM_Encoder_Init+0x110>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_Encoder_Init+0x110>
 80063ba:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 80063be:	4848      	ldr	r0, [pc, #288]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 80063c0:	f7fc fa96 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d00c      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x132>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d008      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x132>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d004      	beq.n	80063e6 <HAL_TIM_Encoder_Init+0x132>
 80063dc:	f640 31de 	movw	r1, #3038	@ 0xbde
 80063e0:	483f      	ldr	r0, [pc, #252]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 80063e2:	f7fc fa85 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_TIM_Encoder_Init+0x14c>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d004      	beq.n	8006400 <HAL_TIM_Encoder_Init+0x14c>
 80063f6:	f640 31df 	movw	r1, #3039	@ 0xbdf
 80063fa:	4839      	ldr	r0, [pc, #228]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 80063fc:	f7fc fa78 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_TIM_Encoder_Init+0x166>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_TIM_Encoder_Init+0x166>
 8006410:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8006414:	4832      	ldr	r0, [pc, #200]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 8006416:	f7fc fa6b 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d010      	beq.n	8006444 <HAL_TIM_Encoder_Init+0x190>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_Encoder_Init+0x190>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b08      	cmp	r3, #8
 8006430:	d008      	beq.n	8006444 <HAL_TIM_Encoder_Init+0x190>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d004      	beq.n	8006444 <HAL_TIM_Encoder_Init+0x190>
 800643a:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 800643e:	4828      	ldr	r0, [pc, #160]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 8006440:	f7fc fa56 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <HAL_TIM_Encoder_Init+0x1ba>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d00c      	beq.n	800646e <HAL_TIM_Encoder_Init+0x1ba>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d008      	beq.n	800646e <HAL_TIM_Encoder_Init+0x1ba>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d004      	beq.n	800646e <HAL_TIM_Encoder_Init+0x1ba>
 8006464:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8006468:	481d      	ldr	r0, [pc, #116]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800646a:	f7fc fa41 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b0f      	cmp	r3, #15
 8006474:	d904      	bls.n	8006480 <HAL_TIM_Encoder_Init+0x1cc>
 8006476:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800647a:	4819      	ldr	r0, [pc, #100]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800647c:	f7fc fa38 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	2b0f      	cmp	r3, #15
 8006486:	d904      	bls.n	8006492 <HAL_TIM_Encoder_Init+0x1de>
 8006488:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800648c:	4814      	ldr	r0, [pc, #80]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 800648e:	f7fc fa2f 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_Encoder_Init+0x1f0>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a2:	d304      	bcc.n	80064ae <HAL_TIM_Encoder_Init+0x1fa>
 80064a4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80064a8:	480d      	ldr	r0, [pc, #52]	@ (80064e0 <HAL_TIM_Encoder_Init+0x22c>)
 80064aa:	f7fc fa21 	bl	80028f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d114      	bne.n	80064e4 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fc ff06 	bl	80032d4 <HAL_TIM_Encoder_MspInit>
 80064c8:	e00c      	b.n	80064e4 <HAL_TIM_Encoder_Init+0x230>
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40000400 	.word	0x40000400
 80064d8:	40000800 	.word	0x40000800
 80064dc:	40000c00 	.word	0x40000c00
 80064e0:	0800cb10 	.word	0x0800cb10
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fa:	f023 0307 	bic.w	r3, r3, #7
 80064fe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 ff18 	bl	8007340 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	4313      	orrs	r3, r2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006556:	f023 030c 	bic.w	r3, r3, #12
 800655a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	4313      	orrs	r3, r2
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	011a      	lsls	r2, r3, #4
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	4313      	orrs	r3, r2
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006594:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	4313      	orrs	r3, r2
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop

080065fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800660c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006614:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800661c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006624:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4d      	ldr	r2, [pc, #308]	@ (8006760 <HAL_TIM_Encoder_Start+0x164>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d01d      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a4b      	ldr	r2, [pc, #300]	@ (8006764 <HAL_TIM_Encoder_Start+0x168>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d018      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006642:	d013      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a47      	ldr	r2, [pc, #284]	@ (8006768 <HAL_TIM_Encoder_Start+0x16c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a46      	ldr	r2, [pc, #280]	@ (800676c <HAL_TIM_Encoder_Start+0x170>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a44      	ldr	r2, [pc, #272]	@ (8006770 <HAL_TIM_Encoder_Start+0x174>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_Encoder_Start+0x70>
 8006662:	f640 4195 	movw	r1, #3221	@ 0xc95
 8006666:	4843      	ldr	r0, [pc, #268]	@ (8006774 <HAL_TIM_Encoder_Start+0x178>)
 8006668:	f7fc f942 	bl	80028f0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d110      	bne.n	8006694 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006678:	7b7b      	ldrb	r3, [r7, #13]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d001      	beq.n	8006682 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e069      	b.n	8006756 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006692:	e031      	b.n	80066f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b04      	cmp	r3, #4
 8006698:	d110      	bne.n	80066bc <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d102      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a0:	7b3b      	ldrb	r3, [r7, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e055      	b.n	8006756 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066ba:	e01d      	b.n	80066f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d108      	bne.n	80066d4 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d105      	bne.n	80066d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c8:	7b7b      	ldrb	r3, [r7, #13]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d102      	bne.n	80066d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ce:	7b3b      	ldrb	r3, [r7, #12]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d001      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e03e      	b.n	8006756 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_Encoder_Start+0x10a>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b04      	cmp	r3, #4
 8006702:	d008      	beq.n	8006716 <HAL_TIM_Encoder_Start+0x11a>
 8006704:	e00f      	b.n	8006726 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2201      	movs	r2, #1
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f960 	bl	80079d4 <TIM_CCxChannelCmd>
      break;
 8006714:	e016      	b.n	8006744 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	2104      	movs	r1, #4
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f958 	bl	80079d4 <TIM_CCxChannelCmd>
      break;
 8006724:	e00e      	b.n	8006744 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f950 	bl	80079d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	2104      	movs	r1, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f001 f949 	bl	80079d4 <TIM_CCxChannelCmd>
      break;
 8006742:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	0800cb10 	.word	0x0800cb10

08006778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0202 	mvn.w	r2, #2
 80067a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fda5 	bl	800730a <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fd98 	bl	80072f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fda7 	bl	800731c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0204 	mvn.w	r2, #4
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fd7b 	bl	800730a <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fd6e 	bl	80072f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fd7d 	bl	800731c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b08      	cmp	r3, #8
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0208 	mvn.w	r2, #8
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fd51 	bl	800730a <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fd44 	bl	80072f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd53 	bl	800731c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0210 	mvn.w	r2, #16
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fd27 	bl	800730a <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fd1a 	bl	80072f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fd29 	bl	800731c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0201 	mvn.w	r2, #1
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fb fdb8 	bl	800246c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006906:	2b80      	cmp	r3, #128	@ 0x80
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b80      	cmp	r3, #128	@ 0x80
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fa5b 	bl	8007dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006932:	2b40      	cmp	r3, #64	@ 0x40
 8006934:	d10e      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006940:	2b40      	cmp	r3, #64	@ 0x40
 8006942:	d107      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fced 	bl	800732e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	d10e      	bne.n	8006980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d107      	bne.n	8006980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0220 	mvn.w	r2, #32
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 fa26 	bl	8007dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d010      	beq.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d00d      	beq.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d00a      	beq.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b0c      	cmp	r3, #12
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80069b4:	d004      	beq.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80069b6:	f241 017e 	movw	r1, #4222	@ 0x107e
 80069ba:	4890      	ldr	r0, [pc, #576]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80069bc:	f7fb ff98 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b60      	cmp	r3, #96	@ 0x60
 80069c6:	d008      	beq.n	80069da <HAL_TIM_PWM_ConfigChannel+0x52>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b70      	cmp	r3, #112	@ 0x70
 80069ce:	d004      	beq.n	80069da <HAL_TIM_PWM_ConfigChannel+0x52>
 80069d0:	f241 017f 	movw	r1, #4223	@ 0x107f
 80069d4:	4889      	ldr	r0, [pc, #548]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80069d6:	f7fb ff8b 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80069ea:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 80069ee:	4883      	ldr	r0, [pc, #524]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80069f0:	f7fb ff7e 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d004      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a04:	f241 0181 	movw	r1, #4225	@ 0x1081
 8006a08:	487c      	ldr	r0, [pc, #496]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006a0a:	f7fb ff71 	bl	80028f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x94>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e147      	b.n	8006cac <HAL_TIM_PWM_ConfigChannel+0x324>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	f200 8138 	bhi.w	8006c9c <HAL_TIM_PWM_ConfigChannel+0x314>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006c9d 	.word	0x08006c9d
 8006a3c:	08006c9d 	.word	0x08006c9d
 8006a40:	08006c9d 	.word	0x08006c9d
 8006a44:	08006aef 	.word	0x08006aef
 8006a48:	08006c9d 	.word	0x08006c9d
 8006a4c:	08006c9d 	.word	0x08006c9d
 8006a50:	08006c9d 	.word	0x08006c9d
 8006a54:	08006b77 	.word	0x08006b77
 8006a58:	08006c9d 	.word	0x08006c9d
 8006a5c:	08006c9d 	.word	0x08006c9d
 8006a60:	08006c9d 	.word	0x08006c9d
 8006a64:	08006c15 	.word	0x08006c15
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a64      	ldr	r2, [pc, #400]	@ (8006c00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a63      	ldr	r2, [pc, #396]	@ (8006c04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8006c08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	@ (8006c0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8006c10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x126>
 8006aa4:	f241 018b 	movw	r1, #4235	@ 0x108b
 8006aa8:	4854      	ldr	r0, [pc, #336]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006aaa:	f7fb ff21 	bl	80028f0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fcbd 	bl	8007434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0208 	orr.w	r2, r2, #8
 8006ac8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0204 	bic.w	r2, r2, #4
 8006ad8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6999      	ldr	r1, [r3, #24]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	619a      	str	r2, [r3, #24]
      break;
 8006aec:	e0d9      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a43      	ldr	r2, [pc, #268]	@ (8006c00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d01d      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a41      	ldr	r2, [pc, #260]	@ (8006c04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0a:	d013      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3d      	ldr	r2, [pc, #244]	@ (8006c08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3a      	ldr	r2, [pc, #232]	@ (8006c10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006b2a:	f241 019c 	movw	r1, #4252	@ 0x109c
 8006b2e:	4833      	ldr	r0, [pc, #204]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006b30:	f7fb fede 	bl	80028f0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fd14 	bl	8007568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      break;
 8006b74:	e095      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d01d      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	@ (8006c04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x234>
 8006bb2:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 8006bb6:	4811      	ldr	r0, [pc, #68]	@ (8006bfc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006bb8:	f7fb fe9a 	bl	80028f0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd6e 	bl	80076a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0204 	bic.w	r2, r2, #4
 8006be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69d9      	ldr	r1, [r3, #28]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	61da      	str	r2, [r3, #28]
      break;
 8006bfa:	e052      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006bfc:	0800cb10 	.word	0x0800cb10
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40013400 	.word	0x40013400
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a26      	ldr	r2, [pc, #152]	@ (8006cb4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01d      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a25      	ldr	r2, [pc, #148]	@ (8006cb8 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d018      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c30:	d013      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a21      	ldr	r2, [pc, #132]	@ (8006cbc <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d009      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d004      	beq.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8006c50:	f241 01be 	movw	r1, #4286	@ 0x10be
 8006c54:	481c      	ldr	r0, [pc, #112]	@ (8006cc8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006c56:	f7fb fe4b 	bl	80028f0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fdbd 	bl	80077e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69d9      	ldr	r1, [r3, #28]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	021a      	lsls	r2, r3, #8
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	61da      	str	r2, [r3, #28]
      break;
 8006c9a:	e002      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	0800cb10 	.word	0x0800cb10

08006ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e2f6      	b.n	80072d6 <HAL_TIM_ConfigClockSource+0x60a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d00:	d029      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b70      	cmp	r3, #112	@ 0x70
 8006d08:	d025      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d12:	d020      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d01c      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b50      	cmp	r3, #80	@ 0x50
 8006d22:	d018      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b60      	cmp	r3, #96	@ 0x60
 8006d2a:	d014      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d00c      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d008      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b30      	cmp	r3, #48	@ 0x30
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x8a>
 8006d4c:	f241 41be 	movw	r1, #5310	@ 0x14be
 8006d50:	487c      	ldr	r0, [pc, #496]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006d52:	f7fb fdcd 	bl	80028f0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7e:	f000 80f1 	beq.w	8006f64 <HAL_TIM_ConfigClockSource+0x298>
 8006d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d86:	f200 8299 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8e:	d02d      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0x120>
 8006d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d94:	f200 8292 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006d98:	2b70      	cmp	r3, #112	@ 0x70
 8006d9a:	d05d      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0x18c>
 8006d9c:	2b70      	cmp	r3, #112	@ 0x70
 8006d9e:	f200 828d 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006da2:	2b60      	cmp	r3, #96	@ 0x60
 8006da4:	f000 81a5 	beq.w	80070f2 <HAL_TIM_ConfigClockSource+0x426>
 8006da8:	2b60      	cmp	r3, #96	@ 0x60
 8006daa:	f200 8287 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006dae:	2b50      	cmp	r3, #80	@ 0x50
 8006db0:	f000 8149 	beq.w	8007046 <HAL_TIM_ConfigClockSource+0x37a>
 8006db4:	2b50      	cmp	r3, #80	@ 0x50
 8006db6:	f200 8281 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	f000 81fc 	beq.w	80071b8 <HAL_TIM_ConfigClockSource+0x4ec>
 8006dc0:	2b40      	cmp	r3, #64	@ 0x40
 8006dc2:	f200 827b 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006dc6:	2b30      	cmp	r3, #48	@ 0x30
 8006dc8:	f000 824c 	beq.w	8007264 <HAL_TIM_ConfigClockSource+0x598>
 8006dcc:	2b30      	cmp	r3, #48	@ 0x30
 8006dce:	f200 8275 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	f000 8246 	beq.w	8007264 <HAL_TIM_ConfigClockSource+0x598>
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	f200 826f 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8240 	beq.w	8007264 <HAL_TIM_ConfigClockSource+0x598>
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	f000 823d 	beq.w	8007264 <HAL_TIM_ConfigClockSource+0x598>
 8006dea:	e267      	b.n	80072bc <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a55      	ldr	r2, [pc, #340]	@ (8006f48 <HAL_TIM_ConfigClockSource+0x27c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	f000 8265 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a53      	ldr	r2, [pc, #332]	@ (8006f4c <HAL_TIM_ConfigClockSource+0x280>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	f000 825f 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0c:	f000 8259 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a4e      	ldr	r2, [pc, #312]	@ (8006f50 <HAL_TIM_ConfigClockSource+0x284>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f000 8253 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a4c      	ldr	r2, [pc, #304]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x288>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f000 824d 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x28c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	f000 8247 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a48      	ldr	r2, [pc, #288]	@ (8006f5c <HAL_TIM_ConfigClockSource+0x290>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f000 8241 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a46      	ldr	r2, [pc, #280]	@ (8006f60 <HAL_TIM_ConfigClockSource+0x294>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 823b 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8006e4c:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8006e50:	483c      	ldr	r0, [pc, #240]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006e52:	f7fb fd4d 	bl	80028f0 <assert_failed>
      break;
 8006e56:	e234      	b.n	80072c2 <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f48 <HAL_TIM_ConfigClockSource+0x27c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a39      	ldr	r2, [pc, #228]	@ (8006f4c <HAL_TIM_ConfigClockSource+0x280>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e74:	d013      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a35      	ldr	r2, [pc, #212]	@ (8006f50 <HAL_TIM_ConfigClockSource+0x284>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a33      	ldr	r2, [pc, #204]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x288>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a32      	ldr	r2, [pc, #200]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x28c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x1d2>
 8006e94:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8006e98:	482a      	ldr	r0, [pc, #168]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006e9a:	f7fb fd29 	bl	80028f0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d013      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x202>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eae:	d00e      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x202>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb8:	d009      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x202>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x202>
 8006ec4:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8006ec8:	481e      	ldr	r0, [pc, #120]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006eca:	f7fb fd11 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed6:	d014      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x236>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x236>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00c      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x236>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d008      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x236>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b0a      	cmp	r3, #10
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x236>
 8006ef8:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8006efc:	4811      	ldr	r0, [pc, #68]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006efe:	f7fb fcf7 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d904      	bls.n	8006f14 <HAL_TIM_ConfigClockSource+0x248>
 8006f0a:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8006f0e:	480d      	ldr	r0, [pc, #52]	@ (8006f44 <HAL_TIM_ConfigClockSource+0x278>)
 8006f10:	f7fb fcee 	bl	80028f0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f24:	f000 fd37 	bl	8007996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]
      break;
 8006f40:	e1c0      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
 8006f42:	bf00      	nop
 8006f44:	0800cb10 	.word	0x0800cb10
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40001000 	.word	0x40001000
 8006f60:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a8d      	ldr	r2, [pc, #564]	@ (80071a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01d      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a8c      	ldr	r2, [pc, #560]	@ (80071a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d018      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f80:	d013      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a88      	ldr	r2, [pc, #544]	@ (80071a8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a86      	ldr	r2, [pc, #536]	@ (80071ac <HAL_TIM_ConfigClockSource+0x4e0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a85      	ldr	r2, [pc, #532]	@ (80071b0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x2de>
 8006fa0:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8006fa4:	4883      	ldr	r0, [pc, #524]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006fa6:	f7fb fca3 	bl	80028f0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d013      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x30e>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fba:	d00e      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x30e>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc4:	d009      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x30e>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fce:	d004      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x30e>
 8006fd0:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8006fd4:	4877      	ldr	r0, [pc, #476]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006fd6:	f7fb fc8b 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe2:	d014      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x342>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x342>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00c      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x342>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d008      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x342>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b0a      	cmp	r3, #10
 8007002:	d004      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x342>
 8007004:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8007008:	486a      	ldr	r0, [pc, #424]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 800700a:	f7fb fc71 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b0f      	cmp	r3, #15
 8007014:	d904      	bls.n	8007020 <HAL_TIM_ConfigClockSource+0x354>
 8007016:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 800701a:	4866      	ldr	r0, [pc, #408]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 800701c:	f7fb fc68 	bl	80028f0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007030:	f000 fcb1 	bl	8007996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007042:	609a      	str	r2, [r3, #8]
      break;
 8007044:	e13e      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a55      	ldr	r2, [pc, #340]	@ (80071a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d01d      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a53      	ldr	r2, [pc, #332]	@ (80071a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d018      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007062:	d013      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a4f      	ldr	r2, [pc, #316]	@ (80071a8 <HAL_TIM_ConfigClockSource+0x4dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4e      	ldr	r2, [pc, #312]	@ (80071ac <HAL_TIM_ConfigClockSource+0x4e0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d009      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a4c      	ldr	r2, [pc, #304]	@ (80071b0 <HAL_TIM_ConfigClockSource+0x4e4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x3c0>
 8007082:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8007086:	484b      	ldr	r0, [pc, #300]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007088:	f7fb fc32 	bl	80028f0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007094:	d014      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d010      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x3f4>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00c      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x3f4>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d008      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x3f4>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b0a      	cmp	r3, #10
 80070b4:	d004      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0x3f4>
 80070b6:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 80070ba:	483e      	ldr	r0, [pc, #248]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 80070bc:	f7fb fc18 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b0f      	cmp	r3, #15
 80070c6:	d904      	bls.n	80070d2 <HAL_TIM_ConfigClockSource+0x406>
 80070c8:	f241 5101 	movw	r1, #5377	@ 0x1501
 80070cc:	4839      	ldr	r0, [pc, #228]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 80070ce:	f7fb fc0f 	bl	80028f0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 fbe2 	bl	80078a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2150      	movs	r1, #80	@ 0x50
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fc39 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 80070f0:	e0e8      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2a      	ldr	r2, [pc, #168]	@ (80071a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01d      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a28      	ldr	r2, [pc, #160]	@ (80071a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710e:	d013      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a24      	ldr	r2, [pc, #144]	@ (80071a8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a23      	ldr	r2, [pc, #140]	@ (80071ac <HAL_TIM_ConfigClockSource+0x4e0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a21      	ldr	r2, [pc, #132]	@ (80071b0 <HAL_TIM_ConfigClockSource+0x4e4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x46c>
 800712e:	f241 510d 	movw	r1, #5389	@ 0x150d
 8007132:	4820      	ldr	r0, [pc, #128]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007134:	f7fb fbdc 	bl	80028f0 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007140:	d014      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x4a0>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x4a0>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00c      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x4a0>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d008      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x4a0>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b0a      	cmp	r3, #10
 8007160:	d004      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x4a0>
 8007162:	f241 5110 	movw	r1, #5392	@ 0x1510
 8007166:	4813      	ldr	r0, [pc, #76]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007168:	f7fb fbc2 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b0f      	cmp	r3, #15
 8007172:	d904      	bls.n	800717e <HAL_TIM_ConfigClockSource+0x4b2>
 8007174:	f241 5111 	movw	r1, #5393	@ 0x1511
 8007178:	480e      	ldr	r0, [pc, #56]	@ (80071b4 <HAL_TIM_ConfigClockSource+0x4e8>)
 800717a:	f7fb fbb9 	bl	80028f0 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800718a:	461a      	mov	r2, r3
 800718c:	f000 fbba 	bl	8007904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2160      	movs	r1, #96	@ 0x60
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fbe3 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 800719c:	e092      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	0800cb10 	.word	0x0800cb10
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a48      	ldr	r2, [pc, #288]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x614>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a47      	ldr	r2, [pc, #284]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x618>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d4:	d013      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a43      	ldr	r2, [pc, #268]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x61c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a41      	ldr	r2, [pc, #260]	@ (80072ec <HAL_TIM_ConfigClockSource+0x620>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a40      	ldr	r2, [pc, #256]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x624>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x532>
 80071f4:	f241 511d 	movw	r1, #5405	@ 0x151d
 80071f8:	483e      	ldr	r0, [pc, #248]	@ (80072f4 <HAL_TIM_ConfigClockSource+0x628>)
 80071fa:	f7fb fb79 	bl	80028f0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007206:	d014      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x566>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x566>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x566>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d008      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x566>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b0a      	cmp	r3, #10
 8007226:	d004      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x566>
 8007228:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800722c:	4831      	ldr	r0, [pc, #196]	@ (80072f4 <HAL_TIM_ConfigClockSource+0x628>)
 800722e:	f7fb fb5f 	bl	80028f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b0f      	cmp	r3, #15
 8007238:	d904      	bls.n	8007244 <HAL_TIM_ConfigClockSource+0x578>
 800723a:	f241 5121 	movw	r1, #5409	@ 0x1521
 800723e:	482d      	ldr	r0, [pc, #180]	@ (80072f4 <HAL_TIM_ConfigClockSource+0x628>)
 8007240:	f7fb fb56 	bl	80028f0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007250:	461a      	mov	r2, r3
 8007252:	f000 fb29 	bl	80078a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2140      	movs	r1, #64	@ 0x40
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fb80 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 8007262:	e02f      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1d      	ldr	r2, [pc, #116]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x614>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1c      	ldr	r2, [pc, #112]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x618>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007280:	d013      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a18      	ldr	r2, [pc, #96]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <HAL_TIM_ConfigClockSource+0x620>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x624>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x5de>
 80072a0:	f241 5130 	movw	r1, #5424	@ 0x1530
 80072a4:	4813      	ldr	r0, [pc, #76]	@ (80072f4 <HAL_TIM_ConfigClockSource+0x628>)
 80072a6:	f7fb fb23 	bl	80028f0 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f000 fb54 	bl	8007962 <TIM_ITRx_SetConfig>
      break;
 80072ba:	e003      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
      break;
 80072c0:	e000      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 80072c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	0800cb10 	.word	0x0800cb10

080072f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a33      	ldr	r2, [pc, #204]	@ (8007420 <TIM_Base_SetConfig+0xe0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a32      	ldr	r2, [pc, #200]	@ (8007424 <TIM_Base_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00f      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007366:	d00b      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a2f      	ldr	r2, [pc, #188]	@ (8007428 <TIM_Base_SetConfig+0xe8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <TIM_Base_SetConfig+0xec>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <TIM_Base_SetConfig+0xf0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d108      	bne.n	8007392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a22      	ldr	r2, [pc, #136]	@ (8007420 <TIM_Base_SetConfig+0xe0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <TIM_Base_SetConfig+0x82>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a21      	ldr	r2, [pc, #132]	@ (8007424 <TIM_Base_SetConfig+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00f      	beq.n	80073c2 <TIM_Base_SetConfig+0x82>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a8:	d00b      	beq.n	80073c2 <TIM_Base_SetConfig+0x82>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007428 <TIM_Base_SetConfig+0xe8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d007      	beq.n	80073c2 <TIM_Base_SetConfig+0x82>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	@ (800742c <TIM_Base_SetConfig+0xec>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <TIM_Base_SetConfig+0x82>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007430 <TIM_Base_SetConfig+0xf0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d108      	bne.n	80073d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a09      	ldr	r2, [pc, #36]	@ (8007420 <TIM_Base_SetConfig+0xe0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0xc8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a08      	ldr	r2, [pc, #32]	@ (8007424 <TIM_Base_SetConfig+0xe4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d103      	bne.n	8007410 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	615a      	str	r2, [r3, #20]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40013400 	.word	0x40013400
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00

08007434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f023 0201 	bic.w	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0302 	bic.w	r3, r3, #2
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a34      	ldr	r2, [pc, #208]	@ (800755c <TIM_OC1_SetConfig+0x128>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_OC1_SetConfig+0x64>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a33      	ldr	r2, [pc, #204]	@ (8007560 <TIM_OC1_SetConfig+0x12c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d119      	bne.n	80074cc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <TIM_OC1_SetConfig+0x7e>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d004      	beq.n	80074b2 <TIM_OC1_SetConfig+0x7e>
 80074a8:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 80074ac:	482d      	ldr	r0, [pc, #180]	@ (8007564 <TIM_OC1_SetConfig+0x130>)
 80074ae:	f7fb fa1f 	bl	80028f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f023 0308 	bic.w	r3, r3, #8
 80074b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0304 	bic.w	r3, r3, #4
 80074ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a23      	ldr	r2, [pc, #140]	@ (800755c <TIM_OC1_SetConfig+0x128>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC1_SetConfig+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a22      	ldr	r2, [pc, #136]	@ (8007560 <TIM_OC1_SetConfig+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d12d      	bne.n	8007538 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e4:	d008      	beq.n	80074f8 <TIM_OC1_SetConfig+0xc4>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <TIM_OC1_SetConfig+0xc4>
 80074ee:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 80074f2:	481c      	ldr	r0, [pc, #112]	@ (8007564 <TIM_OC1_SetConfig+0x130>)
 80074f4:	f7fb f9fc 	bl	80028f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007500:	d008      	beq.n	8007514 <TIM_OC1_SetConfig+0xe0>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <TIM_OC1_SetConfig+0xe0>
 800750a:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800750e:	4815      	ldr	r0, [pc, #84]	@ (8007564 <TIM_OC1_SetConfig+0x130>)
 8007510:	f7fb f9ee 	bl	80028f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800751a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40013400 	.word	0x40013400
 8007564:	0800cb10 	.word	0x0800cb10

08007568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	f023 0210 	bic.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800759e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0320 	bic.w	r3, r3, #32
 80075b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a35      	ldr	r2, [pc, #212]	@ (8007698 <TIM_OC2_SetConfig+0x130>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_OC2_SetConfig+0x68>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a34      	ldr	r2, [pc, #208]	@ (800769c <TIM_OC2_SetConfig+0x134>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d11a      	bne.n	8007606 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <TIM_OC2_SetConfig+0x82>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d004      	beq.n	80075ea <TIM_OC2_SetConfig+0x82>
 80075e0:	f641 3110 	movw	r1, #6928	@ 0x1b10
 80075e4:	482e      	ldr	r0, [pc, #184]	@ (80076a0 <TIM_OC2_SetConfig+0x138>)
 80075e6:	f7fb f983 	bl	80028f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007604:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a23      	ldr	r2, [pc, #140]	@ (8007698 <TIM_OC2_SetConfig+0x130>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d003      	beq.n	8007616 <TIM_OC2_SetConfig+0xae>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a22      	ldr	r2, [pc, #136]	@ (800769c <TIM_OC2_SetConfig+0x134>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d12f      	bne.n	8007676 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800761e:	d008      	beq.n	8007632 <TIM_OC2_SetConfig+0xca>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <TIM_OC2_SetConfig+0xca>
 8007628:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 800762c:	481c      	ldr	r0, [pc, #112]	@ (80076a0 <TIM_OC2_SetConfig+0x138>)
 800762e:	f7fb f95f 	bl	80028f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763a:	d008      	beq.n	800764e <TIM_OC2_SetConfig+0xe6>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <TIM_OC2_SetConfig+0xe6>
 8007644:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 8007648:	4815      	ldr	r0, [pc, #84]	@ (80076a0 <TIM_OC2_SetConfig+0x138>)
 800764a:	f7fb f951 	bl	80028f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800765c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40013400 	.word	0x40013400
 80076a0:	0800cb10 	.word	0x0800cb10

080076a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a35      	ldr	r2, [pc, #212]	@ (80077d4 <TIM_OC3_SetConfig+0x130>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d003      	beq.n	800770a <TIM_OC3_SetConfig+0x66>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a34      	ldr	r2, [pc, #208]	@ (80077d8 <TIM_OC3_SetConfig+0x134>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d11a      	bne.n	8007740 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <TIM_OC3_SetConfig+0x80>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b08      	cmp	r3, #8
 8007718:	d004      	beq.n	8007724 <TIM_OC3_SetConfig+0x80>
 800771a:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 800771e:	482f      	ldr	r0, [pc, #188]	@ (80077dc <TIM_OC3_SetConfig+0x138>)
 8007720:	f7fb f8e6 	bl	80028f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800772a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800773e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a24      	ldr	r2, [pc, #144]	@ (80077d4 <TIM_OC3_SetConfig+0x130>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC3_SetConfig+0xac>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a23      	ldr	r2, [pc, #140]	@ (80077d8 <TIM_OC3_SetConfig+0x134>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d12f      	bne.n	80077b0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007758:	d008      	beq.n	800776c <TIM_OC3_SetConfig+0xc8>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <TIM_OC3_SetConfig+0xc8>
 8007762:	f641 3169 	movw	r1, #7017	@ 0x1b69
 8007766:	481d      	ldr	r0, [pc, #116]	@ (80077dc <TIM_OC3_SetConfig+0x138>)
 8007768:	f7fb f8c2 	bl	80028f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007774:	d008      	beq.n	8007788 <TIM_OC3_SetConfig+0xe4>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <TIM_OC3_SetConfig+0xe4>
 800777e:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 8007782:	4816      	ldr	r0, [pc, #88]	@ (80077dc <TIM_OC3_SetConfig+0x138>)
 8007784:	f7fb f8b4 	bl	80028f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800778e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	0800cb10 	.word	0x0800cb10

080077e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800782a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a18      	ldr	r2, [pc, #96]	@ (800789c <TIM_OC4_SetConfig+0xbc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_OC4_SetConfig+0x68>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a17      	ldr	r2, [pc, #92]	@ (80078a0 <TIM_OC4_SetConfig+0xc0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d117      	bne.n	8007878 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007850:	d008      	beq.n	8007864 <TIM_OC4_SetConfig+0x84>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <TIM_OC4_SetConfig+0x84>
 800785a:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 800785e:	4811      	ldr	r0, [pc, #68]	@ (80078a4 <TIM_OC4_SetConfig+0xc4>)
 8007860:	f7fb f846 	bl	80028f0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800786a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	019b      	lsls	r3, r3, #6
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40013400 	.word	0x40013400
 80078a4:	0800cb10 	.word	0x0800cb10

080078a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0201 	bic.w	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 030a 	bic.w	r3, r3, #10
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	621a      	str	r2, [r3, #32]
}
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f023 0210 	bic.w	r2, r3, #16
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800792e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	031b      	lsls	r3, r3, #12
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	f043 0307 	orr.w	r3, r3, #7
 8007984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007996:	b480      	push	{r7}
 8007998:	b087      	sub	sp, #28
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	021a      	lsls	r2, r3, #8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4313      	orrs	r3, r2
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	609a      	str	r2, [r3, #8]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a26      	ldr	r2, [pc, #152]	@ (8007a7c <TIM_CCxChannelCmd+0xa8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d018      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a25      	ldr	r2, [pc, #148]	@ (8007a80 <TIM_CCxChannelCmd+0xac>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d014      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f6:	d010      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a22      	ldr	r2, [pc, #136]	@ (8007a84 <TIM_CCxChannelCmd+0xb0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00c      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a21      	ldr	r2, [pc, #132]	@ (8007a88 <TIM_CCxChannelCmd+0xb4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d008      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a20      	ldr	r2, [pc, #128]	@ (8007a8c <TIM_CCxChannelCmd+0xb8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <TIM_CCxChannelCmd+0x46>
 8007a10:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8007a14:	481e      	ldr	r0, [pc, #120]	@ (8007a90 <TIM_CCxChannelCmd+0xbc>)
 8007a16:	f7fa ff6b 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <TIM_CCxChannelCmd+0x6e>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d00d      	beq.n	8007a42 <TIM_CCxChannelCmd+0x6e>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d00a      	beq.n	8007a42 <TIM_CCxChannelCmd+0x6e>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b0c      	cmp	r3, #12
 8007a30:	d007      	beq.n	8007a42 <TIM_CCxChannelCmd+0x6e>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b3c      	cmp	r3, #60	@ 0x3c
 8007a36:	d004      	beq.n	8007a42 <TIM_CCxChannelCmd+0x6e>
 8007a38:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8007a3c:	4814      	ldr	r0, [pc, #80]	@ (8007a90 <TIM_CCxChannelCmd+0xbc>)
 8007a3e:	f7fa ff57 	bl	80028f0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2201      	movs	r2, #1
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1a      	ldr	r2, [r3, #32]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	43db      	mvns	r3, r3
 8007a58:	401a      	ands	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	621a      	str	r2, [r3, #32]
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40013400 	.word	0x40013400
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40000800 	.word	0x40000800
 8007a8c:	40000c00 	.word	0x40000c00
 8007a90:	0800cb10 	.word	0x0800cb10

08007a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d027      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a5a      	ldr	r2, [pc, #360]	@ (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aba:	d01d      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a56      	ldr	r2, [pc, #344]	@ (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a55      	ldr	r2, [pc, #340]	@ (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a53      	ldr	r2, [pc, #332]	@ (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a52      	ldr	r2, [pc, #328]	@ (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a50      	ldr	r2, [pc, #320]	@ (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007aee:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8007af2:	484f      	ldr	r0, [pc, #316]	@ (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007af4:	f7fa fefc 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d020      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d01c      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b30      	cmp	r3, #48	@ 0x30
 8007b16:	d014      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b40      	cmp	r3, #64	@ 0x40
 8007b1e:	d010      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b50      	cmp	r3, #80	@ 0x50
 8007b26:	d00c      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b60      	cmp	r3, #96	@ 0x60
 8007b2e:	d008      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b70      	cmp	r3, #112	@ 0x70
 8007b36:	d004      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007b38:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8007b3c:	483c      	ldr	r0, [pc, #240]	@ (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007b3e:	f7fa fed7 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b80      	cmp	r3, #128	@ 0x80
 8007b48:	d008      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b52:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8007b56:	4836      	ldr	r0, [pc, #216]	@ (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007b58:	f7fa feca 	bl	80028f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e050      	b.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc0:	d00e      	beq.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a15      	ldr	r2, [pc, #84]	@ (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a13      	ldr	r2, [pc, #76]	@ (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a12      	ldr	r2, [pc, #72]	@ (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10c      	bne.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40012c00 	.word	0x40012c00
 8007c18:	40013400 	.word	0x40013400
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	40000c00 	.word	0x40000c00
 8007c28:	40001000 	.word	0x40001000
 8007c2c:	40001400 	.word	0x40001400
 8007c30:	0800cb48 	.word	0x0800cb48

08007c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a5e      	ldr	r2, [pc, #376]	@ (8007dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d009      	beq.n	8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a5c      	ldr	r2, [pc, #368]	@ (8007dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d004      	beq.n	8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007c56:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8007c5a:	485b      	ldr	r0, [pc, #364]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007c5c:	f7fa fe48 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c68:	d008      	beq.n	8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007c72:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 8007c76:	4854      	ldr	r0, [pc, #336]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007c78:	f7fa fe3a 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c84:	d008      	beq.n	8007c98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007c8e:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8007c92:	484d      	ldr	r0, [pc, #308]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007c94:	f7fa fe2c 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cb2:	d009      	beq.n	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cbc:	d004      	beq.n	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007cbe:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 8007cc2:	4841      	ldr	r0, [pc, #260]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007cc4:	f7fa fe14 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2bff      	cmp	r3, #255	@ 0xff
 8007cce:	d904      	bls.n	8007cda <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007cd0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8007cd4:	483c      	ldr	r0, [pc, #240]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007cd6:	f7fa fe0b 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce2:	d008      	beq.n	8007cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007cec:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8007cf0:	4835      	ldr	r0, [pc, #212]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007cf2:	f7fa fdfd 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d06:	d004      	beq.n	8007d12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007d08:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8007d0c:	482e      	ldr	r0, [pc, #184]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007d0e:	f7fa fdef 	bl	80028f0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d1a:	d008      	beq.n	8007d2e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007d24:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8007d28:	4827      	ldr	r0, [pc, #156]	@ (8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007d2a:	f7fa fde1 	bl	80028f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e03d      	b.n	8007db8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40013400 	.word	0x40013400
 8007dc8:	0800cb48 	.word	0x0800cb48

08007dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bc80      	pop	{r7}
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e09f      	b.n	8007f42 <HAL_UART_Init+0x152>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02c      	beq.n	8007e64 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a4f      	ldr	r2, [pc, #316]	@ (8007f4c <HAL_UART_Init+0x15c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00e      	beq.n	8007e32 <HAL_UART_Init+0x42>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a4d      	ldr	r2, [pc, #308]	@ (8007f50 <HAL_UART_Init+0x160>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d009      	beq.n	8007e32 <HAL_UART_Init+0x42>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a4c      	ldr	r2, [pc, #304]	@ (8007f54 <HAL_UART_Init+0x164>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d004      	beq.n	8007e32 <HAL_UART_Init+0x42>
 8007e28:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8007e2c:	484a      	ldr	r0, [pc, #296]	@ (8007f58 <HAL_UART_Init+0x168>)
 8007e2e:	f7fa fd5f 	bl	80028f0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d032      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e42:	d02d      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4c:	d028      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e56:	d023      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e58:	f240 116f 	movw	r1, #367	@ 0x16f
 8007e5c:	483e      	ldr	r0, [pc, #248]	@ (8007f58 <HAL_UART_Init+0x168>)
 8007e5e:	f7fa fd47 	bl	80028f0 <assert_failed>
 8007e62:	e01d      	b.n	8007ea0 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a38      	ldr	r2, [pc, #224]	@ (8007f4c <HAL_UART_Init+0x15c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d018      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a37      	ldr	r2, [pc, #220]	@ (8007f50 <HAL_UART_Init+0x160>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d013      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a35      	ldr	r2, [pc, #212]	@ (8007f54 <HAL_UART_Init+0x164>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00e      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a35      	ldr	r2, [pc, #212]	@ (8007f5c <HAL_UART_Init+0x16c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d009      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a33      	ldr	r2, [pc, #204]	@ (8007f60 <HAL_UART_Init+0x170>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_UART_Init+0xb0>
 8007e96:	f240 1173 	movw	r1, #371	@ 0x173
 8007e9a:	482f      	ldr	r0, [pc, #188]	@ (8007f58 <HAL_UART_Init+0x168>)
 8007e9c:	f7fa fd28 	bl	80028f0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <HAL_UART_Init+0xcc>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb0:	d004      	beq.n	8007ebc <HAL_UART_Init+0xcc>
 8007eb2:	f240 1175 	movw	r1, #373	@ 0x175
 8007eb6:	4828      	ldr	r0, [pc, #160]	@ (8007f58 <HAL_UART_Init+0x168>)
 8007eb8:	f7fa fd1a 	bl	80028f0 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d106      	bne.n	8007ed6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fb fba5 	bl	8003620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2224      	movs	r2, #36	@ 0x24
 8007eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007eec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f92a 	bl	8008148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40013800 	.word	0x40013800
 8007f50:	40004400 	.word	0x40004400
 8007f54:	40004800 	.word	0x40004800
 8007f58:	0800cb84 	.word	0x0800cb84
 8007f5c:	40004c00 	.word	0x40004c00
 8007f60:	40005000 	.word	0x40005000

08007f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	@ 0x28
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d16d      	bne.n	8008060 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_UART_Transmit+0x2c>
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e066      	b.n	8008062 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2221      	movs	r2, #33	@ 0x21
 8007f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fa2:	f7fb fc07 	bl	80037b4 <HAL_GetTick>
 8007fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fbc:	d108      	bne.n	8007fd0 <HAL_UART_Transmit+0x6c>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	e003      	b.n	8007fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd8:	e02a      	b.n	8008030 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2180      	movs	r1, #128	@ 0x80
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f840 	bl	800806a <UART_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e036      	b.n	8008062 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	3302      	adds	r3, #2
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e007      	b.n	8008022 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	3301      	adds	r3, #1
 8008020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1cf      	bne.n	8007fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2140      	movs	r1, #64	@ 0x40
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f810 	bl	800806a <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e006      	b.n	8008062 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	e000      	b.n	8008062 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008060:	2302      	movs	r3, #2
  }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b090      	sub	sp, #64	@ 0x40
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	603b      	str	r3, [r7, #0]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807a:	e050      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d04c      	beq.n	800811e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x30>
 800808a:	f7fb fb93 	bl	80037b4 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008096:	429a      	cmp	r2, r3
 8008098:	d241      	bcs.n	800811e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80080bc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e5      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	613b      	str	r3, [r7, #16]
   return(result);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ee:	623a      	str	r2, [r7, #32]
 80080f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	69f9      	ldr	r1, [r7, #28]
 80080f4:	6a3a      	ldr	r2, [r7, #32]
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e5      	bne.n	80080ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e00f      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d09f      	beq.n	800807c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3740      	adds	r7, #64	@ 0x40
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a5f      	ldr	r2, [pc, #380]	@ (80082d4 <UART_SetConfig+0x18c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d904      	bls.n	8008164 <UART_SetConfig+0x1c>
 800815a:	f640 6166 	movw	r1, #3686	@ 0xe66
 800815e:	485e      	ldr	r0, [pc, #376]	@ (80082d8 <UART_SetConfig+0x190>)
 8008160:	f7fa fbc6 	bl	80028f0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <UART_SetConfig+0x38>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008174:	d004      	beq.n	8008180 <UART_SetConfig+0x38>
 8008176:	f640 6167 	movw	r1, #3687	@ 0xe67
 800817a:	4857      	ldr	r0, [pc, #348]	@ (80082d8 <UART_SetConfig+0x190>)
 800817c:	f7fa fbb8 	bl	80028f0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <UART_SetConfig+0x5e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008190:	d009      	beq.n	80081a6 <UART_SetConfig+0x5e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800819a:	d004      	beq.n	80081a6 <UART_SetConfig+0x5e>
 800819c:	f640 6168 	movw	r1, #3688	@ 0xe68
 80081a0:	484d      	ldr	r0, [pc, #308]	@ (80082d8 <UART_SetConfig+0x190>)
 80081a2:	f7fa fba5 	bl	80028f0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 80081ae:	4013      	ands	r3, r2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <UART_SetConfig+0x74>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <UART_SetConfig+0x7e>
 80081bc:	f640 6169 	movw	r1, #3689	@ 0xe69
 80081c0:	4845      	ldr	r0, [pc, #276]	@ (80082d8 <UART_SetConfig+0x190>)
 80081c2:	f7fa fb95 	bl	80028f0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80081f8:	f023 030c 	bic.w	r3, r3, #12
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	430b      	orrs	r3, r1
 8008204:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2e      	ldr	r2, [pc, #184]	@ (80082dc <UART_SetConfig+0x194>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d103      	bne.n	800822e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008226:	f7fd fa99 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	e002      	b.n	8008234 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800822e:	f7fd fa81 	bl	8005734 <HAL_RCC_GetPCLK1Freq>
 8008232:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009a      	lsls	r2, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	4a25      	ldr	r2, [pc, #148]	@ (80082e0 <UART_SetConfig+0x198>)
 800824c:	fba2 2303 	umull	r2, r3, r2, r3
 8008250:	095b      	lsrs	r3, r3, #5
 8008252:	0119      	lsls	r1, r3, #4
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009a      	lsls	r2, r3, #2
 800825e:	441a      	add	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	fbb2 f2f3 	udiv	r2, r2, r3
 800826a:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <UART_SetConfig+0x198>)
 800826c:	fba3 0302 	umull	r0, r3, r3, r2
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	2064      	movs	r0, #100	@ 0x64
 8008274:	fb00 f303 	mul.w	r3, r0, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	3332      	adds	r3, #50	@ 0x32
 800827e:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <UART_SetConfig+0x198>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800828a:	4419      	add	r1, r3
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009a      	lsls	r2, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	fbb2 f2f3 	udiv	r2, r2, r3
 80082a2:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <UART_SetConfig+0x198>)
 80082a4:	fba3 0302 	umull	r0, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	2064      	movs	r0, #100	@ 0x64
 80082ac:	fb00 f303 	mul.w	r3, r0, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	3332      	adds	r3, #50	@ 0x32
 80082b6:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <UART_SetConfig+0x198>)
 80082b8:	fba2 2303 	umull	r2, r3, r2, r3
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	f003 020f 	and.w	r2, r3, #15
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	440a      	add	r2, r1
 80082c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	0044aa20 	.word	0x0044aa20
 80082d8:	0800cb84 	.word	0x0800cb84
 80082dc:	40013800 	.word	0x40013800
 80082e0:	51eb851f 	.word	0x51eb851f

080082e4 <__cvt>:
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ea:	461d      	mov	r5, r3
 80082ec:	bfbb      	ittet	lt
 80082ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80082f2:	461d      	movlt	r5, r3
 80082f4:	2300      	movge	r3, #0
 80082f6:	232d      	movlt	r3, #45	@ 0x2d
 80082f8:	b088      	sub	sp, #32
 80082fa:	4614      	mov	r4, r2
 80082fc:	bfb8      	it	lt
 80082fe:	4614      	movlt	r4, r2
 8008300:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008302:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008304:	7013      	strb	r3, [r2, #0]
 8008306:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008308:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800830c:	f023 0820 	bic.w	r8, r3, #32
 8008310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008314:	d005      	beq.n	8008322 <__cvt+0x3e>
 8008316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800831a:	d100      	bne.n	800831e <__cvt+0x3a>
 800831c:	3601      	adds	r6, #1
 800831e:	2302      	movs	r3, #2
 8008320:	e000      	b.n	8008324 <__cvt+0x40>
 8008322:	2303      	movs	r3, #3
 8008324:	aa07      	add	r2, sp, #28
 8008326:	9204      	str	r2, [sp, #16]
 8008328:	aa06      	add	r2, sp, #24
 800832a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800832e:	e9cd 3600 	strd	r3, r6, [sp]
 8008332:	4622      	mov	r2, r4
 8008334:	462b      	mov	r3, r5
 8008336:	f001 f893 	bl	8009460 <_dtoa_r>
 800833a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800833e:	4607      	mov	r7, r0
 8008340:	d119      	bne.n	8008376 <__cvt+0x92>
 8008342:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008344:	07db      	lsls	r3, r3, #31
 8008346:	d50e      	bpl.n	8008366 <__cvt+0x82>
 8008348:	eb00 0906 	add.w	r9, r0, r6
 800834c:	2200      	movs	r2, #0
 800834e:	2300      	movs	r3, #0
 8008350:	4620      	mov	r0, r4
 8008352:	4629      	mov	r1, r5
 8008354:	f7f8 fb94 	bl	8000a80 <__aeabi_dcmpeq>
 8008358:	b108      	cbz	r0, 800835e <__cvt+0x7a>
 800835a:	f8cd 901c 	str.w	r9, [sp, #28]
 800835e:	2230      	movs	r2, #48	@ 0x30
 8008360:	9b07      	ldr	r3, [sp, #28]
 8008362:	454b      	cmp	r3, r9
 8008364:	d31e      	bcc.n	80083a4 <__cvt+0xc0>
 8008366:	4638      	mov	r0, r7
 8008368:	9b07      	ldr	r3, [sp, #28]
 800836a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800836c:	1bdb      	subs	r3, r3, r7
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	b008      	add	sp, #32
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800837a:	eb00 0906 	add.w	r9, r0, r6
 800837e:	d1e5      	bne.n	800834c <__cvt+0x68>
 8008380:	7803      	ldrb	r3, [r0, #0]
 8008382:	2b30      	cmp	r3, #48	@ 0x30
 8008384:	d10a      	bne.n	800839c <__cvt+0xb8>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	f7f8 fb77 	bl	8000a80 <__aeabi_dcmpeq>
 8008392:	b918      	cbnz	r0, 800839c <__cvt+0xb8>
 8008394:	f1c6 0601 	rsb	r6, r6, #1
 8008398:	f8ca 6000 	str.w	r6, [sl]
 800839c:	f8da 3000 	ldr.w	r3, [sl]
 80083a0:	4499      	add	r9, r3
 80083a2:	e7d3      	b.n	800834c <__cvt+0x68>
 80083a4:	1c59      	adds	r1, r3, #1
 80083a6:	9107      	str	r1, [sp, #28]
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e7d9      	b.n	8008360 <__cvt+0x7c>

080083ac <__exponent>:
 80083ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ae:	2900      	cmp	r1, #0
 80083b0:	bfb6      	itet	lt
 80083b2:	232d      	movlt	r3, #45	@ 0x2d
 80083b4:	232b      	movge	r3, #43	@ 0x2b
 80083b6:	4249      	neglt	r1, r1
 80083b8:	2909      	cmp	r1, #9
 80083ba:	7002      	strb	r2, [r0, #0]
 80083bc:	7043      	strb	r3, [r0, #1]
 80083be:	dd29      	ble.n	8008414 <__exponent+0x68>
 80083c0:	f10d 0307 	add.w	r3, sp, #7
 80083c4:	461d      	mov	r5, r3
 80083c6:	270a      	movs	r7, #10
 80083c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80083cc:	461a      	mov	r2, r3
 80083ce:	fb07 1416 	mls	r4, r7, r6, r1
 80083d2:	3430      	adds	r4, #48	@ 0x30
 80083d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80083d8:	460c      	mov	r4, r1
 80083da:	2c63      	cmp	r4, #99	@ 0x63
 80083dc:	4631      	mov	r1, r6
 80083de:	f103 33ff 	add.w	r3, r3, #4294967295
 80083e2:	dcf1      	bgt.n	80083c8 <__exponent+0x1c>
 80083e4:	3130      	adds	r1, #48	@ 0x30
 80083e6:	1e94      	subs	r4, r2, #2
 80083e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083ec:	4623      	mov	r3, r4
 80083ee:	1c41      	adds	r1, r0, #1
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	d30a      	bcc.n	800840a <__exponent+0x5e>
 80083f4:	f10d 0309 	add.w	r3, sp, #9
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	42ac      	cmp	r4, r5
 80083fc:	bf88      	it	hi
 80083fe:	2300      	movhi	r3, #0
 8008400:	3302      	adds	r3, #2
 8008402:	4403      	add	r3, r0
 8008404:	1a18      	subs	r0, r3, r0
 8008406:	b003      	add	sp, #12
 8008408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800840e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008412:	e7ed      	b.n	80083f0 <__exponent+0x44>
 8008414:	2330      	movs	r3, #48	@ 0x30
 8008416:	3130      	adds	r1, #48	@ 0x30
 8008418:	7083      	strb	r3, [r0, #2]
 800841a:	70c1      	strb	r1, [r0, #3]
 800841c:	1d03      	adds	r3, r0, #4
 800841e:	e7f1      	b.n	8008404 <__exponent+0x58>

08008420 <_printf_float>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	b091      	sub	sp, #68	@ 0x44
 8008426:	460c      	mov	r4, r1
 8008428:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800842c:	4616      	mov	r6, r2
 800842e:	461f      	mov	r7, r3
 8008430:	4605      	mov	r5, r0
 8008432:	f000 ff03 	bl	800923c <_localeconv_r>
 8008436:	6803      	ldr	r3, [r0, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	9308      	str	r3, [sp, #32]
 800843c:	f7f7 fef4 	bl	8000228 <strlen>
 8008440:	2300      	movs	r3, #0
 8008442:	930e      	str	r3, [sp, #56]	@ 0x38
 8008444:	f8d8 3000 	ldr.w	r3, [r8]
 8008448:	9009      	str	r0, [sp, #36]	@ 0x24
 800844a:	3307      	adds	r3, #7
 800844c:	f023 0307 	bic.w	r3, r3, #7
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008458:	f8d4 b000 	ldr.w	fp, [r4]
 800845c:	f8c8 2000 	str.w	r2, [r8]
 8008460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800847a:	4b9c      	ldr	r3, [pc, #624]	@ (80086ec <_printf_float+0x2cc>)
 800847c:	f7f8 fb32 	bl	8000ae4 <__aeabi_dcmpun>
 8008480:	bb70      	cbnz	r0, 80084e0 <_printf_float+0xc0>
 8008482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	4b98      	ldr	r3, [pc, #608]	@ (80086ec <_printf_float+0x2cc>)
 800848c:	f7f8 fb0c 	bl	8000aa8 <__aeabi_dcmple>
 8008490:	bb30      	cbnz	r0, 80084e0 <_printf_float+0xc0>
 8008492:	2200      	movs	r2, #0
 8008494:	2300      	movs	r3, #0
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f8 fafb 	bl	8000a94 <__aeabi_dcmplt>
 800849e:	b110      	cbz	r0, 80084a6 <_printf_float+0x86>
 80084a0:	232d      	movs	r3, #45	@ 0x2d
 80084a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a6:	4a92      	ldr	r2, [pc, #584]	@ (80086f0 <_printf_float+0x2d0>)
 80084a8:	4b92      	ldr	r3, [pc, #584]	@ (80086f4 <_printf_float+0x2d4>)
 80084aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084ae:	bf94      	ite	ls
 80084b0:	4690      	movls	r8, r2
 80084b2:	4698      	movhi	r8, r3
 80084b4:	2303      	movs	r3, #3
 80084b6:	f04f 0900 	mov.w	r9, #0
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	f02b 0304 	bic.w	r3, fp, #4
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	4633      	mov	r3, r6
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	9700      	str	r7, [sp, #0]
 80084ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80084cc:	f000 f9d4 	bl	8008878 <_printf_common>
 80084d0:	3001      	adds	r0, #1
 80084d2:	f040 8090 	bne.w	80085f6 <_printf_float+0x1d6>
 80084d6:	f04f 30ff 	mov.w	r0, #4294967295
 80084da:	b011      	add	sp, #68	@ 0x44
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	4640      	mov	r0, r8
 80084e6:	4649      	mov	r1, r9
 80084e8:	f7f8 fafc 	bl	8000ae4 <__aeabi_dcmpun>
 80084ec:	b148      	cbz	r0, 8008502 <_printf_float+0xe2>
 80084ee:	464b      	mov	r3, r9
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bfb8      	it	lt
 80084f4:	232d      	movlt	r3, #45	@ 0x2d
 80084f6:	4a80      	ldr	r2, [pc, #512]	@ (80086f8 <_printf_float+0x2d8>)
 80084f8:	bfb8      	it	lt
 80084fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80084fe:	4b7f      	ldr	r3, [pc, #508]	@ (80086fc <_printf_float+0x2dc>)
 8008500:	e7d3      	b.n	80084aa <_printf_float+0x8a>
 8008502:	6863      	ldr	r3, [r4, #4]
 8008504:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	d13f      	bne.n	800858c <_printf_float+0x16c>
 800850c:	2306      	movs	r3, #6
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	9206      	str	r2, [sp, #24]
 800851a:	aa0e      	add	r2, sp, #56	@ 0x38
 800851c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008520:	aa0d      	add	r2, sp, #52	@ 0x34
 8008522:	9203      	str	r2, [sp, #12]
 8008524:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008528:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	4642      	mov	r2, r8
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	4628      	mov	r0, r5
 8008534:	464b      	mov	r3, r9
 8008536:	910a      	str	r1, [sp, #40]	@ 0x28
 8008538:	f7ff fed4 	bl	80082e4 <__cvt>
 800853c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800853e:	4680      	mov	r8, r0
 8008540:	2947      	cmp	r1, #71	@ 0x47
 8008542:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008544:	d128      	bne.n	8008598 <_printf_float+0x178>
 8008546:	1cc8      	adds	r0, r1, #3
 8008548:	db02      	blt.n	8008550 <_printf_float+0x130>
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	4299      	cmp	r1, r3
 800854e:	dd40      	ble.n	80085d2 <_printf_float+0x1b2>
 8008550:	f1aa 0a02 	sub.w	sl, sl, #2
 8008554:	fa5f fa8a 	uxtb.w	sl, sl
 8008558:	4652      	mov	r2, sl
 800855a:	3901      	subs	r1, #1
 800855c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008560:	910d      	str	r1, [sp, #52]	@ 0x34
 8008562:	f7ff ff23 	bl	80083ac <__exponent>
 8008566:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008568:	4681      	mov	r9, r0
 800856a:	1813      	adds	r3, r2, r0
 800856c:	2a01      	cmp	r2, #1
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	dc02      	bgt.n	8008578 <_printf_float+0x158>
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	07d2      	lsls	r2, r2, #31
 8008576:	d501      	bpl.n	800857c <_printf_float+0x15c>
 8008578:	3301      	adds	r3, #1
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008580:	2b00      	cmp	r3, #0
 8008582:	d09e      	beq.n	80084c2 <_printf_float+0xa2>
 8008584:	232d      	movs	r3, #45	@ 0x2d
 8008586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858a:	e79a      	b.n	80084c2 <_printf_float+0xa2>
 800858c:	2947      	cmp	r1, #71	@ 0x47
 800858e:	d1bf      	bne.n	8008510 <_printf_float+0xf0>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1bd      	bne.n	8008510 <_printf_float+0xf0>
 8008594:	2301      	movs	r3, #1
 8008596:	e7ba      	b.n	800850e <_printf_float+0xee>
 8008598:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800859c:	d9dc      	bls.n	8008558 <_printf_float+0x138>
 800859e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085a2:	d118      	bne.n	80085d6 <_printf_float+0x1b6>
 80085a4:	2900      	cmp	r1, #0
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	dd0b      	ble.n	80085c2 <_printf_float+0x1a2>
 80085aa:	6121      	str	r1, [r4, #16]
 80085ac:	b913      	cbnz	r3, 80085b4 <_printf_float+0x194>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	07d0      	lsls	r0, r2, #31
 80085b2:	d502      	bpl.n	80085ba <_printf_float+0x19a>
 80085b4:	3301      	adds	r3, #1
 80085b6:	440b      	add	r3, r1
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	f04f 0900 	mov.w	r9, #0
 80085be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085c0:	e7dc      	b.n	800857c <_printf_float+0x15c>
 80085c2:	b913      	cbnz	r3, 80085ca <_printf_float+0x1aa>
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	07d2      	lsls	r2, r2, #31
 80085c8:	d501      	bpl.n	80085ce <_printf_float+0x1ae>
 80085ca:	3302      	adds	r3, #2
 80085cc:	e7f4      	b.n	80085b8 <_printf_float+0x198>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e7f2      	b.n	80085b8 <_printf_float+0x198>
 80085d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80085d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d8:	4299      	cmp	r1, r3
 80085da:	db05      	blt.n	80085e8 <_printf_float+0x1c8>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	6121      	str	r1, [r4, #16]
 80085e0:	07d8      	lsls	r0, r3, #31
 80085e2:	d5ea      	bpl.n	80085ba <_printf_float+0x19a>
 80085e4:	1c4b      	adds	r3, r1, #1
 80085e6:	e7e7      	b.n	80085b8 <_printf_float+0x198>
 80085e8:	2900      	cmp	r1, #0
 80085ea:	bfcc      	ite	gt
 80085ec:	2201      	movgt	r2, #1
 80085ee:	f1c1 0202 	rsble	r2, r1, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	e7e0      	b.n	80085b8 <_printf_float+0x198>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	055a      	lsls	r2, r3, #21
 80085fa:	d407      	bmi.n	800860c <_printf_float+0x1ec>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	4642      	mov	r2, r8
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	d12b      	bne.n	8008662 <_printf_float+0x242>
 800860a:	e764      	b.n	80084d6 <_printf_float+0xb6>
 800860c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008610:	f240 80dc 	bls.w	80087cc <_printf_float+0x3ac>
 8008614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	f7f8 fa30 	bl	8000a80 <__aeabi_dcmpeq>
 8008620:	2800      	cmp	r0, #0
 8008622:	d033      	beq.n	800868c <_printf_float+0x26c>
 8008624:	2301      	movs	r3, #1
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	4a35      	ldr	r2, [pc, #212]	@ (8008700 <_printf_float+0x2e0>)
 800862c:	47b8      	blx	r7
 800862e:	3001      	adds	r0, #1
 8008630:	f43f af51 	beq.w	80084d6 <_printf_float+0xb6>
 8008634:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008638:	4543      	cmp	r3, r8
 800863a:	db02      	blt.n	8008642 <_printf_float+0x222>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07d8      	lsls	r0, r3, #31
 8008640:	d50f      	bpl.n	8008662 <_printf_float+0x242>
 8008642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008646:	4631      	mov	r1, r6
 8008648:	4628      	mov	r0, r5
 800864a:	47b8      	blx	r7
 800864c:	3001      	adds	r0, #1
 800864e:	f43f af42 	beq.w	80084d6 <_printf_float+0xb6>
 8008652:	f04f 0900 	mov.w	r9, #0
 8008656:	f108 38ff 	add.w	r8, r8, #4294967295
 800865a:	f104 0a1a 	add.w	sl, r4, #26
 800865e:	45c8      	cmp	r8, r9
 8008660:	dc09      	bgt.n	8008676 <_printf_float+0x256>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	079b      	lsls	r3, r3, #30
 8008666:	f100 8102 	bmi.w	800886e <_printf_float+0x44e>
 800866a:	68e0      	ldr	r0, [r4, #12]
 800866c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866e:	4298      	cmp	r0, r3
 8008670:	bfb8      	it	lt
 8008672:	4618      	movlt	r0, r3
 8008674:	e731      	b.n	80084da <_printf_float+0xba>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f af28 	beq.w	80084d6 <_printf_float+0xb6>
 8008686:	f109 0901 	add.w	r9, r9, #1
 800868a:	e7e8      	b.n	800865e <_printf_float+0x23e>
 800868c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800868e:	2b00      	cmp	r3, #0
 8008690:	dc38      	bgt.n	8008704 <_printf_float+0x2e4>
 8008692:	2301      	movs	r3, #1
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <_printf_float+0x2e0>)
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f af1a 	beq.w	80084d6 <_printf_float+0xb6>
 80086a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80086a6:	ea59 0303 	orrs.w	r3, r9, r3
 80086aa:	d102      	bne.n	80086b2 <_printf_float+0x292>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	07d9      	lsls	r1, r3, #31
 80086b0:	d5d7      	bpl.n	8008662 <_printf_float+0x242>
 80086b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f af0a 	beq.w	80084d6 <_printf_float+0xb6>
 80086c2:	f04f 0a00 	mov.w	sl, #0
 80086c6:	f104 0b1a 	add.w	fp, r4, #26
 80086ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086cc:	425b      	negs	r3, r3
 80086ce:	4553      	cmp	r3, sl
 80086d0:	dc01      	bgt.n	80086d6 <_printf_float+0x2b6>
 80086d2:	464b      	mov	r3, r9
 80086d4:	e793      	b.n	80085fe <_printf_float+0x1de>
 80086d6:	2301      	movs	r3, #1
 80086d8:	465a      	mov	r2, fp
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	f43f aef8 	beq.w	80084d6 <_printf_float+0xb6>
 80086e6:	f10a 0a01 	add.w	sl, sl, #1
 80086ea:	e7ee      	b.n	80086ca <_printf_float+0x2aa>
 80086ec:	7fefffff 	.word	0x7fefffff
 80086f0:	0800cbfe 	.word	0x0800cbfe
 80086f4:	0800cc02 	.word	0x0800cc02
 80086f8:	0800cc06 	.word	0x0800cc06
 80086fc:	0800cc0a 	.word	0x0800cc0a
 8008700:	0800cc0e 	.word	0x0800cc0e
 8008704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008706:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800870a:	4553      	cmp	r3, sl
 800870c:	bfa8      	it	ge
 800870e:	4653      	movge	r3, sl
 8008710:	2b00      	cmp	r3, #0
 8008712:	4699      	mov	r9, r3
 8008714:	dc36      	bgt.n	8008784 <_printf_float+0x364>
 8008716:	f04f 0b00 	mov.w	fp, #0
 800871a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871e:	f104 021a 	add.w	r2, r4, #26
 8008722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008724:	930a      	str	r3, [sp, #40]	@ 0x28
 8008726:	eba3 0309 	sub.w	r3, r3, r9
 800872a:	455b      	cmp	r3, fp
 800872c:	dc31      	bgt.n	8008792 <_printf_float+0x372>
 800872e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008730:	459a      	cmp	sl, r3
 8008732:	dc3a      	bgt.n	80087aa <_printf_float+0x38a>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07da      	lsls	r2, r3, #31
 8008738:	d437      	bmi.n	80087aa <_printf_float+0x38a>
 800873a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800873c:	ebaa 0903 	sub.w	r9, sl, r3
 8008740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008742:	ebaa 0303 	sub.w	r3, sl, r3
 8008746:	4599      	cmp	r9, r3
 8008748:	bfa8      	it	ge
 800874a:	4699      	movge	r9, r3
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	dc33      	bgt.n	80087ba <_printf_float+0x39a>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800875a:	f104 0b1a 	add.w	fp, r4, #26
 800875e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008760:	ebaa 0303 	sub.w	r3, sl, r3
 8008764:	eba3 0309 	sub.w	r3, r3, r9
 8008768:	4543      	cmp	r3, r8
 800876a:	f77f af7a 	ble.w	8008662 <_printf_float+0x242>
 800876e:	2301      	movs	r3, #1
 8008770:	465a      	mov	r2, fp
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f aeac 	beq.w	80084d6 <_printf_float+0xb6>
 800877e:	f108 0801 	add.w	r8, r8, #1
 8008782:	e7ec      	b.n	800875e <_printf_float+0x33e>
 8008784:	4642      	mov	r2, r8
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	d1c2      	bne.n	8008716 <_printf_float+0x2f6>
 8008790:	e6a1      	b.n	80084d6 <_printf_float+0xb6>
 8008792:	2301      	movs	r3, #1
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	920a      	str	r2, [sp, #40]	@ 0x28
 800879a:	47b8      	blx	r7
 800879c:	3001      	adds	r0, #1
 800879e:	f43f ae9a 	beq.w	80084d6 <_printf_float+0xb6>
 80087a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087a4:	f10b 0b01 	add.w	fp, fp, #1
 80087a8:	e7bb      	b.n	8008722 <_printf_float+0x302>
 80087aa:	4631      	mov	r1, r6
 80087ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1c0      	bne.n	800873a <_printf_float+0x31a>
 80087b8:	e68d      	b.n	80084d6 <_printf_float+0xb6>
 80087ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087bc:	464b      	mov	r3, r9
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	4442      	add	r2, r8
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	d1c3      	bne.n	8008752 <_printf_float+0x332>
 80087ca:	e684      	b.n	80084d6 <_printf_float+0xb6>
 80087cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80087d0:	f1ba 0f01 	cmp.w	sl, #1
 80087d4:	dc01      	bgt.n	80087da <_printf_float+0x3ba>
 80087d6:	07db      	lsls	r3, r3, #31
 80087d8:	d536      	bpl.n	8008848 <_printf_float+0x428>
 80087da:	2301      	movs	r3, #1
 80087dc:	4642      	mov	r2, r8
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b8      	blx	r7
 80087e4:	3001      	adds	r0, #1
 80087e6:	f43f ae76 	beq.w	80084d6 <_printf_float+0xb6>
 80087ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f ae6e 	beq.w	80084d6 <_printf_float+0xb6>
 80087fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087fe:	2200      	movs	r2, #0
 8008800:	2300      	movs	r3, #0
 8008802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008806:	f7f8 f93b 	bl	8000a80 <__aeabi_dcmpeq>
 800880a:	b9c0      	cbnz	r0, 800883e <_printf_float+0x41e>
 800880c:	4653      	mov	r3, sl
 800880e:	f108 0201 	add.w	r2, r8, #1
 8008812:	4631      	mov	r1, r6
 8008814:	4628      	mov	r0, r5
 8008816:	47b8      	blx	r7
 8008818:	3001      	adds	r0, #1
 800881a:	d10c      	bne.n	8008836 <_printf_float+0x416>
 800881c:	e65b      	b.n	80084d6 <_printf_float+0xb6>
 800881e:	2301      	movs	r3, #1
 8008820:	465a      	mov	r2, fp
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f ae54 	beq.w	80084d6 <_printf_float+0xb6>
 800882e:	f108 0801 	add.w	r8, r8, #1
 8008832:	45d0      	cmp	r8, sl
 8008834:	dbf3      	blt.n	800881e <_printf_float+0x3fe>
 8008836:	464b      	mov	r3, r9
 8008838:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800883c:	e6e0      	b.n	8008600 <_printf_float+0x1e0>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	f104 0b1a 	add.w	fp, r4, #26
 8008846:	e7f4      	b.n	8008832 <_printf_float+0x412>
 8008848:	2301      	movs	r3, #1
 800884a:	4642      	mov	r2, r8
 800884c:	e7e1      	b.n	8008812 <_printf_float+0x3f2>
 800884e:	2301      	movs	r3, #1
 8008850:	464a      	mov	r2, r9
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	47b8      	blx	r7
 8008858:	3001      	adds	r0, #1
 800885a:	f43f ae3c 	beq.w	80084d6 <_printf_float+0xb6>
 800885e:	f108 0801 	add.w	r8, r8, #1
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008866:	1a5b      	subs	r3, r3, r1
 8008868:	4543      	cmp	r3, r8
 800886a:	dcf0      	bgt.n	800884e <_printf_float+0x42e>
 800886c:	e6fd      	b.n	800866a <_printf_float+0x24a>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	f104 0919 	add.w	r9, r4, #25
 8008876:	e7f4      	b.n	8008862 <_printf_float+0x442>

08008878 <_printf_common>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	4616      	mov	r6, r2
 800887e:	4698      	mov	r8, r3
 8008880:	688a      	ldr	r2, [r1, #8]
 8008882:	690b      	ldr	r3, [r1, #16]
 8008884:	4607      	mov	r7, r0
 8008886:	4293      	cmp	r3, r2
 8008888:	bfb8      	it	lt
 800888a:	4613      	movlt	r3, r2
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008892:	460c      	mov	r4, r1
 8008894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008898:	b10a      	cbz	r2, 800889e <_printf_common+0x26>
 800889a:	3301      	adds	r3, #1
 800889c:	6033      	str	r3, [r6, #0]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	0699      	lsls	r1, r3, #26
 80088a2:	bf42      	ittt	mi
 80088a4:	6833      	ldrmi	r3, [r6, #0]
 80088a6:	3302      	addmi	r3, #2
 80088a8:	6033      	strmi	r3, [r6, #0]
 80088aa:	6825      	ldr	r5, [r4, #0]
 80088ac:	f015 0506 	ands.w	r5, r5, #6
 80088b0:	d106      	bne.n	80088c0 <_printf_common+0x48>
 80088b2:	f104 0a19 	add.w	sl, r4, #25
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	6832      	ldr	r2, [r6, #0]
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	42ab      	cmp	r3, r5
 80088be:	dc2b      	bgt.n	8008918 <_printf_common+0xa0>
 80088c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	3b00      	subs	r3, #0
 80088c8:	bf18      	it	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	0692      	lsls	r2, r2, #26
 80088ce:	d430      	bmi.n	8008932 <_printf_common+0xba>
 80088d0:	4641      	mov	r1, r8
 80088d2:	4638      	mov	r0, r7
 80088d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088d8:	47c8      	blx	r9
 80088da:	3001      	adds	r0, #1
 80088dc:	d023      	beq.n	8008926 <_printf_common+0xae>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	f003 0306 	and.w	r3, r3, #6
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	bf14      	ite	ne
 80088ea:	2500      	movne	r5, #0
 80088ec:	6833      	ldreq	r3, [r6, #0]
 80088ee:	f04f 0600 	mov.w	r6, #0
 80088f2:	bf08      	it	eq
 80088f4:	68e5      	ldreq	r5, [r4, #12]
 80088f6:	f104 041a 	add.w	r4, r4, #26
 80088fa:	bf08      	it	eq
 80088fc:	1aed      	subeq	r5, r5, r3
 80088fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008902:	bf08      	it	eq
 8008904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008908:	4293      	cmp	r3, r2
 800890a:	bfc4      	itt	gt
 800890c:	1a9b      	subgt	r3, r3, r2
 800890e:	18ed      	addgt	r5, r5, r3
 8008910:	42b5      	cmp	r5, r6
 8008912:	d11a      	bne.n	800894a <_printf_common+0xd2>
 8008914:	2000      	movs	r0, #0
 8008916:	e008      	b.n	800892a <_printf_common+0xb2>
 8008918:	2301      	movs	r3, #1
 800891a:	4652      	mov	r2, sl
 800891c:	4641      	mov	r1, r8
 800891e:	4638      	mov	r0, r7
 8008920:	47c8      	blx	r9
 8008922:	3001      	adds	r0, #1
 8008924:	d103      	bne.n	800892e <_printf_common+0xb6>
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892e:	3501      	adds	r5, #1
 8008930:	e7c1      	b.n	80088b6 <_printf_common+0x3e>
 8008932:	2030      	movs	r0, #48	@ 0x30
 8008934:	18e1      	adds	r1, r4, r3
 8008936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008940:	4422      	add	r2, r4
 8008942:	3302      	adds	r3, #2
 8008944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008948:	e7c2      	b.n	80088d0 <_printf_common+0x58>
 800894a:	2301      	movs	r3, #1
 800894c:	4622      	mov	r2, r4
 800894e:	4641      	mov	r1, r8
 8008950:	4638      	mov	r0, r7
 8008952:	47c8      	blx	r9
 8008954:	3001      	adds	r0, #1
 8008956:	d0e6      	beq.n	8008926 <_printf_common+0xae>
 8008958:	3601      	adds	r6, #1
 800895a:	e7d9      	b.n	8008910 <_printf_common+0x98>

0800895c <_printf_i>:
 800895c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	7e0f      	ldrb	r7, [r1, #24]
 8008962:	4691      	mov	r9, r2
 8008964:	2f78      	cmp	r7, #120	@ 0x78
 8008966:	4680      	mov	r8, r0
 8008968:	460c      	mov	r4, r1
 800896a:	469a      	mov	sl, r3
 800896c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800896e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008972:	d807      	bhi.n	8008984 <_printf_i+0x28>
 8008974:	2f62      	cmp	r7, #98	@ 0x62
 8008976:	d80a      	bhi.n	800898e <_printf_i+0x32>
 8008978:	2f00      	cmp	r7, #0
 800897a:	f000 80d3 	beq.w	8008b24 <_printf_i+0x1c8>
 800897e:	2f58      	cmp	r7, #88	@ 0x58
 8008980:	f000 80ba 	beq.w	8008af8 <_printf_i+0x19c>
 8008984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800898c:	e03a      	b.n	8008a04 <_printf_i+0xa8>
 800898e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008992:	2b15      	cmp	r3, #21
 8008994:	d8f6      	bhi.n	8008984 <_printf_i+0x28>
 8008996:	a101      	add	r1, pc, #4	@ (adr r1, 800899c <_printf_i+0x40>)
 8008998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	08008a09 	.word	0x08008a09
 80089a4:	08008985 	.word	0x08008985
 80089a8:	08008985 	.word	0x08008985
 80089ac:	08008985 	.word	0x08008985
 80089b0:	08008985 	.word	0x08008985
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008985 	.word	0x08008985
 80089bc:	08008985 	.word	0x08008985
 80089c0:	08008985 	.word	0x08008985
 80089c4:	08008985 	.word	0x08008985
 80089c8:	08008b0b 	.word	0x08008b0b
 80089cc:	08008a33 	.word	0x08008a33
 80089d0:	08008ac5 	.word	0x08008ac5
 80089d4:	08008985 	.word	0x08008985
 80089d8:	08008985 	.word	0x08008985
 80089dc:	08008b2d 	.word	0x08008b2d
 80089e0:	08008985 	.word	0x08008985
 80089e4:	08008a33 	.word	0x08008a33
 80089e8:	08008985 	.word	0x08008985
 80089ec:	08008985 	.word	0x08008985
 80089f0:	08008acd 	.word	0x08008acd
 80089f4:	6833      	ldr	r3, [r6, #0]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6032      	str	r2, [r6, #0]
 80089fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a04:	2301      	movs	r3, #1
 8008a06:	e09e      	b.n	8008b46 <_printf_i+0x1ea>
 8008a08:	6833      	ldr	r3, [r6, #0]
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	1d19      	adds	r1, r3, #4
 8008a0e:	6031      	str	r1, [r6, #0]
 8008a10:	0606      	lsls	r6, r0, #24
 8008a12:	d501      	bpl.n	8008a18 <_printf_i+0xbc>
 8008a14:	681d      	ldr	r5, [r3, #0]
 8008a16:	e003      	b.n	8008a20 <_printf_i+0xc4>
 8008a18:	0645      	lsls	r5, r0, #25
 8008a1a:	d5fb      	bpl.n	8008a14 <_printf_i+0xb8>
 8008a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	da03      	bge.n	8008a2c <_printf_i+0xd0>
 8008a24:	232d      	movs	r3, #45	@ 0x2d
 8008a26:	426d      	negs	r5, r5
 8008a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a2c:	230a      	movs	r3, #10
 8008a2e:	4859      	ldr	r0, [pc, #356]	@ (8008b94 <_printf_i+0x238>)
 8008a30:	e011      	b.n	8008a56 <_printf_i+0xfa>
 8008a32:	6821      	ldr	r1, [r4, #0]
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	0608      	lsls	r0, r1, #24
 8008a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a3c:	d402      	bmi.n	8008a44 <_printf_i+0xe8>
 8008a3e:	0649      	lsls	r1, r1, #25
 8008a40:	bf48      	it	mi
 8008a42:	b2ad      	uxthmi	r5, r5
 8008a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	bf14      	ite	ne
 8008a4a:	230a      	movne	r3, #10
 8008a4c:	2308      	moveq	r3, #8
 8008a4e:	4851      	ldr	r0, [pc, #324]	@ (8008b94 <_printf_i+0x238>)
 8008a50:	2100      	movs	r1, #0
 8008a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a56:	6866      	ldr	r6, [r4, #4]
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	bfa8      	it	ge
 8008a5c:	6821      	ldrge	r1, [r4, #0]
 8008a5e:	60a6      	str	r6, [r4, #8]
 8008a60:	bfa4      	itt	ge
 8008a62:	f021 0104 	bicge.w	r1, r1, #4
 8008a66:	6021      	strge	r1, [r4, #0]
 8008a68:	b90d      	cbnz	r5, 8008a6e <_printf_i+0x112>
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	d04b      	beq.n	8008b06 <_printf_i+0x1aa>
 8008a6e:	4616      	mov	r6, r2
 8008a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a74:	fb03 5711 	mls	r7, r3, r1, r5
 8008a78:	5dc7      	ldrb	r7, [r0, r7]
 8008a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a7e:	462f      	mov	r7, r5
 8008a80:	42bb      	cmp	r3, r7
 8008a82:	460d      	mov	r5, r1
 8008a84:	d9f4      	bls.n	8008a70 <_printf_i+0x114>
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d10b      	bne.n	8008aa2 <_printf_i+0x146>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	07df      	lsls	r7, r3, #31
 8008a8e:	d508      	bpl.n	8008aa2 <_printf_i+0x146>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	6861      	ldr	r1, [r4, #4]
 8008a94:	4299      	cmp	r1, r3
 8008a96:	bfde      	ittt	le
 8008a98:	2330      	movle	r3, #48	@ 0x30
 8008a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008aa2:	1b92      	subs	r2, r2, r6
 8008aa4:	6122      	str	r2, [r4, #16]
 8008aa6:	464b      	mov	r3, r9
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f8cd a000 	str.w	sl, [sp]
 8008ab0:	aa03      	add	r2, sp, #12
 8008ab2:	f7ff fee1 	bl	8008878 <_printf_common>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d14a      	bne.n	8008b50 <_printf_i+0x1f4>
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	b004      	add	sp, #16
 8008ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	f043 0320 	orr.w	r3, r3, #32
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	2778      	movs	r7, #120	@ 0x78
 8008ace:	4832      	ldr	r0, [pc, #200]	@ (8008b98 <_printf_i+0x23c>)
 8008ad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	6831      	ldr	r1, [r6, #0]
 8008ad8:	061f      	lsls	r7, r3, #24
 8008ada:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ade:	d402      	bmi.n	8008ae6 <_printf_i+0x18a>
 8008ae0:	065f      	lsls	r7, r3, #25
 8008ae2:	bf48      	it	mi
 8008ae4:	b2ad      	uxthmi	r5, r5
 8008ae6:	6031      	str	r1, [r6, #0]
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	bf44      	itt	mi
 8008aec:	f043 0320 	orrmi.w	r3, r3, #32
 8008af0:	6023      	strmi	r3, [r4, #0]
 8008af2:	b11d      	cbz	r5, 8008afc <_printf_i+0x1a0>
 8008af4:	2310      	movs	r3, #16
 8008af6:	e7ab      	b.n	8008a50 <_printf_i+0xf4>
 8008af8:	4826      	ldr	r0, [pc, #152]	@ (8008b94 <_printf_i+0x238>)
 8008afa:	e7e9      	b.n	8008ad0 <_printf_i+0x174>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	f023 0320 	bic.w	r3, r3, #32
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	e7f6      	b.n	8008af4 <_printf_i+0x198>
 8008b06:	4616      	mov	r6, r2
 8008b08:	e7bd      	b.n	8008a86 <_printf_i+0x12a>
 8008b0a:	6833      	ldr	r3, [r6, #0]
 8008b0c:	6825      	ldr	r5, [r4, #0]
 8008b0e:	1d18      	adds	r0, r3, #4
 8008b10:	6961      	ldr	r1, [r4, #20]
 8008b12:	6030      	str	r0, [r6, #0]
 8008b14:	062e      	lsls	r6, r5, #24
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	d501      	bpl.n	8008b1e <_printf_i+0x1c2>
 8008b1a:	6019      	str	r1, [r3, #0]
 8008b1c:	e002      	b.n	8008b24 <_printf_i+0x1c8>
 8008b1e:	0668      	lsls	r0, r5, #25
 8008b20:	d5fb      	bpl.n	8008b1a <_printf_i+0x1be>
 8008b22:	8019      	strh	r1, [r3, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	4616      	mov	r6, r2
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	e7bc      	b.n	8008aa6 <_printf_i+0x14a>
 8008b2c:	6833      	ldr	r3, [r6, #0]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	6032      	str	r2, [r6, #0]
 8008b34:	681e      	ldr	r6, [r3, #0]
 8008b36:	6862      	ldr	r2, [r4, #4]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 fbf6 	bl	800932a <memchr>
 8008b3e:	b108      	cbz	r0, 8008b44 <_printf_i+0x1e8>
 8008b40:	1b80      	subs	r0, r0, r6
 8008b42:	6060      	str	r0, [r4, #4]
 8008b44:	6863      	ldr	r3, [r4, #4]
 8008b46:	6123      	str	r3, [r4, #16]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b4e:	e7aa      	b.n	8008aa6 <_printf_i+0x14a>
 8008b50:	4632      	mov	r2, r6
 8008b52:	4649      	mov	r1, r9
 8008b54:	4640      	mov	r0, r8
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	47d0      	blx	sl
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d0ad      	beq.n	8008aba <_printf_i+0x15e>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	079b      	lsls	r3, r3, #30
 8008b62:	d413      	bmi.n	8008b8c <_printf_i+0x230>
 8008b64:	68e0      	ldr	r0, [r4, #12]
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	4298      	cmp	r0, r3
 8008b6a:	bfb8      	it	lt
 8008b6c:	4618      	movlt	r0, r3
 8008b6e:	e7a6      	b.n	8008abe <_printf_i+0x162>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4632      	mov	r2, r6
 8008b74:	4649      	mov	r1, r9
 8008b76:	4640      	mov	r0, r8
 8008b78:	47d0      	blx	sl
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d09d      	beq.n	8008aba <_printf_i+0x15e>
 8008b7e:	3501      	adds	r5, #1
 8008b80:	68e3      	ldr	r3, [r4, #12]
 8008b82:	9903      	ldr	r1, [sp, #12]
 8008b84:	1a5b      	subs	r3, r3, r1
 8008b86:	42ab      	cmp	r3, r5
 8008b88:	dcf2      	bgt.n	8008b70 <_printf_i+0x214>
 8008b8a:	e7eb      	b.n	8008b64 <_printf_i+0x208>
 8008b8c:	2500      	movs	r5, #0
 8008b8e:	f104 0619 	add.w	r6, r4, #25
 8008b92:	e7f5      	b.n	8008b80 <_printf_i+0x224>
 8008b94:	0800cc10 	.word	0x0800cc10
 8008b98:	0800cc21 	.word	0x0800cc21

08008b9c <_scanf_float>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	b087      	sub	sp, #28
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	688b      	ldr	r3, [r1, #8]
 8008ba6:	4617      	mov	r7, r2
 8008ba8:	1e5a      	subs	r2, r3, #1
 8008baa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008bae:	bf82      	ittt	hi
 8008bb0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008bb4:	eb03 0b05 	addhi.w	fp, r3, r5
 8008bb8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bbc:	460a      	mov	r2, r1
 8008bbe:	f04f 0500 	mov.w	r5, #0
 8008bc2:	bf88      	it	hi
 8008bc4:	608b      	strhi	r3, [r1, #8]
 8008bc6:	680b      	ldr	r3, [r1, #0]
 8008bc8:	4680      	mov	r8, r0
 8008bca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008bce:	f842 3b1c 	str.w	r3, [r2], #28
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	bf98      	it	ls
 8008bd6:	f04f 0b00 	movls.w	fp, #0
 8008bda:	4616      	mov	r6, r2
 8008bdc:	46aa      	mov	sl, r5
 8008bde:	46a9      	mov	r9, r5
 8008be0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008be4:	9201      	str	r2, [sp, #4]
 8008be6:	9502      	str	r5, [sp, #8]
 8008be8:	68a2      	ldr	r2, [r4, #8]
 8008bea:	b152      	cbz	r2, 8008c02 <_scanf_float+0x66>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b4e      	cmp	r3, #78	@ 0x4e
 8008bf2:	d865      	bhi.n	8008cc0 <_scanf_float+0x124>
 8008bf4:	2b40      	cmp	r3, #64	@ 0x40
 8008bf6:	d83d      	bhi.n	8008c74 <_scanf_float+0xd8>
 8008bf8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008bfc:	b2c8      	uxtb	r0, r1
 8008bfe:	280e      	cmp	r0, #14
 8008c00:	d93b      	bls.n	8008c7a <_scanf_float+0xde>
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	d003      	beq.n	8008c10 <_scanf_float+0x74>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c14:	f1ba 0f01 	cmp.w	sl, #1
 8008c18:	f200 8118 	bhi.w	8008e4c <_scanf_float+0x2b0>
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	f200 8109 	bhi.w	8008e36 <_scanf_float+0x29a>
 8008c24:	2001      	movs	r0, #1
 8008c26:	b007      	add	sp, #28
 8008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c30:	2a0d      	cmp	r2, #13
 8008c32:	d8e6      	bhi.n	8008c02 <_scanf_float+0x66>
 8008c34:	a101      	add	r1, pc, #4	@ (adr r1, 8008c3c <_scanf_float+0xa0>)
 8008c36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008d83 	.word	0x08008d83
 8008c40:	08008c03 	.word	0x08008c03
 8008c44:	08008c03 	.word	0x08008c03
 8008c48:	08008c03 	.word	0x08008c03
 8008c4c:	08008de3 	.word	0x08008de3
 8008c50:	08008dbb 	.word	0x08008dbb
 8008c54:	08008c03 	.word	0x08008c03
 8008c58:	08008c03 	.word	0x08008c03
 8008c5c:	08008d91 	.word	0x08008d91
 8008c60:	08008c03 	.word	0x08008c03
 8008c64:	08008c03 	.word	0x08008c03
 8008c68:	08008c03 	.word	0x08008c03
 8008c6c:	08008c03 	.word	0x08008c03
 8008c70:	08008d49 	.word	0x08008d49
 8008c74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008c78:	e7da      	b.n	8008c30 <_scanf_float+0x94>
 8008c7a:	290e      	cmp	r1, #14
 8008c7c:	d8c1      	bhi.n	8008c02 <_scanf_float+0x66>
 8008c7e:	a001      	add	r0, pc, #4	@ (adr r0, 8008c84 <_scanf_float+0xe8>)
 8008c80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c84:	08008d39 	.word	0x08008d39
 8008c88:	08008c03 	.word	0x08008c03
 8008c8c:	08008d39 	.word	0x08008d39
 8008c90:	08008dcf 	.word	0x08008dcf
 8008c94:	08008c03 	.word	0x08008c03
 8008c98:	08008ce1 	.word	0x08008ce1
 8008c9c:	08008d1f 	.word	0x08008d1f
 8008ca0:	08008d1f 	.word	0x08008d1f
 8008ca4:	08008d1f 	.word	0x08008d1f
 8008ca8:	08008d1f 	.word	0x08008d1f
 8008cac:	08008d1f 	.word	0x08008d1f
 8008cb0:	08008d1f 	.word	0x08008d1f
 8008cb4:	08008d1f 	.word	0x08008d1f
 8008cb8:	08008d1f 	.word	0x08008d1f
 8008cbc:	08008d1f 	.word	0x08008d1f
 8008cc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008cc2:	d809      	bhi.n	8008cd8 <_scanf_float+0x13c>
 8008cc4:	2b60      	cmp	r3, #96	@ 0x60
 8008cc6:	d8b1      	bhi.n	8008c2c <_scanf_float+0x90>
 8008cc8:	2b54      	cmp	r3, #84	@ 0x54
 8008cca:	d07b      	beq.n	8008dc4 <_scanf_float+0x228>
 8008ccc:	2b59      	cmp	r3, #89	@ 0x59
 8008cce:	d198      	bne.n	8008c02 <_scanf_float+0x66>
 8008cd0:	2d07      	cmp	r5, #7
 8008cd2:	d196      	bne.n	8008c02 <_scanf_float+0x66>
 8008cd4:	2508      	movs	r5, #8
 8008cd6:	e02c      	b.n	8008d32 <_scanf_float+0x196>
 8008cd8:	2b74      	cmp	r3, #116	@ 0x74
 8008cda:	d073      	beq.n	8008dc4 <_scanf_float+0x228>
 8008cdc:	2b79      	cmp	r3, #121	@ 0x79
 8008cde:	e7f6      	b.n	8008cce <_scanf_float+0x132>
 8008ce0:	6821      	ldr	r1, [r4, #0]
 8008ce2:	05c8      	lsls	r0, r1, #23
 8008ce4:	d51b      	bpl.n	8008d1e <_scanf_float+0x182>
 8008ce6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008cea:	6021      	str	r1, [r4, #0]
 8008cec:	f109 0901 	add.w	r9, r9, #1
 8008cf0:	f1bb 0f00 	cmp.w	fp, #0
 8008cf4:	d003      	beq.n	8008cfe <_scanf_float+0x162>
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cfc:	60a2      	str	r2, [r4, #8]
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	3301      	adds	r3, #1
 8008d08:	6123      	str	r3, [r4, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	f340 8087 	ble.w	8008e24 <_scanf_float+0x288>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	e764      	b.n	8008be8 <_scanf_float+0x4c>
 8008d1e:	eb1a 0105 	adds.w	r1, sl, r5
 8008d22:	f47f af6e 	bne.w	8008c02 <_scanf_float+0x66>
 8008d26:	460d      	mov	r5, r1
 8008d28:	468a      	mov	sl, r1
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	f806 3b01 	strb.w	r3, [r6], #1
 8008d36:	e7e2      	b.n	8008cfe <_scanf_float+0x162>
 8008d38:	6822      	ldr	r2, [r4, #0]
 8008d3a:	0610      	lsls	r0, r2, #24
 8008d3c:	f57f af61 	bpl.w	8008c02 <_scanf_float+0x66>
 8008d40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	e7f4      	b.n	8008d32 <_scanf_float+0x196>
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d10e      	bne.n	8008d6c <_scanf_float+0x1d0>
 8008d4e:	f1b9 0f00 	cmp.w	r9, #0
 8008d52:	d10e      	bne.n	8008d72 <_scanf_float+0x1d6>
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d5e:	d108      	bne.n	8008d72 <_scanf_float+0x1d6>
 8008d60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d64:	f04f 0a01 	mov.w	sl, #1
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	e7e2      	b.n	8008d32 <_scanf_float+0x196>
 8008d6c:	f1ba 0f02 	cmp.w	sl, #2
 8008d70:	d055      	beq.n	8008e1e <_scanf_float+0x282>
 8008d72:	2d01      	cmp	r5, #1
 8008d74:	d002      	beq.n	8008d7c <_scanf_float+0x1e0>
 8008d76:	2d04      	cmp	r5, #4
 8008d78:	f47f af43 	bne.w	8008c02 <_scanf_float+0x66>
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	b2ed      	uxtb	r5, r5
 8008d80:	e7d7      	b.n	8008d32 <_scanf_float+0x196>
 8008d82:	f1ba 0f01 	cmp.w	sl, #1
 8008d86:	f47f af3c 	bne.w	8008c02 <_scanf_float+0x66>
 8008d8a:	f04f 0a02 	mov.w	sl, #2
 8008d8e:	e7d0      	b.n	8008d32 <_scanf_float+0x196>
 8008d90:	b97d      	cbnz	r5, 8008db2 <_scanf_float+0x216>
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	f47f af37 	bne.w	8008c08 <_scanf_float+0x6c>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008da0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008da4:	f040 8103 	bne.w	8008fae <_scanf_float+0x412>
 8008da8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008dac:	2501      	movs	r5, #1
 8008dae:	6022      	str	r2, [r4, #0]
 8008db0:	e7bf      	b.n	8008d32 <_scanf_float+0x196>
 8008db2:	2d03      	cmp	r5, #3
 8008db4:	d0e2      	beq.n	8008d7c <_scanf_float+0x1e0>
 8008db6:	2d05      	cmp	r5, #5
 8008db8:	e7de      	b.n	8008d78 <_scanf_float+0x1dc>
 8008dba:	2d02      	cmp	r5, #2
 8008dbc:	f47f af21 	bne.w	8008c02 <_scanf_float+0x66>
 8008dc0:	2503      	movs	r5, #3
 8008dc2:	e7b6      	b.n	8008d32 <_scanf_float+0x196>
 8008dc4:	2d06      	cmp	r5, #6
 8008dc6:	f47f af1c 	bne.w	8008c02 <_scanf_float+0x66>
 8008dca:	2507      	movs	r5, #7
 8008dcc:	e7b1      	b.n	8008d32 <_scanf_float+0x196>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	0591      	lsls	r1, r2, #22
 8008dd2:	f57f af16 	bpl.w	8008c02 <_scanf_float+0x66>
 8008dd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008de0:	e7a7      	b.n	8008d32 <_scanf_float+0x196>
 8008de2:	6822      	ldr	r2, [r4, #0]
 8008de4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008de8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008dec:	d006      	beq.n	8008dfc <_scanf_float+0x260>
 8008dee:	0550      	lsls	r0, r2, #21
 8008df0:	f57f af07 	bpl.w	8008c02 <_scanf_float+0x66>
 8008df4:	f1b9 0f00 	cmp.w	r9, #0
 8008df8:	f000 80d9 	beq.w	8008fae <_scanf_float+0x412>
 8008dfc:	0591      	lsls	r1, r2, #22
 8008dfe:	bf58      	it	pl
 8008e00:	9902      	ldrpl	r1, [sp, #8]
 8008e02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e06:	bf58      	it	pl
 8008e08:	eba9 0101 	subpl.w	r1, r9, r1
 8008e0c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008e10:	f04f 0900 	mov.w	r9, #0
 8008e14:	bf58      	it	pl
 8008e16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	e789      	b.n	8008d32 <_scanf_float+0x196>
 8008e1e:	f04f 0a03 	mov.w	sl, #3
 8008e22:	e786      	b.n	8008d32 <_scanf_float+0x196>
 8008e24:	4639      	mov	r1, r7
 8008e26:	4640      	mov	r0, r8
 8008e28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e2c:	4798      	blx	r3
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f aeda 	beq.w	8008be8 <_scanf_float+0x4c>
 8008e34:	e6e5      	b.n	8008c02 <_scanf_float+0x66>
 8008e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e42:	4798      	blx	r3
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	e6e7      	b.n	8008c1c <_scanf_float+0x80>
 8008e4c:	1e6b      	subs	r3, r5, #1
 8008e4e:	2b06      	cmp	r3, #6
 8008e50:	d824      	bhi.n	8008e9c <_scanf_float+0x300>
 8008e52:	2d02      	cmp	r5, #2
 8008e54:	d836      	bhi.n	8008ec4 <_scanf_float+0x328>
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	429e      	cmp	r6, r3
 8008e5a:	f67f aee3 	bls.w	8008c24 <_scanf_float+0x88>
 8008e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e62:	463a      	mov	r2, r7
 8008e64:	4640      	mov	r0, r8
 8008e66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e6a:	4798      	blx	r3
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	e7f0      	b.n	8008e56 <_scanf_float+0x2ba>
 8008e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e78:	463a      	mov	r2, r7
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e80:	4798      	blx	r3
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8008e90:	f1ba 0f02 	cmp.w	sl, #2
 8008e94:	d1ee      	bne.n	8008e74 <_scanf_float+0x2d8>
 8008e96:	3d03      	subs	r5, #3
 8008e98:	b2ed      	uxtb	r5, r5
 8008e9a:	1b76      	subs	r6, r6, r5
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	05da      	lsls	r2, r3, #23
 8008ea0:	d530      	bpl.n	8008f04 <_scanf_float+0x368>
 8008ea2:	055b      	lsls	r3, r3, #21
 8008ea4:	d511      	bpl.n	8008eca <_scanf_float+0x32e>
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	429e      	cmp	r6, r3
 8008eaa:	f67f aebb 	bls.w	8008c24 <_scanf_float+0x88>
 8008eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eba:	4798      	blx	r3
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	6123      	str	r3, [r4, #16]
 8008ec2:	e7f0      	b.n	8008ea6 <_scanf_float+0x30a>
 8008ec4:	46aa      	mov	sl, r5
 8008ec6:	46b3      	mov	fp, r6
 8008ec8:	e7de      	b.n	8008e88 <_scanf_float+0x2ec>
 8008eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	2965      	cmp	r1, #101	@ 0x65
 8008ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ed6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	d00c      	beq.n	8008ef8 <_scanf_float+0x35c>
 8008ede:	2945      	cmp	r1, #69	@ 0x45
 8008ee0:	d00a      	beq.n	8008ef8 <_scanf_float+0x35c>
 8008ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ee6:	463a      	mov	r2, r7
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4798      	blx	r3
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	1eb5      	subs	r5, r6, #2
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4640      	mov	r0, r8
 8008efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f00:	4798      	blx	r3
 8008f02:	462e      	mov	r6, r5
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	f012 0210 	ands.w	r2, r2, #16
 8008f0a:	d001      	beq.n	8008f10 <_scanf_float+0x374>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e68a      	b.n	8008c26 <_scanf_float+0x8a>
 8008f10:	7032      	strb	r2, [r6, #0]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1c:	d11c      	bne.n	8008f58 <_scanf_float+0x3bc>
 8008f1e:	9b02      	ldr	r3, [sp, #8]
 8008f20:	454b      	cmp	r3, r9
 8008f22:	eba3 0209 	sub.w	r2, r3, r9
 8008f26:	d123      	bne.n	8008f70 <_scanf_float+0x3d4>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	9901      	ldr	r1, [sp, #4]
 8008f2e:	f002 fbff 	bl	800b730 <_strtod_r>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	6825      	ldr	r5, [r4, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f015 0f02 	tst.w	r5, #2
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	460f      	mov	r7, r1
 8008f40:	f103 0204 	add.w	r2, r3, #4
 8008f44:	d01f      	beq.n	8008f86 <_scanf_float+0x3ea>
 8008f46:	9903      	ldr	r1, [sp, #12]
 8008f48:	600a      	str	r2, [r1, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	e9c3 6700 	strd	r6, r7, [r3]
 8008f50:	68e3      	ldr	r3, [r4, #12]
 8008f52:	3301      	adds	r3, #1
 8008f54:	60e3      	str	r3, [r4, #12]
 8008f56:	e7d9      	b.n	8008f0c <_scanf_float+0x370>
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0e4      	beq.n	8008f28 <_scanf_float+0x38c>
 8008f5e:	9905      	ldr	r1, [sp, #20]
 8008f60:	230a      	movs	r3, #10
 8008f62:	4640      	mov	r0, r8
 8008f64:	3101      	adds	r1, #1
 8008f66:	f002 fc63 	bl	800b830 <_strtol_r>
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	9e05      	ldr	r6, [sp, #20]
 8008f6e:	1ac2      	subs	r2, r0, r3
 8008f70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008f74:	429e      	cmp	r6, r3
 8008f76:	bf28      	it	cs
 8008f78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	490d      	ldr	r1, [pc, #52]	@ (8008fb4 <_scanf_float+0x418>)
 8008f80:	f000 f8f0 	bl	8009164 <siprintf>
 8008f84:	e7d0      	b.n	8008f28 <_scanf_float+0x38c>
 8008f86:	076d      	lsls	r5, r5, #29
 8008f88:	d4dd      	bmi.n	8008f46 <_scanf_float+0x3aa>
 8008f8a:	9d03      	ldr	r5, [sp, #12]
 8008f8c:	602a      	str	r2, [r5, #0]
 8008f8e:	681d      	ldr	r5, [r3, #0]
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	f7f7 fda6 	bl	8000ae4 <__aeabi_dcmpun>
 8008f98:	b120      	cbz	r0, 8008fa4 <_scanf_float+0x408>
 8008f9a:	4807      	ldr	r0, [pc, #28]	@ (8008fb8 <_scanf_float+0x41c>)
 8008f9c:	f000 f9d4 	bl	8009348 <nanf>
 8008fa0:	6028      	str	r0, [r5, #0]
 8008fa2:	e7d5      	b.n	8008f50 <_scanf_float+0x3b4>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 fdfa 	bl	8000ba0 <__aeabi_d2f>
 8008fac:	e7f8      	b.n	8008fa0 <_scanf_float+0x404>
 8008fae:	f04f 0900 	mov.w	r9, #0
 8008fb2:	e62d      	b.n	8008c10 <_scanf_float+0x74>
 8008fb4:	0800cc32 	.word	0x0800cc32
 8008fb8:	0800cfcd 	.word	0x0800cfcd

08008fbc <std>:
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fca:	6083      	str	r3, [r0, #8]
 8008fcc:	8181      	strh	r1, [r0, #12]
 8008fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fd0:	81c2      	strh	r2, [r0, #14]
 8008fd2:	6183      	str	r3, [r0, #24]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	2208      	movs	r2, #8
 8008fd8:	305c      	adds	r0, #92	@ 0x5c
 8008fda:	f000 f926 	bl	800922a <memset>
 8008fde:	4b0d      	ldr	r3, [pc, #52]	@ (8009014 <std+0x58>)
 8008fe0:	6224      	str	r4, [r4, #32]
 8008fe2:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <std+0x5c>)
 8008fe6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800901c <std+0x60>)
 8008fea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <std+0x64>)
 8008fee:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <std+0x68>)
 8008ff2:	429c      	cmp	r4, r3
 8008ff4:	d006      	beq.n	8009004 <std+0x48>
 8008ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ffa:	4294      	cmp	r4, r2
 8008ffc:	d002      	beq.n	8009004 <std+0x48>
 8008ffe:	33d0      	adds	r3, #208	@ 0xd0
 8009000:	429c      	cmp	r4, r3
 8009002:	d105      	bne.n	8009010 <std+0x54>
 8009004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800900c:	f000 b98a 	b.w	8009324 <__retarget_lock_init_recursive>
 8009010:	bd10      	pop	{r4, pc}
 8009012:	bf00      	nop
 8009014:	080091a5 	.word	0x080091a5
 8009018:	080091c7 	.word	0x080091c7
 800901c:	080091ff 	.word	0x080091ff
 8009020:	08009223 	.word	0x08009223
 8009024:	20000610 	.word	0x20000610

08009028 <stdio_exit_handler>:
 8009028:	4a02      	ldr	r2, [pc, #8]	@ (8009034 <stdio_exit_handler+0xc>)
 800902a:	4903      	ldr	r1, [pc, #12]	@ (8009038 <stdio_exit_handler+0x10>)
 800902c:	4803      	ldr	r0, [pc, #12]	@ (800903c <stdio_exit_handler+0x14>)
 800902e:	f000 b869 	b.w	8009104 <_fwalk_sglue>
 8009032:	bf00      	nop
 8009034:	20000028 	.word	0x20000028
 8009038:	0800be65 	.word	0x0800be65
 800903c:	20000038 	.word	0x20000038

08009040 <cleanup_stdio>:
 8009040:	6841      	ldr	r1, [r0, #4]
 8009042:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <cleanup_stdio+0x34>)
 8009044:	b510      	push	{r4, lr}
 8009046:	4299      	cmp	r1, r3
 8009048:	4604      	mov	r4, r0
 800904a:	d001      	beq.n	8009050 <cleanup_stdio+0x10>
 800904c:	f002 ff0a 	bl	800be64 <_fflush_r>
 8009050:	68a1      	ldr	r1, [r4, #8]
 8009052:	4b09      	ldr	r3, [pc, #36]	@ (8009078 <cleanup_stdio+0x38>)
 8009054:	4299      	cmp	r1, r3
 8009056:	d002      	beq.n	800905e <cleanup_stdio+0x1e>
 8009058:	4620      	mov	r0, r4
 800905a:	f002 ff03 	bl	800be64 <_fflush_r>
 800905e:	68e1      	ldr	r1, [r4, #12]
 8009060:	4b06      	ldr	r3, [pc, #24]	@ (800907c <cleanup_stdio+0x3c>)
 8009062:	4299      	cmp	r1, r3
 8009064:	d004      	beq.n	8009070 <cleanup_stdio+0x30>
 8009066:	4620      	mov	r0, r4
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	f002 befa 	b.w	800be64 <_fflush_r>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	20000610 	.word	0x20000610
 8009078:	20000678 	.word	0x20000678
 800907c:	200006e0 	.word	0x200006e0

08009080 <global_stdio_init.part.0>:
 8009080:	b510      	push	{r4, lr}
 8009082:	4b0b      	ldr	r3, [pc, #44]	@ (80090b0 <global_stdio_init.part.0+0x30>)
 8009084:	4c0b      	ldr	r4, [pc, #44]	@ (80090b4 <global_stdio_init.part.0+0x34>)
 8009086:	4a0c      	ldr	r2, [pc, #48]	@ (80090b8 <global_stdio_init.part.0+0x38>)
 8009088:	4620      	mov	r0, r4
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	2104      	movs	r1, #4
 800908e:	2200      	movs	r2, #0
 8009090:	f7ff ff94 	bl	8008fbc <std>
 8009094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009098:	2201      	movs	r2, #1
 800909a:	2109      	movs	r1, #9
 800909c:	f7ff ff8e 	bl	8008fbc <std>
 80090a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090a4:	2202      	movs	r2, #2
 80090a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090aa:	2112      	movs	r1, #18
 80090ac:	f7ff bf86 	b.w	8008fbc <std>
 80090b0:	20000748 	.word	0x20000748
 80090b4:	20000610 	.word	0x20000610
 80090b8:	08009029 	.word	0x08009029

080090bc <__sfp_lock_acquire>:
 80090bc:	4801      	ldr	r0, [pc, #4]	@ (80090c4 <__sfp_lock_acquire+0x8>)
 80090be:	f000 b932 	b.w	8009326 <__retarget_lock_acquire_recursive>
 80090c2:	bf00      	nop
 80090c4:	20000751 	.word	0x20000751

080090c8 <__sfp_lock_release>:
 80090c8:	4801      	ldr	r0, [pc, #4]	@ (80090d0 <__sfp_lock_release+0x8>)
 80090ca:	f000 b92d 	b.w	8009328 <__retarget_lock_release_recursive>
 80090ce:	bf00      	nop
 80090d0:	20000751 	.word	0x20000751

080090d4 <__sinit>:
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4604      	mov	r4, r0
 80090d8:	f7ff fff0 	bl	80090bc <__sfp_lock_acquire>
 80090dc:	6a23      	ldr	r3, [r4, #32]
 80090de:	b11b      	cbz	r3, 80090e8 <__sinit+0x14>
 80090e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e4:	f7ff bff0 	b.w	80090c8 <__sfp_lock_release>
 80090e8:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <__sinit+0x28>)
 80090ea:	6223      	str	r3, [r4, #32]
 80090ec:	4b04      	ldr	r3, [pc, #16]	@ (8009100 <__sinit+0x2c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f5      	bne.n	80090e0 <__sinit+0xc>
 80090f4:	f7ff ffc4 	bl	8009080 <global_stdio_init.part.0>
 80090f8:	e7f2      	b.n	80090e0 <__sinit+0xc>
 80090fa:	bf00      	nop
 80090fc:	08009041 	.word	0x08009041
 8009100:	20000748 	.word	0x20000748

08009104 <_fwalk_sglue>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	4607      	mov	r7, r0
 800910a:	4688      	mov	r8, r1
 800910c:	4614      	mov	r4, r2
 800910e:	2600      	movs	r6, #0
 8009110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009114:	f1b9 0901 	subs.w	r9, r9, #1
 8009118:	d505      	bpl.n	8009126 <_fwalk_sglue+0x22>
 800911a:	6824      	ldr	r4, [r4, #0]
 800911c:	2c00      	cmp	r4, #0
 800911e:	d1f7      	bne.n	8009110 <_fwalk_sglue+0xc>
 8009120:	4630      	mov	r0, r6
 8009122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d907      	bls.n	800913c <_fwalk_sglue+0x38>
 800912c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009130:	3301      	adds	r3, #1
 8009132:	d003      	beq.n	800913c <_fwalk_sglue+0x38>
 8009134:	4629      	mov	r1, r5
 8009136:	4638      	mov	r0, r7
 8009138:	47c0      	blx	r8
 800913a:	4306      	orrs	r6, r0
 800913c:	3568      	adds	r5, #104	@ 0x68
 800913e:	e7e9      	b.n	8009114 <_fwalk_sglue+0x10>

08009140 <iprintf>:
 8009140:	b40f      	push	{r0, r1, r2, r3}
 8009142:	b507      	push	{r0, r1, r2, lr}
 8009144:	4906      	ldr	r1, [pc, #24]	@ (8009160 <iprintf+0x20>)
 8009146:	ab04      	add	r3, sp, #16
 8009148:	6808      	ldr	r0, [r1, #0]
 800914a:	f853 2b04 	ldr.w	r2, [r3], #4
 800914e:	6881      	ldr	r1, [r0, #8]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	f002 fcef 	bl	800bb34 <_vfiprintf_r>
 8009156:	b003      	add	sp, #12
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	b004      	add	sp, #16
 800915e:	4770      	bx	lr
 8009160:	20000034 	.word	0x20000034

08009164 <siprintf>:
 8009164:	b40e      	push	{r1, r2, r3}
 8009166:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800916a:	b500      	push	{lr}
 800916c:	b09c      	sub	sp, #112	@ 0x70
 800916e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009170:	9002      	str	r0, [sp, #8]
 8009172:	9006      	str	r0, [sp, #24]
 8009174:	9107      	str	r1, [sp, #28]
 8009176:	9104      	str	r1, [sp, #16]
 8009178:	4808      	ldr	r0, [pc, #32]	@ (800919c <siprintf+0x38>)
 800917a:	4909      	ldr	r1, [pc, #36]	@ (80091a0 <siprintf+0x3c>)
 800917c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	a902      	add	r1, sp, #8
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	f002 fbb0 	bl	800b8ec <_svfiprintf_r>
 800918c:	2200      	movs	r2, #0
 800918e:	9b02      	ldr	r3, [sp, #8]
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	b01c      	add	sp, #112	@ 0x70
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	20000034 	.word	0x20000034
 80091a0:	ffff0208 	.word	0xffff0208

080091a4 <__sread>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	f000 f86c 	bl	8009288 <_read_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	bfab      	itete	ge
 80091b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091b6:	89a3      	ldrhlt	r3, [r4, #12]
 80091b8:	181b      	addge	r3, r3, r0
 80091ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091be:	bfac      	ite	ge
 80091c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091c2:	81a3      	strhlt	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__swrite>:
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	461f      	mov	r7, r3
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	4605      	mov	r5, r0
 80091d0:	05db      	lsls	r3, r3, #23
 80091d2:	460c      	mov	r4, r1
 80091d4:	4616      	mov	r6, r2
 80091d6:	d505      	bpl.n	80091e4 <__swrite+0x1e>
 80091d8:	2302      	movs	r3, #2
 80091da:	2200      	movs	r2, #0
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	f000 f840 	bl	8009264 <_lseek_r>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	4632      	mov	r2, r6
 80091e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	4628      	mov	r0, r5
 80091f0:	463b      	mov	r3, r7
 80091f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	f000 b857 	b.w	80092ac <_write_r>

080091fe <__sseek>:
 80091fe:	b510      	push	{r4, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009206:	f000 f82d 	bl	8009264 <_lseek_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	bf15      	itete	ne
 8009210:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800921a:	81a3      	strheq	r3, [r4, #12]
 800921c:	bf18      	it	ne
 800921e:	81a3      	strhne	r3, [r4, #12]
 8009220:	bd10      	pop	{r4, pc}

08009222 <__sclose>:
 8009222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009226:	f000 b80d 	b.w	8009244 <_close_r>

0800922a <memset>:
 800922a:	4603      	mov	r3, r0
 800922c:	4402      	add	r2, r0
 800922e:	4293      	cmp	r3, r2
 8009230:	d100      	bne.n	8009234 <memset+0xa>
 8009232:	4770      	bx	lr
 8009234:	f803 1b01 	strb.w	r1, [r3], #1
 8009238:	e7f9      	b.n	800922e <memset+0x4>
	...

0800923c <_localeconv_r>:
 800923c:	4800      	ldr	r0, [pc, #0]	@ (8009240 <_localeconv_r+0x4>)
 800923e:	4770      	bx	lr
 8009240:	20000174 	.word	0x20000174

08009244 <_close_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	4d05      	ldr	r5, [pc, #20]	@ (8009260 <_close_r+0x1c>)
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f9 fc27 	bl	8002aa2 <_close>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_close_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_close_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	2000074c 	.word	0x2000074c

08009264 <_lseek_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	@ (8009284 <_lseek_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f9 fc39 	bl	8002aea <_lseek>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_lseek_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_lseek_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	2000074c 	.word	0x2000074c

08009288 <_read_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	2200      	movs	r2, #0
 8009292:	4d05      	ldr	r5, [pc, #20]	@ (80092a8 <_read_r+0x20>)
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7f9 fbca 	bl	8002a30 <_read>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_read_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_read_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	2000074c 	.word	0x2000074c

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	2200      	movs	r2, #0
 80092b6:	4d05      	ldr	r5, [pc, #20]	@ (80092cc <_write_r+0x20>)
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f9 fbd5 	bl	8002a6a <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	2000074c 	.word	0x2000074c

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	@ (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000034 	.word	0x20000034

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	2600      	movs	r6, #0
 80092e0:	4d0c      	ldr	r5, [pc, #48]	@ (8009314 <__libc_init_array+0x38>)
 80092e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009318 <__libc_init_array+0x3c>)
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	f003 fb68 	bl	800c9c0 <_init>
 80092f0:	2600      	movs	r6, #0
 80092f2:	4d0a      	ldr	r5, [pc, #40]	@ (800931c <__libc_init_array+0x40>)
 80092f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009320 <__libc_init_array+0x44>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	0800d038 	.word	0x0800d038
 8009318:	0800d038 	.word	0x0800d038
 800931c:	0800d038 	.word	0x0800d038
 8009320:	0800d03c 	.word	0x0800d03c

08009324 <__retarget_lock_init_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_acquire_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_release_recursive>:
 8009328:	4770      	bx	lr

0800932a <memchr>:
 800932a:	4603      	mov	r3, r0
 800932c:	b510      	push	{r4, lr}
 800932e:	b2c9      	uxtb	r1, r1
 8009330:	4402      	add	r2, r0
 8009332:	4293      	cmp	r3, r2
 8009334:	4618      	mov	r0, r3
 8009336:	d101      	bne.n	800933c <memchr+0x12>
 8009338:	2000      	movs	r0, #0
 800933a:	e003      	b.n	8009344 <memchr+0x1a>
 800933c:	7804      	ldrb	r4, [r0, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	428c      	cmp	r4, r1
 8009342:	d1f6      	bne.n	8009332 <memchr+0x8>
 8009344:	bd10      	pop	{r4, pc}
	...

08009348 <nanf>:
 8009348:	4800      	ldr	r0, [pc, #0]	@ (800934c <nanf+0x4>)
 800934a:	4770      	bx	lr
 800934c:	7fc00000 	.word	0x7fc00000

08009350 <quorem>:
 8009350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	6903      	ldr	r3, [r0, #16]
 8009356:	690c      	ldr	r4, [r1, #16]
 8009358:	4607      	mov	r7, r0
 800935a:	42a3      	cmp	r3, r4
 800935c:	db7e      	blt.n	800945c <quorem+0x10c>
 800935e:	3c01      	subs	r4, #1
 8009360:	00a3      	lsls	r3, r4, #2
 8009362:	f100 0514 	add.w	r5, r0, #20
 8009366:	f101 0814 	add.w	r8, r1, #20
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800937a:	3301      	adds	r3, #1
 800937c:	429a      	cmp	r2, r3
 800937e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009386:	d32e      	bcc.n	80093e6 <quorem+0x96>
 8009388:	f04f 0a00 	mov.w	sl, #0
 800938c:	46c4      	mov	ip, r8
 800938e:	46ae      	mov	lr, r5
 8009390:	46d3      	mov	fp, sl
 8009392:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009396:	b298      	uxth	r0, r3
 8009398:	fb06 a000 	mla	r0, r6, r0, sl
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	0c02      	lsrs	r2, r0, #16
 80093a0:	fb06 2303 	mla	r3, r6, r3, r2
 80093a4:	f8de 2000 	ldr.w	r2, [lr]
 80093a8:	b280      	uxth	r0, r0
 80093aa:	b292      	uxth	r2, r2
 80093ac:	1a12      	subs	r2, r2, r0
 80093ae:	445a      	add	r2, fp
 80093b0:	f8de 0000 	ldr.w	r0, [lr]
 80093b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093c2:	b292      	uxth	r2, r2
 80093c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093c8:	45e1      	cmp	r9, ip
 80093ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093ce:	f84e 2b04 	str.w	r2, [lr], #4
 80093d2:	d2de      	bcs.n	8009392 <quorem+0x42>
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	58eb      	ldr	r3, [r5, r3]
 80093d8:	b92b      	cbnz	r3, 80093e6 <quorem+0x96>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	3b04      	subs	r3, #4
 80093de:	429d      	cmp	r5, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	d32f      	bcc.n	8009444 <quorem+0xf4>
 80093e4:	613c      	str	r4, [r7, #16]
 80093e6:	4638      	mov	r0, r7
 80093e8:	f001 f9c2 	bl	800a770 <__mcmp>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	db25      	blt.n	800943c <quorem+0xec>
 80093f0:	4629      	mov	r1, r5
 80093f2:	2000      	movs	r0, #0
 80093f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80093f8:	f8d1 c000 	ldr.w	ip, [r1]
 80093fc:	fa1f fe82 	uxth.w	lr, r2
 8009400:	fa1f f38c 	uxth.w	r3, ip
 8009404:	eba3 030e 	sub.w	r3, r3, lr
 8009408:	4403      	add	r3, r0
 800940a:	0c12      	lsrs	r2, r2, #16
 800940c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009410:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009414:	b29b      	uxth	r3, r3
 8009416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800941a:	45c1      	cmp	r9, r8
 800941c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009420:	f841 3b04 	str.w	r3, [r1], #4
 8009424:	d2e6      	bcs.n	80093f4 <quorem+0xa4>
 8009426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800942a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800942e:	b922      	cbnz	r2, 800943a <quorem+0xea>
 8009430:	3b04      	subs	r3, #4
 8009432:	429d      	cmp	r5, r3
 8009434:	461a      	mov	r2, r3
 8009436:	d30b      	bcc.n	8009450 <quorem+0x100>
 8009438:	613c      	str	r4, [r7, #16]
 800943a:	3601      	adds	r6, #1
 800943c:	4630      	mov	r0, r6
 800943e:	b003      	add	sp, #12
 8009440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	3b04      	subs	r3, #4
 8009448:	2a00      	cmp	r2, #0
 800944a:	d1cb      	bne.n	80093e4 <quorem+0x94>
 800944c:	3c01      	subs	r4, #1
 800944e:	e7c6      	b.n	80093de <quorem+0x8e>
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	3b04      	subs	r3, #4
 8009454:	2a00      	cmp	r2, #0
 8009456:	d1ef      	bne.n	8009438 <quorem+0xe8>
 8009458:	3c01      	subs	r4, #1
 800945a:	e7ea      	b.n	8009432 <quorem+0xe2>
 800945c:	2000      	movs	r0, #0
 800945e:	e7ee      	b.n	800943e <quorem+0xee>

08009460 <_dtoa_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	4614      	mov	r4, r2
 8009466:	461d      	mov	r5, r3
 8009468:	69c7      	ldr	r7, [r0, #28]
 800946a:	b097      	sub	sp, #92	@ 0x5c
 800946c:	4683      	mov	fp, r0
 800946e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009472:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009474:	b97f      	cbnz	r7, 8009496 <_dtoa_r+0x36>
 8009476:	2010      	movs	r0, #16
 8009478:	f000 fe02 	bl	800a080 <malloc>
 800947c:	4602      	mov	r2, r0
 800947e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009482:	b920      	cbnz	r0, 800948e <_dtoa_r+0x2e>
 8009484:	21ef      	movs	r1, #239	@ 0xef
 8009486:	4ba8      	ldr	r3, [pc, #672]	@ (8009728 <_dtoa_r+0x2c8>)
 8009488:	48a8      	ldr	r0, [pc, #672]	@ (800972c <_dtoa_r+0x2cc>)
 800948a:	f002 fdf7 	bl	800c07c <__assert_func>
 800948e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009492:	6007      	str	r7, [r0, #0]
 8009494:	60c7      	str	r7, [r0, #12]
 8009496:	f8db 301c 	ldr.w	r3, [fp, #28]
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	b159      	cbz	r1, 80094b6 <_dtoa_r+0x56>
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	2301      	movs	r3, #1
 80094a2:	4093      	lsls	r3, r2
 80094a4:	604a      	str	r2, [r1, #4]
 80094a6:	608b      	str	r3, [r1, #8]
 80094a8:	4658      	mov	r0, fp
 80094aa:	f000 fedf 	bl	800a26c <_Bfree>
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	1e2b      	subs	r3, r5, #0
 80094b8:	bfaf      	iteee	ge
 80094ba:	2300      	movge	r3, #0
 80094bc:	2201      	movlt	r2, #1
 80094be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094c2:	9303      	strlt	r3, [sp, #12]
 80094c4:	bfa8      	it	ge
 80094c6:	6033      	strge	r3, [r6, #0]
 80094c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80094cc:	4b98      	ldr	r3, [pc, #608]	@ (8009730 <_dtoa_r+0x2d0>)
 80094ce:	bfb8      	it	lt
 80094d0:	6032      	strlt	r2, [r6, #0]
 80094d2:	ea33 0308 	bics.w	r3, r3, r8
 80094d6:	d112      	bne.n	80094fe <_dtoa_r+0x9e>
 80094d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094e4:	4323      	orrs	r3, r4
 80094e6:	f000 8550 	beq.w	8009f8a <_dtoa_r+0xb2a>
 80094ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009734 <_dtoa_r+0x2d4>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8552 	beq.w	8009f9a <_dtoa_r+0xb3a>
 80094f6:	f10a 0303 	add.w	r3, sl, #3
 80094fa:	f000 bd4c 	b.w	8009f96 <_dtoa_r+0xb36>
 80094fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009502:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800950a:	2200      	movs	r2, #0
 800950c:	2300      	movs	r3, #0
 800950e:	f7f7 fab7 	bl	8000a80 <__aeabi_dcmpeq>
 8009512:	4607      	mov	r7, r0
 8009514:	b158      	cbz	r0, 800952e <_dtoa_r+0xce>
 8009516:	2301      	movs	r3, #1
 8009518:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800951e:	b113      	cbz	r3, 8009526 <_dtoa_r+0xc6>
 8009520:	4b85      	ldr	r3, [pc, #532]	@ (8009738 <_dtoa_r+0x2d8>)
 8009522:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800973c <_dtoa_r+0x2dc>
 800952a:	f000 bd36 	b.w	8009f9a <_dtoa_r+0xb3a>
 800952e:	ab14      	add	r3, sp, #80	@ 0x50
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	ab15      	add	r3, sp, #84	@ 0x54
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	4658      	mov	r0, fp
 8009538:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800953c:	f001 fa30 	bl	800a9a0 <__d2b>
 8009540:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009544:	4681      	mov	r9, r0
 8009546:	2e00      	cmp	r6, #0
 8009548:	d077      	beq.n	800963a <_dtoa_r+0x1da>
 800954a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009550:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009558:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800955c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009560:	9712      	str	r7, [sp, #72]	@ 0x48
 8009562:	4619      	mov	r1, r3
 8009564:	2200      	movs	r2, #0
 8009566:	4b76      	ldr	r3, [pc, #472]	@ (8009740 <_dtoa_r+0x2e0>)
 8009568:	f7f6 fe6a 	bl	8000240 <__aeabi_dsub>
 800956c:	a368      	add	r3, pc, #416	@ (adr r3, 8009710 <_dtoa_r+0x2b0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 f81d 	bl	80005b0 <__aeabi_dmul>
 8009576:	a368      	add	r3, pc, #416	@ (adr r3, 8009718 <_dtoa_r+0x2b8>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f6 fe62 	bl	8000244 <__adddf3>
 8009580:	4604      	mov	r4, r0
 8009582:	4630      	mov	r0, r6
 8009584:	460d      	mov	r5, r1
 8009586:	f7f6 ffa9 	bl	80004dc <__aeabi_i2d>
 800958a:	a365      	add	r3, pc, #404	@ (adr r3, 8009720 <_dtoa_r+0x2c0>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f7 f80e 	bl	80005b0 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f6 fe52 	bl	8000244 <__adddf3>
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	f7f7 fab4 	bl	8000b10 <__aeabi_d2iz>
 80095a8:	2200      	movs	r2, #0
 80095aa:	4607      	mov	r7, r0
 80095ac:	2300      	movs	r3, #0
 80095ae:	4620      	mov	r0, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7f7 fa6f 	bl	8000a94 <__aeabi_dcmplt>
 80095b6:	b140      	cbz	r0, 80095ca <_dtoa_r+0x16a>
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7f6 ff8f 	bl	80004dc <__aeabi_i2d>
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	f7f7 fa5d 	bl	8000a80 <__aeabi_dcmpeq>
 80095c6:	b900      	cbnz	r0, 80095ca <_dtoa_r+0x16a>
 80095c8:	3f01      	subs	r7, #1
 80095ca:	2f16      	cmp	r7, #22
 80095cc:	d853      	bhi.n	8009676 <_dtoa_r+0x216>
 80095ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095d2:	4b5c      	ldr	r3, [pc, #368]	@ (8009744 <_dtoa_r+0x2e4>)
 80095d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f7 fa5a 	bl	8000a94 <__aeabi_dcmplt>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d04a      	beq.n	800967a <_dtoa_r+0x21a>
 80095e4:	2300      	movs	r3, #0
 80095e6:	3f01      	subs	r7, #1
 80095e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095ec:	1b9b      	subs	r3, r3, r6
 80095ee:	1e5a      	subs	r2, r3, #1
 80095f0:	bf46      	itte	mi
 80095f2:	f1c3 0801 	rsbmi	r8, r3, #1
 80095f6:	2300      	movmi	r3, #0
 80095f8:	f04f 0800 	movpl.w	r8, #0
 80095fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fe:	bf48      	it	mi
 8009600:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009602:	2f00      	cmp	r7, #0
 8009604:	db3b      	blt.n	800967e <_dtoa_r+0x21e>
 8009606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009608:	970e      	str	r7, [sp, #56]	@ 0x38
 800960a:	443b      	add	r3, r7
 800960c:	9309      	str	r3, [sp, #36]	@ 0x24
 800960e:	2300      	movs	r3, #0
 8009610:	930a      	str	r3, [sp, #40]	@ 0x28
 8009612:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009614:	2b09      	cmp	r3, #9
 8009616:	d866      	bhi.n	80096e6 <_dtoa_r+0x286>
 8009618:	2b05      	cmp	r3, #5
 800961a:	bfc4      	itt	gt
 800961c:	3b04      	subgt	r3, #4
 800961e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009620:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009622:	bfc8      	it	gt
 8009624:	2400      	movgt	r4, #0
 8009626:	f1a3 0302 	sub.w	r3, r3, #2
 800962a:	bfd8      	it	le
 800962c:	2401      	movle	r4, #1
 800962e:	2b03      	cmp	r3, #3
 8009630:	d864      	bhi.n	80096fc <_dtoa_r+0x29c>
 8009632:	e8df f003 	tbb	[pc, r3]
 8009636:	382b      	.short	0x382b
 8009638:	5636      	.short	0x5636
 800963a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800963e:	441e      	add	r6, r3
 8009640:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009644:	2b20      	cmp	r3, #32
 8009646:	bfc1      	itttt	gt
 8009648:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800964c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009650:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009654:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009658:	bfd6      	itet	le
 800965a:	f1c3 0320 	rsble	r3, r3, #32
 800965e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009662:	fa04 f003 	lslle.w	r0, r4, r3
 8009666:	f7f6 ff29 	bl	80004bc <__aeabi_ui2d>
 800966a:	2201      	movs	r2, #1
 800966c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009670:	3e01      	subs	r6, #1
 8009672:	9212      	str	r2, [sp, #72]	@ 0x48
 8009674:	e775      	b.n	8009562 <_dtoa_r+0x102>
 8009676:	2301      	movs	r3, #1
 8009678:	e7b6      	b.n	80095e8 <_dtoa_r+0x188>
 800967a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800967c:	e7b5      	b.n	80095ea <_dtoa_r+0x18a>
 800967e:	427b      	negs	r3, r7
 8009680:	930a      	str	r3, [sp, #40]	@ 0x28
 8009682:	2300      	movs	r3, #0
 8009684:	eba8 0807 	sub.w	r8, r8, r7
 8009688:	930e      	str	r3, [sp, #56]	@ 0x38
 800968a:	e7c2      	b.n	8009612 <_dtoa_r+0x1b2>
 800968c:	2300      	movs	r3, #0
 800968e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009690:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009692:	2b00      	cmp	r3, #0
 8009694:	dc35      	bgt.n	8009702 <_dtoa_r+0x2a2>
 8009696:	2301      	movs	r3, #1
 8009698:	461a      	mov	r2, r3
 800969a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800969e:	9221      	str	r2, [sp, #132]	@ 0x84
 80096a0:	e00b      	b.n	80096ba <_dtoa_r+0x25a>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e7f3      	b.n	800968e <_dtoa_r+0x22e>
 80096a6:	2300      	movs	r3, #0
 80096a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096ac:	18fb      	adds	r3, r7, r3
 80096ae:	9308      	str	r3, [sp, #32]
 80096b0:	3301      	adds	r3, #1
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	9307      	str	r3, [sp, #28]
 80096b6:	bfb8      	it	lt
 80096b8:	2301      	movlt	r3, #1
 80096ba:	2100      	movs	r1, #0
 80096bc:	2204      	movs	r2, #4
 80096be:	f8db 001c 	ldr.w	r0, [fp, #28]
 80096c2:	f102 0514 	add.w	r5, r2, #20
 80096c6:	429d      	cmp	r5, r3
 80096c8:	d91f      	bls.n	800970a <_dtoa_r+0x2aa>
 80096ca:	6041      	str	r1, [r0, #4]
 80096cc:	4658      	mov	r0, fp
 80096ce:	f000 fd8d 	bl	800a1ec <_Balloc>
 80096d2:	4682      	mov	sl, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d139      	bne.n	800974c <_dtoa_r+0x2ec>
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 11af 	movw	r1, #431	@ 0x1af
 80096de:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <_dtoa_r+0x2e8>)
 80096e0:	e6d2      	b.n	8009488 <_dtoa_r+0x28>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e7e0      	b.n	80096a8 <_dtoa_r+0x248>
 80096e6:	2401      	movs	r4, #1
 80096e8:	2300      	movs	r3, #0
 80096ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295
 80096f2:	2200      	movs	r2, #0
 80096f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096f8:	2312      	movs	r3, #18
 80096fa:	e7d0      	b.n	800969e <_dtoa_r+0x23e>
 80096fc:	2301      	movs	r3, #1
 80096fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009700:	e7f5      	b.n	80096ee <_dtoa_r+0x28e>
 8009702:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009704:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009708:	e7d7      	b.n	80096ba <_dtoa_r+0x25a>
 800970a:	3101      	adds	r1, #1
 800970c:	0052      	lsls	r2, r2, #1
 800970e:	e7d8      	b.n	80096c2 <_dtoa_r+0x262>
 8009710:	636f4361 	.word	0x636f4361
 8009714:	3fd287a7 	.word	0x3fd287a7
 8009718:	8b60c8b3 	.word	0x8b60c8b3
 800971c:	3fc68a28 	.word	0x3fc68a28
 8009720:	509f79fb 	.word	0x509f79fb
 8009724:	3fd34413 	.word	0x3fd34413
 8009728:	0800cc44 	.word	0x0800cc44
 800972c:	0800cc5b 	.word	0x0800cc5b
 8009730:	7ff00000 	.word	0x7ff00000
 8009734:	0800cc40 	.word	0x0800cc40
 8009738:	0800cc0f 	.word	0x0800cc0f
 800973c:	0800cc0e 	.word	0x0800cc0e
 8009740:	3ff80000 	.word	0x3ff80000
 8009744:	0800cd58 	.word	0x0800cd58
 8009748:	0800ccb3 	.word	0x0800ccb3
 800974c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009750:	6018      	str	r0, [r3, #0]
 8009752:	9b07      	ldr	r3, [sp, #28]
 8009754:	2b0e      	cmp	r3, #14
 8009756:	f200 80a4 	bhi.w	80098a2 <_dtoa_r+0x442>
 800975a:	2c00      	cmp	r4, #0
 800975c:	f000 80a1 	beq.w	80098a2 <_dtoa_r+0x442>
 8009760:	2f00      	cmp	r7, #0
 8009762:	dd33      	ble.n	80097cc <_dtoa_r+0x36c>
 8009764:	4b86      	ldr	r3, [pc, #536]	@ (8009980 <_dtoa_r+0x520>)
 8009766:	f007 020f 	and.w	r2, r7, #15
 800976a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976e:	05f8      	lsls	r0, r7, #23
 8009770:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009774:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009778:	ea4f 1427 	mov.w	r4, r7, asr #4
 800977c:	d516      	bpl.n	80097ac <_dtoa_r+0x34c>
 800977e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009782:	4b80      	ldr	r3, [pc, #512]	@ (8009984 <_dtoa_r+0x524>)
 8009784:	2603      	movs	r6, #3
 8009786:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800978a:	f7f7 f83b 	bl	8000804 <__aeabi_ddiv>
 800978e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009792:	f004 040f 	and.w	r4, r4, #15
 8009796:	4d7b      	ldr	r5, [pc, #492]	@ (8009984 <_dtoa_r+0x524>)
 8009798:	b954      	cbnz	r4, 80097b0 <_dtoa_r+0x350>
 800979a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800979e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a2:	f7f7 f82f 	bl	8000804 <__aeabi_ddiv>
 80097a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097aa:	e028      	b.n	80097fe <_dtoa_r+0x39e>
 80097ac:	2602      	movs	r6, #2
 80097ae:	e7f2      	b.n	8009796 <_dtoa_r+0x336>
 80097b0:	07e1      	lsls	r1, r4, #31
 80097b2:	d508      	bpl.n	80097c6 <_dtoa_r+0x366>
 80097b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097bc:	f7f6 fef8 	bl	80005b0 <__aeabi_dmul>
 80097c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097c4:	3601      	adds	r6, #1
 80097c6:	1064      	asrs	r4, r4, #1
 80097c8:	3508      	adds	r5, #8
 80097ca:	e7e5      	b.n	8009798 <_dtoa_r+0x338>
 80097cc:	f000 80d2 	beq.w	8009974 <_dtoa_r+0x514>
 80097d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097d4:	427c      	negs	r4, r7
 80097d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009980 <_dtoa_r+0x520>)
 80097d8:	f004 020f 	and.w	r2, r4, #15
 80097dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f7f6 fee4 	bl	80005b0 <__aeabi_dmul>
 80097e8:	2602      	movs	r6, #2
 80097ea:	2300      	movs	r3, #0
 80097ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f0:	4d64      	ldr	r5, [pc, #400]	@ (8009984 <_dtoa_r+0x524>)
 80097f2:	1124      	asrs	r4, r4, #4
 80097f4:	2c00      	cmp	r4, #0
 80097f6:	f040 80b2 	bne.w	800995e <_dtoa_r+0x4fe>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1d3      	bne.n	80097a6 <_dtoa_r+0x346>
 80097fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80b7 	beq.w	8009978 <_dtoa_r+0x518>
 800980a:	2200      	movs	r2, #0
 800980c:	4620      	mov	r0, r4
 800980e:	4629      	mov	r1, r5
 8009810:	4b5d      	ldr	r3, [pc, #372]	@ (8009988 <_dtoa_r+0x528>)
 8009812:	f7f7 f93f 	bl	8000a94 <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	f000 80ae 	beq.w	8009978 <_dtoa_r+0x518>
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 80aa 	beq.w	8009978 <_dtoa_r+0x518>
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd37      	ble.n	800989a <_dtoa_r+0x43a>
 800982a:	1e7b      	subs	r3, r7, #1
 800982c:	4620      	mov	r0, r4
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	2200      	movs	r2, #0
 8009832:	4629      	mov	r1, r5
 8009834:	4b55      	ldr	r3, [pc, #340]	@ (800998c <_dtoa_r+0x52c>)
 8009836:	f7f6 febb 	bl	80005b0 <__aeabi_dmul>
 800983a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800983e:	9c08      	ldr	r4, [sp, #32]
 8009840:	3601      	adds	r6, #1
 8009842:	4630      	mov	r0, r6
 8009844:	f7f6 fe4a 	bl	80004dc <__aeabi_i2d>
 8009848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800984c:	f7f6 feb0 	bl	80005b0 <__aeabi_dmul>
 8009850:	2200      	movs	r2, #0
 8009852:	4b4f      	ldr	r3, [pc, #316]	@ (8009990 <_dtoa_r+0x530>)
 8009854:	f7f6 fcf6 	bl	8000244 <__adddf3>
 8009858:	4605      	mov	r5, r0
 800985a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800985e:	2c00      	cmp	r4, #0
 8009860:	f040 809a 	bne.w	8009998 <_dtoa_r+0x538>
 8009864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	4b4a      	ldr	r3, [pc, #296]	@ (8009994 <_dtoa_r+0x534>)
 800986c:	f7f6 fce8 	bl	8000240 <__aeabi_dsub>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009878:	462a      	mov	r2, r5
 800987a:	4633      	mov	r3, r6
 800987c:	f7f7 f928 	bl	8000ad0 <__aeabi_dcmpgt>
 8009880:	2800      	cmp	r0, #0
 8009882:	f040 828e 	bne.w	8009da2 <_dtoa_r+0x942>
 8009886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988a:	462a      	mov	r2, r5
 800988c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009890:	f7f7 f900 	bl	8000a94 <__aeabi_dcmplt>
 8009894:	2800      	cmp	r0, #0
 8009896:	f040 8127 	bne.w	8009ae8 <_dtoa_r+0x688>
 800989a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800989e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f2c0 8163 	blt.w	8009b70 <_dtoa_r+0x710>
 80098aa:	2f0e      	cmp	r7, #14
 80098ac:	f300 8160 	bgt.w	8009b70 <_dtoa_r+0x710>
 80098b0:	4b33      	ldr	r3, [pc, #204]	@ (8009980 <_dtoa_r+0x520>)
 80098b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da03      	bge.n	80098cc <_dtoa_r+0x46c>
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f340 8100 	ble.w	8009acc <_dtoa_r+0x66c>
 80098cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098d0:	4656      	mov	r6, sl
 80098d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 ff93 	bl	8000804 <__aeabi_ddiv>
 80098de:	f7f7 f917 	bl	8000b10 <__aeabi_d2iz>
 80098e2:	4680      	mov	r8, r0
 80098e4:	f7f6 fdfa 	bl	80004dc <__aeabi_i2d>
 80098e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ec:	f7f6 fe60 	bl	80005b0 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fca2 	bl	8000240 <__aeabi_dsub>
 80098fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009900:	9d07      	ldr	r5, [sp, #28]
 8009902:	f806 4b01 	strb.w	r4, [r6], #1
 8009906:	eba6 040a 	sub.w	r4, r6, sl
 800990a:	42a5      	cmp	r5, r4
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	f040 8116 	bne.w	8009b40 <_dtoa_r+0x6e0>
 8009914:	f7f6 fc96 	bl	8000244 <__adddf3>
 8009918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	f7f7 f8d6 	bl	8000ad0 <__aeabi_dcmpgt>
 8009924:	2800      	cmp	r0, #0
 8009926:	f040 80f8 	bne.w	8009b1a <_dtoa_r+0x6ba>
 800992a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f7 f8a5 	bl	8000a80 <__aeabi_dcmpeq>
 8009936:	b118      	cbz	r0, 8009940 <_dtoa_r+0x4e0>
 8009938:	f018 0f01 	tst.w	r8, #1
 800993c:	f040 80ed 	bne.w	8009b1a <_dtoa_r+0x6ba>
 8009940:	4649      	mov	r1, r9
 8009942:	4658      	mov	r0, fp
 8009944:	f000 fc92 	bl	800a26c <_Bfree>
 8009948:	2300      	movs	r3, #0
 800994a:	7033      	strb	r3, [r6, #0]
 800994c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800994e:	3701      	adds	r7, #1
 8009950:	601f      	str	r7, [r3, #0]
 8009952:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8320 	beq.w	8009f9a <_dtoa_r+0xb3a>
 800995a:	601e      	str	r6, [r3, #0]
 800995c:	e31d      	b.n	8009f9a <_dtoa_r+0xb3a>
 800995e:	07e2      	lsls	r2, r4, #31
 8009960:	d505      	bpl.n	800996e <_dtoa_r+0x50e>
 8009962:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009966:	f7f6 fe23 	bl	80005b0 <__aeabi_dmul>
 800996a:	2301      	movs	r3, #1
 800996c:	3601      	adds	r6, #1
 800996e:	1064      	asrs	r4, r4, #1
 8009970:	3508      	adds	r5, #8
 8009972:	e73f      	b.n	80097f4 <_dtoa_r+0x394>
 8009974:	2602      	movs	r6, #2
 8009976:	e742      	b.n	80097fe <_dtoa_r+0x39e>
 8009978:	9c07      	ldr	r4, [sp, #28]
 800997a:	9704      	str	r7, [sp, #16]
 800997c:	e761      	b.n	8009842 <_dtoa_r+0x3e2>
 800997e:	bf00      	nop
 8009980:	0800cd58 	.word	0x0800cd58
 8009984:	0800cd30 	.word	0x0800cd30
 8009988:	3ff00000 	.word	0x3ff00000
 800998c:	40240000 	.word	0x40240000
 8009990:	401c0000 	.word	0x401c0000
 8009994:	40140000 	.word	0x40140000
 8009998:	4b70      	ldr	r3, [pc, #448]	@ (8009b5c <_dtoa_r+0x6fc>)
 800999a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800999c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099a4:	4454      	add	r4, sl
 80099a6:	2900      	cmp	r1, #0
 80099a8:	d045      	beq.n	8009a36 <_dtoa_r+0x5d6>
 80099aa:	2000      	movs	r0, #0
 80099ac:	496c      	ldr	r1, [pc, #432]	@ (8009b60 <_dtoa_r+0x700>)
 80099ae:	f7f6 ff29 	bl	8000804 <__aeabi_ddiv>
 80099b2:	4633      	mov	r3, r6
 80099b4:	462a      	mov	r2, r5
 80099b6:	f7f6 fc43 	bl	8000240 <__aeabi_dsub>
 80099ba:	4656      	mov	r6, sl
 80099bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c4:	f7f7 f8a4 	bl	8000b10 <__aeabi_d2iz>
 80099c8:	4605      	mov	r5, r0
 80099ca:	f7f6 fd87 	bl	80004dc <__aeabi_i2d>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d6:	f7f6 fc33 	bl	8000240 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	3530      	adds	r5, #48	@ 0x30
 80099e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099e8:	f806 5b01 	strb.w	r5, [r6], #1
 80099ec:	f7f7 f852 	bl	8000a94 <__aeabi_dcmplt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d163      	bne.n	8009abc <_dtoa_r+0x65c>
 80099f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099f8:	2000      	movs	r0, #0
 80099fa:	495a      	ldr	r1, [pc, #360]	@ (8009b64 <_dtoa_r+0x704>)
 80099fc:	f7f6 fc20 	bl	8000240 <__aeabi_dsub>
 8009a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a04:	f7f7 f846 	bl	8000a94 <__aeabi_dcmplt>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f040 8087 	bne.w	8009b1c <_dtoa_r+0x6bc>
 8009a0e:	42a6      	cmp	r6, r4
 8009a10:	f43f af43 	beq.w	800989a <_dtoa_r+0x43a>
 8009a14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4b53      	ldr	r3, [pc, #332]	@ (8009b68 <_dtoa_r+0x708>)
 8009a1c:	f7f6 fdc8 	bl	80005b0 <__aeabi_dmul>
 8009a20:	2200      	movs	r2, #0
 8009a22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8009b68 <_dtoa_r+0x708>)
 8009a2c:	f7f6 fdc0 	bl	80005b0 <__aeabi_dmul>
 8009a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a34:	e7c4      	b.n	80099c0 <_dtoa_r+0x560>
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7f6 fdb9 	bl	80005b0 <__aeabi_dmul>
 8009a3e:	4656      	mov	r6, sl
 8009a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a44:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4a:	f7f7 f861 	bl	8000b10 <__aeabi_d2iz>
 8009a4e:	4605      	mov	r5, r0
 8009a50:	f7f6 fd44 	bl	80004dc <__aeabi_i2d>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5c:	f7f6 fbf0 	bl	8000240 <__aeabi_dsub>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	3530      	adds	r5, #48	@ 0x30
 8009a66:	f806 5b01 	strb.w	r5, [r6], #1
 8009a6a:	42a6      	cmp	r6, r4
 8009a6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	d124      	bne.n	8009ac0 <_dtoa_r+0x660>
 8009a76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a7a:	4b39      	ldr	r3, [pc, #228]	@ (8009b60 <_dtoa_r+0x700>)
 8009a7c:	f7f6 fbe2 	bl	8000244 <__adddf3>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a88:	f7f7 f822 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d145      	bne.n	8009b1c <_dtoa_r+0x6bc>
 8009a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a94:	2000      	movs	r0, #0
 8009a96:	4932      	ldr	r1, [pc, #200]	@ (8009b60 <_dtoa_r+0x700>)
 8009a98:	f7f6 fbd2 	bl	8000240 <__aeabi_dsub>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa4:	f7f6 fff6 	bl	8000a94 <__aeabi_dcmplt>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f43f aef6 	beq.w	800989a <_dtoa_r+0x43a>
 8009aae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009ab0:	1e73      	subs	r3, r6, #1
 8009ab2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ab4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ab8:	2b30      	cmp	r3, #48	@ 0x30
 8009aba:	d0f8      	beq.n	8009aae <_dtoa_r+0x64e>
 8009abc:	9f04      	ldr	r7, [sp, #16]
 8009abe:	e73f      	b.n	8009940 <_dtoa_r+0x4e0>
 8009ac0:	4b29      	ldr	r3, [pc, #164]	@ (8009b68 <_dtoa_r+0x708>)
 8009ac2:	f7f6 fd75 	bl	80005b0 <__aeabi_dmul>
 8009ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aca:	e7bc      	b.n	8009a46 <_dtoa_r+0x5e6>
 8009acc:	d10c      	bne.n	8009ae8 <_dtoa_r+0x688>
 8009ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4b25      	ldr	r3, [pc, #148]	@ (8009b6c <_dtoa_r+0x70c>)
 8009ad6:	f7f6 fd6b 	bl	80005b0 <__aeabi_dmul>
 8009ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ade:	f7f6 ffed 	bl	8000abc <__aeabi_dcmpge>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f000 815b 	beq.w	8009d9e <_dtoa_r+0x93e>
 8009ae8:	2400      	movs	r4, #0
 8009aea:	4625      	mov	r5, r4
 8009aec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aee:	4656      	mov	r6, sl
 8009af0:	43db      	mvns	r3, r3
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	2700      	movs	r7, #0
 8009af6:	4621      	mov	r1, r4
 8009af8:	4658      	mov	r0, fp
 8009afa:	f000 fbb7 	bl	800a26c <_Bfree>
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	d0dc      	beq.n	8009abc <_dtoa_r+0x65c>
 8009b02:	b12f      	cbz	r7, 8009b10 <_dtoa_r+0x6b0>
 8009b04:	42af      	cmp	r7, r5
 8009b06:	d003      	beq.n	8009b10 <_dtoa_r+0x6b0>
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4658      	mov	r0, fp
 8009b0c:	f000 fbae 	bl	800a26c <_Bfree>
 8009b10:	4629      	mov	r1, r5
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 fbaa 	bl	800a26c <_Bfree>
 8009b18:	e7d0      	b.n	8009abc <_dtoa_r+0x65c>
 8009b1a:	9704      	str	r7, [sp, #16]
 8009b1c:	4633      	mov	r3, r6
 8009b1e:	461e      	mov	r6, r3
 8009b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b24:	2a39      	cmp	r2, #57	@ 0x39
 8009b26:	d107      	bne.n	8009b38 <_dtoa_r+0x6d8>
 8009b28:	459a      	cmp	sl, r3
 8009b2a:	d1f8      	bne.n	8009b1e <_dtoa_r+0x6be>
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	3201      	adds	r2, #1
 8009b30:	9204      	str	r2, [sp, #16]
 8009b32:	2230      	movs	r2, #48	@ 0x30
 8009b34:	f88a 2000 	strb.w	r2, [sl]
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	e7bd      	b.n	8009abc <_dtoa_r+0x65c>
 8009b40:	2200      	movs	r2, #0
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <_dtoa_r+0x708>)
 8009b44:	f7f6 fd34 	bl	80005b0 <__aeabi_dmul>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	f7f6 ff96 	bl	8000a80 <__aeabi_dcmpeq>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f43f aebc 	beq.w	80098d2 <_dtoa_r+0x472>
 8009b5a:	e6f1      	b.n	8009940 <_dtoa_r+0x4e0>
 8009b5c:	0800cd58 	.word	0x0800cd58
 8009b60:	3fe00000 	.word	0x3fe00000
 8009b64:	3ff00000 	.word	0x3ff00000
 8009b68:	40240000 	.word	0x40240000
 8009b6c:	40140000 	.word	0x40140000
 8009b70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	f000 80db 	beq.w	8009d2e <_dtoa_r+0x8ce>
 8009b78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b7a:	2a01      	cmp	r2, #1
 8009b7c:	f300 80bf 	bgt.w	8009cfe <_dtoa_r+0x89e>
 8009b80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	f000 80b7 	beq.w	8009cf6 <_dtoa_r+0x896>
 8009b88:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b8c:	4646      	mov	r6, r8
 8009b8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b92:	2101      	movs	r1, #1
 8009b94:	441a      	add	r2, r3
 8009b96:	4658      	mov	r0, fp
 8009b98:	4498      	add	r8, r3
 8009b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b9c:	f000 fc64 	bl	800a468 <__i2b>
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	b15e      	cbz	r6, 8009bbc <_dtoa_r+0x75c>
 8009ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	dd08      	ble.n	8009bbc <_dtoa_r+0x75c>
 8009baa:	42b3      	cmp	r3, r6
 8009bac:	bfa8      	it	ge
 8009bae:	4633      	movge	r3, r6
 8009bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb2:	eba8 0803 	sub.w	r8, r8, r3
 8009bb6:	1af6      	subs	r6, r6, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	b1f3      	cbz	r3, 8009bfe <_dtoa_r+0x79e>
 8009bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80b7 	beq.w	8009d36 <_dtoa_r+0x8d6>
 8009bc8:	b18c      	cbz	r4, 8009bee <_dtoa_r+0x78e>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f000 fd08 	bl	800a5e4 <__pow5mult>
 8009bd4:	464a      	mov	r2, r9
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	4605      	mov	r5, r0
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fc5a 	bl	800a494 <__multiply>
 8009be0:	4649      	mov	r1, r9
 8009be2:	9004      	str	r0, [sp, #16]
 8009be4:	4658      	mov	r0, fp
 8009be6:	f000 fb41 	bl	800a26c <_Bfree>
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	4699      	mov	r9, r3
 8009bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf0:	1b1a      	subs	r2, r3, r4
 8009bf2:	d004      	beq.n	8009bfe <_dtoa_r+0x79e>
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	f000 fcf4 	bl	800a5e4 <__pow5mult>
 8009bfc:	4681      	mov	r9, r0
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4658      	mov	r0, fp
 8009c02:	f000 fc31 	bl	800a468 <__i2b>
 8009c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c08:	4604      	mov	r4, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 81c9 	beq.w	8009fa2 <_dtoa_r+0xb42>
 8009c10:	461a      	mov	r2, r3
 8009c12:	4601      	mov	r1, r0
 8009c14:	4658      	mov	r0, fp
 8009c16:	f000 fce5 	bl	800a5e4 <__pow5mult>
 8009c1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	f300 808f 	bgt.w	8009d42 <_dtoa_r+0x8e2>
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 8087 	bne.w	8009d3a <_dtoa_r+0x8da>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 8083 	bne.w	8009d3e <_dtoa_r+0x8de>
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c3e:	0d1b      	lsrs	r3, r3, #20
 8009c40:	051b      	lsls	r3, r3, #20
 8009c42:	b12b      	cbz	r3, 8009c50 <_dtoa_r+0x7f0>
 8009c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c46:	f108 0801 	add.w	r8, r8, #1
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c4e:	2301      	movs	r3, #1
 8009c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 81aa 	beq.w	8009fae <_dtoa_r+0xb4e>
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c60:	6918      	ldr	r0, [r3, #16]
 8009c62:	f000 fbb5 	bl	800a3d0 <__hi0bits>
 8009c66:	f1c0 0020 	rsb	r0, r0, #32
 8009c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6c:	4418      	add	r0, r3
 8009c6e:	f010 001f 	ands.w	r0, r0, #31
 8009c72:	d071      	beq.n	8009d58 <_dtoa_r+0x8f8>
 8009c74:	f1c0 0320 	rsb	r3, r0, #32
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	dd65      	ble.n	8009d48 <_dtoa_r+0x8e8>
 8009c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7e:	f1c0 001c 	rsb	r0, r0, #28
 8009c82:	4403      	add	r3, r0
 8009c84:	4480      	add	r8, r0
 8009c86:	4406      	add	r6, r0
 8009c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8a:	f1b8 0f00 	cmp.w	r8, #0
 8009c8e:	dd05      	ble.n	8009c9c <_dtoa_r+0x83c>
 8009c90:	4649      	mov	r1, r9
 8009c92:	4642      	mov	r2, r8
 8009c94:	4658      	mov	r0, fp
 8009c96:	f000 fcff 	bl	800a698 <__lshift>
 8009c9a:	4681      	mov	r9, r0
 8009c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dd05      	ble.n	8009cae <_dtoa_r+0x84e>
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4658      	mov	r0, fp
 8009ca8:	f000 fcf6 	bl	800a698 <__lshift>
 8009cac:	4604      	mov	r4, r0
 8009cae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d053      	beq.n	8009d5c <_dtoa_r+0x8fc>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	f000 fd5a 	bl	800a770 <__mcmp>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	da4d      	bge.n	8009d5c <_dtoa_r+0x8fc>
 8009cc0:	1e7b      	subs	r3, r7, #1
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	220a      	movs	r2, #10
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4658      	mov	r0, fp
 8009ccc:	f000 faf0 	bl	800a2b0 <__multadd>
 8009cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cd2:	4681      	mov	r9, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 816c 	beq.w	8009fb2 <_dtoa_r+0xb52>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4629      	mov	r1, r5
 8009cde:	220a      	movs	r2, #10
 8009ce0:	4658      	mov	r0, fp
 8009ce2:	f000 fae5 	bl	800a2b0 <__multadd>
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc61      	bgt.n	8009db2 <_dtoa_r+0x952>
 8009cee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	dc3b      	bgt.n	8009d6c <_dtoa_r+0x90c>
 8009cf4:	e05d      	b.n	8009db2 <_dtoa_r+0x952>
 8009cf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cf8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cfc:	e746      	b.n	8009b8c <_dtoa_r+0x72c>
 8009cfe:	9b07      	ldr	r3, [sp, #28]
 8009d00:	1e5c      	subs	r4, r3, #1
 8009d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	bfbf      	itttt	lt
 8009d08:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d0a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009d0c:	1ae3      	sublt	r3, r4, r3
 8009d0e:	18d2      	addlt	r2, r2, r3
 8009d10:	bfa8      	it	ge
 8009d12:	1b1c      	subge	r4, r3, r4
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	bfbe      	ittt	lt
 8009d18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d1a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009d1c:	2400      	movlt	r4, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bfb5      	itete	lt
 8009d22:	eba8 0603 	sublt.w	r6, r8, r3
 8009d26:	4646      	movge	r6, r8
 8009d28:	2300      	movlt	r3, #0
 8009d2a:	9b07      	ldrge	r3, [sp, #28]
 8009d2c:	e730      	b.n	8009b90 <_dtoa_r+0x730>
 8009d2e:	4646      	mov	r6, r8
 8009d30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d34:	e735      	b.n	8009ba2 <_dtoa_r+0x742>
 8009d36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d38:	e75c      	b.n	8009bf4 <_dtoa_r+0x794>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e788      	b.n	8009c50 <_dtoa_r+0x7f0>
 8009d3e:	9b02      	ldr	r3, [sp, #8]
 8009d40:	e786      	b.n	8009c50 <_dtoa_r+0x7f0>
 8009d42:	2300      	movs	r3, #0
 8009d44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d46:	e788      	b.n	8009c5a <_dtoa_r+0x7fa>
 8009d48:	d09f      	beq.n	8009c8a <_dtoa_r+0x82a>
 8009d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d4c:	331c      	adds	r3, #28
 8009d4e:	441a      	add	r2, r3
 8009d50:	4498      	add	r8, r3
 8009d52:	441e      	add	r6, r3
 8009d54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d56:	e798      	b.n	8009c8a <_dtoa_r+0x82a>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	e7f6      	b.n	8009d4a <_dtoa_r+0x8ea>
 8009d5c:	9b07      	ldr	r3, [sp, #28]
 8009d5e:	9704      	str	r7, [sp, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dc20      	bgt.n	8009da6 <_dtoa_r+0x946>
 8009d64:	9308      	str	r3, [sp, #32]
 8009d66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	dd1e      	ble.n	8009daa <_dtoa_r+0x94a>
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f47f aebc 	bne.w	8009aec <_dtoa_r+0x68c>
 8009d74:	4621      	mov	r1, r4
 8009d76:	2205      	movs	r2, #5
 8009d78:	4658      	mov	r0, fp
 8009d7a:	f000 fa99 	bl	800a2b0 <__multadd>
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4604      	mov	r4, r0
 8009d82:	4648      	mov	r0, r9
 8009d84:	f000 fcf4 	bl	800a770 <__mcmp>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f77f aeaf 	ble.w	8009aec <_dtoa_r+0x68c>
 8009d8e:	2331      	movs	r3, #49	@ 0x31
 8009d90:	4656      	mov	r6, sl
 8009d92:	f806 3b01 	strb.w	r3, [r6], #1
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	e6aa      	b.n	8009af4 <_dtoa_r+0x694>
 8009d9e:	9c07      	ldr	r4, [sp, #28]
 8009da0:	9704      	str	r7, [sp, #16]
 8009da2:	4625      	mov	r5, r4
 8009da4:	e7f3      	b.n	8009d8e <_dtoa_r+0x92e>
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8104 	beq.w	8009fba <_dtoa_r+0xb5a>
 8009db2:	2e00      	cmp	r6, #0
 8009db4:	dd05      	ble.n	8009dc2 <_dtoa_r+0x962>
 8009db6:	4629      	mov	r1, r5
 8009db8:	4632      	mov	r2, r6
 8009dba:	4658      	mov	r0, fp
 8009dbc:	f000 fc6c 	bl	800a698 <__lshift>
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05a      	beq.n	8009e7e <_dtoa_r+0xa1e>
 8009dc8:	4658      	mov	r0, fp
 8009dca:	6869      	ldr	r1, [r5, #4]
 8009dcc:	f000 fa0e 	bl	800a1ec <_Balloc>
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	b928      	cbnz	r0, 8009de0 <_dtoa_r+0x980>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dda:	4b83      	ldr	r3, [pc, #524]	@ (8009fe8 <_dtoa_r+0xb88>)
 8009ddc:	f7ff bb54 	b.w	8009488 <_dtoa_r+0x28>
 8009de0:	692a      	ldr	r2, [r5, #16]
 8009de2:	f105 010c 	add.w	r1, r5, #12
 8009de6:	3202      	adds	r2, #2
 8009de8:	0092      	lsls	r2, r2, #2
 8009dea:	300c      	adds	r0, #12
 8009dec:	f002 f932 	bl	800c054 <memcpy>
 8009df0:	2201      	movs	r2, #1
 8009df2:	4631      	mov	r1, r6
 8009df4:	4658      	mov	r0, fp
 8009df6:	f000 fc4f 	bl	800a698 <__lshift>
 8009dfa:	462f      	mov	r7, r5
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	f10a 0301 	add.w	r3, sl, #1
 8009e02:	9307      	str	r3, [sp, #28]
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	4453      	add	r3, sl
 8009e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e0a:	9b02      	ldr	r3, [sp, #8]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e12:	9b07      	ldr	r3, [sp, #28]
 8009e14:	4621      	mov	r1, r4
 8009e16:	3b01      	subs	r3, #1
 8009e18:	4648      	mov	r0, r9
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	f7ff fa98 	bl	8009350 <quorem>
 8009e20:	4639      	mov	r1, r7
 8009e22:	9008      	str	r0, [sp, #32]
 8009e24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e28:	4648      	mov	r0, r9
 8009e2a:	f000 fca1 	bl	800a770 <__mcmp>
 8009e2e:	462a      	mov	r2, r5
 8009e30:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e32:	4621      	mov	r1, r4
 8009e34:	4658      	mov	r0, fp
 8009e36:	f000 fcb7 	bl	800a7a8 <__mdiff>
 8009e3a:	68c2      	ldr	r2, [r0, #12]
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	bb02      	cbnz	r2, 8009e82 <_dtoa_r+0xa22>
 8009e40:	4601      	mov	r1, r0
 8009e42:	4648      	mov	r0, r9
 8009e44:	f000 fc94 	bl	800a770 <__mcmp>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4658      	mov	r0, fp
 8009e4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e50:	f000 fa0c 	bl	800a26c <_Bfree>
 8009e54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e58:	9e07      	ldr	r6, [sp, #28]
 8009e5a:	ea43 0102 	orr.w	r1, r3, r2
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e60:	4319      	orrs	r1, r3
 8009e62:	d110      	bne.n	8009e86 <_dtoa_r+0xa26>
 8009e64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e68:	d029      	beq.n	8009ebe <_dtoa_r+0xa5e>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dd02      	ble.n	8009e76 <_dtoa_r+0xa16>
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e76:	9b02      	ldr	r3, [sp, #8]
 8009e78:	f883 8000 	strb.w	r8, [r3]
 8009e7c:	e63b      	b.n	8009af6 <_dtoa_r+0x696>
 8009e7e:	4628      	mov	r0, r5
 8009e80:	e7bb      	b.n	8009dfa <_dtoa_r+0x99a>
 8009e82:	2201      	movs	r2, #1
 8009e84:	e7e1      	b.n	8009e4a <_dtoa_r+0x9ea>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	db04      	blt.n	8009e96 <_dtoa_r+0xa36>
 8009e8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e92:	430b      	orrs	r3, r1
 8009e94:	d120      	bne.n	8009ed8 <_dtoa_r+0xa78>
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	dded      	ble.n	8009e76 <_dtoa_r+0xa16>
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	f000 fbfa 	bl	800a698 <__lshift>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4681      	mov	r9, r0
 8009ea8:	f000 fc62 	bl	800a770 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dc03      	bgt.n	8009eb8 <_dtoa_r+0xa58>
 8009eb0:	d1e1      	bne.n	8009e76 <_dtoa_r+0xa16>
 8009eb2:	f018 0f01 	tst.w	r8, #1
 8009eb6:	d0de      	beq.n	8009e76 <_dtoa_r+0xa16>
 8009eb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ebc:	d1d8      	bne.n	8009e70 <_dtoa_r+0xa10>
 8009ebe:	2339      	movs	r3, #57	@ 0x39
 8009ec0:	9a02      	ldr	r2, [sp, #8]
 8009ec2:	7013      	strb	r3, [r2, #0]
 8009ec4:	4633      	mov	r3, r6
 8009ec6:	461e      	mov	r6, r3
 8009ec8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	2a39      	cmp	r2, #57	@ 0x39
 8009ed0:	d052      	beq.n	8009f78 <_dtoa_r+0xb18>
 8009ed2:	3201      	adds	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	e60e      	b.n	8009af6 <_dtoa_r+0x696>
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	dd07      	ble.n	8009eec <_dtoa_r+0xa8c>
 8009edc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ee0:	d0ed      	beq.n	8009ebe <_dtoa_r+0xa5e>
 8009ee2:	9a02      	ldr	r2, [sp, #8]
 8009ee4:	f108 0301 	add.w	r3, r8, #1
 8009ee8:	7013      	strb	r3, [r2, #0]
 8009eea:	e604      	b.n	8009af6 <_dtoa_r+0x696>
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	9a07      	ldr	r2, [sp, #28]
 8009ef0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d028      	beq.n	8009f4c <_dtoa_r+0xaec>
 8009efa:	4649      	mov	r1, r9
 8009efc:	2300      	movs	r3, #0
 8009efe:	220a      	movs	r2, #10
 8009f00:	4658      	mov	r0, fp
 8009f02:	f000 f9d5 	bl	800a2b0 <__multadd>
 8009f06:	42af      	cmp	r7, r5
 8009f08:	4681      	mov	r9, r0
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	f04f 020a 	mov.w	r2, #10
 8009f12:	4639      	mov	r1, r7
 8009f14:	4658      	mov	r0, fp
 8009f16:	d107      	bne.n	8009f28 <_dtoa_r+0xac8>
 8009f18:	f000 f9ca 	bl	800a2b0 <__multadd>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	4605      	mov	r5, r0
 8009f20:	9b07      	ldr	r3, [sp, #28]
 8009f22:	3301      	adds	r3, #1
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	e774      	b.n	8009e12 <_dtoa_r+0x9b2>
 8009f28:	f000 f9c2 	bl	800a2b0 <__multadd>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4607      	mov	r7, r0
 8009f30:	2300      	movs	r3, #0
 8009f32:	220a      	movs	r2, #10
 8009f34:	4658      	mov	r0, fp
 8009f36:	f000 f9bb 	bl	800a2b0 <__multadd>
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	e7f0      	b.n	8009f20 <_dtoa_r+0xac0>
 8009f3e:	9b08      	ldr	r3, [sp, #32]
 8009f40:	2700      	movs	r7, #0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	bfcc      	ite	gt
 8009f46:	461e      	movgt	r6, r3
 8009f48:	2601      	movle	r6, #1
 8009f4a:	4456      	add	r6, sl
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	2201      	movs	r2, #1
 8009f50:	4658      	mov	r0, fp
 8009f52:	f000 fba1 	bl	800a698 <__lshift>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4681      	mov	r9, r0
 8009f5a:	f000 fc09 	bl	800a770 <__mcmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	dcb0      	bgt.n	8009ec4 <_dtoa_r+0xa64>
 8009f62:	d102      	bne.n	8009f6a <_dtoa_r+0xb0a>
 8009f64:	f018 0f01 	tst.w	r8, #1
 8009f68:	d1ac      	bne.n	8009ec4 <_dtoa_r+0xa64>
 8009f6a:	4633      	mov	r3, r6
 8009f6c:	461e      	mov	r6, r3
 8009f6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f72:	2a30      	cmp	r2, #48	@ 0x30
 8009f74:	d0fa      	beq.n	8009f6c <_dtoa_r+0xb0c>
 8009f76:	e5be      	b.n	8009af6 <_dtoa_r+0x696>
 8009f78:	459a      	cmp	sl, r3
 8009f7a:	d1a4      	bne.n	8009ec6 <_dtoa_r+0xa66>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	2331      	movs	r3, #49	@ 0x31
 8009f84:	f88a 3000 	strb.w	r3, [sl]
 8009f88:	e5b5      	b.n	8009af6 <_dtoa_r+0x696>
 8009f8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f8c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fec <_dtoa_r+0xb8c>
 8009f90:	b11b      	cbz	r3, 8009f9a <_dtoa_r+0xb3a>
 8009f92:	f10a 0308 	add.w	r3, sl, #8
 8009f96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	b017      	add	sp, #92	@ 0x5c
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	f77f ae3d 	ble.w	8009c24 <_dtoa_r+0x7c4>
 8009faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fae:	2001      	movs	r0, #1
 8009fb0:	e65b      	b.n	8009c6a <_dtoa_r+0x80a>
 8009fb2:	9b08      	ldr	r3, [sp, #32]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f77f aed6 	ble.w	8009d66 <_dtoa_r+0x906>
 8009fba:	4656      	mov	r6, sl
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	4648      	mov	r0, r9
 8009fc0:	f7ff f9c6 	bl	8009350 <quorem>
 8009fc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009fc8:	9b08      	ldr	r3, [sp, #32]
 8009fca:	f806 8b01 	strb.w	r8, [r6], #1
 8009fce:	eba6 020a 	sub.w	r2, r6, sl
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	ddb3      	ble.n	8009f3e <_dtoa_r+0xade>
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	2300      	movs	r3, #0
 8009fda:	220a      	movs	r2, #10
 8009fdc:	4658      	mov	r0, fp
 8009fde:	f000 f967 	bl	800a2b0 <__multadd>
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	e7ea      	b.n	8009fbc <_dtoa_r+0xb5c>
 8009fe6:	bf00      	nop
 8009fe8:	0800ccb3 	.word	0x0800ccb3
 8009fec:	0800cc37 	.word	0x0800cc37

08009ff0 <_free_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d040      	beq.n	800a07a <_free_r+0x8a>
 8009ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffc:	1f0c      	subs	r4, r1, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfb8      	it	lt
 800a002:	18e4      	addlt	r4, r4, r3
 800a004:	f000 f8e6 	bl	800a1d4 <__malloc_lock>
 800a008:	4a1c      	ldr	r2, [pc, #112]	@ (800a07c <_free_r+0x8c>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	b933      	cbnz	r3, 800a01c <_free_r+0x2c>
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	6014      	str	r4, [r2, #0]
 800a012:	4628      	mov	r0, r5
 800a014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a018:	f000 b8e2 	b.w	800a1e0 <__malloc_unlock>
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d908      	bls.n	800a032 <_free_r+0x42>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	1821      	adds	r1, r4, r0
 800a024:	428b      	cmp	r3, r1
 800a026:	bf01      	itttt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	1809      	addeq	r1, r1, r0
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	e7ed      	b.n	800a00e <_free_r+0x1e>
 800a032:	461a      	mov	r2, r3
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	b10b      	cbz	r3, 800a03c <_free_r+0x4c>
 800a038:	42a3      	cmp	r3, r4
 800a03a:	d9fa      	bls.n	800a032 <_free_r+0x42>
 800a03c:	6811      	ldr	r1, [r2, #0]
 800a03e:	1850      	adds	r0, r2, r1
 800a040:	42a0      	cmp	r0, r4
 800a042:	d10b      	bne.n	800a05c <_free_r+0x6c>
 800a044:	6820      	ldr	r0, [r4, #0]
 800a046:	4401      	add	r1, r0
 800a048:	1850      	adds	r0, r2, r1
 800a04a:	4283      	cmp	r3, r0
 800a04c:	6011      	str	r1, [r2, #0]
 800a04e:	d1e0      	bne.n	800a012 <_free_r+0x22>
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	4408      	add	r0, r1
 800a056:	6010      	str	r0, [r2, #0]
 800a058:	6053      	str	r3, [r2, #4]
 800a05a:	e7da      	b.n	800a012 <_free_r+0x22>
 800a05c:	d902      	bls.n	800a064 <_free_r+0x74>
 800a05e:	230c      	movs	r3, #12
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	e7d6      	b.n	800a012 <_free_r+0x22>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	1821      	adds	r1, r4, r0
 800a068:	428b      	cmp	r3, r1
 800a06a:	bf01      	itttt	eq
 800a06c:	6819      	ldreq	r1, [r3, #0]
 800a06e:	685b      	ldreq	r3, [r3, #4]
 800a070:	1809      	addeq	r1, r1, r0
 800a072:	6021      	streq	r1, [r4, #0]
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	6054      	str	r4, [r2, #4]
 800a078:	e7cb      	b.n	800a012 <_free_r+0x22>
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20000758 	.word	0x20000758

0800a080 <malloc>:
 800a080:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <malloc+0xc>)
 800a082:	4601      	mov	r1, r0
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	f000 b825 	b.w	800a0d4 <_malloc_r>
 800a08a:	bf00      	nop
 800a08c:	20000034 	.word	0x20000034

0800a090 <sbrk_aligned>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d0 <sbrk_aligned+0x40>)
 800a094:	460c      	mov	r4, r1
 800a096:	6831      	ldr	r1, [r6, #0]
 800a098:	4605      	mov	r5, r0
 800a09a:	b911      	cbnz	r1, 800a0a2 <sbrk_aligned+0x12>
 800a09c:	f001 ffca 	bl	800c034 <_sbrk_r>
 800a0a0:	6030      	str	r0, [r6, #0]
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f001 ffc5 	bl	800c034 <_sbrk_r>
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	d103      	bne.n	800a0b6 <sbrk_aligned+0x26>
 800a0ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
 800a0b6:	1cc4      	adds	r4, r0, #3
 800a0b8:	f024 0403 	bic.w	r4, r4, #3
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d0f8      	beq.n	800a0b2 <sbrk_aligned+0x22>
 800a0c0:	1a21      	subs	r1, r4, r0
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f001 ffb6 	bl	800c034 <_sbrk_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d1f2      	bne.n	800a0b2 <sbrk_aligned+0x22>
 800a0cc:	e7ef      	b.n	800a0ae <sbrk_aligned+0x1e>
 800a0ce:	bf00      	nop
 800a0d0:	20000754 	.word	0x20000754

0800a0d4 <_malloc_r>:
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	1ccd      	adds	r5, r1, #3
 800a0da:	f025 0503 	bic.w	r5, r5, #3
 800a0de:	3508      	adds	r5, #8
 800a0e0:	2d0c      	cmp	r5, #12
 800a0e2:	bf38      	it	cc
 800a0e4:	250c      	movcc	r5, #12
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	db01      	blt.n	800a0f0 <_malloc_r+0x1c>
 800a0ec:	42a9      	cmp	r1, r5
 800a0ee:	d904      	bls.n	800a0fa <_malloc_r+0x26>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1d0 <_malloc_r+0xfc>
 800a0fe:	f000 f869 	bl	800a1d4 <__malloc_lock>
 800a102:	f8d8 3000 	ldr.w	r3, [r8]
 800a106:	461c      	mov	r4, r3
 800a108:	bb44      	cbnz	r4, 800a15c <_malloc_r+0x88>
 800a10a:	4629      	mov	r1, r5
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7ff ffbf 	bl	800a090 <sbrk_aligned>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	4604      	mov	r4, r0
 800a116:	d158      	bne.n	800a1ca <_malloc_r+0xf6>
 800a118:	f8d8 4000 	ldr.w	r4, [r8]
 800a11c:	4627      	mov	r7, r4
 800a11e:	2f00      	cmp	r7, #0
 800a120:	d143      	bne.n	800a1aa <_malloc_r+0xd6>
 800a122:	2c00      	cmp	r4, #0
 800a124:	d04b      	beq.n	800a1be <_malloc_r+0xea>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	4639      	mov	r1, r7
 800a12a:	4630      	mov	r0, r6
 800a12c:	eb04 0903 	add.w	r9, r4, r3
 800a130:	f001 ff80 	bl	800c034 <_sbrk_r>
 800a134:	4581      	cmp	r9, r0
 800a136:	d142      	bne.n	800a1be <_malloc_r+0xea>
 800a138:	6821      	ldr	r1, [r4, #0]
 800a13a:	4630      	mov	r0, r6
 800a13c:	1a6d      	subs	r5, r5, r1
 800a13e:	4629      	mov	r1, r5
 800a140:	f7ff ffa6 	bl	800a090 <sbrk_aligned>
 800a144:	3001      	adds	r0, #1
 800a146:	d03a      	beq.n	800a1be <_malloc_r+0xea>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	442b      	add	r3, r5
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	f8d8 3000 	ldr.w	r3, [r8]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	bb62      	cbnz	r2, 800a1b0 <_malloc_r+0xdc>
 800a156:	f8c8 7000 	str.w	r7, [r8]
 800a15a:	e00f      	b.n	800a17c <_malloc_r+0xa8>
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	1b52      	subs	r2, r2, r5
 800a160:	d420      	bmi.n	800a1a4 <_malloc_r+0xd0>
 800a162:	2a0b      	cmp	r2, #11
 800a164:	d917      	bls.n	800a196 <_malloc_r+0xc2>
 800a166:	1961      	adds	r1, r4, r5
 800a168:	42a3      	cmp	r3, r4
 800a16a:	6025      	str	r5, [r4, #0]
 800a16c:	bf18      	it	ne
 800a16e:	6059      	strne	r1, [r3, #4]
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	bf08      	it	eq
 800a174:	f8c8 1000 	streq.w	r1, [r8]
 800a178:	5162      	str	r2, [r4, r5]
 800a17a:	604b      	str	r3, [r1, #4]
 800a17c:	4630      	mov	r0, r6
 800a17e:	f000 f82f 	bl	800a1e0 <__malloc_unlock>
 800a182:	f104 000b 	add.w	r0, r4, #11
 800a186:	1d23      	adds	r3, r4, #4
 800a188:	f020 0007 	bic.w	r0, r0, #7
 800a18c:	1ac2      	subs	r2, r0, r3
 800a18e:	bf1c      	itt	ne
 800a190:	1a1b      	subne	r3, r3, r0
 800a192:	50a3      	strne	r3, [r4, r2]
 800a194:	e7af      	b.n	800a0f6 <_malloc_r+0x22>
 800a196:	6862      	ldr	r2, [r4, #4]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	bf0c      	ite	eq
 800a19c:	f8c8 2000 	streq.w	r2, [r8]
 800a1a0:	605a      	strne	r2, [r3, #4]
 800a1a2:	e7eb      	b.n	800a17c <_malloc_r+0xa8>
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	6864      	ldr	r4, [r4, #4]
 800a1a8:	e7ae      	b.n	800a108 <_malloc_r+0x34>
 800a1aa:	463c      	mov	r4, r7
 800a1ac:	687f      	ldr	r7, [r7, #4]
 800a1ae:	e7b6      	b.n	800a11e <_malloc_r+0x4a>
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	d1fb      	bne.n	800a1b0 <_malloc_r+0xdc>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	6053      	str	r3, [r2, #4]
 800a1bc:	e7de      	b.n	800a17c <_malloc_r+0xa8>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	6033      	str	r3, [r6, #0]
 800a1c4:	f000 f80c 	bl	800a1e0 <__malloc_unlock>
 800a1c8:	e794      	b.n	800a0f4 <_malloc_r+0x20>
 800a1ca:	6005      	str	r5, [r0, #0]
 800a1cc:	e7d6      	b.n	800a17c <_malloc_r+0xa8>
 800a1ce:	bf00      	nop
 800a1d0:	20000758 	.word	0x20000758

0800a1d4 <__malloc_lock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	@ (800a1dc <__malloc_lock+0x8>)
 800a1d6:	f7ff b8a6 	b.w	8009326 <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	20000750 	.word	0x20000750

0800a1e0 <__malloc_unlock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	@ (800a1e8 <__malloc_unlock+0x8>)
 800a1e2:	f7ff b8a1 	b.w	8009328 <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	20000750 	.word	0x20000750

0800a1ec <_Balloc>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	69c6      	ldr	r6, [r0, #28]
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	b976      	cbnz	r6, 800a214 <_Balloc+0x28>
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	f7ff ff42 	bl	800a080 <malloc>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	61e0      	str	r0, [r4, #28]
 800a200:	b920      	cbnz	r0, 800a20c <_Balloc+0x20>
 800a202:	216b      	movs	r1, #107	@ 0x6b
 800a204:	4b17      	ldr	r3, [pc, #92]	@ (800a264 <_Balloc+0x78>)
 800a206:	4818      	ldr	r0, [pc, #96]	@ (800a268 <_Balloc+0x7c>)
 800a208:	f001 ff38 	bl	800c07c <__assert_func>
 800a20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a210:	6006      	str	r6, [r0, #0]
 800a212:	60c6      	str	r6, [r0, #12]
 800a214:	69e6      	ldr	r6, [r4, #28]
 800a216:	68f3      	ldr	r3, [r6, #12]
 800a218:	b183      	cbz	r3, 800a23c <_Balloc+0x50>
 800a21a:	69e3      	ldr	r3, [r4, #28]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a222:	b9b8      	cbnz	r0, 800a254 <_Balloc+0x68>
 800a224:	2101      	movs	r1, #1
 800a226:	fa01 f605 	lsl.w	r6, r1, r5
 800a22a:	1d72      	adds	r2, r6, #5
 800a22c:	4620      	mov	r0, r4
 800a22e:	0092      	lsls	r2, r2, #2
 800a230:	f001 ff42 	bl	800c0b8 <_calloc_r>
 800a234:	b160      	cbz	r0, 800a250 <_Balloc+0x64>
 800a236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a23a:	e00e      	b.n	800a25a <_Balloc+0x6e>
 800a23c:	2221      	movs	r2, #33	@ 0x21
 800a23e:	2104      	movs	r1, #4
 800a240:	4620      	mov	r0, r4
 800a242:	f001 ff39 	bl	800c0b8 <_calloc_r>
 800a246:	69e3      	ldr	r3, [r4, #28]
 800a248:	60f0      	str	r0, [r6, #12]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e4      	bne.n	800a21a <_Balloc+0x2e>
 800a250:	2000      	movs	r0, #0
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	6802      	ldr	r2, [r0, #0]
 800a256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a25a:	2300      	movs	r3, #0
 800a25c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a260:	e7f7      	b.n	800a252 <_Balloc+0x66>
 800a262:	bf00      	nop
 800a264:	0800cc44 	.word	0x0800cc44
 800a268:	0800ccc4 	.word	0x0800ccc4

0800a26c <_Bfree>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	69c6      	ldr	r6, [r0, #28]
 800a270:	4605      	mov	r5, r0
 800a272:	460c      	mov	r4, r1
 800a274:	b976      	cbnz	r6, 800a294 <_Bfree+0x28>
 800a276:	2010      	movs	r0, #16
 800a278:	f7ff ff02 	bl	800a080 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	61e8      	str	r0, [r5, #28]
 800a280:	b920      	cbnz	r0, 800a28c <_Bfree+0x20>
 800a282:	218f      	movs	r1, #143	@ 0x8f
 800a284:	4b08      	ldr	r3, [pc, #32]	@ (800a2a8 <_Bfree+0x3c>)
 800a286:	4809      	ldr	r0, [pc, #36]	@ (800a2ac <_Bfree+0x40>)
 800a288:	f001 fef8 	bl	800c07c <__assert_func>
 800a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a290:	6006      	str	r6, [r0, #0]
 800a292:	60c6      	str	r6, [r0, #12]
 800a294:	b13c      	cbz	r4, 800a2a6 <_Bfree+0x3a>
 800a296:	69eb      	ldr	r3, [r5, #28]
 800a298:	6862      	ldr	r2, [r4, #4]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2a0:	6021      	str	r1, [r4, #0]
 800a2a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	0800cc44 	.word	0x0800cc44
 800a2ac:	0800ccc4 	.word	0x0800ccc4

0800a2b0 <__multadd>:
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	4607      	mov	r7, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	461e      	mov	r6, r3
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	690d      	ldr	r5, [r1, #16]
 800a2be:	f101 0c14 	add.w	ip, r1, #20
 800a2c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	b299      	uxth	r1, r3
 800a2ca:	fb02 6101 	mla	r1, r2, r1, r6
 800a2ce:	0c1e      	lsrs	r6, r3, #16
 800a2d0:	0c0b      	lsrs	r3, r1, #16
 800a2d2:	fb02 3306 	mla	r3, r2, r6, r3
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2dc:	4285      	cmp	r5, r0
 800a2de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2e6:	dcec      	bgt.n	800a2c2 <__multadd+0x12>
 800a2e8:	b30e      	cbz	r6, 800a32e <__multadd+0x7e>
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	42ab      	cmp	r3, r5
 800a2ee:	dc19      	bgt.n	800a324 <__multadd+0x74>
 800a2f0:	6861      	ldr	r1, [r4, #4]
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f7ff ff79 	bl	800a1ec <_Balloc>
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	b928      	cbnz	r0, 800a30a <__multadd+0x5a>
 800a2fe:	4602      	mov	r2, r0
 800a300:	21ba      	movs	r1, #186	@ 0xba
 800a302:	4b0c      	ldr	r3, [pc, #48]	@ (800a334 <__multadd+0x84>)
 800a304:	480c      	ldr	r0, [pc, #48]	@ (800a338 <__multadd+0x88>)
 800a306:	f001 feb9 	bl	800c07c <__assert_func>
 800a30a:	6922      	ldr	r2, [r4, #16]
 800a30c:	f104 010c 	add.w	r1, r4, #12
 800a310:	3202      	adds	r2, #2
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	300c      	adds	r0, #12
 800a316:	f001 fe9d 	bl	800c054 <memcpy>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ffa5 	bl	800a26c <_Bfree>
 800a322:	4644      	mov	r4, r8
 800a324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a328:	3501      	adds	r5, #1
 800a32a:	615e      	str	r6, [r3, #20]
 800a32c:	6125      	str	r5, [r4, #16]
 800a32e:	4620      	mov	r0, r4
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a334:	0800ccb3 	.word	0x0800ccb3
 800a338:	0800ccc4 	.word	0x0800ccc4

0800a33c <__s2b>:
 800a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a340:	4615      	mov	r5, r2
 800a342:	2209      	movs	r2, #9
 800a344:	461f      	mov	r7, r3
 800a346:	3308      	adds	r3, #8
 800a348:	460c      	mov	r4, r1
 800a34a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a34e:	4606      	mov	r6, r0
 800a350:	2201      	movs	r2, #1
 800a352:	2100      	movs	r1, #0
 800a354:	429a      	cmp	r2, r3
 800a356:	db09      	blt.n	800a36c <__s2b+0x30>
 800a358:	4630      	mov	r0, r6
 800a35a:	f7ff ff47 	bl	800a1ec <_Balloc>
 800a35e:	b940      	cbnz	r0, 800a372 <__s2b+0x36>
 800a360:	4602      	mov	r2, r0
 800a362:	21d3      	movs	r1, #211	@ 0xd3
 800a364:	4b18      	ldr	r3, [pc, #96]	@ (800a3c8 <__s2b+0x8c>)
 800a366:	4819      	ldr	r0, [pc, #100]	@ (800a3cc <__s2b+0x90>)
 800a368:	f001 fe88 	bl	800c07c <__assert_func>
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	3101      	adds	r1, #1
 800a370:	e7f0      	b.n	800a354 <__s2b+0x18>
 800a372:	9b08      	ldr	r3, [sp, #32]
 800a374:	2d09      	cmp	r5, #9
 800a376:	6143      	str	r3, [r0, #20]
 800a378:	f04f 0301 	mov.w	r3, #1
 800a37c:	6103      	str	r3, [r0, #16]
 800a37e:	dd16      	ble.n	800a3ae <__s2b+0x72>
 800a380:	f104 0909 	add.w	r9, r4, #9
 800a384:	46c8      	mov	r8, r9
 800a386:	442c      	add	r4, r5
 800a388:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a38c:	4601      	mov	r1, r0
 800a38e:	220a      	movs	r2, #10
 800a390:	4630      	mov	r0, r6
 800a392:	3b30      	subs	r3, #48	@ 0x30
 800a394:	f7ff ff8c 	bl	800a2b0 <__multadd>
 800a398:	45a0      	cmp	r8, r4
 800a39a:	d1f5      	bne.n	800a388 <__s2b+0x4c>
 800a39c:	f1a5 0408 	sub.w	r4, r5, #8
 800a3a0:	444c      	add	r4, r9
 800a3a2:	1b2d      	subs	r5, r5, r4
 800a3a4:	1963      	adds	r3, r4, r5
 800a3a6:	42bb      	cmp	r3, r7
 800a3a8:	db04      	blt.n	800a3b4 <__s2b+0x78>
 800a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ae:	2509      	movs	r5, #9
 800a3b0:	340a      	adds	r4, #10
 800a3b2:	e7f6      	b.n	800a3a2 <__s2b+0x66>
 800a3b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	4630      	mov	r0, r6
 800a3be:	3b30      	subs	r3, #48	@ 0x30
 800a3c0:	f7ff ff76 	bl	800a2b0 <__multadd>
 800a3c4:	e7ee      	b.n	800a3a4 <__s2b+0x68>
 800a3c6:	bf00      	nop
 800a3c8:	0800ccb3 	.word	0x0800ccb3
 800a3cc:	0800ccc4 	.word	0x0800ccc4

0800a3d0 <__hi0bits>:
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3d6:	bf3a      	itte	cc
 800a3d8:	0403      	lslcc	r3, r0, #16
 800a3da:	2010      	movcc	r0, #16
 800a3dc:	2000      	movcs	r0, #0
 800a3de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3e2:	bf3c      	itt	cc
 800a3e4:	021b      	lslcc	r3, r3, #8
 800a3e6:	3008      	addcc	r0, #8
 800a3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ec:	bf3c      	itt	cc
 800a3ee:	011b      	lslcc	r3, r3, #4
 800a3f0:	3004      	addcc	r0, #4
 800a3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f6:	bf3c      	itt	cc
 800a3f8:	009b      	lslcc	r3, r3, #2
 800a3fa:	3002      	addcc	r0, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	db05      	blt.n	800a40c <__hi0bits+0x3c>
 800a400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a404:	f100 0001 	add.w	r0, r0, #1
 800a408:	bf08      	it	eq
 800a40a:	2020      	moveq	r0, #32
 800a40c:	4770      	bx	lr

0800a40e <__lo0bits>:
 800a40e:	6803      	ldr	r3, [r0, #0]
 800a410:	4602      	mov	r2, r0
 800a412:	f013 0007 	ands.w	r0, r3, #7
 800a416:	d00b      	beq.n	800a430 <__lo0bits+0x22>
 800a418:	07d9      	lsls	r1, r3, #31
 800a41a:	d421      	bmi.n	800a460 <__lo0bits+0x52>
 800a41c:	0798      	lsls	r0, r3, #30
 800a41e:	bf49      	itett	mi
 800a420:	085b      	lsrmi	r3, r3, #1
 800a422:	089b      	lsrpl	r3, r3, #2
 800a424:	2001      	movmi	r0, #1
 800a426:	6013      	strmi	r3, [r2, #0]
 800a428:	bf5c      	itt	pl
 800a42a:	2002      	movpl	r0, #2
 800a42c:	6013      	strpl	r3, [r2, #0]
 800a42e:	4770      	bx	lr
 800a430:	b299      	uxth	r1, r3
 800a432:	b909      	cbnz	r1, 800a438 <__lo0bits+0x2a>
 800a434:	2010      	movs	r0, #16
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	b2d9      	uxtb	r1, r3
 800a43a:	b909      	cbnz	r1, 800a440 <__lo0bits+0x32>
 800a43c:	3008      	adds	r0, #8
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	0719      	lsls	r1, r3, #28
 800a442:	bf04      	itt	eq
 800a444:	091b      	lsreq	r3, r3, #4
 800a446:	3004      	addeq	r0, #4
 800a448:	0799      	lsls	r1, r3, #30
 800a44a:	bf04      	itt	eq
 800a44c:	089b      	lsreq	r3, r3, #2
 800a44e:	3002      	addeq	r0, #2
 800a450:	07d9      	lsls	r1, r3, #31
 800a452:	d403      	bmi.n	800a45c <__lo0bits+0x4e>
 800a454:	085b      	lsrs	r3, r3, #1
 800a456:	f100 0001 	add.w	r0, r0, #1
 800a45a:	d003      	beq.n	800a464 <__lo0bits+0x56>
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4770      	bx	lr
 800a460:	2000      	movs	r0, #0
 800a462:	4770      	bx	lr
 800a464:	2020      	movs	r0, #32
 800a466:	4770      	bx	lr

0800a468 <__i2b>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	2101      	movs	r1, #1
 800a46e:	f7ff febd 	bl	800a1ec <_Balloc>
 800a472:	4602      	mov	r2, r0
 800a474:	b928      	cbnz	r0, 800a482 <__i2b+0x1a>
 800a476:	f240 1145 	movw	r1, #325	@ 0x145
 800a47a:	4b04      	ldr	r3, [pc, #16]	@ (800a48c <__i2b+0x24>)
 800a47c:	4804      	ldr	r0, [pc, #16]	@ (800a490 <__i2b+0x28>)
 800a47e:	f001 fdfd 	bl	800c07c <__assert_func>
 800a482:	2301      	movs	r3, #1
 800a484:	6144      	str	r4, [r0, #20]
 800a486:	6103      	str	r3, [r0, #16]
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	0800ccb3 	.word	0x0800ccb3
 800a490:	0800ccc4 	.word	0x0800ccc4

0800a494 <__multiply>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4614      	mov	r4, r2
 800a49a:	690a      	ldr	r2, [r1, #16]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	460f      	mov	r7, r1
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	bfa2      	ittt	ge
 800a4a4:	4623      	movge	r3, r4
 800a4a6:	460c      	movge	r4, r1
 800a4a8:	461f      	movge	r7, r3
 800a4aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4ae:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	6861      	ldr	r1, [r4, #4]
 800a4b6:	eb0a 0609 	add.w	r6, sl, r9
 800a4ba:	42b3      	cmp	r3, r6
 800a4bc:	b085      	sub	sp, #20
 800a4be:	bfb8      	it	lt
 800a4c0:	3101      	addlt	r1, #1
 800a4c2:	f7ff fe93 	bl	800a1ec <_Balloc>
 800a4c6:	b930      	cbnz	r0, 800a4d6 <__multiply+0x42>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4ce:	4b43      	ldr	r3, [pc, #268]	@ (800a5dc <__multiply+0x148>)
 800a4d0:	4843      	ldr	r0, [pc, #268]	@ (800a5e0 <__multiply+0x14c>)
 800a4d2:	f001 fdd3 	bl	800c07c <__assert_func>
 800a4d6:	f100 0514 	add.w	r5, r0, #20
 800a4da:	462b      	mov	r3, r5
 800a4dc:	2200      	movs	r2, #0
 800a4de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4e2:	4543      	cmp	r3, r8
 800a4e4:	d321      	bcc.n	800a52a <__multiply+0x96>
 800a4e6:	f107 0114 	add.w	r1, r7, #20
 800a4ea:	f104 0214 	add.w	r2, r4, #20
 800a4ee:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4f2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	1b13      	subs	r3, r2, r4
 800a4fa:	3b15      	subs	r3, #21
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	3304      	adds	r3, #4
 800a502:	f104 0715 	add.w	r7, r4, #21
 800a506:	42ba      	cmp	r2, r7
 800a508:	bf38      	it	cc
 800a50a:	2304      	movcc	r3, #4
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	9103      	str	r1, [sp, #12]
 800a512:	428b      	cmp	r3, r1
 800a514:	d80c      	bhi.n	800a530 <__multiply+0x9c>
 800a516:	2e00      	cmp	r6, #0
 800a518:	dd03      	ble.n	800a522 <__multiply+0x8e>
 800a51a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d05a      	beq.n	800a5d8 <__multiply+0x144>
 800a522:	6106      	str	r6, [r0, #16]
 800a524:	b005      	add	sp, #20
 800a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52a:	f843 2b04 	str.w	r2, [r3], #4
 800a52e:	e7d8      	b.n	800a4e2 <__multiply+0x4e>
 800a530:	f8b1 a000 	ldrh.w	sl, [r1]
 800a534:	f1ba 0f00 	cmp.w	sl, #0
 800a538:	d023      	beq.n	800a582 <__multiply+0xee>
 800a53a:	46a9      	mov	r9, r5
 800a53c:	f04f 0c00 	mov.w	ip, #0
 800a540:	f104 0e14 	add.w	lr, r4, #20
 800a544:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a548:	f8d9 3000 	ldr.w	r3, [r9]
 800a54c:	fa1f fb87 	uxth.w	fp, r7
 800a550:	b29b      	uxth	r3, r3
 800a552:	fb0a 330b 	mla	r3, sl, fp, r3
 800a556:	4463      	add	r3, ip
 800a558:	f8d9 c000 	ldr.w	ip, [r9]
 800a55c:	0c3f      	lsrs	r7, r7, #16
 800a55e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a562:	fb0a c707 	mla	r7, sl, r7, ip
 800a566:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a570:	4572      	cmp	r2, lr
 800a572:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a576:	f849 3b04 	str.w	r3, [r9], #4
 800a57a:	d8e3      	bhi.n	800a544 <__multiply+0xb0>
 800a57c:	9b01      	ldr	r3, [sp, #4]
 800a57e:	f845 c003 	str.w	ip, [r5, r3]
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	3104      	adds	r1, #4
 800a586:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a58a:	f1b9 0f00 	cmp.w	r9, #0
 800a58e:	d021      	beq.n	800a5d4 <__multiply+0x140>
 800a590:	46ae      	mov	lr, r5
 800a592:	f04f 0a00 	mov.w	sl, #0
 800a596:	682b      	ldr	r3, [r5, #0]
 800a598:	f104 0c14 	add.w	ip, r4, #20
 800a59c:	f8bc b000 	ldrh.w	fp, [ip]
 800a5a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	fb09 770b 	mla	r7, r9, fp, r7
 800a5aa:	4457      	add	r7, sl
 800a5ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5b0:	f84e 3b04 	str.w	r3, [lr], #4
 800a5b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5bc:	f8be 3000 	ldrh.w	r3, [lr]
 800a5c0:	4562      	cmp	r2, ip
 800a5c2:	fb09 330a 	mla	r3, r9, sl, r3
 800a5c6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ce:	d8e5      	bhi.n	800a59c <__multiply+0x108>
 800a5d0:	9f01      	ldr	r7, [sp, #4]
 800a5d2:	51eb      	str	r3, [r5, r7]
 800a5d4:	3504      	adds	r5, #4
 800a5d6:	e79a      	b.n	800a50e <__multiply+0x7a>
 800a5d8:	3e01      	subs	r6, #1
 800a5da:	e79c      	b.n	800a516 <__multiply+0x82>
 800a5dc:	0800ccb3 	.word	0x0800ccb3
 800a5e0:	0800ccc4 	.word	0x0800ccc4

0800a5e4 <__pow5mult>:
 800a5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4615      	mov	r5, r2
 800a5ea:	f012 0203 	ands.w	r2, r2, #3
 800a5ee:	4607      	mov	r7, r0
 800a5f0:	460e      	mov	r6, r1
 800a5f2:	d007      	beq.n	800a604 <__pow5mult+0x20>
 800a5f4:	4c25      	ldr	r4, [pc, #148]	@ (800a68c <__pow5mult+0xa8>)
 800a5f6:	3a01      	subs	r2, #1
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5fe:	f7ff fe57 	bl	800a2b0 <__multadd>
 800a602:	4606      	mov	r6, r0
 800a604:	10ad      	asrs	r5, r5, #2
 800a606:	d03d      	beq.n	800a684 <__pow5mult+0xa0>
 800a608:	69fc      	ldr	r4, [r7, #28]
 800a60a:	b97c      	cbnz	r4, 800a62c <__pow5mult+0x48>
 800a60c:	2010      	movs	r0, #16
 800a60e:	f7ff fd37 	bl	800a080 <malloc>
 800a612:	4602      	mov	r2, r0
 800a614:	61f8      	str	r0, [r7, #28]
 800a616:	b928      	cbnz	r0, 800a624 <__pow5mult+0x40>
 800a618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a61c:	4b1c      	ldr	r3, [pc, #112]	@ (800a690 <__pow5mult+0xac>)
 800a61e:	481d      	ldr	r0, [pc, #116]	@ (800a694 <__pow5mult+0xb0>)
 800a620:	f001 fd2c 	bl	800c07c <__assert_func>
 800a624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a628:	6004      	str	r4, [r0, #0]
 800a62a:	60c4      	str	r4, [r0, #12]
 800a62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a634:	b94c      	cbnz	r4, 800a64a <__pow5mult+0x66>
 800a636:	f240 2171 	movw	r1, #625	@ 0x271
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7ff ff14 	bl	800a468 <__i2b>
 800a640:	2300      	movs	r3, #0
 800a642:	4604      	mov	r4, r0
 800a644:	f8c8 0008 	str.w	r0, [r8, #8]
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	f04f 0900 	mov.w	r9, #0
 800a64e:	07eb      	lsls	r3, r5, #31
 800a650:	d50a      	bpl.n	800a668 <__pow5mult+0x84>
 800a652:	4631      	mov	r1, r6
 800a654:	4622      	mov	r2, r4
 800a656:	4638      	mov	r0, r7
 800a658:	f7ff ff1c 	bl	800a494 <__multiply>
 800a65c:	4680      	mov	r8, r0
 800a65e:	4631      	mov	r1, r6
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff fe03 	bl	800a26c <_Bfree>
 800a666:	4646      	mov	r6, r8
 800a668:	106d      	asrs	r5, r5, #1
 800a66a:	d00b      	beq.n	800a684 <__pow5mult+0xa0>
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	b938      	cbnz	r0, 800a680 <__pow5mult+0x9c>
 800a670:	4622      	mov	r2, r4
 800a672:	4621      	mov	r1, r4
 800a674:	4638      	mov	r0, r7
 800a676:	f7ff ff0d 	bl	800a494 <__multiply>
 800a67a:	6020      	str	r0, [r4, #0]
 800a67c:	f8c0 9000 	str.w	r9, [r0]
 800a680:	4604      	mov	r4, r0
 800a682:	e7e4      	b.n	800a64e <__pow5mult+0x6a>
 800a684:	4630      	mov	r0, r6
 800a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68a:	bf00      	nop
 800a68c:	0800cd20 	.word	0x0800cd20
 800a690:	0800cc44 	.word	0x0800cc44
 800a694:	0800ccc4 	.word	0x0800ccc4

0800a698 <__lshift>:
 800a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	4607      	mov	r7, r0
 800a6a0:	4691      	mov	r9, r2
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	6849      	ldr	r1, [r1, #4]
 800a6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b0:	f108 0601 	add.w	r6, r8, #1
 800a6b4:	42b3      	cmp	r3, r6
 800a6b6:	db0b      	blt.n	800a6d0 <__lshift+0x38>
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f7ff fd97 	bl	800a1ec <_Balloc>
 800a6be:	4605      	mov	r5, r0
 800a6c0:	b948      	cbnz	r0, 800a6d6 <__lshift+0x3e>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6c8:	4b27      	ldr	r3, [pc, #156]	@ (800a768 <__lshift+0xd0>)
 800a6ca:	4828      	ldr	r0, [pc, #160]	@ (800a76c <__lshift+0xd4>)
 800a6cc:	f001 fcd6 	bl	800c07c <__assert_func>
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	e7ee      	b.n	800a6b4 <__lshift+0x1c>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f100 0114 	add.w	r1, r0, #20
 800a6dc:	f100 0210 	add.w	r2, r0, #16
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	4553      	cmp	r3, sl
 800a6e4:	db33      	blt.n	800a74e <__lshift+0xb6>
 800a6e6:	6920      	ldr	r0, [r4, #16]
 800a6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6ec:	f104 0314 	add.w	r3, r4, #20
 800a6f0:	f019 091f 	ands.w	r9, r9, #31
 800a6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6fc:	d02b      	beq.n	800a756 <__lshift+0xbe>
 800a6fe:	468a      	mov	sl, r1
 800a700:	2200      	movs	r2, #0
 800a702:	f1c9 0e20 	rsb	lr, r9, #32
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	fa00 f009 	lsl.w	r0, r0, r9
 800a70c:	4310      	orrs	r0, r2
 800a70e:	f84a 0b04 	str.w	r0, [sl], #4
 800a712:	f853 2b04 	ldr.w	r2, [r3], #4
 800a716:	459c      	cmp	ip, r3
 800a718:	fa22 f20e 	lsr.w	r2, r2, lr
 800a71c:	d8f3      	bhi.n	800a706 <__lshift+0x6e>
 800a71e:	ebac 0304 	sub.w	r3, ip, r4
 800a722:	3b15      	subs	r3, #21
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3304      	adds	r3, #4
 800a72a:	f104 0015 	add.w	r0, r4, #21
 800a72e:	4584      	cmp	ip, r0
 800a730:	bf38      	it	cc
 800a732:	2304      	movcc	r3, #4
 800a734:	50ca      	str	r2, [r1, r3]
 800a736:	b10a      	cbz	r2, 800a73c <__lshift+0xa4>
 800a738:	f108 0602 	add.w	r6, r8, #2
 800a73c:	3e01      	subs	r6, #1
 800a73e:	4638      	mov	r0, r7
 800a740:	4621      	mov	r1, r4
 800a742:	612e      	str	r6, [r5, #16]
 800a744:	f7ff fd92 	bl	800a26c <_Bfree>
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a752:	3301      	adds	r3, #1
 800a754:	e7c5      	b.n	800a6e2 <__lshift+0x4a>
 800a756:	3904      	subs	r1, #4
 800a758:	f853 2b04 	ldr.w	r2, [r3], #4
 800a75c:	459c      	cmp	ip, r3
 800a75e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a762:	d8f9      	bhi.n	800a758 <__lshift+0xc0>
 800a764:	e7ea      	b.n	800a73c <__lshift+0xa4>
 800a766:	bf00      	nop
 800a768:	0800ccb3 	.word	0x0800ccb3
 800a76c:	0800ccc4 	.word	0x0800ccc4

0800a770 <__mcmp>:
 800a770:	4603      	mov	r3, r0
 800a772:	690a      	ldr	r2, [r1, #16]
 800a774:	6900      	ldr	r0, [r0, #16]
 800a776:	b530      	push	{r4, r5, lr}
 800a778:	1a80      	subs	r0, r0, r2
 800a77a:	d10e      	bne.n	800a79a <__mcmp+0x2a>
 800a77c:	3314      	adds	r3, #20
 800a77e:	3114      	adds	r1, #20
 800a780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a790:	4295      	cmp	r5, r2
 800a792:	d003      	beq.n	800a79c <__mcmp+0x2c>
 800a794:	d205      	bcs.n	800a7a2 <__mcmp+0x32>
 800a796:	f04f 30ff 	mov.w	r0, #4294967295
 800a79a:	bd30      	pop	{r4, r5, pc}
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d3f3      	bcc.n	800a788 <__mcmp+0x18>
 800a7a0:	e7fb      	b.n	800a79a <__mcmp+0x2a>
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	e7f9      	b.n	800a79a <__mcmp+0x2a>
	...

0800a7a8 <__mdiff>:
 800a7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	f7ff ffdb 	bl	800a770 <__mcmp>
 800a7ba:	1e05      	subs	r5, r0, #0
 800a7bc:	d112      	bne.n	800a7e4 <__mdiff+0x3c>
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff fd13 	bl	800a1ec <_Balloc>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	b928      	cbnz	r0, 800a7d6 <__mdiff+0x2e>
 800a7ca:	f240 2137 	movw	r1, #567	@ 0x237
 800a7ce:	4b3e      	ldr	r3, [pc, #248]	@ (800a8c8 <__mdiff+0x120>)
 800a7d0:	483e      	ldr	r0, [pc, #248]	@ (800a8cc <__mdiff+0x124>)
 800a7d2:	f001 fc53 	bl	800c07c <__assert_func>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7dc:	4610      	mov	r0, r2
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	bfbc      	itt	lt
 800a7e6:	464b      	movlt	r3, r9
 800a7e8:	46a1      	movlt	r9, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7f0:	bfba      	itte	lt
 800a7f2:	461c      	movlt	r4, r3
 800a7f4:	2501      	movlt	r5, #1
 800a7f6:	2500      	movge	r5, #0
 800a7f8:	f7ff fcf8 	bl	800a1ec <_Balloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	b918      	cbnz	r0, 800a808 <__mdiff+0x60>
 800a800:	f240 2145 	movw	r1, #581	@ 0x245
 800a804:	4b30      	ldr	r3, [pc, #192]	@ (800a8c8 <__mdiff+0x120>)
 800a806:	e7e3      	b.n	800a7d0 <__mdiff+0x28>
 800a808:	f100 0b14 	add.w	fp, r0, #20
 800a80c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a810:	f109 0310 	add.w	r3, r9, #16
 800a814:	60c5      	str	r5, [r0, #12]
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	f109 0514 	add.w	r5, r9, #20
 800a81e:	46d9      	mov	r9, fp
 800a820:	6926      	ldr	r6, [r4, #16]
 800a822:	f104 0e14 	add.w	lr, r4, #20
 800a826:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a82a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a83a:	b281      	uxth	r1, r0
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	fa1f f38a 	uxth.w	r3, sl
 800a842:	1a5b      	subs	r3, r3, r1
 800a844:	0c00      	lsrs	r0, r0, #16
 800a846:	4463      	add	r3, ip
 800a848:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a84c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a850:	b29b      	uxth	r3, r3
 800a852:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a856:	4576      	cmp	r6, lr
 800a858:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a85c:	f849 3b04 	str.w	r3, [r9], #4
 800a860:	d8e6      	bhi.n	800a830 <__mdiff+0x88>
 800a862:	1b33      	subs	r3, r6, r4
 800a864:	3b15      	subs	r3, #21
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	3415      	adds	r4, #21
 800a86c:	3304      	adds	r3, #4
 800a86e:	42a6      	cmp	r6, r4
 800a870:	bf38      	it	cc
 800a872:	2304      	movcc	r3, #4
 800a874:	441d      	add	r5, r3
 800a876:	445b      	add	r3, fp
 800a878:	461e      	mov	r6, r3
 800a87a:	462c      	mov	r4, r5
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d30e      	bcc.n	800a89e <__mdiff+0xf6>
 800a880:	f108 0103 	add.w	r1, r8, #3
 800a884:	1b49      	subs	r1, r1, r5
 800a886:	f021 0103 	bic.w	r1, r1, #3
 800a88a:	3d03      	subs	r5, #3
 800a88c:	45a8      	cmp	r8, r5
 800a88e:	bf38      	it	cc
 800a890:	2100      	movcc	r1, #0
 800a892:	440b      	add	r3, r1
 800a894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a898:	b199      	cbz	r1, 800a8c2 <__mdiff+0x11a>
 800a89a:	6117      	str	r7, [r2, #16]
 800a89c:	e79e      	b.n	800a7dc <__mdiff+0x34>
 800a89e:	46e6      	mov	lr, ip
 800a8a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8a4:	fa1f fc81 	uxth.w	ip, r1
 800a8a8:	44f4      	add	ip, lr
 800a8aa:	0c08      	lsrs	r0, r1, #16
 800a8ac:	4471      	add	r1, lr
 800a8ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8b2:	b289      	uxth	r1, r1
 800a8b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8bc:	f846 1b04 	str.w	r1, [r6], #4
 800a8c0:	e7dc      	b.n	800a87c <__mdiff+0xd4>
 800a8c2:	3f01      	subs	r7, #1
 800a8c4:	e7e6      	b.n	800a894 <__mdiff+0xec>
 800a8c6:	bf00      	nop
 800a8c8:	0800ccb3 	.word	0x0800ccb3
 800a8cc:	0800ccc4 	.word	0x0800ccc4

0800a8d0 <__ulp>:
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a90c <__ulp+0x3c>)
 800a8d2:	400b      	ands	r3, r1
 800a8d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc08      	bgt.n	800a8ee <__ulp+0x1e>
 800a8dc:	425b      	negs	r3, r3
 800a8de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8e6:	da04      	bge.n	800a8f2 <__ulp+0x22>
 800a8e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8ec:	4113      	asrs	r3, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	e008      	b.n	800a904 <__ulp+0x34>
 800a8f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a8f6:	2b1e      	cmp	r3, #30
 800a8f8:	bfd6      	itet	le
 800a8fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8fe:	2201      	movgt	r2, #1
 800a900:	40da      	lsrle	r2, r3
 800a902:	2300      	movs	r3, #0
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	7ff00000 	.word	0x7ff00000

0800a910 <__b2d>:
 800a910:	6902      	ldr	r2, [r0, #16]
 800a912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a914:	f100 0614 	add.w	r6, r0, #20
 800a918:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a91c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a920:	4f1e      	ldr	r7, [pc, #120]	@ (800a99c <__b2d+0x8c>)
 800a922:	4620      	mov	r0, r4
 800a924:	f7ff fd54 	bl	800a3d0 <__hi0bits>
 800a928:	4603      	mov	r3, r0
 800a92a:	f1c0 0020 	rsb	r0, r0, #32
 800a92e:	2b0a      	cmp	r3, #10
 800a930:	f1a2 0504 	sub.w	r5, r2, #4
 800a934:	6008      	str	r0, [r1, #0]
 800a936:	dc12      	bgt.n	800a95e <__b2d+0x4e>
 800a938:	42ae      	cmp	r6, r5
 800a93a:	bf2c      	ite	cs
 800a93c:	2200      	movcs	r2, #0
 800a93e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a942:	f1c3 0c0b 	rsb	ip, r3, #11
 800a946:	3315      	adds	r3, #21
 800a948:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a94c:	fa04 f303 	lsl.w	r3, r4, r3
 800a950:	fa22 f20c 	lsr.w	r2, r2, ip
 800a954:	ea4e 0107 	orr.w	r1, lr, r7
 800a958:	431a      	orrs	r2, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95e:	42ae      	cmp	r6, r5
 800a960:	bf36      	itet	cc
 800a962:	f1a2 0508 	subcc.w	r5, r2, #8
 800a966:	2200      	movcs	r2, #0
 800a968:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a96c:	3b0b      	subs	r3, #11
 800a96e:	d012      	beq.n	800a996 <__b2d+0x86>
 800a970:	f1c3 0720 	rsb	r7, r3, #32
 800a974:	fa22 f107 	lsr.w	r1, r2, r7
 800a978:	409c      	lsls	r4, r3
 800a97a:	430c      	orrs	r4, r1
 800a97c:	42b5      	cmp	r5, r6
 800a97e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a982:	bf94      	ite	ls
 800a984:	2400      	movls	r4, #0
 800a986:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a98a:	409a      	lsls	r2, r3
 800a98c:	40fc      	lsrs	r4, r7
 800a98e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a992:	4322      	orrs	r2, r4
 800a994:	e7e1      	b.n	800a95a <__b2d+0x4a>
 800a996:	ea44 0107 	orr.w	r1, r4, r7
 800a99a:	e7de      	b.n	800a95a <__b2d+0x4a>
 800a99c:	3ff00000 	.word	0x3ff00000

0800a9a0 <__d2b>:
 800a9a0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	4690      	mov	r8, r2
 800a9a8:	4699      	mov	r9, r3
 800a9aa:	9e08      	ldr	r6, [sp, #32]
 800a9ac:	f7ff fc1e 	bl	800a1ec <_Balloc>
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	b930      	cbnz	r0, 800a9c2 <__d2b+0x22>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9ba:	4b23      	ldr	r3, [pc, #140]	@ (800aa48 <__d2b+0xa8>)
 800a9bc:	4823      	ldr	r0, [pc, #140]	@ (800aa4c <__d2b+0xac>)
 800a9be:	f001 fb5d 	bl	800c07c <__assert_func>
 800a9c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9ca:	b10d      	cbz	r5, 800a9d0 <__d2b+0x30>
 800a9cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f1b8 0300 	subs.w	r3, r8, #0
 800a9d6:	d024      	beq.n	800aa22 <__d2b+0x82>
 800a9d8:	4668      	mov	r0, sp
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	f7ff fd17 	bl	800a40e <__lo0bits>
 800a9e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9e4:	b1d8      	cbz	r0, 800aa1e <__d2b+0x7e>
 800a9e6:	f1c0 0320 	rsb	r3, r0, #32
 800a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	40c2      	lsrs	r2, r0
 800a9f2:	6163      	str	r3, [r4, #20]
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	9b01      	ldr	r3, [sp, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2201      	moveq	r2, #1
 800a9fe:	2202      	movne	r2, #2
 800aa00:	61a3      	str	r3, [r4, #24]
 800aa02:	6122      	str	r2, [r4, #16]
 800aa04:	b1ad      	cbz	r5, 800aa32 <__d2b+0x92>
 800aa06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa0a:	4405      	add	r5, r0
 800aa0c:	6035      	str	r5, [r6, #0]
 800aa0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa14:	6018      	str	r0, [r3, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	b002      	add	sp, #8
 800aa1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aa1e:	6161      	str	r1, [r4, #20]
 800aa20:	e7e9      	b.n	800a9f6 <__d2b+0x56>
 800aa22:	a801      	add	r0, sp, #4
 800aa24:	f7ff fcf3 	bl	800a40e <__lo0bits>
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	6163      	str	r3, [r4, #20]
 800aa2e:	3020      	adds	r0, #32
 800aa30:	e7e7      	b.n	800aa02 <__d2b+0x62>
 800aa32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa3a:	6030      	str	r0, [r6, #0]
 800aa3c:	6918      	ldr	r0, [r3, #16]
 800aa3e:	f7ff fcc7 	bl	800a3d0 <__hi0bits>
 800aa42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa46:	e7e4      	b.n	800aa12 <__d2b+0x72>
 800aa48:	0800ccb3 	.word	0x0800ccb3
 800aa4c:	0800ccc4 	.word	0x0800ccc4

0800aa50 <__ratio>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	b085      	sub	sp, #20
 800aa56:	e9cd 1000 	strd	r1, r0, [sp]
 800aa5a:	a902      	add	r1, sp, #8
 800aa5c:	f7ff ff58 	bl	800a910 <__b2d>
 800aa60:	468b      	mov	fp, r1
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	9800      	ldr	r0, [sp, #0]
 800aa68:	a903      	add	r1, sp, #12
 800aa6a:	f7ff ff51 	bl	800a910 <__b2d>
 800aa6e:	460d      	mov	r5, r1
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	4689      	mov	r9, r1
 800aa74:	6919      	ldr	r1, [r3, #16]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	1ac9      	subs	r1, r1, r3
 800aa80:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bfcd      	iteet	gt
 800aa8e:	463a      	movgt	r2, r7
 800aa90:	462a      	movle	r2, r5
 800aa92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa96:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aa9a:	bfd8      	it	le
 800aa9c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f7f5 fead 	bl	8000804 <__aeabi_ddiv>
 800aaaa:	b005      	add	sp, #20
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aab0 <__copybits>:
 800aab0:	3901      	subs	r1, #1
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	1149      	asrs	r1, r1, #5
 800aab6:	6914      	ldr	r4, [r2, #16]
 800aab8:	3101      	adds	r1, #1
 800aaba:	f102 0314 	add.w	r3, r2, #20
 800aabe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aac2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aac6:	1f05      	subs	r5, r0, #4
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	d30c      	bcc.n	800aae6 <__copybits+0x36>
 800aacc:	1aa3      	subs	r3, r4, r2
 800aace:	3b11      	subs	r3, #17
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3211      	adds	r2, #17
 800aad6:	42a2      	cmp	r2, r4
 800aad8:	bf88      	it	hi
 800aada:	2300      	movhi	r3, #0
 800aadc:	4418      	add	r0, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	4288      	cmp	r0, r1
 800aae2:	d305      	bcc.n	800aaf0 <__copybits+0x40>
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	f853 6b04 	ldr.w	r6, [r3], #4
 800aaea:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaee:	e7eb      	b.n	800aac8 <__copybits+0x18>
 800aaf0:	f840 3b04 	str.w	r3, [r0], #4
 800aaf4:	e7f4      	b.n	800aae0 <__copybits+0x30>

0800aaf6 <__any_on>:
 800aaf6:	f100 0214 	add.w	r2, r0, #20
 800aafa:	6900      	ldr	r0, [r0, #16]
 800aafc:	114b      	asrs	r3, r1, #5
 800aafe:	4298      	cmp	r0, r3
 800ab00:	b510      	push	{r4, lr}
 800ab02:	db11      	blt.n	800ab28 <__any_on+0x32>
 800ab04:	dd0a      	ble.n	800ab1c <__any_on+0x26>
 800ab06:	f011 011f 	ands.w	r1, r1, #31
 800ab0a:	d007      	beq.n	800ab1c <__any_on+0x26>
 800ab0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab10:	fa24 f001 	lsr.w	r0, r4, r1
 800ab14:	fa00 f101 	lsl.w	r1, r0, r1
 800ab18:	428c      	cmp	r4, r1
 800ab1a:	d10b      	bne.n	800ab34 <__any_on+0x3e>
 800ab1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d803      	bhi.n	800ab2c <__any_on+0x36>
 800ab24:	2000      	movs	r0, #0
 800ab26:	bd10      	pop	{r4, pc}
 800ab28:	4603      	mov	r3, r0
 800ab2a:	e7f7      	b.n	800ab1c <__any_on+0x26>
 800ab2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab30:	2900      	cmp	r1, #0
 800ab32:	d0f5      	beq.n	800ab20 <__any_on+0x2a>
 800ab34:	2001      	movs	r0, #1
 800ab36:	e7f6      	b.n	800ab26 <__any_on+0x30>

0800ab38 <sulp>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	4690      	mov	r8, r2
 800ab40:	f7ff fec6 	bl	800a8d0 <__ulp>
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	f1b8 0f00 	cmp.w	r8, #0
 800ab4c:	d011      	beq.n	800ab72 <sulp+0x3a>
 800ab4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd0b      	ble.n	800ab72 <sulp+0x3a>
 800ab5a:	2400      	movs	r4, #0
 800ab5c:	051b      	lsls	r3, r3, #20
 800ab5e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab62:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	f7f5 fd21 	bl	80005b0 <__aeabi_dmul>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7a:	0000      	movs	r0, r0
 800ab7c:	0000      	movs	r0, r0
	...

0800ab80 <_strtod_l>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	b09f      	sub	sp, #124	@ 0x7c
 800ab86:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab88:	2200      	movs	r2, #0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab8e:	f04f 0a00 	mov.w	sl, #0
 800ab92:	f04f 0b00 	mov.w	fp, #0
 800ab96:	460a      	mov	r2, r1
 800ab98:	9005      	str	r0, [sp, #20]
 800ab9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab9c:	7811      	ldrb	r1, [r2, #0]
 800ab9e:	292b      	cmp	r1, #43	@ 0x2b
 800aba0:	d048      	beq.n	800ac34 <_strtod_l+0xb4>
 800aba2:	d836      	bhi.n	800ac12 <_strtod_l+0x92>
 800aba4:	290d      	cmp	r1, #13
 800aba6:	d830      	bhi.n	800ac0a <_strtod_l+0x8a>
 800aba8:	2908      	cmp	r1, #8
 800abaa:	d830      	bhi.n	800ac0e <_strtod_l+0x8e>
 800abac:	2900      	cmp	r1, #0
 800abae:	d039      	beq.n	800ac24 <_strtod_l+0xa4>
 800abb0:	2200      	movs	r2, #0
 800abb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abb6:	782a      	ldrb	r2, [r5, #0]
 800abb8:	2a30      	cmp	r2, #48	@ 0x30
 800abba:	f040 80b1 	bne.w	800ad20 <_strtod_l+0x1a0>
 800abbe:	786a      	ldrb	r2, [r5, #1]
 800abc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abc4:	2a58      	cmp	r2, #88	@ 0x58
 800abc6:	d16c      	bne.n	800aca2 <_strtod_l+0x122>
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abcc:	4a8e      	ldr	r2, [pc, #568]	@ (800ae08 <_strtod_l+0x288>)
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	ab1a      	add	r3, sp, #104	@ 0x68
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	9805      	ldr	r0, [sp, #20]
 800abd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abd8:	a919      	add	r1, sp, #100	@ 0x64
 800abda:	f001 fae9 	bl	800c1b0 <__gethex>
 800abde:	f010 060f 	ands.w	r6, r0, #15
 800abe2:	4604      	mov	r4, r0
 800abe4:	d005      	beq.n	800abf2 <_strtod_l+0x72>
 800abe6:	2e06      	cmp	r6, #6
 800abe8:	d126      	bne.n	800ac38 <_strtod_l+0xb8>
 800abea:	2300      	movs	r3, #0
 800abec:	3501      	adds	r5, #1
 800abee:	9519      	str	r5, [sp, #100]	@ 0x64
 800abf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 8584 	bne.w	800b702 <_strtod_l+0xb82>
 800abfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abfc:	b1bb      	cbz	r3, 800ac2e <_strtod_l+0xae>
 800abfe:	4650      	mov	r0, sl
 800ac00:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800ac04:	b01f      	add	sp, #124	@ 0x7c
 800ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0a:	2920      	cmp	r1, #32
 800ac0c:	d1d0      	bne.n	800abb0 <_strtod_l+0x30>
 800ac0e:	3201      	adds	r2, #1
 800ac10:	e7c3      	b.n	800ab9a <_strtod_l+0x1a>
 800ac12:	292d      	cmp	r1, #45	@ 0x2d
 800ac14:	d1cc      	bne.n	800abb0 <_strtod_l+0x30>
 800ac16:	2101      	movs	r1, #1
 800ac18:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac1a:	1c51      	adds	r1, r2, #1
 800ac1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac1e:	7852      	ldrb	r2, [r2, #1]
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d1c7      	bne.n	800abb4 <_strtod_l+0x34>
 800ac24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac26:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f040 8568 	bne.w	800b6fe <_strtod_l+0xb7e>
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4659      	mov	r1, fp
 800ac32:	e7e7      	b.n	800ac04 <_strtod_l+0x84>
 800ac34:	2100      	movs	r1, #0
 800ac36:	e7ef      	b.n	800ac18 <_strtod_l+0x98>
 800ac38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac3a:	b13a      	cbz	r2, 800ac4c <_strtod_l+0xcc>
 800ac3c:	2135      	movs	r1, #53	@ 0x35
 800ac3e:	a81c      	add	r0, sp, #112	@ 0x70
 800ac40:	f7ff ff36 	bl	800aab0 <__copybits>
 800ac44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac46:	9805      	ldr	r0, [sp, #20]
 800ac48:	f7ff fb10 	bl	800a26c <_Bfree>
 800ac4c:	3e01      	subs	r6, #1
 800ac4e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac50:	2e04      	cmp	r6, #4
 800ac52:	d806      	bhi.n	800ac62 <_strtod_l+0xe2>
 800ac54:	e8df f006 	tbb	[pc, r6]
 800ac58:	201d0314 	.word	0x201d0314
 800ac5c:	14          	.byte	0x14
 800ac5d:	00          	.byte	0x00
 800ac5e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac62:	05e1      	lsls	r1, r4, #23
 800ac64:	bf48      	it	mi
 800ac66:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac6a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac6e:	0d1b      	lsrs	r3, r3, #20
 800ac70:	051b      	lsls	r3, r3, #20
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1bd      	bne.n	800abf2 <_strtod_l+0x72>
 800ac76:	f7fe fb2b 	bl	80092d0 <__errno>
 800ac7a:	2322      	movs	r3, #34	@ 0x22
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	e7b8      	b.n	800abf2 <_strtod_l+0x72>
 800ac80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac8c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac90:	e7e7      	b.n	800ac62 <_strtod_l+0xe2>
 800ac92:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800ae0c <_strtod_l+0x28c>
 800ac96:	e7e4      	b.n	800ac62 <_strtod_l+0xe2>
 800ac98:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac9c:	f04f 3aff 	mov.w	sl, #4294967295
 800aca0:	e7df      	b.n	800ac62 <_strtod_l+0xe2>
 800aca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	2b30      	cmp	r3, #48	@ 0x30
 800acac:	d0f9      	beq.n	800aca2 <_strtod_l+0x122>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d09f      	beq.n	800abf2 <_strtod_l+0x72>
 800acb2:	2301      	movs	r3, #1
 800acb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb8:	220a      	movs	r2, #10
 800acba:	930c      	str	r3, [sp, #48]	@ 0x30
 800acbc:	2300      	movs	r3, #0
 800acbe:	461f      	mov	r7, r3
 800acc0:	9308      	str	r3, [sp, #32]
 800acc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800acc4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800acc6:	7805      	ldrb	r5, [r0, #0]
 800acc8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800accc:	b2d9      	uxtb	r1, r3
 800acce:	2909      	cmp	r1, #9
 800acd0:	d928      	bls.n	800ad24 <_strtod_l+0x1a4>
 800acd2:	2201      	movs	r2, #1
 800acd4:	494e      	ldr	r1, [pc, #312]	@ (800ae10 <_strtod_l+0x290>)
 800acd6:	f001 f99b 	bl	800c010 <strncmp>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d032      	beq.n	800ad44 <_strtod_l+0x1c4>
 800acde:	2000      	movs	r0, #0
 800ace0:	462a      	mov	r2, r5
 800ace2:	4681      	mov	r9, r0
 800ace4:	463d      	mov	r5, r7
 800ace6:	4603      	mov	r3, r0
 800ace8:	2a65      	cmp	r2, #101	@ 0x65
 800acea:	d001      	beq.n	800acf0 <_strtod_l+0x170>
 800acec:	2a45      	cmp	r2, #69	@ 0x45
 800acee:	d114      	bne.n	800ad1a <_strtod_l+0x19a>
 800acf0:	b91d      	cbnz	r5, 800acfa <_strtod_l+0x17a>
 800acf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acf4:	4302      	orrs	r2, r0
 800acf6:	d095      	beq.n	800ac24 <_strtod_l+0xa4>
 800acf8:	2500      	movs	r5, #0
 800acfa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acfc:	1c62      	adds	r2, r4, #1
 800acfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad00:	7862      	ldrb	r2, [r4, #1]
 800ad02:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad04:	d077      	beq.n	800adf6 <_strtod_l+0x276>
 800ad06:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad08:	d07b      	beq.n	800ae02 <_strtod_l+0x282>
 800ad0a:	f04f 0c00 	mov.w	ip, #0
 800ad0e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad12:	2909      	cmp	r1, #9
 800ad14:	f240 8082 	bls.w	800ae1c <_strtod_l+0x29c>
 800ad18:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	e0a2      	b.n	800ae66 <_strtod_l+0x2e6>
 800ad20:	2300      	movs	r3, #0
 800ad22:	e7c7      	b.n	800acb4 <_strtod_l+0x134>
 800ad24:	2f08      	cmp	r7, #8
 800ad26:	bfd5      	itete	le
 800ad28:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad2a:	9908      	ldrgt	r1, [sp, #32]
 800ad2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad30:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad34:	f100 0001 	add.w	r0, r0, #1
 800ad38:	bfd4      	ite	le
 800ad3a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ad3c:	9308      	strgt	r3, [sp, #32]
 800ad3e:	3701      	adds	r7, #1
 800ad40:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad42:	e7bf      	b.n	800acc4 <_strtod_l+0x144>
 800ad44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad4a:	785a      	ldrb	r2, [r3, #1]
 800ad4c:	b37f      	cbz	r7, 800adae <_strtod_l+0x22e>
 800ad4e:	4681      	mov	r9, r0
 800ad50:	463d      	mov	r5, r7
 800ad52:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad56:	2b09      	cmp	r3, #9
 800ad58:	d912      	bls.n	800ad80 <_strtod_l+0x200>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e7c4      	b.n	800ace8 <_strtod_l+0x168>
 800ad5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad60:	3001      	adds	r0, #1
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad66:	785a      	ldrb	r2, [r3, #1]
 800ad68:	2a30      	cmp	r2, #48	@ 0x30
 800ad6a:	d0f8      	beq.n	800ad5e <_strtod_l+0x1de>
 800ad6c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	f200 84cb 	bhi.w	800b70c <_strtod_l+0xb8c>
 800ad76:	4681      	mov	r9, r0
 800ad78:	2000      	movs	r0, #0
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad80:	3a30      	subs	r2, #48	@ 0x30
 800ad82:	f100 0301 	add.w	r3, r0, #1
 800ad86:	d02a      	beq.n	800adde <_strtod_l+0x25e>
 800ad88:	4499      	add	r9, r3
 800ad8a:	210a      	movs	r1, #10
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	eb00 0c05 	add.w	ip, r0, r5
 800ad92:	4563      	cmp	r3, ip
 800ad94:	d10d      	bne.n	800adb2 <_strtod_l+0x232>
 800ad96:	1c69      	adds	r1, r5, #1
 800ad98:	4401      	add	r1, r0
 800ad9a:	4428      	add	r0, r5
 800ad9c:	2808      	cmp	r0, #8
 800ad9e:	dc16      	bgt.n	800adce <_strtod_l+0x24e>
 800ada0:	230a      	movs	r3, #10
 800ada2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ada4:	fb03 2300 	mla	r3, r3, r0, r2
 800ada8:	930a      	str	r3, [sp, #40]	@ 0x28
 800adaa:	2300      	movs	r3, #0
 800adac:	e018      	b.n	800ade0 <_strtod_l+0x260>
 800adae:	4638      	mov	r0, r7
 800adb0:	e7da      	b.n	800ad68 <_strtod_l+0x1e8>
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	f103 0301 	add.w	r3, r3, #1
 800adb8:	dc03      	bgt.n	800adc2 <_strtod_l+0x242>
 800adba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800adbc:	434e      	muls	r6, r1
 800adbe:	960a      	str	r6, [sp, #40]	@ 0x28
 800adc0:	e7e7      	b.n	800ad92 <_strtod_l+0x212>
 800adc2:	2b10      	cmp	r3, #16
 800adc4:	bfde      	ittt	le
 800adc6:	9e08      	ldrle	r6, [sp, #32]
 800adc8:	434e      	mulle	r6, r1
 800adca:	9608      	strle	r6, [sp, #32]
 800adcc:	e7e1      	b.n	800ad92 <_strtod_l+0x212>
 800adce:	280f      	cmp	r0, #15
 800add0:	dceb      	bgt.n	800adaa <_strtod_l+0x22a>
 800add2:	230a      	movs	r3, #10
 800add4:	9808      	ldr	r0, [sp, #32]
 800add6:	fb03 2300 	mla	r3, r3, r0, r2
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	e7e5      	b.n	800adaa <_strtod_l+0x22a>
 800adde:	4629      	mov	r1, r5
 800ade0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ade2:	460d      	mov	r5, r1
 800ade4:	1c50      	adds	r0, r2, #1
 800ade6:	9019      	str	r0, [sp, #100]	@ 0x64
 800ade8:	7852      	ldrb	r2, [r2, #1]
 800adea:	4618      	mov	r0, r3
 800adec:	e7b1      	b.n	800ad52 <_strtod_l+0x1d2>
 800adee:	f04f 0900 	mov.w	r9, #0
 800adf2:	2301      	movs	r3, #1
 800adf4:	e77d      	b.n	800acf2 <_strtod_l+0x172>
 800adf6:	f04f 0c00 	mov.w	ip, #0
 800adfa:	1ca2      	adds	r2, r4, #2
 800adfc:	9219      	str	r2, [sp, #100]	@ 0x64
 800adfe:	78a2      	ldrb	r2, [r4, #2]
 800ae00:	e785      	b.n	800ad0e <_strtod_l+0x18e>
 800ae02:	f04f 0c01 	mov.w	ip, #1
 800ae06:	e7f8      	b.n	800adfa <_strtod_l+0x27a>
 800ae08:	0800ce38 	.word	0x0800ce38
 800ae0c:	7ff00000 	.word	0x7ff00000
 800ae10:	0800ce20 	.word	0x0800ce20
 800ae14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae16:	1c51      	adds	r1, r2, #1
 800ae18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae1a:	7852      	ldrb	r2, [r2, #1]
 800ae1c:	2a30      	cmp	r2, #48	@ 0x30
 800ae1e:	d0f9      	beq.n	800ae14 <_strtod_l+0x294>
 800ae20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae24:	2908      	cmp	r1, #8
 800ae26:	f63f af78 	bhi.w	800ad1a <_strtod_l+0x19a>
 800ae2a:	f04f 080a 	mov.w	r8, #10
 800ae2e:	3a30      	subs	r2, #48	@ 0x30
 800ae30:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae38:	1c56      	adds	r6, r2, #1
 800ae3a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae3c:	7852      	ldrb	r2, [r2, #1]
 800ae3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae42:	f1be 0f09 	cmp.w	lr, #9
 800ae46:	d939      	bls.n	800aebc <_strtod_l+0x33c>
 800ae48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae4e:	1a76      	subs	r6, r6, r1
 800ae50:	2e08      	cmp	r6, #8
 800ae52:	dc03      	bgt.n	800ae5c <_strtod_l+0x2dc>
 800ae54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae56:	4588      	cmp	r8, r1
 800ae58:	bfa8      	it	ge
 800ae5a:	4688      	movge	r8, r1
 800ae5c:	f1bc 0f00 	cmp.w	ip, #0
 800ae60:	d001      	beq.n	800ae66 <_strtod_l+0x2e6>
 800ae62:	f1c8 0800 	rsb	r8, r8, #0
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	d14e      	bne.n	800af08 <_strtod_l+0x388>
 800ae6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae6c:	4308      	orrs	r0, r1
 800ae6e:	f47f aec0 	bne.w	800abf2 <_strtod_l+0x72>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f47f aed6 	bne.w	800ac24 <_strtod_l+0xa4>
 800ae78:	2a69      	cmp	r2, #105	@ 0x69
 800ae7a:	d028      	beq.n	800aece <_strtod_l+0x34e>
 800ae7c:	dc25      	bgt.n	800aeca <_strtod_l+0x34a>
 800ae7e:	2a49      	cmp	r2, #73	@ 0x49
 800ae80:	d025      	beq.n	800aece <_strtod_l+0x34e>
 800ae82:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae84:	f47f aece 	bne.w	800ac24 <_strtod_l+0xa4>
 800ae88:	499a      	ldr	r1, [pc, #616]	@ (800b0f4 <_strtod_l+0x574>)
 800ae8a:	a819      	add	r0, sp, #100	@ 0x64
 800ae8c:	f001 fbb2 	bl	800c5f4 <__match>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f43f aec7 	beq.w	800ac24 <_strtod_l+0xa4>
 800ae96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b28      	cmp	r3, #40	@ 0x28
 800ae9c:	d12e      	bne.n	800aefc <_strtod_l+0x37c>
 800ae9e:	4996      	ldr	r1, [pc, #600]	@ (800b0f8 <_strtod_l+0x578>)
 800aea0:	aa1c      	add	r2, sp, #112	@ 0x70
 800aea2:	a819      	add	r0, sp, #100	@ 0x64
 800aea4:	f001 fbba 	bl	800c61c <__hexnan>
 800aea8:	2805      	cmp	r0, #5
 800aeaa:	d127      	bne.n	800aefc <_strtod_l+0x37c>
 800aeac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aeb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aeb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aeba:	e69a      	b.n	800abf2 <_strtod_l+0x72>
 800aebc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aebe:	fb08 2101 	mla	r1, r8, r1, r2
 800aec2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aec6:	920e      	str	r2, [sp, #56]	@ 0x38
 800aec8:	e7b5      	b.n	800ae36 <_strtod_l+0x2b6>
 800aeca:	2a6e      	cmp	r2, #110	@ 0x6e
 800aecc:	e7da      	b.n	800ae84 <_strtod_l+0x304>
 800aece:	498b      	ldr	r1, [pc, #556]	@ (800b0fc <_strtod_l+0x57c>)
 800aed0:	a819      	add	r0, sp, #100	@ 0x64
 800aed2:	f001 fb8f 	bl	800c5f4 <__match>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f43f aea4 	beq.w	800ac24 <_strtod_l+0xa4>
 800aedc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aede:	4988      	ldr	r1, [pc, #544]	@ (800b100 <_strtod_l+0x580>)
 800aee0:	3b01      	subs	r3, #1
 800aee2:	a819      	add	r0, sp, #100	@ 0x64
 800aee4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aee6:	f001 fb85 	bl	800c5f4 <__match>
 800aeea:	b910      	cbnz	r0, 800aef2 <_strtod_l+0x372>
 800aeec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeee:	3301      	adds	r3, #1
 800aef0:	9319      	str	r3, [sp, #100]	@ 0x64
 800aef2:	f04f 0a00 	mov.w	sl, #0
 800aef6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b104 <_strtod_l+0x584>
 800aefa:	e67a      	b.n	800abf2 <_strtod_l+0x72>
 800aefc:	4882      	ldr	r0, [pc, #520]	@ (800b108 <_strtod_l+0x588>)
 800aefe:	f001 f8b7 	bl	800c070 <nan>
 800af02:	4682      	mov	sl, r0
 800af04:	468b      	mov	fp, r1
 800af06:	e674      	b.n	800abf2 <_strtod_l+0x72>
 800af08:	eba8 0309 	sub.w	r3, r8, r9
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	bf08      	it	eq
 800af10:	462f      	moveq	r7, r5
 800af12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af14:	2d10      	cmp	r5, #16
 800af16:	462c      	mov	r4, r5
 800af18:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1a:	bfa8      	it	ge
 800af1c:	2410      	movge	r4, #16
 800af1e:	f7f5 facd 	bl	80004bc <__aeabi_ui2d>
 800af22:	2d09      	cmp	r5, #9
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	dc11      	bgt.n	800af4e <_strtod_l+0x3ce>
 800af2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f43f ae60 	beq.w	800abf2 <_strtod_l+0x72>
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	dd76      	ble.n	800b024 <_strtod_l+0x4a4>
 800af36:	2b16      	cmp	r3, #22
 800af38:	dc5d      	bgt.n	800aff6 <_strtod_l+0x476>
 800af3a:	4974      	ldr	r1, [pc, #464]	@ (800b10c <_strtod_l+0x58c>)
 800af3c:	4652      	mov	r2, sl
 800af3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af42:	465b      	mov	r3, fp
 800af44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af48:	f7f5 fb32 	bl	80005b0 <__aeabi_dmul>
 800af4c:	e7d9      	b.n	800af02 <_strtod_l+0x382>
 800af4e:	4b6f      	ldr	r3, [pc, #444]	@ (800b10c <_strtod_l+0x58c>)
 800af50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af58:	f7f5 fb2a 	bl	80005b0 <__aeabi_dmul>
 800af5c:	4682      	mov	sl, r0
 800af5e:	9808      	ldr	r0, [sp, #32]
 800af60:	468b      	mov	fp, r1
 800af62:	f7f5 faab 	bl	80004bc <__aeabi_ui2d>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4650      	mov	r0, sl
 800af6c:	4659      	mov	r1, fp
 800af6e:	f7f5 f969 	bl	8000244 <__adddf3>
 800af72:	2d0f      	cmp	r5, #15
 800af74:	4682      	mov	sl, r0
 800af76:	468b      	mov	fp, r1
 800af78:	ddd7      	ble.n	800af2a <_strtod_l+0x3aa>
 800af7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7c:	1b2c      	subs	r4, r5, r4
 800af7e:	441c      	add	r4, r3
 800af80:	2c00      	cmp	r4, #0
 800af82:	f340 8096 	ble.w	800b0b2 <_strtod_l+0x532>
 800af86:	f014 030f 	ands.w	r3, r4, #15
 800af8a:	d00a      	beq.n	800afa2 <_strtod_l+0x422>
 800af8c:	495f      	ldr	r1, [pc, #380]	@ (800b10c <_strtod_l+0x58c>)
 800af8e:	4652      	mov	r2, sl
 800af90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	465b      	mov	r3, fp
 800af9a:	f7f5 fb09 	bl	80005b0 <__aeabi_dmul>
 800af9e:	4682      	mov	sl, r0
 800afa0:	468b      	mov	fp, r1
 800afa2:	f034 040f 	bics.w	r4, r4, #15
 800afa6:	d073      	beq.n	800b090 <_strtod_l+0x510>
 800afa8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afac:	dd48      	ble.n	800b040 <_strtod_l+0x4c0>
 800afae:	2400      	movs	r4, #0
 800afb0:	46a0      	mov	r8, r4
 800afb2:	46a1      	mov	r9, r4
 800afb4:	940a      	str	r4, [sp, #40]	@ 0x28
 800afb6:	2322      	movs	r3, #34	@ 0x22
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	9a05      	ldr	r2, [sp, #20]
 800afbe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b104 <_strtod_l+0x584>
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f43f ae13 	beq.w	800abf2 <_strtod_l+0x72>
 800afcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afce:	9805      	ldr	r0, [sp, #20]
 800afd0:	f7ff f94c 	bl	800a26c <_Bfree>
 800afd4:	4649      	mov	r1, r9
 800afd6:	9805      	ldr	r0, [sp, #20]
 800afd8:	f7ff f948 	bl	800a26c <_Bfree>
 800afdc:	4641      	mov	r1, r8
 800afde:	9805      	ldr	r0, [sp, #20]
 800afe0:	f7ff f944 	bl	800a26c <_Bfree>
 800afe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afe6:	9805      	ldr	r0, [sp, #20]
 800afe8:	f7ff f940 	bl	800a26c <_Bfree>
 800afec:	4621      	mov	r1, r4
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	f7ff f93c 	bl	800a26c <_Bfree>
 800aff4:	e5fd      	b.n	800abf2 <_strtod_l+0x72>
 800aff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aff8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800affc:	4293      	cmp	r3, r2
 800affe:	dbbc      	blt.n	800af7a <_strtod_l+0x3fa>
 800b000:	4c42      	ldr	r4, [pc, #264]	@ (800b10c <_strtod_l+0x58c>)
 800b002:	f1c5 050f 	rsb	r5, r5, #15
 800b006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b00a:	4652      	mov	r2, sl
 800b00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b010:	465b      	mov	r3, fp
 800b012:	f7f5 facd 	bl	80005b0 <__aeabi_dmul>
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	1b5d      	subs	r5, r3, r5
 800b01a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b01e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b022:	e791      	b.n	800af48 <_strtod_l+0x3c8>
 800b024:	3316      	adds	r3, #22
 800b026:	dba8      	blt.n	800af7a <_strtod_l+0x3fa>
 800b028:	4b38      	ldr	r3, [pc, #224]	@ (800b10c <_strtod_l+0x58c>)
 800b02a:	eba9 0808 	sub.w	r8, r9, r8
 800b02e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b032:	4650      	mov	r0, sl
 800b034:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b038:	4659      	mov	r1, fp
 800b03a:	f7f5 fbe3 	bl	8000804 <__aeabi_ddiv>
 800b03e:	e760      	b.n	800af02 <_strtod_l+0x382>
 800b040:	4b33      	ldr	r3, [pc, #204]	@ (800b110 <_strtod_l+0x590>)
 800b042:	4650      	mov	r0, sl
 800b044:	9308      	str	r3, [sp, #32]
 800b046:	2300      	movs	r3, #0
 800b048:	4659      	mov	r1, fp
 800b04a:	461e      	mov	r6, r3
 800b04c:	1124      	asrs	r4, r4, #4
 800b04e:	2c01      	cmp	r4, #1
 800b050:	dc21      	bgt.n	800b096 <_strtod_l+0x516>
 800b052:	b10b      	cbz	r3, 800b058 <_strtod_l+0x4d8>
 800b054:	4682      	mov	sl, r0
 800b056:	468b      	mov	fp, r1
 800b058:	492d      	ldr	r1, [pc, #180]	@ (800b110 <_strtod_l+0x590>)
 800b05a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b05e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b062:	4652      	mov	r2, sl
 800b064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b068:	465b      	mov	r3, fp
 800b06a:	f7f5 faa1 	bl	80005b0 <__aeabi_dmul>
 800b06e:	4b25      	ldr	r3, [pc, #148]	@ (800b104 <_strtod_l+0x584>)
 800b070:	460a      	mov	r2, r1
 800b072:	400b      	ands	r3, r1
 800b074:	4927      	ldr	r1, [pc, #156]	@ (800b114 <_strtod_l+0x594>)
 800b076:	4682      	mov	sl, r0
 800b078:	428b      	cmp	r3, r1
 800b07a:	d898      	bhi.n	800afae <_strtod_l+0x42e>
 800b07c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b080:	428b      	cmp	r3, r1
 800b082:	bf86      	itte	hi
 800b084:	f04f 3aff 	movhi.w	sl, #4294967295
 800b088:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b118 <_strtod_l+0x598>
 800b08c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b090:	2300      	movs	r3, #0
 800b092:	9308      	str	r3, [sp, #32]
 800b094:	e07a      	b.n	800b18c <_strtod_l+0x60c>
 800b096:	07e2      	lsls	r2, r4, #31
 800b098:	d505      	bpl.n	800b0a6 <_strtod_l+0x526>
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 fa86 	bl	80005b0 <__aeabi_dmul>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	9a08      	ldr	r2, [sp, #32]
 800b0a8:	3601      	adds	r6, #1
 800b0aa:	3208      	adds	r2, #8
 800b0ac:	1064      	asrs	r4, r4, #1
 800b0ae:	9208      	str	r2, [sp, #32]
 800b0b0:	e7cd      	b.n	800b04e <_strtod_l+0x4ce>
 800b0b2:	d0ed      	beq.n	800b090 <_strtod_l+0x510>
 800b0b4:	4264      	negs	r4, r4
 800b0b6:	f014 020f 	ands.w	r2, r4, #15
 800b0ba:	d00a      	beq.n	800b0d2 <_strtod_l+0x552>
 800b0bc:	4b13      	ldr	r3, [pc, #76]	@ (800b10c <_strtod_l+0x58c>)
 800b0be:	4650      	mov	r0, sl
 800b0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0c4:	4659      	mov	r1, fp
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 fb9b 	bl	8000804 <__aeabi_ddiv>
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	468b      	mov	fp, r1
 800b0d2:	1124      	asrs	r4, r4, #4
 800b0d4:	d0dc      	beq.n	800b090 <_strtod_l+0x510>
 800b0d6:	2c1f      	cmp	r4, #31
 800b0d8:	dd20      	ble.n	800b11c <_strtod_l+0x59c>
 800b0da:	2400      	movs	r4, #0
 800b0dc:	46a0      	mov	r8, r4
 800b0de:	46a1      	mov	r9, r4
 800b0e0:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0e2:	2322      	movs	r3, #34	@ 0x22
 800b0e4:	9a05      	ldr	r2, [sp, #20]
 800b0e6:	f04f 0a00 	mov.w	sl, #0
 800b0ea:	f04f 0b00 	mov.w	fp, #0
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	e768      	b.n	800afc4 <_strtod_l+0x444>
 800b0f2:	bf00      	nop
 800b0f4:	0800cc0b 	.word	0x0800cc0b
 800b0f8:	0800ce24 	.word	0x0800ce24
 800b0fc:	0800cc03 	.word	0x0800cc03
 800b100:	0800cc3a 	.word	0x0800cc3a
 800b104:	7ff00000 	.word	0x7ff00000
 800b108:	0800cfcd 	.word	0x0800cfcd
 800b10c:	0800cd58 	.word	0x0800cd58
 800b110:	0800cd30 	.word	0x0800cd30
 800b114:	7ca00000 	.word	0x7ca00000
 800b118:	7fefffff 	.word	0x7fefffff
 800b11c:	f014 0310 	ands.w	r3, r4, #16
 800b120:	bf18      	it	ne
 800b122:	236a      	movne	r3, #106	@ 0x6a
 800b124:	4650      	mov	r0, sl
 800b126:	9308      	str	r3, [sp, #32]
 800b128:	4659      	mov	r1, fp
 800b12a:	2300      	movs	r3, #0
 800b12c:	4ea9      	ldr	r6, [pc, #676]	@ (800b3d4 <_strtod_l+0x854>)
 800b12e:	07e2      	lsls	r2, r4, #31
 800b130:	d504      	bpl.n	800b13c <_strtod_l+0x5bc>
 800b132:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b136:	f7f5 fa3b 	bl	80005b0 <__aeabi_dmul>
 800b13a:	2301      	movs	r3, #1
 800b13c:	1064      	asrs	r4, r4, #1
 800b13e:	f106 0608 	add.w	r6, r6, #8
 800b142:	d1f4      	bne.n	800b12e <_strtod_l+0x5ae>
 800b144:	b10b      	cbz	r3, 800b14a <_strtod_l+0x5ca>
 800b146:	4682      	mov	sl, r0
 800b148:	468b      	mov	fp, r1
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	b1b3      	cbz	r3, 800b17c <_strtod_l+0x5fc>
 800b14e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b152:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b156:	2b00      	cmp	r3, #0
 800b158:	4659      	mov	r1, fp
 800b15a:	dd0f      	ble.n	800b17c <_strtod_l+0x5fc>
 800b15c:	2b1f      	cmp	r3, #31
 800b15e:	dd57      	ble.n	800b210 <_strtod_l+0x690>
 800b160:	2b34      	cmp	r3, #52	@ 0x34
 800b162:	bfd8      	it	le
 800b164:	f04f 33ff 	movle.w	r3, #4294967295
 800b168:	f04f 0a00 	mov.w	sl, #0
 800b16c:	bfcf      	iteee	gt
 800b16e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b172:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b176:	4093      	lslle	r3, r2
 800b178:	ea03 0b01 	andle.w	fp, r3, r1
 800b17c:	2200      	movs	r2, #0
 800b17e:	2300      	movs	r3, #0
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 fc7c 	bl	8000a80 <__aeabi_dcmpeq>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1a6      	bne.n	800b0da <_strtod_l+0x55a>
 800b18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18e:	463a      	mov	r2, r7
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b194:	462b      	mov	r3, r5
 800b196:	9805      	ldr	r0, [sp, #20]
 800b198:	f7ff f8d0 	bl	800a33c <__s2b>
 800b19c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f af05 	beq.w	800afae <_strtod_l+0x42e>
 800b1a4:	2400      	movs	r4, #0
 800b1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a8:	eba9 0308 	sub.w	r3, r9, r8
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	bfa8      	it	ge
 800b1b0:	2300      	movge	r3, #0
 800b1b2:	46a0      	mov	r8, r4
 800b1b4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	6859      	ldr	r1, [r3, #4]
 800b1c2:	f7ff f813 	bl	800a1ec <_Balloc>
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	f43f aef4 	beq.w	800afb6 <_strtod_l+0x436>
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d0:	300c      	adds	r0, #12
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	f103 010c 	add.w	r1, r3, #12
 800b1d8:	3202      	adds	r2, #2
 800b1da:	0092      	lsls	r2, r2, #2
 800b1dc:	f000 ff3a 	bl	800c054 <memcpy>
 800b1e0:	ab1c      	add	r3, sp, #112	@ 0x70
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	465b      	mov	r3, fp
 800b1ec:	9805      	ldr	r0, [sp, #20]
 800b1ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1f2:	f7ff fbd5 	bl	800a9a0 <__d2b>
 800b1f6:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	f43f aedc 	beq.w	800afb6 <_strtod_l+0x436>
 800b1fe:	2101      	movs	r1, #1
 800b200:	9805      	ldr	r0, [sp, #20]
 800b202:	f7ff f931 	bl	800a468 <__i2b>
 800b206:	4680      	mov	r8, r0
 800b208:	b948      	cbnz	r0, 800b21e <_strtod_l+0x69e>
 800b20a:	f04f 0800 	mov.w	r8, #0
 800b20e:	e6d2      	b.n	800afb6 <_strtod_l+0x436>
 800b210:	f04f 32ff 	mov.w	r2, #4294967295
 800b214:	fa02 f303 	lsl.w	r3, r2, r3
 800b218:	ea03 0a0a 	and.w	sl, r3, sl
 800b21c:	e7ae      	b.n	800b17c <_strtod_l+0x5fc>
 800b21e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b220:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b222:	2d00      	cmp	r5, #0
 800b224:	bfab      	itete	ge
 800b226:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b228:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b22a:	18ef      	addge	r7, r5, r3
 800b22c:	1b5e      	sublt	r6, r3, r5
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	bfa8      	it	ge
 800b232:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b234:	eba5 0503 	sub.w	r5, r5, r3
 800b238:	4415      	add	r5, r2
 800b23a:	4b67      	ldr	r3, [pc, #412]	@ (800b3d8 <_strtod_l+0x858>)
 800b23c:	f105 35ff 	add.w	r5, r5, #4294967295
 800b240:	bfb8      	it	lt
 800b242:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b244:	429d      	cmp	r5, r3
 800b246:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b24a:	da50      	bge.n	800b2ee <_strtod_l+0x76e>
 800b24c:	1b5b      	subs	r3, r3, r5
 800b24e:	2b1f      	cmp	r3, #31
 800b250:	f04f 0101 	mov.w	r1, #1
 800b254:	eba2 0203 	sub.w	r2, r2, r3
 800b258:	dc3d      	bgt.n	800b2d6 <_strtod_l+0x756>
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b260:	2300      	movs	r3, #0
 800b262:	9310      	str	r3, [sp, #64]	@ 0x40
 800b264:	18bd      	adds	r5, r7, r2
 800b266:	9b08      	ldr	r3, [sp, #32]
 800b268:	42af      	cmp	r7, r5
 800b26a:	4416      	add	r6, r2
 800b26c:	441e      	add	r6, r3
 800b26e:	463b      	mov	r3, r7
 800b270:	bfa8      	it	ge
 800b272:	462b      	movge	r3, r5
 800b274:	42b3      	cmp	r3, r6
 800b276:	bfa8      	it	ge
 800b278:	4633      	movge	r3, r6
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bfc2      	ittt	gt
 800b27e:	1aed      	subgt	r5, r5, r3
 800b280:	1af6      	subgt	r6, r6, r3
 800b282:	1aff      	subgt	r7, r7, r3
 800b284:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd16      	ble.n	800b2b8 <_strtod_l+0x738>
 800b28a:	4641      	mov	r1, r8
 800b28c:	461a      	mov	r2, r3
 800b28e:	9805      	ldr	r0, [sp, #20]
 800b290:	f7ff f9a8 	bl	800a5e4 <__pow5mult>
 800b294:	4680      	mov	r8, r0
 800b296:	2800      	cmp	r0, #0
 800b298:	d0b7      	beq.n	800b20a <_strtod_l+0x68a>
 800b29a:	4601      	mov	r1, r0
 800b29c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b29e:	9805      	ldr	r0, [sp, #20]
 800b2a0:	f7ff f8f8 	bl	800a494 <__multiply>
 800b2a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f43f ae85 	beq.w	800afb6 <_strtod_l+0x436>
 800b2ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	f7fe ffdc 	bl	800a26c <_Bfree>
 800b2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b8:	2d00      	cmp	r5, #0
 800b2ba:	dc1d      	bgt.n	800b2f8 <_strtod_l+0x778>
 800b2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	dd23      	ble.n	800b30a <_strtod_l+0x78a>
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2c6:	9805      	ldr	r0, [sp, #20]
 800b2c8:	f7ff f98c 	bl	800a5e4 <__pow5mult>
 800b2cc:	4681      	mov	r9, r0
 800b2ce:	b9e0      	cbnz	r0, 800b30a <_strtod_l+0x78a>
 800b2d0:	f04f 0900 	mov.w	r9, #0
 800b2d4:	e66f      	b.n	800afb6 <_strtod_l+0x436>
 800b2d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2e2:	35e2      	adds	r5, #226	@ 0xe2
 800b2e4:	fa01 f305 	lsl.w	r3, r1, r5
 800b2e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2ec:	e7ba      	b.n	800b264 <_strtod_l+0x6e4>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2f6:	e7b5      	b.n	800b264 <_strtod_l+0x6e4>
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	f7ff f9cb 	bl	800a698 <__lshift>
 800b302:	901a      	str	r0, [sp, #104]	@ 0x68
 800b304:	2800      	cmp	r0, #0
 800b306:	d1d9      	bne.n	800b2bc <_strtod_l+0x73c>
 800b308:	e655      	b.n	800afb6 <_strtod_l+0x436>
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	dd07      	ble.n	800b31e <_strtod_l+0x79e>
 800b30e:	4649      	mov	r1, r9
 800b310:	4632      	mov	r2, r6
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	f7ff f9c0 	bl	800a698 <__lshift>
 800b318:	4681      	mov	r9, r0
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d0d8      	beq.n	800b2d0 <_strtod_l+0x750>
 800b31e:	2f00      	cmp	r7, #0
 800b320:	dd08      	ble.n	800b334 <_strtod_l+0x7b4>
 800b322:	4641      	mov	r1, r8
 800b324:	463a      	mov	r2, r7
 800b326:	9805      	ldr	r0, [sp, #20]
 800b328:	f7ff f9b6 	bl	800a698 <__lshift>
 800b32c:	4680      	mov	r8, r0
 800b32e:	2800      	cmp	r0, #0
 800b330:	f43f ae41 	beq.w	800afb6 <_strtod_l+0x436>
 800b334:	464a      	mov	r2, r9
 800b336:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b338:	9805      	ldr	r0, [sp, #20]
 800b33a:	f7ff fa35 	bl	800a7a8 <__mdiff>
 800b33e:	4604      	mov	r4, r0
 800b340:	2800      	cmp	r0, #0
 800b342:	f43f ae38 	beq.w	800afb6 <_strtod_l+0x436>
 800b346:	68c3      	ldr	r3, [r0, #12]
 800b348:	4641      	mov	r1, r8
 800b34a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b34c:	2300      	movs	r3, #0
 800b34e:	60c3      	str	r3, [r0, #12]
 800b350:	f7ff fa0e 	bl	800a770 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	da45      	bge.n	800b3e4 <_strtod_l+0x864>
 800b358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b35a:	ea53 030a 	orrs.w	r3, r3, sl
 800b35e:	d16b      	bne.n	800b438 <_strtod_l+0x8b8>
 800b360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b364:	2b00      	cmp	r3, #0
 800b366:	d167      	bne.n	800b438 <_strtod_l+0x8b8>
 800b368:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b36c:	0d1b      	lsrs	r3, r3, #20
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b374:	d960      	bls.n	800b438 <_strtod_l+0x8b8>
 800b376:	6963      	ldr	r3, [r4, #20]
 800b378:	b913      	cbnz	r3, 800b380 <_strtod_l+0x800>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	dd5b      	ble.n	800b438 <_strtod_l+0x8b8>
 800b380:	4621      	mov	r1, r4
 800b382:	2201      	movs	r2, #1
 800b384:	9805      	ldr	r0, [sp, #20]
 800b386:	f7ff f987 	bl	800a698 <__lshift>
 800b38a:	4641      	mov	r1, r8
 800b38c:	4604      	mov	r4, r0
 800b38e:	f7ff f9ef 	bl	800a770 <__mcmp>
 800b392:	2800      	cmp	r0, #0
 800b394:	dd50      	ble.n	800b438 <_strtod_l+0x8b8>
 800b396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b39a:	9a08      	ldr	r2, [sp, #32]
 800b39c:	0d1b      	lsrs	r3, r3, #20
 800b39e:	051b      	lsls	r3, r3, #20
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d06a      	beq.n	800b47a <_strtod_l+0x8fa>
 800b3a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3a8:	d867      	bhi.n	800b47a <_strtod_l+0x8fa>
 800b3aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3ae:	f67f ae98 	bls.w	800b0e2 <_strtod_l+0x562>
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	4b09      	ldr	r3, [pc, #36]	@ (800b3dc <_strtod_l+0x85c>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f7f5 f8f9 	bl	80005b0 <__aeabi_dmul>
 800b3be:	4b08      	ldr	r3, [pc, #32]	@ (800b3e0 <_strtod_l+0x860>)
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	400b      	ands	r3, r1
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f47f ae00 	bne.w	800afcc <_strtod_l+0x44c>
 800b3cc:	2322      	movs	r3, #34	@ 0x22
 800b3ce:	9a05      	ldr	r2, [sp, #20]
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e5fb      	b.n	800afcc <_strtod_l+0x44c>
 800b3d4:	0800ce50 	.word	0x0800ce50
 800b3d8:	fffffc02 	.word	0xfffffc02
 800b3dc:	39500000 	.word	0x39500000
 800b3e0:	7ff00000 	.word	0x7ff00000
 800b3e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3e8:	d165      	bne.n	800b4b6 <_strtod_l+0x936>
 800b3ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3f0:	b35a      	cbz	r2, 800b44a <_strtod_l+0x8ca>
 800b3f2:	4a99      	ldr	r2, [pc, #612]	@ (800b658 <_strtod_l+0xad8>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d12b      	bne.n	800b450 <_strtod_l+0x8d0>
 800b3f8:	9b08      	ldr	r3, [sp, #32]
 800b3fa:	4651      	mov	r1, sl
 800b3fc:	b303      	cbz	r3, 800b440 <_strtod_l+0x8c0>
 800b3fe:	465a      	mov	r2, fp
 800b400:	4b96      	ldr	r3, [pc, #600]	@ (800b65c <_strtod_l+0xadc>)
 800b402:	4013      	ands	r3, r2
 800b404:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	d81b      	bhi.n	800b446 <_strtod_l+0x8c6>
 800b40e:	0d1b      	lsrs	r3, r3, #20
 800b410:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b414:	fa02 f303 	lsl.w	r3, r2, r3
 800b418:	4299      	cmp	r1, r3
 800b41a:	d119      	bne.n	800b450 <_strtod_l+0x8d0>
 800b41c:	4b90      	ldr	r3, [pc, #576]	@ (800b660 <_strtod_l+0xae0>)
 800b41e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b420:	429a      	cmp	r2, r3
 800b422:	d102      	bne.n	800b42a <_strtod_l+0x8aa>
 800b424:	3101      	adds	r1, #1
 800b426:	f43f adc6 	beq.w	800afb6 <_strtod_l+0x436>
 800b42a:	f04f 0a00 	mov.w	sl, #0
 800b42e:	4b8b      	ldr	r3, [pc, #556]	@ (800b65c <_strtod_l+0xadc>)
 800b430:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b432:	401a      	ands	r2, r3
 800b434:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b438:	9b08      	ldr	r3, [sp, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1b9      	bne.n	800b3b2 <_strtod_l+0x832>
 800b43e:	e5c5      	b.n	800afcc <_strtod_l+0x44c>
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	e7e8      	b.n	800b418 <_strtod_l+0x898>
 800b446:	4613      	mov	r3, r2
 800b448:	e7e6      	b.n	800b418 <_strtod_l+0x898>
 800b44a:	ea53 030a 	orrs.w	r3, r3, sl
 800b44e:	d0a2      	beq.n	800b396 <_strtod_l+0x816>
 800b450:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b452:	b1db      	cbz	r3, 800b48c <_strtod_l+0x90c>
 800b454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b456:	4213      	tst	r3, r2
 800b458:	d0ee      	beq.n	800b438 <_strtod_l+0x8b8>
 800b45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45c:	4650      	mov	r0, sl
 800b45e:	4659      	mov	r1, fp
 800b460:	9a08      	ldr	r2, [sp, #32]
 800b462:	b1bb      	cbz	r3, 800b494 <_strtod_l+0x914>
 800b464:	f7ff fb68 	bl	800ab38 <sulp>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b470:	f7f4 fee8 	bl	8000244 <__adddf3>
 800b474:	4682      	mov	sl, r0
 800b476:	468b      	mov	fp, r1
 800b478:	e7de      	b.n	800b438 <_strtod_l+0x8b8>
 800b47a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b47e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b482:	f04f 3aff 	mov.w	sl, #4294967295
 800b486:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b48a:	e7d5      	b.n	800b438 <_strtod_l+0x8b8>
 800b48c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b48e:	ea13 0f0a 	tst.w	r3, sl
 800b492:	e7e1      	b.n	800b458 <_strtod_l+0x8d8>
 800b494:	f7ff fb50 	bl	800ab38 <sulp>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4a0:	f7f4 fece 	bl	8000240 <__aeabi_dsub>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	468b      	mov	fp, r1
 800b4ac:	f7f5 fae8 	bl	8000a80 <__aeabi_dcmpeq>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d0c1      	beq.n	800b438 <_strtod_l+0x8b8>
 800b4b4:	e615      	b.n	800b0e2 <_strtod_l+0x562>
 800b4b6:	4641      	mov	r1, r8
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff fac9 	bl	800aa50 <__ratio>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	460f      	mov	r7, r1
 800b4c8:	f7f5 faee 	bl	8000aa8 <__aeabi_dcmple>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d06d      	beq.n	800b5ac <_strtod_l+0xa2c>
 800b4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d178      	bne.n	800b5c8 <_strtod_l+0xa48>
 800b4d6:	f1ba 0f00 	cmp.w	sl, #0
 800b4da:	d156      	bne.n	800b58a <_strtod_l+0xa0a>
 800b4dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d158      	bne.n	800b598 <_strtod_l+0xa18>
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	4b5d      	ldr	r3, [pc, #372]	@ (800b664 <_strtod_l+0xae4>)
 800b4ee:	f7f5 fad1 	bl	8000a94 <__aeabi_dcmplt>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d157      	bne.n	800b5a6 <_strtod_l+0xa26>
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4b5a      	ldr	r3, [pc, #360]	@ (800b668 <_strtod_l+0xae8>)
 800b4fe:	f7f5 f857 	bl	80005b0 <__aeabi_dmul>
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b50a:	9606      	str	r6, [sp, #24]
 800b50c:	9307      	str	r3, [sp, #28]
 800b50e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b512:	4d52      	ldr	r5, [pc, #328]	@ (800b65c <_strtod_l+0xadc>)
 800b514:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51a:	401d      	ands	r5, r3
 800b51c:	4b53      	ldr	r3, [pc, #332]	@ (800b66c <_strtod_l+0xaec>)
 800b51e:	429d      	cmp	r5, r3
 800b520:	f040 80aa 	bne.w	800b678 <_strtod_l+0xaf8>
 800b524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b526:	4650      	mov	r0, sl
 800b528:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7ff f9cf 	bl	800a8d0 <__ulp>
 800b532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b536:	f7f5 f83b 	bl	80005b0 <__aeabi_dmul>
 800b53a:	4652      	mov	r2, sl
 800b53c:	465b      	mov	r3, fp
 800b53e:	f7f4 fe81 	bl	8000244 <__adddf3>
 800b542:	460b      	mov	r3, r1
 800b544:	4945      	ldr	r1, [pc, #276]	@ (800b65c <_strtod_l+0xadc>)
 800b546:	4a4a      	ldr	r2, [pc, #296]	@ (800b670 <_strtod_l+0xaf0>)
 800b548:	4019      	ands	r1, r3
 800b54a:	4291      	cmp	r1, r2
 800b54c:	4682      	mov	sl, r0
 800b54e:	d942      	bls.n	800b5d6 <_strtod_l+0xa56>
 800b550:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b552:	4b43      	ldr	r3, [pc, #268]	@ (800b660 <_strtod_l+0xae0>)
 800b554:	429a      	cmp	r2, r3
 800b556:	d103      	bne.n	800b560 <_strtod_l+0x9e0>
 800b558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b55a:	3301      	adds	r3, #1
 800b55c:	f43f ad2b 	beq.w	800afb6 <_strtod_l+0x436>
 800b560:	f04f 3aff 	mov.w	sl, #4294967295
 800b564:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b660 <_strtod_l+0xae0>
 800b568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b56a:	9805      	ldr	r0, [sp, #20]
 800b56c:	f7fe fe7e 	bl	800a26c <_Bfree>
 800b570:	4649      	mov	r1, r9
 800b572:	9805      	ldr	r0, [sp, #20]
 800b574:	f7fe fe7a 	bl	800a26c <_Bfree>
 800b578:	4641      	mov	r1, r8
 800b57a:	9805      	ldr	r0, [sp, #20]
 800b57c:	f7fe fe76 	bl	800a26c <_Bfree>
 800b580:	4621      	mov	r1, r4
 800b582:	9805      	ldr	r0, [sp, #20]
 800b584:	f7fe fe72 	bl	800a26c <_Bfree>
 800b588:	e618      	b.n	800b1bc <_strtod_l+0x63c>
 800b58a:	f1ba 0f01 	cmp.w	sl, #1
 800b58e:	d103      	bne.n	800b598 <_strtod_l+0xa18>
 800b590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b592:	2b00      	cmp	r3, #0
 800b594:	f43f ada5 	beq.w	800b0e2 <_strtod_l+0x562>
 800b598:	2200      	movs	r2, #0
 800b59a:	4b36      	ldr	r3, [pc, #216]	@ (800b674 <_strtod_l+0xaf4>)
 800b59c:	2600      	movs	r6, #0
 800b59e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5a2:	4f30      	ldr	r7, [pc, #192]	@ (800b664 <_strtod_l+0xae4>)
 800b5a4:	e7b3      	b.n	800b50e <_strtod_l+0x98e>
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	4f2f      	ldr	r7, [pc, #188]	@ (800b668 <_strtod_l+0xae8>)
 800b5aa:	e7ac      	b.n	800b506 <_strtod_l+0x986>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b668 <_strtod_l+0xae8>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f7f4 fffc 	bl	80005b0 <__aeabi_dmul>
 800b5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0a1      	beq.n	800b506 <_strtod_l+0x986>
 800b5c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5c6:	e7a2      	b.n	800b50e <_strtod_l+0x98e>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4b26      	ldr	r3, [pc, #152]	@ (800b664 <_strtod_l+0xae4>)
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	461f      	mov	r7, r3
 800b5d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5d4:	e79b      	b.n	800b50e <_strtod_l+0x98e>
 800b5d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1c1      	bne.n	800b568 <_strtod_l+0x9e8>
 800b5e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5e8:	0d1b      	lsrs	r3, r3, #20
 800b5ea:	051b      	lsls	r3, r3, #20
 800b5ec:	429d      	cmp	r5, r3
 800b5ee:	d1bb      	bne.n	800b568 <_strtod_l+0x9e8>
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f5 fe3e 	bl	8001274 <__aeabi_d2lz>
 800b5f8:	f7f4 ffac 	bl	8000554 <__aeabi_l2d>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f4 fe1c 	bl	8000240 <__aeabi_dsub>
 800b608:	460b      	mov	r3, r1
 800b60a:	4602      	mov	r2, r0
 800b60c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b610:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b616:	ea46 060a 	orr.w	r6, r6, sl
 800b61a:	431e      	orrs	r6, r3
 800b61c:	d069      	beq.n	800b6f2 <_strtod_l+0xb72>
 800b61e:	a30a      	add	r3, pc, #40	@ (adr r3, 800b648 <_strtod_l+0xac8>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f5 fa36 	bl	8000a94 <__aeabi_dcmplt>
 800b628:	2800      	cmp	r0, #0
 800b62a:	f47f accf 	bne.w	800afcc <_strtod_l+0x44c>
 800b62e:	a308      	add	r3, pc, #32	@ (adr r3, 800b650 <_strtod_l+0xad0>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b638:	f7f5 fa4a 	bl	8000ad0 <__aeabi_dcmpgt>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d093      	beq.n	800b568 <_strtod_l+0x9e8>
 800b640:	e4c4      	b.n	800afcc <_strtod_l+0x44c>
 800b642:	bf00      	nop
 800b644:	f3af 8000 	nop.w
 800b648:	94a03595 	.word	0x94a03595
 800b64c:	3fdfffff 	.word	0x3fdfffff
 800b650:	35afe535 	.word	0x35afe535
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	000fffff 	.word	0x000fffff
 800b65c:	7ff00000 	.word	0x7ff00000
 800b660:	7fefffff 	.word	0x7fefffff
 800b664:	3ff00000 	.word	0x3ff00000
 800b668:	3fe00000 	.word	0x3fe00000
 800b66c:	7fe00000 	.word	0x7fe00000
 800b670:	7c9fffff 	.word	0x7c9fffff
 800b674:	bff00000 	.word	0xbff00000
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	b323      	cbz	r3, 800b6c6 <_strtod_l+0xb46>
 800b67c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b680:	d821      	bhi.n	800b6c6 <_strtod_l+0xb46>
 800b682:	a327      	add	r3, pc, #156	@ (adr r3, 800b720 <_strtod_l+0xba0>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f5 fa0c 	bl	8000aa8 <__aeabi_dcmple>
 800b690:	b1a0      	cbz	r0, 800b6bc <_strtod_l+0xb3c>
 800b692:	4639      	mov	r1, r7
 800b694:	4630      	mov	r0, r6
 800b696:	f7f5 fa63 	bl	8000b60 <__aeabi_d2uiz>
 800b69a:	2801      	cmp	r0, #1
 800b69c:	bf38      	it	cc
 800b69e:	2001      	movcc	r0, #1
 800b6a0:	f7f4 ff0c 	bl	80004bc <__aeabi_ui2d>
 800b6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	460f      	mov	r7, r1
 800b6aa:	b9fb      	cbnz	r3, 800b6ec <_strtod_l+0xb6c>
 800b6ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6b0:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6b2:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6be:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6c2:	1b5b      	subs	r3, r3, r5
 800b6c4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6ce:	f7ff f8ff 	bl	800a8d0 <__ulp>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f4 ff69 	bl	80005b0 <__aeabi_dmul>
 800b6de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6e2:	f7f4 fdaf 	bl	8000244 <__adddf3>
 800b6e6:	4682      	mov	sl, r0
 800b6e8:	468b      	mov	fp, r1
 800b6ea:	e776      	b.n	800b5da <_strtod_l+0xa5a>
 800b6ec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6f0:	e7e0      	b.n	800b6b4 <_strtod_l+0xb34>
 800b6f2:	a30d      	add	r3, pc, #52	@ (adr r3, 800b728 <_strtod_l+0xba8>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f5 f9cc 	bl	8000a94 <__aeabi_dcmplt>
 800b6fc:	e79e      	b.n	800b63c <_strtod_l+0xabc>
 800b6fe:	2300      	movs	r3, #0
 800b700:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b704:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	f7ff ba77 	b.w	800abfa <_strtod_l+0x7a>
 800b70c:	2a65      	cmp	r2, #101	@ 0x65
 800b70e:	f43f ab6e 	beq.w	800adee <_strtod_l+0x26e>
 800b712:	2a45      	cmp	r2, #69	@ 0x45
 800b714:	f43f ab6b 	beq.w	800adee <_strtod_l+0x26e>
 800b718:	2301      	movs	r3, #1
 800b71a:	f7ff bba6 	b.w	800ae6a <_strtod_l+0x2ea>
 800b71e:	bf00      	nop
 800b720:	ffc00000 	.word	0xffc00000
 800b724:	41dfffff 	.word	0x41dfffff
 800b728:	94a03595 	.word	0x94a03595
 800b72c:	3fcfffff 	.word	0x3fcfffff

0800b730 <_strtod_r>:
 800b730:	4b01      	ldr	r3, [pc, #4]	@ (800b738 <_strtod_r+0x8>)
 800b732:	f7ff ba25 	b.w	800ab80 <_strtod_l>
 800b736:	bf00      	nop
 800b738:	20000084 	.word	0x20000084

0800b73c <_strtol_l.constprop.0>:
 800b73c:	2b24      	cmp	r3, #36	@ 0x24
 800b73e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b742:	4686      	mov	lr, r0
 800b744:	4690      	mov	r8, r2
 800b746:	d801      	bhi.n	800b74c <_strtol_l.constprop.0+0x10>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d106      	bne.n	800b75a <_strtol_l.constprop.0+0x1e>
 800b74c:	f7fd fdc0 	bl	80092d0 <__errno>
 800b750:	2316      	movs	r3, #22
 800b752:	6003      	str	r3, [r0, #0]
 800b754:	2000      	movs	r0, #0
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	460d      	mov	r5, r1
 800b75c:	4833      	ldr	r0, [pc, #204]	@ (800b82c <_strtol_l.constprop.0+0xf0>)
 800b75e:	462a      	mov	r2, r5
 800b760:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b764:	5d06      	ldrb	r6, [r0, r4]
 800b766:	f016 0608 	ands.w	r6, r6, #8
 800b76a:	d1f8      	bne.n	800b75e <_strtol_l.constprop.0+0x22>
 800b76c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b76e:	d12d      	bne.n	800b7cc <_strtol_l.constprop.0+0x90>
 800b770:	2601      	movs	r6, #1
 800b772:	782c      	ldrb	r4, [r5, #0]
 800b774:	1c95      	adds	r5, r2, #2
 800b776:	f033 0210 	bics.w	r2, r3, #16
 800b77a:	d109      	bne.n	800b790 <_strtol_l.constprop.0+0x54>
 800b77c:	2c30      	cmp	r4, #48	@ 0x30
 800b77e:	d12a      	bne.n	800b7d6 <_strtol_l.constprop.0+0x9a>
 800b780:	782a      	ldrb	r2, [r5, #0]
 800b782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b786:	2a58      	cmp	r2, #88	@ 0x58
 800b788:	d125      	bne.n	800b7d6 <_strtol_l.constprop.0+0x9a>
 800b78a:	2310      	movs	r3, #16
 800b78c:	786c      	ldrb	r4, [r5, #1]
 800b78e:	3502      	adds	r5, #2
 800b790:	2200      	movs	r2, #0
 800b792:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b796:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b79a:	fbbc f9f3 	udiv	r9, ip, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7a8:	2f09      	cmp	r7, #9
 800b7aa:	d81b      	bhi.n	800b7e4 <_strtol_l.constprop.0+0xa8>
 800b7ac:	463c      	mov	r4, r7
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	dd27      	ble.n	800b802 <_strtol_l.constprop.0+0xc6>
 800b7b2:	1c57      	adds	r7, r2, #1
 800b7b4:	d007      	beq.n	800b7c6 <_strtol_l.constprop.0+0x8a>
 800b7b6:	4581      	cmp	r9, r0
 800b7b8:	d320      	bcc.n	800b7fc <_strtol_l.constprop.0+0xc0>
 800b7ba:	d101      	bne.n	800b7c0 <_strtol_l.constprop.0+0x84>
 800b7bc:	45a2      	cmp	sl, r4
 800b7be:	db1d      	blt.n	800b7fc <_strtol_l.constprop.0+0xc0>
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	fb00 4003 	mla	r0, r0, r3, r4
 800b7c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7ca:	e7eb      	b.n	800b7a4 <_strtol_l.constprop.0+0x68>
 800b7cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7ce:	bf04      	itt	eq
 800b7d0:	782c      	ldrbeq	r4, [r5, #0]
 800b7d2:	1c95      	addeq	r5, r2, #2
 800b7d4:	e7cf      	b.n	800b776 <_strtol_l.constprop.0+0x3a>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1da      	bne.n	800b790 <_strtol_l.constprop.0+0x54>
 800b7da:	2c30      	cmp	r4, #48	@ 0x30
 800b7dc:	bf0c      	ite	eq
 800b7de:	2308      	moveq	r3, #8
 800b7e0:	230a      	movne	r3, #10
 800b7e2:	e7d5      	b.n	800b790 <_strtol_l.constprop.0+0x54>
 800b7e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7e8:	2f19      	cmp	r7, #25
 800b7ea:	d801      	bhi.n	800b7f0 <_strtol_l.constprop.0+0xb4>
 800b7ec:	3c37      	subs	r4, #55	@ 0x37
 800b7ee:	e7de      	b.n	800b7ae <_strtol_l.constprop.0+0x72>
 800b7f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7f4:	2f19      	cmp	r7, #25
 800b7f6:	d804      	bhi.n	800b802 <_strtol_l.constprop.0+0xc6>
 800b7f8:	3c57      	subs	r4, #87	@ 0x57
 800b7fa:	e7d8      	b.n	800b7ae <_strtol_l.constprop.0+0x72>
 800b7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b800:	e7e1      	b.n	800b7c6 <_strtol_l.constprop.0+0x8a>
 800b802:	1c53      	adds	r3, r2, #1
 800b804:	d108      	bne.n	800b818 <_strtol_l.constprop.0+0xdc>
 800b806:	2322      	movs	r3, #34	@ 0x22
 800b808:	4660      	mov	r0, ip
 800b80a:	f8ce 3000 	str.w	r3, [lr]
 800b80e:	f1b8 0f00 	cmp.w	r8, #0
 800b812:	d0a0      	beq.n	800b756 <_strtol_l.constprop.0+0x1a>
 800b814:	1e69      	subs	r1, r5, #1
 800b816:	e006      	b.n	800b826 <_strtol_l.constprop.0+0xea>
 800b818:	b106      	cbz	r6, 800b81c <_strtol_l.constprop.0+0xe0>
 800b81a:	4240      	negs	r0, r0
 800b81c:	f1b8 0f00 	cmp.w	r8, #0
 800b820:	d099      	beq.n	800b756 <_strtol_l.constprop.0+0x1a>
 800b822:	2a00      	cmp	r2, #0
 800b824:	d1f6      	bne.n	800b814 <_strtol_l.constprop.0+0xd8>
 800b826:	f8c8 1000 	str.w	r1, [r8]
 800b82a:	e794      	b.n	800b756 <_strtol_l.constprop.0+0x1a>
 800b82c:	0800ce79 	.word	0x0800ce79

0800b830 <_strtol_r>:
 800b830:	f7ff bf84 	b.w	800b73c <_strtol_l.constprop.0>

0800b834 <__ssputs_r>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	461f      	mov	r7, r3
 800b83a:	688e      	ldr	r6, [r1, #8]
 800b83c:	4682      	mov	sl, r0
 800b83e:	42be      	cmp	r6, r7
 800b840:	460c      	mov	r4, r1
 800b842:	4690      	mov	r8, r2
 800b844:	680b      	ldr	r3, [r1, #0]
 800b846:	d82d      	bhi.n	800b8a4 <__ssputs_r+0x70>
 800b848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b84c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b850:	d026      	beq.n	800b8a0 <__ssputs_r+0x6c>
 800b852:	6965      	ldr	r5, [r4, #20]
 800b854:	6909      	ldr	r1, [r1, #16]
 800b856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b85a:	eba3 0901 	sub.w	r9, r3, r1
 800b85e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b862:	1c7b      	adds	r3, r7, #1
 800b864:	444b      	add	r3, r9
 800b866:	106d      	asrs	r5, r5, #1
 800b868:	429d      	cmp	r5, r3
 800b86a:	bf38      	it	cc
 800b86c:	461d      	movcc	r5, r3
 800b86e:	0553      	lsls	r3, r2, #21
 800b870:	d527      	bpl.n	800b8c2 <__ssputs_r+0x8e>
 800b872:	4629      	mov	r1, r5
 800b874:	f7fe fc2e 	bl	800a0d4 <_malloc_r>
 800b878:	4606      	mov	r6, r0
 800b87a:	b360      	cbz	r0, 800b8d6 <__ssputs_r+0xa2>
 800b87c:	464a      	mov	r2, r9
 800b87e:	6921      	ldr	r1, [r4, #16]
 800b880:	f000 fbe8 	bl	800c054 <memcpy>
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	6126      	str	r6, [r4, #16]
 800b892:	444e      	add	r6, r9
 800b894:	6026      	str	r6, [r4, #0]
 800b896:	463e      	mov	r6, r7
 800b898:	6165      	str	r5, [r4, #20]
 800b89a:	eba5 0509 	sub.w	r5, r5, r9
 800b89e:	60a5      	str	r5, [r4, #8]
 800b8a0:	42be      	cmp	r6, r7
 800b8a2:	d900      	bls.n	800b8a6 <__ssputs_r+0x72>
 800b8a4:	463e      	mov	r6, r7
 800b8a6:	4632      	mov	r2, r6
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	6820      	ldr	r0, [r4, #0]
 800b8ac:	f000 fb96 	bl	800bfdc <memmove>
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	1b9b      	subs	r3, r3, r6
 800b8b6:	60a3      	str	r3, [r4, #8]
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	4433      	add	r3, r6
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	f000 ff57 	bl	800c776 <_realloc_r>
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d1e0      	bne.n	800b890 <__ssputs_r+0x5c>
 800b8ce:	4650      	mov	r0, sl
 800b8d0:	6921      	ldr	r1, [r4, #16]
 800b8d2:	f7fe fb8d 	bl	8009ff0 <_free_r>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	f8ca 3000 	str.w	r3, [sl]
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	e7e9      	b.n	800b8be <__ssputs_r+0x8a>
	...

0800b8ec <_svfiprintf_r>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	4698      	mov	r8, r3
 800b8f2:	898b      	ldrh	r3, [r1, #12]
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	061b      	lsls	r3, r3, #24
 800b8f8:	460d      	mov	r5, r1
 800b8fa:	4614      	mov	r4, r2
 800b8fc:	b09d      	sub	sp, #116	@ 0x74
 800b8fe:	d510      	bpl.n	800b922 <_svfiprintf_r+0x36>
 800b900:	690b      	ldr	r3, [r1, #16]
 800b902:	b973      	cbnz	r3, 800b922 <_svfiprintf_r+0x36>
 800b904:	2140      	movs	r1, #64	@ 0x40
 800b906:	f7fe fbe5 	bl	800a0d4 <_malloc_r>
 800b90a:	6028      	str	r0, [r5, #0]
 800b90c:	6128      	str	r0, [r5, #16]
 800b90e:	b930      	cbnz	r0, 800b91e <_svfiprintf_r+0x32>
 800b910:	230c      	movs	r3, #12
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	b01d      	add	sp, #116	@ 0x74
 800b91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91e:	2340      	movs	r3, #64	@ 0x40
 800b920:	616b      	str	r3, [r5, #20]
 800b922:	2300      	movs	r3, #0
 800b924:	9309      	str	r3, [sp, #36]	@ 0x24
 800b926:	2320      	movs	r3, #32
 800b928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b92c:	2330      	movs	r3, #48	@ 0x30
 800b92e:	f04f 0901 	mov.w	r9, #1
 800b932:	f8cd 800c 	str.w	r8, [sp, #12]
 800b936:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bad0 <_svfiprintf_r+0x1e4>
 800b93a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b93e:	4623      	mov	r3, r4
 800b940:	469a      	mov	sl, r3
 800b942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b946:	b10a      	cbz	r2, 800b94c <_svfiprintf_r+0x60>
 800b948:	2a25      	cmp	r2, #37	@ 0x25
 800b94a:	d1f9      	bne.n	800b940 <_svfiprintf_r+0x54>
 800b94c:	ebba 0b04 	subs.w	fp, sl, r4
 800b950:	d00b      	beq.n	800b96a <_svfiprintf_r+0x7e>
 800b952:	465b      	mov	r3, fp
 800b954:	4622      	mov	r2, r4
 800b956:	4629      	mov	r1, r5
 800b958:	4638      	mov	r0, r7
 800b95a:	f7ff ff6b 	bl	800b834 <__ssputs_r>
 800b95e:	3001      	adds	r0, #1
 800b960:	f000 80a7 	beq.w	800bab2 <_svfiprintf_r+0x1c6>
 800b964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b966:	445a      	add	r2, fp
 800b968:	9209      	str	r2, [sp, #36]	@ 0x24
 800b96a:	f89a 3000 	ldrb.w	r3, [sl]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 809f 	beq.w	800bab2 <_svfiprintf_r+0x1c6>
 800b974:	2300      	movs	r3, #0
 800b976:	f04f 32ff 	mov.w	r2, #4294967295
 800b97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b97e:	f10a 0a01 	add.w	sl, sl, #1
 800b982:	9304      	str	r3, [sp, #16]
 800b984:	9307      	str	r3, [sp, #28]
 800b986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b98a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b98c:	4654      	mov	r4, sl
 800b98e:	2205      	movs	r2, #5
 800b990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b994:	484e      	ldr	r0, [pc, #312]	@ (800bad0 <_svfiprintf_r+0x1e4>)
 800b996:	f7fd fcc8 	bl	800932a <memchr>
 800b99a:	9a04      	ldr	r2, [sp, #16]
 800b99c:	b9d8      	cbnz	r0, 800b9d6 <_svfiprintf_r+0xea>
 800b99e:	06d0      	lsls	r0, r2, #27
 800b9a0:	bf44      	itt	mi
 800b9a2:	2320      	movmi	r3, #32
 800b9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a8:	0711      	lsls	r1, r2, #28
 800b9aa:	bf44      	itt	mi
 800b9ac:	232b      	movmi	r3, #43	@ 0x2b
 800b9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9b8:	d015      	beq.n	800b9e6 <_svfiprintf_r+0xfa>
 800b9ba:	4654      	mov	r4, sl
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f04f 0c0a 	mov.w	ip, #10
 800b9c2:	9a07      	ldr	r2, [sp, #28]
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ca:	3b30      	subs	r3, #48	@ 0x30
 800b9cc:	2b09      	cmp	r3, #9
 800b9ce:	d94b      	bls.n	800ba68 <_svfiprintf_r+0x17c>
 800b9d0:	b1b0      	cbz	r0, 800ba00 <_svfiprintf_r+0x114>
 800b9d2:	9207      	str	r2, [sp, #28]
 800b9d4:	e014      	b.n	800ba00 <_svfiprintf_r+0x114>
 800b9d6:	eba0 0308 	sub.w	r3, r0, r8
 800b9da:	fa09 f303 	lsl.w	r3, r9, r3
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	46a2      	mov	sl, r4
 800b9e2:	9304      	str	r3, [sp, #16]
 800b9e4:	e7d2      	b.n	800b98c <_svfiprintf_r+0xa0>
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	1d19      	adds	r1, r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	9103      	str	r1, [sp, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfbb      	ittet	lt
 800b9f2:	425b      	neglt	r3, r3
 800b9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f8:	9307      	strge	r3, [sp, #28]
 800b9fa:	9307      	strlt	r3, [sp, #28]
 800b9fc:	bfb8      	it	lt
 800b9fe:	9204      	strlt	r2, [sp, #16]
 800ba00:	7823      	ldrb	r3, [r4, #0]
 800ba02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba04:	d10a      	bne.n	800ba1c <_svfiprintf_r+0x130>
 800ba06:	7863      	ldrb	r3, [r4, #1]
 800ba08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba0a:	d132      	bne.n	800ba72 <_svfiprintf_r+0x186>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	3402      	adds	r4, #2
 800ba10:	1d1a      	adds	r2, r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9203      	str	r2, [sp, #12]
 800ba16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bad4 <_svfiprintf_r+0x1e8>
 800ba20:	2203      	movs	r2, #3
 800ba22:	4650      	mov	r0, sl
 800ba24:	7821      	ldrb	r1, [r4, #0]
 800ba26:	f7fd fc80 	bl	800932a <memchr>
 800ba2a:	b138      	cbz	r0, 800ba3c <_svfiprintf_r+0x150>
 800ba2c:	2240      	movs	r2, #64	@ 0x40
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	eba0 000a 	sub.w	r0, r0, sl
 800ba34:	4082      	lsls	r2, r0
 800ba36:	4313      	orrs	r3, r2
 800ba38:	3401      	adds	r4, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	2206      	movs	r2, #6
 800ba42:	4825      	ldr	r0, [pc, #148]	@ (800bad8 <_svfiprintf_r+0x1ec>)
 800ba44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba48:	f7fd fc6f 	bl	800932a <memchr>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d036      	beq.n	800babe <_svfiprintf_r+0x1d2>
 800ba50:	4b22      	ldr	r3, [pc, #136]	@ (800badc <_svfiprintf_r+0x1f0>)
 800ba52:	bb1b      	cbnz	r3, 800ba9c <_svfiprintf_r+0x1b0>
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	3307      	adds	r3, #7
 800ba58:	f023 0307 	bic.w	r3, r3, #7
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba62:	4433      	add	r3, r6
 800ba64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba66:	e76a      	b.n	800b93e <_svfiprintf_r+0x52>
 800ba68:	460c      	mov	r4, r1
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba70:	e7a8      	b.n	800b9c4 <_svfiprintf_r+0xd8>
 800ba72:	2300      	movs	r3, #0
 800ba74:	f04f 0c0a 	mov.w	ip, #10
 800ba78:	4619      	mov	r1, r3
 800ba7a:	3401      	adds	r4, #1
 800ba7c:	9305      	str	r3, [sp, #20]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba84:	3a30      	subs	r2, #48	@ 0x30
 800ba86:	2a09      	cmp	r2, #9
 800ba88:	d903      	bls.n	800ba92 <_svfiprintf_r+0x1a6>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0c6      	beq.n	800ba1c <_svfiprintf_r+0x130>
 800ba8e:	9105      	str	r1, [sp, #20]
 800ba90:	e7c4      	b.n	800ba1c <_svfiprintf_r+0x130>
 800ba92:	4604      	mov	r4, r0
 800ba94:	2301      	movs	r3, #1
 800ba96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba9a:	e7f0      	b.n	800ba7e <_svfiprintf_r+0x192>
 800ba9c:	ab03      	add	r3, sp, #12
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	462a      	mov	r2, r5
 800baa2:	4638      	mov	r0, r7
 800baa4:	4b0e      	ldr	r3, [pc, #56]	@ (800bae0 <_svfiprintf_r+0x1f4>)
 800baa6:	a904      	add	r1, sp, #16
 800baa8:	f7fc fcba 	bl	8008420 <_printf_float>
 800baac:	1c42      	adds	r2, r0, #1
 800baae:	4606      	mov	r6, r0
 800bab0:	d1d6      	bne.n	800ba60 <_svfiprintf_r+0x174>
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	065b      	lsls	r3, r3, #25
 800bab6:	f53f af2d 	bmi.w	800b914 <_svfiprintf_r+0x28>
 800baba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800babc:	e72c      	b.n	800b918 <_svfiprintf_r+0x2c>
 800babe:	ab03      	add	r3, sp, #12
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	462a      	mov	r2, r5
 800bac4:	4638      	mov	r0, r7
 800bac6:	4b06      	ldr	r3, [pc, #24]	@ (800bae0 <_svfiprintf_r+0x1f4>)
 800bac8:	a904      	add	r1, sp, #16
 800baca:	f7fc ff47 	bl	800895c <_printf_i>
 800bace:	e7ed      	b.n	800baac <_svfiprintf_r+0x1c0>
 800bad0:	0800cf79 	.word	0x0800cf79
 800bad4:	0800cf7f 	.word	0x0800cf7f
 800bad8:	0800cf83 	.word	0x0800cf83
 800badc:	08008421 	.word	0x08008421
 800bae0:	0800b835 	.word	0x0800b835

0800bae4 <__sfputc_r>:
 800bae4:	6893      	ldr	r3, [r2, #8]
 800bae6:	b410      	push	{r4}
 800bae8:	3b01      	subs	r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	6093      	str	r3, [r2, #8]
 800baee:	da07      	bge.n	800bb00 <__sfputc_r+0x1c>
 800baf0:	6994      	ldr	r4, [r2, #24]
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	db01      	blt.n	800bafa <__sfputc_r+0x16>
 800baf6:	290a      	cmp	r1, #10
 800baf8:	d102      	bne.n	800bb00 <__sfputc_r+0x1c>
 800bafa:	bc10      	pop	{r4}
 800bafc:	f000 b9da 	b.w	800beb4 <__swbuf_r>
 800bb00:	6813      	ldr	r3, [r2, #0]
 800bb02:	1c58      	adds	r0, r3, #1
 800bb04:	6010      	str	r0, [r2, #0]
 800bb06:	7019      	strb	r1, [r3, #0]
 800bb08:	4608      	mov	r0, r1
 800bb0a:	bc10      	pop	{r4}
 800bb0c:	4770      	bx	lr

0800bb0e <__sfputs_r>:
 800bb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb10:	4606      	mov	r6, r0
 800bb12:	460f      	mov	r7, r1
 800bb14:	4614      	mov	r4, r2
 800bb16:	18d5      	adds	r5, r2, r3
 800bb18:	42ac      	cmp	r4, r5
 800bb1a:	d101      	bne.n	800bb20 <__sfputs_r+0x12>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e007      	b.n	800bb30 <__sfputs_r+0x22>
 800bb20:	463a      	mov	r2, r7
 800bb22:	4630      	mov	r0, r6
 800bb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb28:	f7ff ffdc 	bl	800bae4 <__sfputc_r>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d1f3      	bne.n	800bb18 <__sfputs_r+0xa>
 800bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb34 <_vfiprintf_r>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	460d      	mov	r5, r1
 800bb3a:	4614      	mov	r4, r2
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	4606      	mov	r6, r0
 800bb40:	b09d      	sub	sp, #116	@ 0x74
 800bb42:	b118      	cbz	r0, 800bb4c <_vfiprintf_r+0x18>
 800bb44:	6a03      	ldr	r3, [r0, #32]
 800bb46:	b90b      	cbnz	r3, 800bb4c <_vfiprintf_r+0x18>
 800bb48:	f7fd fac4 	bl	80090d4 <__sinit>
 800bb4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb4e:	07d9      	lsls	r1, r3, #31
 800bb50:	d405      	bmi.n	800bb5e <_vfiprintf_r+0x2a>
 800bb52:	89ab      	ldrh	r3, [r5, #12]
 800bb54:	059a      	lsls	r2, r3, #22
 800bb56:	d402      	bmi.n	800bb5e <_vfiprintf_r+0x2a>
 800bb58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5a:	f7fd fbe4 	bl	8009326 <__retarget_lock_acquire_recursive>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	071b      	lsls	r3, r3, #28
 800bb62:	d501      	bpl.n	800bb68 <_vfiprintf_r+0x34>
 800bb64:	692b      	ldr	r3, [r5, #16]
 800bb66:	b99b      	cbnz	r3, 800bb90 <_vfiprintf_r+0x5c>
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f000 f9e0 	bl	800bf30 <__swsetup_r>
 800bb70:	b170      	cbz	r0, 800bb90 <_vfiprintf_r+0x5c>
 800bb72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb74:	07dc      	lsls	r4, r3, #31
 800bb76:	d504      	bpl.n	800bb82 <_vfiprintf_r+0x4e>
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	b01d      	add	sp, #116	@ 0x74
 800bb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb82:	89ab      	ldrh	r3, [r5, #12]
 800bb84:	0598      	lsls	r0, r3, #22
 800bb86:	d4f7      	bmi.n	800bb78 <_vfiprintf_r+0x44>
 800bb88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb8a:	f7fd fbcd 	bl	8009328 <__retarget_lock_release_recursive>
 800bb8e:	e7f3      	b.n	800bb78 <_vfiprintf_r+0x44>
 800bb90:	2300      	movs	r3, #0
 800bb92:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb94:	2320      	movs	r3, #32
 800bb96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb9a:	2330      	movs	r3, #48	@ 0x30
 800bb9c:	f04f 0901 	mov.w	r9, #1
 800bba0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bba4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bd50 <_vfiprintf_r+0x21c>
 800bba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbac:	4623      	mov	r3, r4
 800bbae:	469a      	mov	sl, r3
 800bbb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbb4:	b10a      	cbz	r2, 800bbba <_vfiprintf_r+0x86>
 800bbb6:	2a25      	cmp	r2, #37	@ 0x25
 800bbb8:	d1f9      	bne.n	800bbae <_vfiprintf_r+0x7a>
 800bbba:	ebba 0b04 	subs.w	fp, sl, r4
 800bbbe:	d00b      	beq.n	800bbd8 <_vfiprintf_r+0xa4>
 800bbc0:	465b      	mov	r3, fp
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7ff ffa1 	bl	800bb0e <__sfputs_r>
 800bbcc:	3001      	adds	r0, #1
 800bbce:	f000 80a7 	beq.w	800bd20 <_vfiprintf_r+0x1ec>
 800bbd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbd4:	445a      	add	r2, fp
 800bbd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 809f 	beq.w	800bd20 <_vfiprintf_r+0x1ec>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbec:	f10a 0a01 	add.w	sl, sl, #1
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	9307      	str	r3, [sp, #28]
 800bbf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbfa:	4654      	mov	r4, sl
 800bbfc:	2205      	movs	r2, #5
 800bbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc02:	4853      	ldr	r0, [pc, #332]	@ (800bd50 <_vfiprintf_r+0x21c>)
 800bc04:	f7fd fb91 	bl	800932a <memchr>
 800bc08:	9a04      	ldr	r2, [sp, #16]
 800bc0a:	b9d8      	cbnz	r0, 800bc44 <_vfiprintf_r+0x110>
 800bc0c:	06d1      	lsls	r1, r2, #27
 800bc0e:	bf44      	itt	mi
 800bc10:	2320      	movmi	r3, #32
 800bc12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc16:	0713      	lsls	r3, r2, #28
 800bc18:	bf44      	itt	mi
 800bc1a:	232b      	movmi	r3, #43	@ 0x2b
 800bc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc20:	f89a 3000 	ldrb.w	r3, [sl]
 800bc24:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc26:	d015      	beq.n	800bc54 <_vfiprintf_r+0x120>
 800bc28:	4654      	mov	r4, sl
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	f04f 0c0a 	mov.w	ip, #10
 800bc30:	9a07      	ldr	r2, [sp, #28]
 800bc32:	4621      	mov	r1, r4
 800bc34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc38:	3b30      	subs	r3, #48	@ 0x30
 800bc3a:	2b09      	cmp	r3, #9
 800bc3c:	d94b      	bls.n	800bcd6 <_vfiprintf_r+0x1a2>
 800bc3e:	b1b0      	cbz	r0, 800bc6e <_vfiprintf_r+0x13a>
 800bc40:	9207      	str	r2, [sp, #28]
 800bc42:	e014      	b.n	800bc6e <_vfiprintf_r+0x13a>
 800bc44:	eba0 0308 	sub.w	r3, r0, r8
 800bc48:	fa09 f303 	lsl.w	r3, r9, r3
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	46a2      	mov	sl, r4
 800bc50:	9304      	str	r3, [sp, #16]
 800bc52:	e7d2      	b.n	800bbfa <_vfiprintf_r+0xc6>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	1d19      	adds	r1, r3, #4
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	9103      	str	r1, [sp, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfbb      	ittet	lt
 800bc60:	425b      	neglt	r3, r3
 800bc62:	f042 0202 	orrlt.w	r2, r2, #2
 800bc66:	9307      	strge	r3, [sp, #28]
 800bc68:	9307      	strlt	r3, [sp, #28]
 800bc6a:	bfb8      	it	lt
 800bc6c:	9204      	strlt	r2, [sp, #16]
 800bc6e:	7823      	ldrb	r3, [r4, #0]
 800bc70:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc72:	d10a      	bne.n	800bc8a <_vfiprintf_r+0x156>
 800bc74:	7863      	ldrb	r3, [r4, #1]
 800bc76:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc78:	d132      	bne.n	800bce0 <_vfiprintf_r+0x1ac>
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	3402      	adds	r4, #2
 800bc7e:	1d1a      	adds	r2, r3, #4
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	9203      	str	r2, [sp, #12]
 800bc84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc88:	9305      	str	r3, [sp, #20]
 800bc8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd54 <_vfiprintf_r+0x220>
 800bc8e:	2203      	movs	r2, #3
 800bc90:	4650      	mov	r0, sl
 800bc92:	7821      	ldrb	r1, [r4, #0]
 800bc94:	f7fd fb49 	bl	800932a <memchr>
 800bc98:	b138      	cbz	r0, 800bcaa <_vfiprintf_r+0x176>
 800bc9a:	2240      	movs	r2, #64	@ 0x40
 800bc9c:	9b04      	ldr	r3, [sp, #16]
 800bc9e:	eba0 000a 	sub.w	r0, r0, sl
 800bca2:	4082      	lsls	r2, r0
 800bca4:	4313      	orrs	r3, r2
 800bca6:	3401      	adds	r4, #1
 800bca8:	9304      	str	r3, [sp, #16]
 800bcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcae:	2206      	movs	r2, #6
 800bcb0:	4829      	ldr	r0, [pc, #164]	@ (800bd58 <_vfiprintf_r+0x224>)
 800bcb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcb6:	f7fd fb38 	bl	800932a <memchr>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d03f      	beq.n	800bd3e <_vfiprintf_r+0x20a>
 800bcbe:	4b27      	ldr	r3, [pc, #156]	@ (800bd5c <_vfiprintf_r+0x228>)
 800bcc0:	bb1b      	cbnz	r3, 800bd0a <_vfiprintf_r+0x1d6>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	3307      	adds	r3, #7
 800bcc6:	f023 0307 	bic.w	r3, r3, #7
 800bcca:	3308      	adds	r3, #8
 800bccc:	9303      	str	r3, [sp, #12]
 800bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd0:	443b      	add	r3, r7
 800bcd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcd4:	e76a      	b.n	800bbac <_vfiprintf_r+0x78>
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	2001      	movs	r0, #1
 800bcda:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcde:	e7a8      	b.n	800bc32 <_vfiprintf_r+0xfe>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f04f 0c0a 	mov.w	ip, #10
 800bce6:	4619      	mov	r1, r3
 800bce8:	3401      	adds	r4, #1
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	4620      	mov	r0, r4
 800bcee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcf2:	3a30      	subs	r2, #48	@ 0x30
 800bcf4:	2a09      	cmp	r2, #9
 800bcf6:	d903      	bls.n	800bd00 <_vfiprintf_r+0x1cc>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0c6      	beq.n	800bc8a <_vfiprintf_r+0x156>
 800bcfc:	9105      	str	r1, [sp, #20]
 800bcfe:	e7c4      	b.n	800bc8a <_vfiprintf_r+0x156>
 800bd00:	4604      	mov	r4, r0
 800bd02:	2301      	movs	r3, #1
 800bd04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd08:	e7f0      	b.n	800bcec <_vfiprintf_r+0x1b8>
 800bd0a:	ab03      	add	r3, sp, #12
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	462a      	mov	r2, r5
 800bd10:	4630      	mov	r0, r6
 800bd12:	4b13      	ldr	r3, [pc, #76]	@ (800bd60 <_vfiprintf_r+0x22c>)
 800bd14:	a904      	add	r1, sp, #16
 800bd16:	f7fc fb83 	bl	8008420 <_printf_float>
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	1c78      	adds	r0, r7, #1
 800bd1e:	d1d6      	bne.n	800bcce <_vfiprintf_r+0x19a>
 800bd20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd22:	07d9      	lsls	r1, r3, #31
 800bd24:	d405      	bmi.n	800bd32 <_vfiprintf_r+0x1fe>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d402      	bmi.n	800bd32 <_vfiprintf_r+0x1fe>
 800bd2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd2e:	f7fd fafb 	bl	8009328 <__retarget_lock_release_recursive>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	065b      	lsls	r3, r3, #25
 800bd36:	f53f af1f 	bmi.w	800bb78 <_vfiprintf_r+0x44>
 800bd3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd3c:	e71e      	b.n	800bb7c <_vfiprintf_r+0x48>
 800bd3e:	ab03      	add	r3, sp, #12
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	462a      	mov	r2, r5
 800bd44:	4630      	mov	r0, r6
 800bd46:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <_vfiprintf_r+0x22c>)
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	f7fc fe07 	bl	800895c <_printf_i>
 800bd4e:	e7e4      	b.n	800bd1a <_vfiprintf_r+0x1e6>
 800bd50:	0800cf79 	.word	0x0800cf79
 800bd54:	0800cf7f 	.word	0x0800cf7f
 800bd58:	0800cf83 	.word	0x0800cf83
 800bd5c:	08008421 	.word	0x08008421
 800bd60:	0800bb0f 	.word	0x0800bb0f

0800bd64 <__sflush_r>:
 800bd64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	0716      	lsls	r6, r2, #28
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	d454      	bmi.n	800be1c <__sflush_r+0xb8>
 800bd72:	684b      	ldr	r3, [r1, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dc02      	bgt.n	800bd7e <__sflush_r+0x1a>
 800bd78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dd48      	ble.n	800be10 <__sflush_r+0xac>
 800bd7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd80:	2e00      	cmp	r6, #0
 800bd82:	d045      	beq.n	800be10 <__sflush_r+0xac>
 800bd84:	2300      	movs	r3, #0
 800bd86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd8a:	682f      	ldr	r7, [r5, #0]
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	602b      	str	r3, [r5, #0]
 800bd90:	d030      	beq.n	800bdf4 <__sflush_r+0x90>
 800bd92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	0759      	lsls	r1, r3, #29
 800bd98:	d505      	bpl.n	800bda6 <__sflush_r+0x42>
 800bd9a:	6863      	ldr	r3, [r4, #4]
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bda0:	b10b      	cbz	r3, 800bda6 <__sflush_r+0x42>
 800bda2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	2300      	movs	r3, #0
 800bda8:	4628      	mov	r0, r5
 800bdaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdac:	6a21      	ldr	r1, [r4, #32]
 800bdae:	47b0      	blx	r6
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	d106      	bne.n	800bdc4 <__sflush_r+0x60>
 800bdb6:	6829      	ldr	r1, [r5, #0]
 800bdb8:	291d      	cmp	r1, #29
 800bdba:	d82b      	bhi.n	800be14 <__sflush_r+0xb0>
 800bdbc:	4a28      	ldr	r2, [pc, #160]	@ (800be60 <__sflush_r+0xfc>)
 800bdbe:	410a      	asrs	r2, r1
 800bdc0:	07d6      	lsls	r6, r2, #31
 800bdc2:	d427      	bmi.n	800be14 <__sflush_r+0xb0>
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	6062      	str	r2, [r4, #4]
 800bdc8:	6922      	ldr	r2, [r4, #16]
 800bdca:	04d9      	lsls	r1, r3, #19
 800bdcc:	6022      	str	r2, [r4, #0]
 800bdce:	d504      	bpl.n	800bdda <__sflush_r+0x76>
 800bdd0:	1c42      	adds	r2, r0, #1
 800bdd2:	d101      	bne.n	800bdd8 <__sflush_r+0x74>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	b903      	cbnz	r3, 800bdda <__sflush_r+0x76>
 800bdd8:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bddc:	602f      	str	r7, [r5, #0]
 800bdde:	b1b9      	cbz	r1, 800be10 <__sflush_r+0xac>
 800bde0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bde4:	4299      	cmp	r1, r3
 800bde6:	d002      	beq.n	800bdee <__sflush_r+0x8a>
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7fe f901 	bl	8009ff0 <_free_r>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdf2:	e00d      	b.n	800be10 <__sflush_r+0xac>
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b0      	blx	r6
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	1c50      	adds	r0, r2, #1
 800bdfe:	d1c9      	bne.n	800bd94 <__sflush_r+0x30>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0c6      	beq.n	800bd94 <__sflush_r+0x30>
 800be06:	2b1d      	cmp	r3, #29
 800be08:	d001      	beq.n	800be0e <__sflush_r+0xaa>
 800be0a:	2b16      	cmp	r3, #22
 800be0c:	d11d      	bne.n	800be4a <__sflush_r+0xe6>
 800be0e:	602f      	str	r7, [r5, #0]
 800be10:	2000      	movs	r0, #0
 800be12:	e021      	b.n	800be58 <__sflush_r+0xf4>
 800be14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be18:	b21b      	sxth	r3, r3
 800be1a:	e01a      	b.n	800be52 <__sflush_r+0xee>
 800be1c:	690f      	ldr	r7, [r1, #16]
 800be1e:	2f00      	cmp	r7, #0
 800be20:	d0f6      	beq.n	800be10 <__sflush_r+0xac>
 800be22:	0793      	lsls	r3, r2, #30
 800be24:	bf18      	it	ne
 800be26:	2300      	movne	r3, #0
 800be28:	680e      	ldr	r6, [r1, #0]
 800be2a:	bf08      	it	eq
 800be2c:	694b      	ldreq	r3, [r1, #20]
 800be2e:	1bf6      	subs	r6, r6, r7
 800be30:	600f      	str	r7, [r1, #0]
 800be32:	608b      	str	r3, [r1, #8]
 800be34:	2e00      	cmp	r6, #0
 800be36:	ddeb      	ble.n	800be10 <__sflush_r+0xac>
 800be38:	4633      	mov	r3, r6
 800be3a:	463a      	mov	r2, r7
 800be3c:	4628      	mov	r0, r5
 800be3e:	6a21      	ldr	r1, [r4, #32]
 800be40:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800be44:	47e0      	blx	ip
 800be46:	2800      	cmp	r0, #0
 800be48:	dc07      	bgt.n	800be5a <__sflush_r+0xf6>
 800be4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be52:	f04f 30ff 	mov.w	r0, #4294967295
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5a:	4407      	add	r7, r0
 800be5c:	1a36      	subs	r6, r6, r0
 800be5e:	e7e9      	b.n	800be34 <__sflush_r+0xd0>
 800be60:	dfbffffe 	.word	0xdfbffffe

0800be64 <_fflush_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	690b      	ldr	r3, [r1, #16]
 800be68:	4605      	mov	r5, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	b913      	cbnz	r3, 800be74 <_fflush_r+0x10>
 800be6e:	2500      	movs	r5, #0
 800be70:	4628      	mov	r0, r5
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	b118      	cbz	r0, 800be7e <_fflush_r+0x1a>
 800be76:	6a03      	ldr	r3, [r0, #32]
 800be78:	b90b      	cbnz	r3, 800be7e <_fflush_r+0x1a>
 800be7a:	f7fd f92b 	bl	80090d4 <__sinit>
 800be7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0f3      	beq.n	800be6e <_fflush_r+0xa>
 800be86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be88:	07d0      	lsls	r0, r2, #31
 800be8a:	d404      	bmi.n	800be96 <_fflush_r+0x32>
 800be8c:	0599      	lsls	r1, r3, #22
 800be8e:	d402      	bmi.n	800be96 <_fflush_r+0x32>
 800be90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be92:	f7fd fa48 	bl	8009326 <__retarget_lock_acquire_recursive>
 800be96:	4628      	mov	r0, r5
 800be98:	4621      	mov	r1, r4
 800be9a:	f7ff ff63 	bl	800bd64 <__sflush_r>
 800be9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bea0:	4605      	mov	r5, r0
 800bea2:	07da      	lsls	r2, r3, #31
 800bea4:	d4e4      	bmi.n	800be70 <_fflush_r+0xc>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	059b      	lsls	r3, r3, #22
 800beaa:	d4e1      	bmi.n	800be70 <_fflush_r+0xc>
 800beac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beae:	f7fd fa3b 	bl	8009328 <__retarget_lock_release_recursive>
 800beb2:	e7dd      	b.n	800be70 <_fflush_r+0xc>

0800beb4 <__swbuf_r>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	460e      	mov	r6, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	4605      	mov	r5, r0
 800bebc:	b118      	cbz	r0, 800bec6 <__swbuf_r+0x12>
 800bebe:	6a03      	ldr	r3, [r0, #32]
 800bec0:	b90b      	cbnz	r3, 800bec6 <__swbuf_r+0x12>
 800bec2:	f7fd f907 	bl	80090d4 <__sinit>
 800bec6:	69a3      	ldr	r3, [r4, #24]
 800bec8:	60a3      	str	r3, [r4, #8]
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	071a      	lsls	r2, r3, #28
 800bece:	d501      	bpl.n	800bed4 <__swbuf_r+0x20>
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	b943      	cbnz	r3, 800bee6 <__swbuf_r+0x32>
 800bed4:	4621      	mov	r1, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 f82a 	bl	800bf30 <__swsetup_r>
 800bedc:	b118      	cbz	r0, 800bee6 <__swbuf_r+0x32>
 800bede:	f04f 37ff 	mov.w	r7, #4294967295
 800bee2:	4638      	mov	r0, r7
 800bee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	b2f6      	uxtb	r6, r6
 800beec:	1a98      	subs	r0, r3, r2
 800beee:	6963      	ldr	r3, [r4, #20]
 800bef0:	4637      	mov	r7, r6
 800bef2:	4283      	cmp	r3, r0
 800bef4:	dc05      	bgt.n	800bf02 <__swbuf_r+0x4e>
 800bef6:	4621      	mov	r1, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	f7ff ffb3 	bl	800be64 <_fflush_r>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d1ed      	bne.n	800bede <__swbuf_r+0x2a>
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	60a3      	str	r3, [r4, #8]
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	6022      	str	r2, [r4, #0]
 800bf0e:	701e      	strb	r6, [r3, #0]
 800bf10:	6962      	ldr	r2, [r4, #20]
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d004      	beq.n	800bf22 <__swbuf_r+0x6e>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	07db      	lsls	r3, r3, #31
 800bf1c:	d5e1      	bpl.n	800bee2 <__swbuf_r+0x2e>
 800bf1e:	2e0a      	cmp	r6, #10
 800bf20:	d1df      	bne.n	800bee2 <__swbuf_r+0x2e>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4628      	mov	r0, r5
 800bf26:	f7ff ff9d 	bl	800be64 <_fflush_r>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d0d9      	beq.n	800bee2 <__swbuf_r+0x2e>
 800bf2e:	e7d6      	b.n	800bede <__swbuf_r+0x2a>

0800bf30 <__swsetup_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4b29      	ldr	r3, [pc, #164]	@ (800bfd8 <__swsetup_r+0xa8>)
 800bf34:	4605      	mov	r5, r0
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	460c      	mov	r4, r1
 800bf3a:	b118      	cbz	r0, 800bf44 <__swsetup_r+0x14>
 800bf3c:	6a03      	ldr	r3, [r0, #32]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <__swsetup_r+0x14>
 800bf40:	f7fd f8c8 	bl	80090d4 <__sinit>
 800bf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf48:	0719      	lsls	r1, r3, #28
 800bf4a:	d422      	bmi.n	800bf92 <__swsetup_r+0x62>
 800bf4c:	06da      	lsls	r2, r3, #27
 800bf4e:	d407      	bmi.n	800bf60 <__swsetup_r+0x30>
 800bf50:	2209      	movs	r2, #9
 800bf52:	602a      	str	r2, [r5, #0]
 800bf54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf58:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	e033      	b.n	800bfc8 <__swsetup_r+0x98>
 800bf60:	0758      	lsls	r0, r3, #29
 800bf62:	d512      	bpl.n	800bf8a <__swsetup_r+0x5a>
 800bf64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf66:	b141      	cbz	r1, 800bf7a <__swsetup_r+0x4a>
 800bf68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d002      	beq.n	800bf76 <__swsetup_r+0x46>
 800bf70:	4628      	mov	r0, r5
 800bf72:	f7fe f83d 	bl	8009ff0 <_free_r>
 800bf76:	2300      	movs	r3, #0
 800bf78:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	2300      	movs	r3, #0
 800bf84:	6063      	str	r3, [r4, #4]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f043 0308 	orr.w	r3, r3, #8
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	b94b      	cbnz	r3, 800bfaa <__swsetup_r+0x7a>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfa0:	d003      	beq.n	800bfaa <__swsetup_r+0x7a>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f000 fc58 	bl	800c85a <__smakebuf_r>
 800bfaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfae:	f013 0201 	ands.w	r2, r3, #1
 800bfb2:	d00a      	beq.n	800bfca <__swsetup_r+0x9a>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	60a2      	str	r2, [r4, #8]
 800bfb8:	6962      	ldr	r2, [r4, #20]
 800bfba:	4252      	negs	r2, r2
 800bfbc:	61a2      	str	r2, [r4, #24]
 800bfbe:	6922      	ldr	r2, [r4, #16]
 800bfc0:	b942      	cbnz	r2, 800bfd4 <__swsetup_r+0xa4>
 800bfc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bfc6:	d1c5      	bne.n	800bf54 <__swsetup_r+0x24>
 800bfc8:	bd38      	pop	{r3, r4, r5, pc}
 800bfca:	0799      	lsls	r1, r3, #30
 800bfcc:	bf58      	it	pl
 800bfce:	6962      	ldrpl	r2, [r4, #20]
 800bfd0:	60a2      	str	r2, [r4, #8]
 800bfd2:	e7f4      	b.n	800bfbe <__swsetup_r+0x8e>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	e7f7      	b.n	800bfc8 <__swsetup_r+0x98>
 800bfd8:	20000034 	.word	0x20000034

0800bfdc <memmove>:
 800bfdc:	4288      	cmp	r0, r1
 800bfde:	b510      	push	{r4, lr}
 800bfe0:	eb01 0402 	add.w	r4, r1, r2
 800bfe4:	d902      	bls.n	800bfec <memmove+0x10>
 800bfe6:	4284      	cmp	r4, r0
 800bfe8:	4623      	mov	r3, r4
 800bfea:	d807      	bhi.n	800bffc <memmove+0x20>
 800bfec:	1e43      	subs	r3, r0, #1
 800bfee:	42a1      	cmp	r1, r4
 800bff0:	d008      	beq.n	800c004 <memmove+0x28>
 800bff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bffa:	e7f8      	b.n	800bfee <memmove+0x12>
 800bffc:	4601      	mov	r1, r0
 800bffe:	4402      	add	r2, r0
 800c000:	428a      	cmp	r2, r1
 800c002:	d100      	bne.n	800c006 <memmove+0x2a>
 800c004:	bd10      	pop	{r4, pc}
 800c006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c00e:	e7f7      	b.n	800c000 <memmove+0x24>

0800c010 <strncmp>:
 800c010:	b510      	push	{r4, lr}
 800c012:	b16a      	cbz	r2, 800c030 <strncmp+0x20>
 800c014:	3901      	subs	r1, #1
 800c016:	1884      	adds	r4, r0, r2
 800c018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c01c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c020:	429a      	cmp	r2, r3
 800c022:	d103      	bne.n	800c02c <strncmp+0x1c>
 800c024:	42a0      	cmp	r0, r4
 800c026:	d001      	beq.n	800c02c <strncmp+0x1c>
 800c028:	2a00      	cmp	r2, #0
 800c02a:	d1f5      	bne.n	800c018 <strncmp+0x8>
 800c02c:	1ad0      	subs	r0, r2, r3
 800c02e:	bd10      	pop	{r4, pc}
 800c030:	4610      	mov	r0, r2
 800c032:	e7fc      	b.n	800c02e <strncmp+0x1e>

0800c034 <_sbrk_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	2300      	movs	r3, #0
 800c038:	4d05      	ldr	r5, [pc, #20]	@ (800c050 <_sbrk_r+0x1c>)
 800c03a:	4604      	mov	r4, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	f7f6 fd60 	bl	8002b04 <_sbrk>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_sbrk_r+0x1a>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_sbrk_r+0x1a>
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	2000074c 	.word	0x2000074c

0800c054 <memcpy>:
 800c054:	440a      	add	r2, r1
 800c056:	4291      	cmp	r1, r2
 800c058:	f100 33ff 	add.w	r3, r0, #4294967295
 800c05c:	d100      	bne.n	800c060 <memcpy+0xc>
 800c05e:	4770      	bx	lr
 800c060:	b510      	push	{r4, lr}
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	4291      	cmp	r1, r2
 800c068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c06c:	d1f9      	bne.n	800c062 <memcpy+0xe>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <nan>:
 800c070:	2000      	movs	r0, #0
 800c072:	4901      	ldr	r1, [pc, #4]	@ (800c078 <nan+0x8>)
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	7ff80000 	.word	0x7ff80000

0800c07c <__assert_func>:
 800c07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c07e:	4614      	mov	r4, r2
 800c080:	461a      	mov	r2, r3
 800c082:	4b09      	ldr	r3, [pc, #36]	@ (800c0a8 <__assert_func+0x2c>)
 800c084:	4605      	mov	r5, r0
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68d8      	ldr	r0, [r3, #12]
 800c08a:	b954      	cbnz	r4, 800c0a2 <__assert_func+0x26>
 800c08c:	4b07      	ldr	r3, [pc, #28]	@ (800c0ac <__assert_func+0x30>)
 800c08e:	461c      	mov	r4, r3
 800c090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c094:	9100      	str	r1, [sp, #0]
 800c096:	462b      	mov	r3, r5
 800c098:	4905      	ldr	r1, [pc, #20]	@ (800c0b0 <__assert_func+0x34>)
 800c09a:	f000 fba7 	bl	800c7ec <fiprintf>
 800c09e:	f000 fc3b 	bl	800c918 <abort>
 800c0a2:	4b04      	ldr	r3, [pc, #16]	@ (800c0b4 <__assert_func+0x38>)
 800c0a4:	e7f4      	b.n	800c090 <__assert_func+0x14>
 800c0a6:	bf00      	nop
 800c0a8:	20000034 	.word	0x20000034
 800c0ac:	0800cfcd 	.word	0x0800cfcd
 800c0b0:	0800cf9f 	.word	0x0800cf9f
 800c0b4:	0800cf92 	.word	0x0800cf92

0800c0b8 <_calloc_r>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	fba1 5402 	umull	r5, r4, r1, r2
 800c0be:	b93c      	cbnz	r4, 800c0d0 <_calloc_r+0x18>
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7fe f807 	bl	800a0d4 <_malloc_r>
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	b928      	cbnz	r0, 800c0d6 <_calloc_r+0x1e>
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	220c      	movs	r2, #12
 800c0d2:	6002      	str	r2, [r0, #0]
 800c0d4:	e7f9      	b.n	800c0ca <_calloc_r+0x12>
 800c0d6:	462a      	mov	r2, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f7fd f8a6 	bl	800922a <memset>
 800c0de:	e7f5      	b.n	800c0cc <_calloc_r+0x14>

0800c0e0 <rshift>:
 800c0e0:	6903      	ldr	r3, [r0, #16]
 800c0e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0ea:	f100 0414 	add.w	r4, r0, #20
 800c0ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0f2:	dd46      	ble.n	800c182 <rshift+0xa2>
 800c0f4:	f011 011f 	ands.w	r1, r1, #31
 800c0f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c100:	d10c      	bne.n	800c11c <rshift+0x3c>
 800c102:	4629      	mov	r1, r5
 800c104:	f100 0710 	add.w	r7, r0, #16
 800c108:	42b1      	cmp	r1, r6
 800c10a:	d335      	bcc.n	800c178 <rshift+0x98>
 800c10c:	1a9b      	subs	r3, r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	1eea      	subs	r2, r5, #3
 800c112:	4296      	cmp	r6, r2
 800c114:	bf38      	it	cc
 800c116:	2300      	movcc	r3, #0
 800c118:	4423      	add	r3, r4
 800c11a:	e015      	b.n	800c148 <rshift+0x68>
 800c11c:	46a1      	mov	r9, r4
 800c11e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c122:	f1c1 0820 	rsb	r8, r1, #32
 800c126:	40cf      	lsrs	r7, r1
 800c128:	f105 0e04 	add.w	lr, r5, #4
 800c12c:	4576      	cmp	r6, lr
 800c12e:	46f4      	mov	ip, lr
 800c130:	d816      	bhi.n	800c160 <rshift+0x80>
 800c132:	1a9a      	subs	r2, r3, r2
 800c134:	0092      	lsls	r2, r2, #2
 800c136:	3a04      	subs	r2, #4
 800c138:	3501      	adds	r5, #1
 800c13a:	42ae      	cmp	r6, r5
 800c13c:	bf38      	it	cc
 800c13e:	2200      	movcc	r2, #0
 800c140:	18a3      	adds	r3, r4, r2
 800c142:	50a7      	str	r7, [r4, r2]
 800c144:	b107      	cbz	r7, 800c148 <rshift+0x68>
 800c146:	3304      	adds	r3, #4
 800c148:	42a3      	cmp	r3, r4
 800c14a:	eba3 0204 	sub.w	r2, r3, r4
 800c14e:	bf08      	it	eq
 800c150:	2300      	moveq	r3, #0
 800c152:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c156:	6102      	str	r2, [r0, #16]
 800c158:	bf08      	it	eq
 800c15a:	6143      	streq	r3, [r0, #20]
 800c15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c160:	f8dc c000 	ldr.w	ip, [ip]
 800c164:	fa0c fc08 	lsl.w	ip, ip, r8
 800c168:	ea4c 0707 	orr.w	r7, ip, r7
 800c16c:	f849 7b04 	str.w	r7, [r9], #4
 800c170:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c174:	40cf      	lsrs	r7, r1
 800c176:	e7d9      	b.n	800c12c <rshift+0x4c>
 800c178:	f851 cb04 	ldr.w	ip, [r1], #4
 800c17c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c180:	e7c2      	b.n	800c108 <rshift+0x28>
 800c182:	4623      	mov	r3, r4
 800c184:	e7e0      	b.n	800c148 <rshift+0x68>

0800c186 <__hexdig_fun>:
 800c186:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d802      	bhi.n	800c194 <__hexdig_fun+0xe>
 800c18e:	3820      	subs	r0, #32
 800c190:	b2c0      	uxtb	r0, r0
 800c192:	4770      	bx	lr
 800c194:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c198:	2b05      	cmp	r3, #5
 800c19a:	d801      	bhi.n	800c1a0 <__hexdig_fun+0x1a>
 800c19c:	3847      	subs	r0, #71	@ 0x47
 800c19e:	e7f7      	b.n	800c190 <__hexdig_fun+0xa>
 800c1a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c1a4:	2b05      	cmp	r3, #5
 800c1a6:	d801      	bhi.n	800c1ac <__hexdig_fun+0x26>
 800c1a8:	3827      	subs	r0, #39	@ 0x27
 800c1aa:	e7f1      	b.n	800c190 <__hexdig_fun+0xa>
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4770      	bx	lr

0800c1b0 <__gethex>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	468a      	mov	sl, r1
 800c1b6:	4690      	mov	r8, r2
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	9302      	str	r3, [sp, #8]
 800c1bc:	680b      	ldr	r3, [r1, #0]
 800c1be:	9001      	str	r0, [sp, #4]
 800c1c0:	1c9c      	adds	r4, r3, #2
 800c1c2:	46a1      	mov	r9, r4
 800c1c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1c8:	2830      	cmp	r0, #48	@ 0x30
 800c1ca:	d0fa      	beq.n	800c1c2 <__gethex+0x12>
 800c1cc:	eba9 0303 	sub.w	r3, r9, r3
 800c1d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1d4:	f7ff ffd7 	bl	800c186 <__hexdig_fun>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d168      	bne.n	800c2b0 <__gethex+0x100>
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4648      	mov	r0, r9
 800c1e2:	499f      	ldr	r1, [pc, #636]	@ (800c460 <__gethex+0x2b0>)
 800c1e4:	f7ff ff14 	bl	800c010 <strncmp>
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d167      	bne.n	800c2be <__gethex+0x10e>
 800c1ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1f2:	4626      	mov	r6, r4
 800c1f4:	f7ff ffc7 	bl	800c186 <__hexdig_fun>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d062      	beq.n	800c2c2 <__gethex+0x112>
 800c1fc:	4623      	mov	r3, r4
 800c1fe:	7818      	ldrb	r0, [r3, #0]
 800c200:	4699      	mov	r9, r3
 800c202:	2830      	cmp	r0, #48	@ 0x30
 800c204:	f103 0301 	add.w	r3, r3, #1
 800c208:	d0f9      	beq.n	800c1fe <__gethex+0x4e>
 800c20a:	f7ff ffbc 	bl	800c186 <__hexdig_fun>
 800c20e:	fab0 f580 	clz	r5, r0
 800c212:	f04f 0b01 	mov.w	fp, #1
 800c216:	096d      	lsrs	r5, r5, #5
 800c218:	464a      	mov	r2, r9
 800c21a:	4616      	mov	r6, r2
 800c21c:	7830      	ldrb	r0, [r6, #0]
 800c21e:	3201      	adds	r2, #1
 800c220:	f7ff ffb1 	bl	800c186 <__hexdig_fun>
 800c224:	2800      	cmp	r0, #0
 800c226:	d1f8      	bne.n	800c21a <__gethex+0x6a>
 800c228:	2201      	movs	r2, #1
 800c22a:	4630      	mov	r0, r6
 800c22c:	498c      	ldr	r1, [pc, #560]	@ (800c460 <__gethex+0x2b0>)
 800c22e:	f7ff feef 	bl	800c010 <strncmp>
 800c232:	2800      	cmp	r0, #0
 800c234:	d13f      	bne.n	800c2b6 <__gethex+0x106>
 800c236:	b944      	cbnz	r4, 800c24a <__gethex+0x9a>
 800c238:	1c74      	adds	r4, r6, #1
 800c23a:	4622      	mov	r2, r4
 800c23c:	4616      	mov	r6, r2
 800c23e:	7830      	ldrb	r0, [r6, #0]
 800c240:	3201      	adds	r2, #1
 800c242:	f7ff ffa0 	bl	800c186 <__hexdig_fun>
 800c246:	2800      	cmp	r0, #0
 800c248:	d1f8      	bne.n	800c23c <__gethex+0x8c>
 800c24a:	1ba4      	subs	r4, r4, r6
 800c24c:	00a7      	lsls	r7, r4, #2
 800c24e:	7833      	ldrb	r3, [r6, #0]
 800c250:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c254:	2b50      	cmp	r3, #80	@ 0x50
 800c256:	d13e      	bne.n	800c2d6 <__gethex+0x126>
 800c258:	7873      	ldrb	r3, [r6, #1]
 800c25a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c25c:	d033      	beq.n	800c2c6 <__gethex+0x116>
 800c25e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c260:	d034      	beq.n	800c2cc <__gethex+0x11c>
 800c262:	2400      	movs	r4, #0
 800c264:	1c71      	adds	r1, r6, #1
 800c266:	7808      	ldrb	r0, [r1, #0]
 800c268:	f7ff ff8d 	bl	800c186 <__hexdig_fun>
 800c26c:	1e43      	subs	r3, r0, #1
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b18      	cmp	r3, #24
 800c272:	d830      	bhi.n	800c2d6 <__gethex+0x126>
 800c274:	f1a0 0210 	sub.w	r2, r0, #16
 800c278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c27c:	f7ff ff83 	bl	800c186 <__hexdig_fun>
 800c280:	f100 3cff 	add.w	ip, r0, #4294967295
 800c284:	fa5f fc8c 	uxtb.w	ip, ip
 800c288:	f1bc 0f18 	cmp.w	ip, #24
 800c28c:	f04f 030a 	mov.w	r3, #10
 800c290:	d91e      	bls.n	800c2d0 <__gethex+0x120>
 800c292:	b104      	cbz	r4, 800c296 <__gethex+0xe6>
 800c294:	4252      	negs	r2, r2
 800c296:	4417      	add	r7, r2
 800c298:	f8ca 1000 	str.w	r1, [sl]
 800c29c:	b1ed      	cbz	r5, 800c2da <__gethex+0x12a>
 800c29e:	f1bb 0f00 	cmp.w	fp, #0
 800c2a2:	bf0c      	ite	eq
 800c2a4:	2506      	moveq	r5, #6
 800c2a6:	2500      	movne	r5, #0
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	b005      	add	sp, #20
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	462c      	mov	r4, r5
 800c2b4:	e7b0      	b.n	800c218 <__gethex+0x68>
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	d1c7      	bne.n	800c24a <__gethex+0x9a>
 800c2ba:	4627      	mov	r7, r4
 800c2bc:	e7c7      	b.n	800c24e <__gethex+0x9e>
 800c2be:	464e      	mov	r6, r9
 800c2c0:	462f      	mov	r7, r5
 800c2c2:	2501      	movs	r5, #1
 800c2c4:	e7c3      	b.n	800c24e <__gethex+0x9e>
 800c2c6:	2400      	movs	r4, #0
 800c2c8:	1cb1      	adds	r1, r6, #2
 800c2ca:	e7cc      	b.n	800c266 <__gethex+0xb6>
 800c2cc:	2401      	movs	r4, #1
 800c2ce:	e7fb      	b.n	800c2c8 <__gethex+0x118>
 800c2d0:	fb03 0002 	mla	r0, r3, r2, r0
 800c2d4:	e7ce      	b.n	800c274 <__gethex+0xc4>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	e7de      	b.n	800c298 <__gethex+0xe8>
 800c2da:	4629      	mov	r1, r5
 800c2dc:	eba6 0309 	sub.w	r3, r6, r9
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	2b07      	cmp	r3, #7
 800c2e4:	dc0a      	bgt.n	800c2fc <__gethex+0x14c>
 800c2e6:	9801      	ldr	r0, [sp, #4]
 800c2e8:	f7fd ff80 	bl	800a1ec <_Balloc>
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	b940      	cbnz	r0, 800c302 <__gethex+0x152>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	21e4      	movs	r1, #228	@ 0xe4
 800c2f4:	4b5b      	ldr	r3, [pc, #364]	@ (800c464 <__gethex+0x2b4>)
 800c2f6:	485c      	ldr	r0, [pc, #368]	@ (800c468 <__gethex+0x2b8>)
 800c2f8:	f7ff fec0 	bl	800c07c <__assert_func>
 800c2fc:	3101      	adds	r1, #1
 800c2fe:	105b      	asrs	r3, r3, #1
 800c300:	e7ef      	b.n	800c2e2 <__gethex+0x132>
 800c302:	2300      	movs	r3, #0
 800c304:	f100 0a14 	add.w	sl, r0, #20
 800c308:	4655      	mov	r5, sl
 800c30a:	469b      	mov	fp, r3
 800c30c:	45b1      	cmp	r9, r6
 800c30e:	d337      	bcc.n	800c380 <__gethex+0x1d0>
 800c310:	f845 bb04 	str.w	fp, [r5], #4
 800c314:	eba5 050a 	sub.w	r5, r5, sl
 800c318:	10ad      	asrs	r5, r5, #2
 800c31a:	6125      	str	r5, [r4, #16]
 800c31c:	4658      	mov	r0, fp
 800c31e:	f7fe f857 	bl	800a3d0 <__hi0bits>
 800c322:	016d      	lsls	r5, r5, #5
 800c324:	f8d8 6000 	ldr.w	r6, [r8]
 800c328:	1a2d      	subs	r5, r5, r0
 800c32a:	42b5      	cmp	r5, r6
 800c32c:	dd54      	ble.n	800c3d8 <__gethex+0x228>
 800c32e:	1bad      	subs	r5, r5, r6
 800c330:	4629      	mov	r1, r5
 800c332:	4620      	mov	r0, r4
 800c334:	f7fe fbdf 	bl	800aaf6 <__any_on>
 800c338:	4681      	mov	r9, r0
 800c33a:	b178      	cbz	r0, 800c35c <__gethex+0x1ac>
 800c33c:	f04f 0901 	mov.w	r9, #1
 800c340:	1e6b      	subs	r3, r5, #1
 800c342:	1159      	asrs	r1, r3, #5
 800c344:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c348:	f003 021f 	and.w	r2, r3, #31
 800c34c:	fa09 f202 	lsl.w	r2, r9, r2
 800c350:	420a      	tst	r2, r1
 800c352:	d003      	beq.n	800c35c <__gethex+0x1ac>
 800c354:	454b      	cmp	r3, r9
 800c356:	dc36      	bgt.n	800c3c6 <__gethex+0x216>
 800c358:	f04f 0902 	mov.w	r9, #2
 800c35c:	4629      	mov	r1, r5
 800c35e:	4620      	mov	r0, r4
 800c360:	f7ff febe 	bl	800c0e0 <rshift>
 800c364:	442f      	add	r7, r5
 800c366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c36a:	42bb      	cmp	r3, r7
 800c36c:	da42      	bge.n	800c3f4 <__gethex+0x244>
 800c36e:	4621      	mov	r1, r4
 800c370:	9801      	ldr	r0, [sp, #4]
 800c372:	f7fd ff7b 	bl	800a26c <_Bfree>
 800c376:	2300      	movs	r3, #0
 800c378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c37a:	25a3      	movs	r5, #163	@ 0xa3
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	e793      	b.n	800c2a8 <__gethex+0xf8>
 800c380:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c384:	2a2e      	cmp	r2, #46	@ 0x2e
 800c386:	d012      	beq.n	800c3ae <__gethex+0x1fe>
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d104      	bne.n	800c396 <__gethex+0x1e6>
 800c38c:	f845 bb04 	str.w	fp, [r5], #4
 800c390:	f04f 0b00 	mov.w	fp, #0
 800c394:	465b      	mov	r3, fp
 800c396:	7830      	ldrb	r0, [r6, #0]
 800c398:	9303      	str	r3, [sp, #12]
 800c39a:	f7ff fef4 	bl	800c186 <__hexdig_fun>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	f000 000f 	and.w	r0, r0, #15
 800c3a4:	4098      	lsls	r0, r3
 800c3a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	e7ae      	b.n	800c30c <__gethex+0x15c>
 800c3ae:	45b1      	cmp	r9, r6
 800c3b0:	d8ea      	bhi.n	800c388 <__gethex+0x1d8>
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	492a      	ldr	r1, [pc, #168]	@ (800c460 <__gethex+0x2b0>)
 800c3b8:	9303      	str	r3, [sp, #12]
 800c3ba:	f7ff fe29 	bl	800c010 <strncmp>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d1e1      	bne.n	800c388 <__gethex+0x1d8>
 800c3c4:	e7a2      	b.n	800c30c <__gethex+0x15c>
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	1ea9      	subs	r1, r5, #2
 800c3ca:	f7fe fb94 	bl	800aaf6 <__any_on>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0c2      	beq.n	800c358 <__gethex+0x1a8>
 800c3d2:	f04f 0903 	mov.w	r9, #3
 800c3d6:	e7c1      	b.n	800c35c <__gethex+0x1ac>
 800c3d8:	da09      	bge.n	800c3ee <__gethex+0x23e>
 800c3da:	1b75      	subs	r5, r6, r5
 800c3dc:	4621      	mov	r1, r4
 800c3de:	462a      	mov	r2, r5
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	f7fe f959 	bl	800a698 <__lshift>
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	1b7f      	subs	r7, r7, r5
 800c3ea:	f100 0a14 	add.w	sl, r0, #20
 800c3ee:	f04f 0900 	mov.w	r9, #0
 800c3f2:	e7b8      	b.n	800c366 <__gethex+0x1b6>
 800c3f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3f8:	42bd      	cmp	r5, r7
 800c3fa:	dd6f      	ble.n	800c4dc <__gethex+0x32c>
 800c3fc:	1bed      	subs	r5, r5, r7
 800c3fe:	42ae      	cmp	r6, r5
 800c400:	dc34      	bgt.n	800c46c <__gethex+0x2bc>
 800c402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c406:	2b02      	cmp	r3, #2
 800c408:	d022      	beq.n	800c450 <__gethex+0x2a0>
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d024      	beq.n	800c458 <__gethex+0x2a8>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d115      	bne.n	800c43e <__gethex+0x28e>
 800c412:	42ae      	cmp	r6, r5
 800c414:	d113      	bne.n	800c43e <__gethex+0x28e>
 800c416:	2e01      	cmp	r6, #1
 800c418:	d10b      	bne.n	800c432 <__gethex+0x282>
 800c41a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c41e:	9a02      	ldr	r2, [sp, #8]
 800c420:	2562      	movs	r5, #98	@ 0x62
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	2301      	movs	r3, #1
 800c426:	6123      	str	r3, [r4, #16]
 800c428:	f8ca 3000 	str.w	r3, [sl]
 800c42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c42e:	601c      	str	r4, [r3, #0]
 800c430:	e73a      	b.n	800c2a8 <__gethex+0xf8>
 800c432:	4620      	mov	r0, r4
 800c434:	1e71      	subs	r1, r6, #1
 800c436:	f7fe fb5e 	bl	800aaf6 <__any_on>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d1ed      	bne.n	800c41a <__gethex+0x26a>
 800c43e:	4621      	mov	r1, r4
 800c440:	9801      	ldr	r0, [sp, #4]
 800c442:	f7fd ff13 	bl	800a26c <_Bfree>
 800c446:	2300      	movs	r3, #0
 800c448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c44a:	2550      	movs	r5, #80	@ 0x50
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	e72b      	b.n	800c2a8 <__gethex+0xf8>
 800c450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f3      	bne.n	800c43e <__gethex+0x28e>
 800c456:	e7e0      	b.n	800c41a <__gethex+0x26a>
 800c458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1dd      	bne.n	800c41a <__gethex+0x26a>
 800c45e:	e7ee      	b.n	800c43e <__gethex+0x28e>
 800c460:	0800ce20 	.word	0x0800ce20
 800c464:	0800ccb3 	.word	0x0800ccb3
 800c468:	0800cfce 	.word	0x0800cfce
 800c46c:	1e6f      	subs	r7, r5, #1
 800c46e:	f1b9 0f00 	cmp.w	r9, #0
 800c472:	d130      	bne.n	800c4d6 <__gethex+0x326>
 800c474:	b127      	cbz	r7, 800c480 <__gethex+0x2d0>
 800c476:	4639      	mov	r1, r7
 800c478:	4620      	mov	r0, r4
 800c47a:	f7fe fb3c 	bl	800aaf6 <__any_on>
 800c47e:	4681      	mov	r9, r0
 800c480:	2301      	movs	r3, #1
 800c482:	4629      	mov	r1, r5
 800c484:	1b76      	subs	r6, r6, r5
 800c486:	2502      	movs	r5, #2
 800c488:	117a      	asrs	r2, r7, #5
 800c48a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c48e:	f007 071f 	and.w	r7, r7, #31
 800c492:	40bb      	lsls	r3, r7
 800c494:	4213      	tst	r3, r2
 800c496:	4620      	mov	r0, r4
 800c498:	bf18      	it	ne
 800c49a:	f049 0902 	orrne.w	r9, r9, #2
 800c49e:	f7ff fe1f 	bl	800c0e0 <rshift>
 800c4a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c4a6:	f1b9 0f00 	cmp.w	r9, #0
 800c4aa:	d047      	beq.n	800c53c <__gethex+0x38c>
 800c4ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d015      	beq.n	800c4e0 <__gethex+0x330>
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d017      	beq.n	800c4e8 <__gethex+0x338>
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d109      	bne.n	800c4d0 <__gethex+0x320>
 800c4bc:	f019 0f02 	tst.w	r9, #2
 800c4c0:	d006      	beq.n	800c4d0 <__gethex+0x320>
 800c4c2:	f8da 3000 	ldr.w	r3, [sl]
 800c4c6:	ea49 0903 	orr.w	r9, r9, r3
 800c4ca:	f019 0f01 	tst.w	r9, #1
 800c4ce:	d10e      	bne.n	800c4ee <__gethex+0x33e>
 800c4d0:	f045 0510 	orr.w	r5, r5, #16
 800c4d4:	e032      	b.n	800c53c <__gethex+0x38c>
 800c4d6:	f04f 0901 	mov.w	r9, #1
 800c4da:	e7d1      	b.n	800c480 <__gethex+0x2d0>
 800c4dc:	2501      	movs	r5, #1
 800c4de:	e7e2      	b.n	800c4a6 <__gethex+0x2f6>
 800c4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4e2:	f1c3 0301 	rsb	r3, r3, #1
 800c4e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0f0      	beq.n	800c4d0 <__gethex+0x320>
 800c4ee:	f04f 0c00 	mov.w	ip, #0
 800c4f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4f6:	f104 0314 	add.w	r3, r4, #20
 800c4fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c502:	4618      	mov	r0, r3
 800c504:	f853 2b04 	ldr.w	r2, [r3], #4
 800c508:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c50c:	d01b      	beq.n	800c546 <__gethex+0x396>
 800c50e:	3201      	adds	r2, #1
 800c510:	6002      	str	r2, [r0, #0]
 800c512:	2d02      	cmp	r5, #2
 800c514:	f104 0314 	add.w	r3, r4, #20
 800c518:	d13c      	bne.n	800c594 <__gethex+0x3e4>
 800c51a:	f8d8 2000 	ldr.w	r2, [r8]
 800c51e:	3a01      	subs	r2, #1
 800c520:	42b2      	cmp	r2, r6
 800c522:	d109      	bne.n	800c538 <__gethex+0x388>
 800c524:	2201      	movs	r2, #1
 800c526:	1171      	asrs	r1, r6, #5
 800c528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c52c:	f006 061f 	and.w	r6, r6, #31
 800c530:	fa02 f606 	lsl.w	r6, r2, r6
 800c534:	421e      	tst	r6, r3
 800c536:	d13a      	bne.n	800c5ae <__gethex+0x3fe>
 800c538:	f045 0520 	orr.w	r5, r5, #32
 800c53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c53e:	601c      	str	r4, [r3, #0]
 800c540:	9b02      	ldr	r3, [sp, #8]
 800c542:	601f      	str	r7, [r3, #0]
 800c544:	e6b0      	b.n	800c2a8 <__gethex+0xf8>
 800c546:	4299      	cmp	r1, r3
 800c548:	f843 cc04 	str.w	ip, [r3, #-4]
 800c54c:	d8d9      	bhi.n	800c502 <__gethex+0x352>
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	459b      	cmp	fp, r3
 800c552:	db17      	blt.n	800c584 <__gethex+0x3d4>
 800c554:	6861      	ldr	r1, [r4, #4]
 800c556:	9801      	ldr	r0, [sp, #4]
 800c558:	3101      	adds	r1, #1
 800c55a:	f7fd fe47 	bl	800a1ec <_Balloc>
 800c55e:	4681      	mov	r9, r0
 800c560:	b918      	cbnz	r0, 800c56a <__gethex+0x3ba>
 800c562:	4602      	mov	r2, r0
 800c564:	2184      	movs	r1, #132	@ 0x84
 800c566:	4b19      	ldr	r3, [pc, #100]	@ (800c5cc <__gethex+0x41c>)
 800c568:	e6c5      	b.n	800c2f6 <__gethex+0x146>
 800c56a:	6922      	ldr	r2, [r4, #16]
 800c56c:	f104 010c 	add.w	r1, r4, #12
 800c570:	3202      	adds	r2, #2
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	300c      	adds	r0, #12
 800c576:	f7ff fd6d 	bl	800c054 <memcpy>
 800c57a:	4621      	mov	r1, r4
 800c57c:	9801      	ldr	r0, [sp, #4]
 800c57e:	f7fd fe75 	bl	800a26c <_Bfree>
 800c582:	464c      	mov	r4, r9
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	6122      	str	r2, [r4, #16]
 800c58a:	2201      	movs	r2, #1
 800c58c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c590:	615a      	str	r2, [r3, #20]
 800c592:	e7be      	b.n	800c512 <__gethex+0x362>
 800c594:	6922      	ldr	r2, [r4, #16]
 800c596:	455a      	cmp	r2, fp
 800c598:	dd0b      	ble.n	800c5b2 <__gethex+0x402>
 800c59a:	2101      	movs	r1, #1
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7ff fd9f 	bl	800c0e0 <rshift>
 800c5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5a6:	3701      	adds	r7, #1
 800c5a8:	42bb      	cmp	r3, r7
 800c5aa:	f6ff aee0 	blt.w	800c36e <__gethex+0x1be>
 800c5ae:	2501      	movs	r5, #1
 800c5b0:	e7c2      	b.n	800c538 <__gethex+0x388>
 800c5b2:	f016 061f 	ands.w	r6, r6, #31
 800c5b6:	d0fa      	beq.n	800c5ae <__gethex+0x3fe>
 800c5b8:	4453      	add	r3, sl
 800c5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5be:	f7fd ff07 	bl	800a3d0 <__hi0bits>
 800c5c2:	f1c6 0620 	rsb	r6, r6, #32
 800c5c6:	42b0      	cmp	r0, r6
 800c5c8:	dbe7      	blt.n	800c59a <__gethex+0x3ea>
 800c5ca:	e7f0      	b.n	800c5ae <__gethex+0x3fe>
 800c5cc:	0800ccb3 	.word	0x0800ccb3

0800c5d0 <L_shift>:
 800c5d0:	f1c2 0208 	rsb	r2, r2, #8
 800c5d4:	0092      	lsls	r2, r2, #2
 800c5d6:	b570      	push	{r4, r5, r6, lr}
 800c5d8:	f1c2 0620 	rsb	r6, r2, #32
 800c5dc:	6843      	ldr	r3, [r0, #4]
 800c5de:	6804      	ldr	r4, [r0, #0]
 800c5e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c5e4:	432c      	orrs	r4, r5
 800c5e6:	40d3      	lsrs	r3, r2
 800c5e8:	6004      	str	r4, [r0, #0]
 800c5ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ee:	4288      	cmp	r0, r1
 800c5f0:	d3f4      	bcc.n	800c5dc <L_shift+0xc>
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}

0800c5f4 <__match>:
 800c5f4:	b530      	push	{r4, r5, lr}
 800c5f6:	6803      	ldr	r3, [r0, #0]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fe:	b914      	cbnz	r4, 800c606 <__match+0x12>
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	2001      	movs	r0, #1
 800c604:	bd30      	pop	{r4, r5, pc}
 800c606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c60e:	2d19      	cmp	r5, #25
 800c610:	bf98      	it	ls
 800c612:	3220      	addls	r2, #32
 800c614:	42a2      	cmp	r2, r4
 800c616:	d0f0      	beq.n	800c5fa <__match+0x6>
 800c618:	2000      	movs	r0, #0
 800c61a:	e7f3      	b.n	800c604 <__match+0x10>

0800c61c <__hexnan>:
 800c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c620:	2500      	movs	r5, #0
 800c622:	680b      	ldr	r3, [r1, #0]
 800c624:	4682      	mov	sl, r0
 800c626:	115e      	asrs	r6, r3, #5
 800c628:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c62c:	f013 031f 	ands.w	r3, r3, #31
 800c630:	bf18      	it	ne
 800c632:	3604      	addne	r6, #4
 800c634:	1f37      	subs	r7, r6, #4
 800c636:	4690      	mov	r8, r2
 800c638:	46b9      	mov	r9, r7
 800c63a:	463c      	mov	r4, r7
 800c63c:	46ab      	mov	fp, r5
 800c63e:	b087      	sub	sp, #28
 800c640:	6801      	ldr	r1, [r0, #0]
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	f846 5c04 	str.w	r5, [r6, #-4]
 800c648:	9502      	str	r5, [sp, #8]
 800c64a:	784a      	ldrb	r2, [r1, #1]
 800c64c:	1c4b      	adds	r3, r1, #1
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	b342      	cbz	r2, 800c6a4 <__hexnan+0x88>
 800c652:	4610      	mov	r0, r2
 800c654:	9105      	str	r1, [sp, #20]
 800c656:	9204      	str	r2, [sp, #16]
 800c658:	f7ff fd95 	bl	800c186 <__hexdig_fun>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d151      	bne.n	800c704 <__hexnan+0xe8>
 800c660:	9a04      	ldr	r2, [sp, #16]
 800c662:	9905      	ldr	r1, [sp, #20]
 800c664:	2a20      	cmp	r2, #32
 800c666:	d818      	bhi.n	800c69a <__hexnan+0x7e>
 800c668:	9b02      	ldr	r3, [sp, #8]
 800c66a:	459b      	cmp	fp, r3
 800c66c:	dd13      	ble.n	800c696 <__hexnan+0x7a>
 800c66e:	454c      	cmp	r4, r9
 800c670:	d206      	bcs.n	800c680 <__hexnan+0x64>
 800c672:	2d07      	cmp	r5, #7
 800c674:	dc04      	bgt.n	800c680 <__hexnan+0x64>
 800c676:	462a      	mov	r2, r5
 800c678:	4649      	mov	r1, r9
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7ff ffa8 	bl	800c5d0 <L_shift>
 800c680:	4544      	cmp	r4, r8
 800c682:	d952      	bls.n	800c72a <__hexnan+0x10e>
 800c684:	2300      	movs	r3, #0
 800c686:	f1a4 0904 	sub.w	r9, r4, #4
 800c68a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c68e:	461d      	mov	r5, r3
 800c690:	464c      	mov	r4, r9
 800c692:	f8cd b008 	str.w	fp, [sp, #8]
 800c696:	9903      	ldr	r1, [sp, #12]
 800c698:	e7d7      	b.n	800c64a <__hexnan+0x2e>
 800c69a:	2a29      	cmp	r2, #41	@ 0x29
 800c69c:	d157      	bne.n	800c74e <__hexnan+0x132>
 800c69e:	3102      	adds	r1, #2
 800c6a0:	f8ca 1000 	str.w	r1, [sl]
 800c6a4:	f1bb 0f00 	cmp.w	fp, #0
 800c6a8:	d051      	beq.n	800c74e <__hexnan+0x132>
 800c6aa:	454c      	cmp	r4, r9
 800c6ac:	d206      	bcs.n	800c6bc <__hexnan+0xa0>
 800c6ae:	2d07      	cmp	r5, #7
 800c6b0:	dc04      	bgt.n	800c6bc <__hexnan+0xa0>
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7ff ff8a 	bl	800c5d0 <L_shift>
 800c6bc:	4544      	cmp	r4, r8
 800c6be:	d936      	bls.n	800c72e <__hexnan+0x112>
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	f1a8 0204 	sub.w	r2, r8, #4
 800c6c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6ca:	429f      	cmp	r7, r3
 800c6cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6d0:	d2f9      	bcs.n	800c6c6 <__hexnan+0xaa>
 800c6d2:	1b3b      	subs	r3, r7, r4
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	3304      	adds	r3, #4
 800c6da:	3401      	adds	r4, #1
 800c6dc:	3e03      	subs	r6, #3
 800c6de:	42b4      	cmp	r4, r6
 800c6e0:	bf88      	it	hi
 800c6e2:	2304      	movhi	r3, #4
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4443      	add	r3, r8
 800c6e8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ec:	429f      	cmp	r7, r3
 800c6ee:	d2fb      	bcs.n	800c6e8 <__hexnan+0xcc>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	b91b      	cbnz	r3, 800c6fc <__hexnan+0xe0>
 800c6f4:	4547      	cmp	r7, r8
 800c6f6:	d128      	bne.n	800c74a <__hexnan+0x12e>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	2005      	movs	r0, #5
 800c6fe:	b007      	add	sp, #28
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	3501      	adds	r5, #1
 800c706:	2d08      	cmp	r5, #8
 800c708:	f10b 0b01 	add.w	fp, fp, #1
 800c70c:	dd06      	ble.n	800c71c <__hexnan+0x100>
 800c70e:	4544      	cmp	r4, r8
 800c710:	d9c1      	bls.n	800c696 <__hexnan+0x7a>
 800c712:	2300      	movs	r3, #0
 800c714:	2501      	movs	r5, #1
 800c716:	f844 3c04 	str.w	r3, [r4, #-4]
 800c71a:	3c04      	subs	r4, #4
 800c71c:	6822      	ldr	r2, [r4, #0]
 800c71e:	f000 000f 	and.w	r0, r0, #15
 800c722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c726:	6020      	str	r0, [r4, #0]
 800c728:	e7b5      	b.n	800c696 <__hexnan+0x7a>
 800c72a:	2508      	movs	r5, #8
 800c72c:	e7b3      	b.n	800c696 <__hexnan+0x7a>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0dd      	beq.n	800c6f0 <__hexnan+0xd4>
 800c734:	f04f 32ff 	mov.w	r2, #4294967295
 800c738:	f1c3 0320 	rsb	r3, r3, #32
 800c73c:	40da      	lsrs	r2, r3
 800c73e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c742:	4013      	ands	r3, r2
 800c744:	f846 3c04 	str.w	r3, [r6, #-4]
 800c748:	e7d2      	b.n	800c6f0 <__hexnan+0xd4>
 800c74a:	3f04      	subs	r7, #4
 800c74c:	e7d0      	b.n	800c6f0 <__hexnan+0xd4>
 800c74e:	2004      	movs	r0, #4
 800c750:	e7d5      	b.n	800c6fe <__hexnan+0xe2>

0800c752 <__ascii_mbtowc>:
 800c752:	b082      	sub	sp, #8
 800c754:	b901      	cbnz	r1, 800c758 <__ascii_mbtowc+0x6>
 800c756:	a901      	add	r1, sp, #4
 800c758:	b142      	cbz	r2, 800c76c <__ascii_mbtowc+0x1a>
 800c75a:	b14b      	cbz	r3, 800c770 <__ascii_mbtowc+0x1e>
 800c75c:	7813      	ldrb	r3, [r2, #0]
 800c75e:	600b      	str	r3, [r1, #0]
 800c760:	7812      	ldrb	r2, [r2, #0]
 800c762:	1e10      	subs	r0, r2, #0
 800c764:	bf18      	it	ne
 800c766:	2001      	movne	r0, #1
 800c768:	b002      	add	sp, #8
 800c76a:	4770      	bx	lr
 800c76c:	4610      	mov	r0, r2
 800c76e:	e7fb      	b.n	800c768 <__ascii_mbtowc+0x16>
 800c770:	f06f 0001 	mvn.w	r0, #1
 800c774:	e7f8      	b.n	800c768 <__ascii_mbtowc+0x16>

0800c776 <_realloc_r>:
 800c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	4680      	mov	r8, r0
 800c77c:	4615      	mov	r5, r2
 800c77e:	460c      	mov	r4, r1
 800c780:	b921      	cbnz	r1, 800c78c <_realloc_r+0x16>
 800c782:	4611      	mov	r1, r2
 800c784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c788:	f7fd bca4 	b.w	800a0d4 <_malloc_r>
 800c78c:	b92a      	cbnz	r2, 800c79a <_realloc_r+0x24>
 800c78e:	f7fd fc2f 	bl	8009ff0 <_free_r>
 800c792:	2400      	movs	r4, #0
 800c794:	4620      	mov	r0, r4
 800c796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79a:	f000 f8c4 	bl	800c926 <_malloc_usable_size_r>
 800c79e:	4285      	cmp	r5, r0
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	d802      	bhi.n	800c7aa <_realloc_r+0x34>
 800c7a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7a8:	d8f4      	bhi.n	800c794 <_realloc_r+0x1e>
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	f7fd fc91 	bl	800a0d4 <_malloc_r>
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d0ec      	beq.n	800c792 <_realloc_r+0x1c>
 800c7b8:	42b5      	cmp	r5, r6
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4621      	mov	r1, r4
 800c7be:	bf28      	it	cs
 800c7c0:	4632      	movcs	r2, r6
 800c7c2:	f7ff fc47 	bl	800c054 <memcpy>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	f7fd fc11 	bl	8009ff0 <_free_r>
 800c7ce:	463c      	mov	r4, r7
 800c7d0:	e7e0      	b.n	800c794 <_realloc_r+0x1e>

0800c7d2 <__ascii_wctomb>:
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	b141      	cbz	r1, 800c7ea <__ascii_wctomb+0x18>
 800c7d8:	2aff      	cmp	r2, #255	@ 0xff
 800c7da:	d904      	bls.n	800c7e6 <__ascii_wctomb+0x14>
 800c7dc:	228a      	movs	r2, #138	@ 0x8a
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	4770      	bx	lr
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	700a      	strb	r2, [r1, #0]
 800c7ea:	4770      	bx	lr

0800c7ec <fiprintf>:
 800c7ec:	b40e      	push	{r1, r2, r3}
 800c7ee:	b503      	push	{r0, r1, lr}
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	4805      	ldr	r0, [pc, #20]	@ (800c80c <fiprintf+0x20>)
 800c7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fa:	6800      	ldr	r0, [r0, #0]
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	f7ff f999 	bl	800bb34 <_vfiprintf_r>
 800c802:	b002      	add	sp, #8
 800c804:	f85d eb04 	ldr.w	lr, [sp], #4
 800c808:	b003      	add	sp, #12
 800c80a:	4770      	bx	lr
 800c80c:	20000034 	.word	0x20000034

0800c810 <__swhatbuf_r>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	460c      	mov	r4, r1
 800c814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c818:	4615      	mov	r5, r2
 800c81a:	2900      	cmp	r1, #0
 800c81c:	461e      	mov	r6, r3
 800c81e:	b096      	sub	sp, #88	@ 0x58
 800c820:	da0c      	bge.n	800c83c <__swhatbuf_r+0x2c>
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	2100      	movs	r1, #0
 800c826:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c82a:	bf14      	ite	ne
 800c82c:	2340      	movne	r3, #64	@ 0x40
 800c82e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c832:	2000      	movs	r0, #0
 800c834:	6031      	str	r1, [r6, #0]
 800c836:	602b      	str	r3, [r5, #0]
 800c838:	b016      	add	sp, #88	@ 0x58
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	466a      	mov	r2, sp
 800c83e:	f000 f849 	bl	800c8d4 <_fstat_r>
 800c842:	2800      	cmp	r0, #0
 800c844:	dbed      	blt.n	800c822 <__swhatbuf_r+0x12>
 800c846:	9901      	ldr	r1, [sp, #4]
 800c848:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c84c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c850:	4259      	negs	r1, r3
 800c852:	4159      	adcs	r1, r3
 800c854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c858:	e7eb      	b.n	800c832 <__swhatbuf_r+0x22>

0800c85a <__smakebuf_r>:
 800c85a:	898b      	ldrh	r3, [r1, #12]
 800c85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c85e:	079d      	lsls	r5, r3, #30
 800c860:	4606      	mov	r6, r0
 800c862:	460c      	mov	r4, r1
 800c864:	d507      	bpl.n	800c876 <__smakebuf_r+0x1c>
 800c866:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	6123      	str	r3, [r4, #16]
 800c86e:	2301      	movs	r3, #1
 800c870:	6163      	str	r3, [r4, #20]
 800c872:	b003      	add	sp, #12
 800c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c876:	466a      	mov	r2, sp
 800c878:	ab01      	add	r3, sp, #4
 800c87a:	f7ff ffc9 	bl	800c810 <__swhatbuf_r>
 800c87e:	9f00      	ldr	r7, [sp, #0]
 800c880:	4605      	mov	r5, r0
 800c882:	4639      	mov	r1, r7
 800c884:	4630      	mov	r0, r6
 800c886:	f7fd fc25 	bl	800a0d4 <_malloc_r>
 800c88a:	b948      	cbnz	r0, 800c8a0 <__smakebuf_r+0x46>
 800c88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c890:	059a      	lsls	r2, r3, #22
 800c892:	d4ee      	bmi.n	800c872 <__smakebuf_r+0x18>
 800c894:	f023 0303 	bic.w	r3, r3, #3
 800c898:	f043 0302 	orr.w	r3, r3, #2
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7e2      	b.n	800c866 <__smakebuf_r+0xc>
 800c8a0:	89a3      	ldrh	r3, [r4, #12]
 800c8a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8aa:	81a3      	strh	r3, [r4, #12]
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	6020      	str	r0, [r4, #0]
 800c8b0:	b15b      	cbz	r3, 800c8ca <__smakebuf_r+0x70>
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b8:	f000 f81e 	bl	800c8f8 <_isatty_r>
 800c8bc:	b128      	cbz	r0, 800c8ca <__smakebuf_r+0x70>
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
 800c8c4:	f043 0301 	orr.w	r3, r3, #1
 800c8c8:	81a3      	strh	r3, [r4, #12]
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	431d      	orrs	r5, r3
 800c8ce:	81a5      	strh	r5, [r4, #12]
 800c8d0:	e7cf      	b.n	800c872 <__smakebuf_r+0x18>
	...

0800c8d4 <_fstat_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4d06      	ldr	r5, [pc, #24]	@ (800c8f4 <_fstat_r+0x20>)
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	4611      	mov	r1, r2
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	f7f6 f8e9 	bl	8002ab8 <_fstat>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	d102      	bne.n	800c8f0 <_fstat_r+0x1c>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	b103      	cbz	r3, 800c8f0 <_fstat_r+0x1c>
 800c8ee:	6023      	str	r3, [r4, #0]
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	bf00      	nop
 800c8f4:	2000074c 	.word	0x2000074c

0800c8f8 <_isatty_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4d05      	ldr	r5, [pc, #20]	@ (800c914 <_isatty_r+0x1c>)
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f6 f8e7 	bl	8002ad6 <_isatty>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_isatty_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_isatty_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	2000074c 	.word	0x2000074c

0800c918 <abort>:
 800c918:	2006      	movs	r0, #6
 800c91a:	b508      	push	{r3, lr}
 800c91c:	f000 f834 	bl	800c988 <raise>
 800c920:	2001      	movs	r0, #1
 800c922:	f7f6 f87a 	bl	8002a1a <_exit>

0800c926 <_malloc_usable_size_r>:
 800c926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92a:	1f18      	subs	r0, r3, #4
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfbc      	itt	lt
 800c930:	580b      	ldrlt	r3, [r1, r0]
 800c932:	18c0      	addlt	r0, r0, r3
 800c934:	4770      	bx	lr

0800c936 <_raise_r>:
 800c936:	291f      	cmp	r1, #31
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4605      	mov	r5, r0
 800c93c:	460c      	mov	r4, r1
 800c93e:	d904      	bls.n	800c94a <_raise_r+0x14>
 800c940:	2316      	movs	r3, #22
 800c942:	6003      	str	r3, [r0, #0]
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	bd38      	pop	{r3, r4, r5, pc}
 800c94a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c94c:	b112      	cbz	r2, 800c954 <_raise_r+0x1e>
 800c94e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c952:	b94b      	cbnz	r3, 800c968 <_raise_r+0x32>
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f831 	bl	800c9bc <_getpid_r>
 800c95a:	4622      	mov	r2, r4
 800c95c:	4601      	mov	r1, r0
 800c95e:	4628      	mov	r0, r5
 800c960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c964:	f000 b818 	b.w	800c998 <_kill_r>
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d00a      	beq.n	800c982 <_raise_r+0x4c>
 800c96c:	1c59      	adds	r1, r3, #1
 800c96e:	d103      	bne.n	800c978 <_raise_r+0x42>
 800c970:	2316      	movs	r3, #22
 800c972:	6003      	str	r3, [r0, #0]
 800c974:	2001      	movs	r0, #1
 800c976:	e7e7      	b.n	800c948 <_raise_r+0x12>
 800c978:	2100      	movs	r1, #0
 800c97a:	4620      	mov	r0, r4
 800c97c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c980:	4798      	blx	r3
 800c982:	2000      	movs	r0, #0
 800c984:	e7e0      	b.n	800c948 <_raise_r+0x12>
	...

0800c988 <raise>:
 800c988:	4b02      	ldr	r3, [pc, #8]	@ (800c994 <raise+0xc>)
 800c98a:	4601      	mov	r1, r0
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f7ff bfd2 	b.w	800c936 <_raise_r>
 800c992:	bf00      	nop
 800c994:	20000034 	.word	0x20000034

0800c998 <_kill_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	2300      	movs	r3, #0
 800c99c:	4d06      	ldr	r5, [pc, #24]	@ (800c9b8 <_kill_r+0x20>)
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f7f6 f828 	bl	80029fa <_kill>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d102      	bne.n	800c9b4 <_kill_r+0x1c>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b103      	cbz	r3, 800c9b4 <_kill_r+0x1c>
 800c9b2:	6023      	str	r3, [r4, #0]
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	2000074c 	.word	0x2000074c

0800c9bc <_getpid_r>:
 800c9bc:	f7f6 b816 	b.w	80029ec <_getpid>

0800c9c0 <_init>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr

0800c9cc <_fini>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr

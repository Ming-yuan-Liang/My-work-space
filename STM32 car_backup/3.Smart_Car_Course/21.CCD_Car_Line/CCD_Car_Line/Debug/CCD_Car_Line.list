
CCD_Car_Line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080084cc  080084cc  000094cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086dc  080086dc  0000a028  2**0
                  CONTENTS
  4 .ARM          00000000  080086dc  080086dc  0000a028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086dc  080086dc  0000a028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086dc  080086dc  000096dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080086e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000028  0800870c  0000a028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800870c  0000a7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc3b  00000000  00000000  0000a051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b1  00000000  00000000  00019c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  0001e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001daed  00000000  00000000  0001eed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c816  00000000  00000000  0003c9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a063f  00000000  00000000  000591d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  000f9858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000fdf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000028 	.word	0x20000028
 8000200:	00000000 	.word	0x00000000
 8000204:	080084b4 	.word	0x080084b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000002c 	.word	0x2000002c
 8000220:	080084b4 	.word	0x080084b4

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	@ 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_d2f>:
 800059c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005a4:	bf24      	itt	cs
 80005a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005ae:	d90d      	bls.n	80005cc <__aeabi_d2f+0x30>
 80005b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005c4:	bf08      	it	eq
 80005c6:	f020 0001 	biceq.w	r0, r0, #1
 80005ca:	4770      	bx	lr
 80005cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005d0:	d121      	bne.n	8000616 <__aeabi_d2f+0x7a>
 80005d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005d6:	bfbc      	itt	lt
 80005d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005dc:	4770      	bxlt	lr
 80005de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005e6:	f1c2 0218 	rsb	r2, r2, #24
 80005ea:	f1c2 0c20 	rsb	ip, r2, #32
 80005ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	bf18      	it	ne
 80005f8:	f040 0001 	orrne.w	r0, r0, #1
 80005fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000604:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000608:	ea40 000c 	orr.w	r0, r0, ip
 800060c:	fa23 f302 	lsr.w	r3, r3, r2
 8000610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000614:	e7cc      	b.n	80005b0 <__aeabi_d2f+0x14>
 8000616:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800061a:	d107      	bne.n	800062c <__aeabi_d2f+0x90>
 800061c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000620:	bf1e      	ittt	ne
 8000622:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000626:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800062a:	4770      	bxne	lr
 800062c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__aeabi_frsub>:
 800063c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000640:	e002      	b.n	8000648 <__addsf3>
 8000642:	bf00      	nop

08000644 <__aeabi_fsub>:
 8000644:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000648 <__addsf3>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	bf1f      	itttt	ne
 800064c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000650:	ea92 0f03 	teqne	r2, r3
 8000654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065c:	d06a      	beq.n	8000734 <__addsf3+0xec>
 800065e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000666:	bfc1      	itttt	gt
 8000668:	18d2      	addgt	r2, r2, r3
 800066a:	4041      	eorgt	r1, r0
 800066c:	4048      	eorgt	r0, r1
 800066e:	4041      	eorgt	r1, r0
 8000670:	bfb8      	it	lt
 8000672:	425b      	neglt	r3, r3
 8000674:	2b19      	cmp	r3, #25
 8000676:	bf88      	it	hi
 8000678:	4770      	bxhi	lr
 800067a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800067e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000682:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4240      	negne	r0, r0
 800068a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800068e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000692:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4249      	negne	r1, r1
 800069a:	ea92 0f03 	teq	r2, r3
 800069e:	d03f      	beq.n	8000720 <__addsf3+0xd8>
 80006a0:	f1a2 0201 	sub.w	r2, r2, #1
 80006a4:	fa41 fc03 	asr.w	ip, r1, r3
 80006a8:	eb10 000c 	adds.w	r0, r0, ip
 80006ac:	f1c3 0320 	rsb	r3, r3, #32
 80006b0:	fa01 f103 	lsl.w	r1, r1, r3
 80006b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006b8:	d502      	bpl.n	80006c0 <__addsf3+0x78>
 80006ba:	4249      	negs	r1, r1
 80006bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006c4:	d313      	bcc.n	80006ee <__addsf3+0xa6>
 80006c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ca:	d306      	bcc.n	80006da <__addsf3+0x92>
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80006d2:	f102 0201 	add.w	r2, r2, #1
 80006d6:	2afe      	cmp	r2, #254	@ 0xfe
 80006d8:	d251      	bcs.n	800077e <__addsf3+0x136>
 80006da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e2:	bf08      	it	eq
 80006e4:	f020 0001 	biceq.w	r0, r0, #1
 80006e8:	ea40 0003 	orr.w	r0, r0, r3
 80006ec:	4770      	bx	lr
 80006ee:	0049      	lsls	r1, r1, #1
 80006f0:	eb40 0000 	adc.w	r0, r0, r0
 80006f4:	3a01      	subs	r2, #1
 80006f6:	bf28      	it	cs
 80006f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006fc:	d2ed      	bcs.n	80006da <__addsf3+0x92>
 80006fe:	fab0 fc80 	clz	ip, r0
 8000702:	f1ac 0c08 	sub.w	ip, ip, #8
 8000706:	ebb2 020c 	subs.w	r2, r2, ip
 800070a:	fa00 f00c 	lsl.w	r0, r0, ip
 800070e:	bfaa      	itet	ge
 8000710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000714:	4252      	neglt	r2, r2
 8000716:	4318      	orrge	r0, r3
 8000718:	bfbc      	itt	lt
 800071a:	40d0      	lsrlt	r0, r2
 800071c:	4318      	orrlt	r0, r3
 800071e:	4770      	bx	lr
 8000720:	f092 0f00 	teq	r2, #0
 8000724:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000728:	bf06      	itte	eq
 800072a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800072e:	3201      	addeq	r2, #1
 8000730:	3b01      	subne	r3, #1
 8000732:	e7b5      	b.n	80006a0 <__addsf3+0x58>
 8000734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800073c:	bf18      	it	ne
 800073e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000742:	d021      	beq.n	8000788 <__addsf3+0x140>
 8000744:	ea92 0f03 	teq	r2, r3
 8000748:	d004      	beq.n	8000754 <__addsf3+0x10c>
 800074a:	f092 0f00 	teq	r2, #0
 800074e:	bf08      	it	eq
 8000750:	4608      	moveq	r0, r1
 8000752:	4770      	bx	lr
 8000754:	ea90 0f01 	teq	r0, r1
 8000758:	bf1c      	itt	ne
 800075a:	2000      	movne	r0, #0
 800075c:	4770      	bxne	lr
 800075e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000762:	d104      	bne.n	800076e <__addsf3+0x126>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	bf28      	it	cs
 8000768:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800076c:	4770      	bx	lr
 800076e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000772:	bf3c      	itt	cc
 8000774:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000778:	4770      	bxcc	lr
 800077a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800077e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000786:	4770      	bx	lr
 8000788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800078c:	bf16      	itet	ne
 800078e:	4608      	movne	r0, r1
 8000790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000794:	4601      	movne	r1, r0
 8000796:	0242      	lsls	r2, r0, #9
 8000798:	bf06      	itte	eq
 800079a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800079e:	ea90 0f01 	teqeq	r0, r1
 80007a2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_ui2f>:
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	e004      	b.n	80007b8 <__aeabi_i2f+0x8>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2f>:
 80007b0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007b4:	bf48      	it	mi
 80007b6:	4240      	negmi	r0, r0
 80007b8:	ea5f 0c00 	movs.w	ip, r0
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007c4:	4601      	mov	r1, r0
 80007c6:	f04f 0000 	mov.w	r0, #0
 80007ca:	e01c      	b.n	8000806 <__aeabi_l2f+0x2a>

080007cc <__aeabi_ul2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e00a      	b.n	80007f0 <__aeabi_l2f+0x14>
 80007da:	bf00      	nop

080007dc <__aeabi_l2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__aeabi_l2f+0x14>
 80007ea:	4240      	negs	r0, r0
 80007ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f0:	ea5f 0c01 	movs.w	ip, r1
 80007f4:	bf02      	ittt	eq
 80007f6:	4684      	moveq	ip, r0
 80007f8:	4601      	moveq	r1, r0
 80007fa:	2000      	moveq	r0, #0
 80007fc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000800:	bf08      	it	eq
 8000802:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000806:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800080a:	fabc f28c 	clz	r2, ip
 800080e:	3a08      	subs	r2, #8
 8000810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000814:	db10      	blt.n	8000838 <__aeabi_l2f+0x5c>
 8000816:	fa01 fc02 	lsl.w	ip, r1, r2
 800081a:	4463      	add	r3, ip
 800081c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000820:	f1c2 0220 	rsb	r2, r2, #32
 8000824:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000828:	fa20 f202 	lsr.w	r2, r0, r2
 800082c:	eb43 0002 	adc.w	r0, r3, r2
 8000830:	bf08      	it	eq
 8000832:	f020 0001 	biceq.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	f102 0220 	add.w	r2, r2, #32
 800083c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000840:	f1c2 0220 	rsb	r2, r2, #32
 8000844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000848:	fa21 f202 	lsr.w	r2, r1, r2
 800084c:	eb43 0002 	adc.w	r0, r3, r2
 8000850:	bf08      	it	eq
 8000852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000856:	4770      	bx	lr

08000858 <__aeabi_fmul>:
 8000858:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d06f      	beq.n	8000950 <__aeabi_fmul+0xf8>
 8000870:	441a      	add	r2, r3
 8000872:	ea80 0c01 	eor.w	ip, r0, r1
 8000876:	0240      	lsls	r0, r0, #9
 8000878:	bf18      	it	ne
 800087a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800087e:	d01e      	beq.n	80008be <__aeabi_fmul+0x66>
 8000880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000884:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000888:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800088c:	fba0 3101 	umull	r3, r1, r0, r1
 8000890:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000894:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000898:	bf3e      	ittt	cc
 800089a:	0049      	lslcc	r1, r1, #1
 800089c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008a0:	005b      	lslcc	r3, r3, #1
 80008a2:	ea40 0001 	orr.w	r0, r0, r1
 80008a6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008aa:	2afd      	cmp	r2, #253	@ 0xfd
 80008ac:	d81d      	bhi.n	80008ea <__aeabi_fmul+0x92>
 80008ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008b6:	bf08      	it	eq
 80008b8:	f020 0001 	biceq.w	r0, r0, #1
 80008bc:	4770      	bx	lr
 80008be:	f090 0f00 	teq	r0, #0
 80008c2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008c6:	bf08      	it	eq
 80008c8:	0249      	lsleq	r1, r1, #9
 80008ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008d2:	3a7f      	subs	r2, #127	@ 0x7f
 80008d4:	bfc2      	ittt	gt
 80008d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008de:	4770      	bxgt	lr
 80008e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	3a01      	subs	r2, #1
 80008ea:	dc5d      	bgt.n	80009a8 <__aeabi_fmul+0x150>
 80008ec:	f112 0f19 	cmn.w	r2, #25
 80008f0:	bfdc      	itt	le
 80008f2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80008f6:	4770      	bxle	lr
 80008f8:	f1c2 0200 	rsb	r2, r2, #0
 80008fc:	0041      	lsls	r1, r0, #1
 80008fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000902:	f1c2 0220 	rsb	r2, r2, #32
 8000906:	fa00 fc02 	lsl.w	ip, r0, r2
 800090a:	ea5f 0031 	movs.w	r0, r1, rrx
 800090e:	f140 0000 	adc.w	r0, r0, #0
 8000912:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000916:	bf08      	it	eq
 8000918:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800091c:	4770      	bx	lr
 800091e:	f092 0f00 	teq	r2, #0
 8000922:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000926:	bf02      	ittt	eq
 8000928:	0040      	lsleq	r0, r0, #1
 800092a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800092e:	3a01      	subeq	r2, #1
 8000930:	d0f9      	beq.n	8000926 <__aeabi_fmul+0xce>
 8000932:	ea40 000c 	orr.w	r0, r0, ip
 8000936:	f093 0f00 	teq	r3, #0
 800093a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800093e:	bf02      	ittt	eq
 8000940:	0049      	lsleq	r1, r1, #1
 8000942:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000946:	3b01      	subeq	r3, #1
 8000948:	d0f9      	beq.n	800093e <__aeabi_fmul+0xe6>
 800094a:	ea41 010c 	orr.w	r1, r1, ip
 800094e:	e78f      	b.n	8000870 <__aeabi_fmul+0x18>
 8000950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000954:	ea92 0f0c 	teq	r2, ip
 8000958:	bf18      	it	ne
 800095a:	ea93 0f0c 	teqne	r3, ip
 800095e:	d00a      	beq.n	8000976 <__aeabi_fmul+0x11e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1d8      	bne.n	800091e <__aeabi_fmul+0xc6>
 800096c:	ea80 0001 	eor.w	r0, r0, r1
 8000970:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000974:	4770      	bx	lr
 8000976:	f090 0f00 	teq	r0, #0
 800097a:	bf17      	itett	ne
 800097c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000980:	4608      	moveq	r0, r1
 8000982:	f091 0f00 	teqne	r1, #0
 8000986:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800098a:	d014      	beq.n	80009b6 <__aeabi_fmul+0x15e>
 800098c:	ea92 0f0c 	teq	r2, ip
 8000990:	d101      	bne.n	8000996 <__aeabi_fmul+0x13e>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d10f      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 8000996:	ea93 0f0c 	teq	r3, ip
 800099a:	d103      	bne.n	80009a4 <__aeabi_fmul+0x14c>
 800099c:	024b      	lsls	r3, r1, #9
 800099e:	bf18      	it	ne
 80009a0:	4608      	movne	r0, r1
 80009a2:	d108      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 80009a4:	ea80 0001 	eor.w	r0, r0, r1
 80009a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009be:	4770      	bx	lr

080009c0 <__aeabi_fdiv>:
 80009c0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009c8:	bf1e      	ittt	ne
 80009ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ce:	ea92 0f0c 	teqne	r2, ip
 80009d2:	ea93 0f0c 	teqne	r3, ip
 80009d6:	d069      	beq.n	8000aac <__aeabi_fdiv+0xec>
 80009d8:	eba2 0203 	sub.w	r2, r2, r3
 80009dc:	ea80 0c01 	eor.w	ip, r0, r1
 80009e0:	0249      	lsls	r1, r1, #9
 80009e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009e6:	d037      	beq.n	8000a58 <__aeabi_fdiv+0x98>
 80009e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009f4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf38      	it	cc
 80009fc:	005b      	lslcc	r3, r3, #1
 80009fe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a06:	428b      	cmp	r3, r1
 8000a08:	bf24      	itt	cs
 8000a0a:	1a5b      	subcs	r3, r3, r1
 8000a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a14:	bf24      	itt	cs
 8000a16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a22:	bf24      	itt	cs
 8000a24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a30:	bf24      	itt	cs
 8000a32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	bf18      	it	ne
 8000a3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a42:	d1e0      	bne.n	8000a06 <__aeabi_fdiv+0x46>
 8000a44:	2afd      	cmp	r2, #253	@ 0xfd
 8000a46:	f63f af50 	bhi.w	80008ea <__aeabi_fmul+0x92>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a60:	327f      	adds	r2, #127	@ 0x7f
 8000a62:	bfc2      	ittt	gt
 8000a64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6c:	4770      	bxgt	lr
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	3a01      	subs	r2, #1
 8000a78:	e737      	b.n	80008ea <__aeabi_fmul+0x92>
 8000a7a:	f092 0f00 	teq	r2, #0
 8000a7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a82:	bf02      	ittt	eq
 8000a84:	0040      	lsleq	r0, r0, #1
 8000a86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a8a:	3a01      	subeq	r2, #1
 8000a8c:	d0f9      	beq.n	8000a82 <__aeabi_fdiv+0xc2>
 8000a8e:	ea40 000c 	orr.w	r0, r0, ip
 8000a92:	f093 0f00 	teq	r3, #0
 8000a96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	bf02      	ittt	eq
 8000a9c:	0049      	lsleq	r1, r1, #1
 8000a9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000aa2:	3b01      	subeq	r3, #1
 8000aa4:	d0f9      	beq.n	8000a9a <__aeabi_fdiv+0xda>
 8000aa6:	ea41 010c 	orr.w	r1, r1, ip
 8000aaa:	e795      	b.n	80009d8 <__aeabi_fdiv+0x18>
 8000aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ab0:	ea92 0f0c 	teq	r2, ip
 8000ab4:	d108      	bne.n	8000ac8 <__aeabi_fdiv+0x108>
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	f47f af7d 	bne.w	80009b6 <__aeabi_fmul+0x15e>
 8000abc:	ea93 0f0c 	teq	r3, ip
 8000ac0:	f47f af70 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e776      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ac8:	ea93 0f0c 	teq	r3, ip
 8000acc:	d104      	bne.n	8000ad8 <__aeabi_fdiv+0x118>
 8000ace:	024b      	lsls	r3, r1, #9
 8000ad0:	f43f af4c 	beq.w	800096c <__aeabi_fmul+0x114>
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e76e      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ad8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000adc:	bf18      	it	ne
 8000ade:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ae2:	d1ca      	bne.n	8000a7a <__aeabi_fdiv+0xba>
 8000ae4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ae8:	f47f af5c 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000aec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000af0:	f47f af3c 	bne.w	800096c <__aeabi_fmul+0x114>
 8000af4:	e75f      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000af6:	bf00      	nop

08000af8 <__gesf2>:
 8000af8:	f04f 3cff 	mov.w	ip, #4294967295
 8000afc:	e006      	b.n	8000b0c <__cmpsf2+0x4>
 8000afe:	bf00      	nop

08000b00 <__lesf2>:
 8000b00:	f04f 0c01 	mov.w	ip, #1
 8000b04:	e002      	b.n	8000b0c <__cmpsf2+0x4>
 8000b06:	bf00      	nop

08000b08 <__cmpsf2>:
 8000b08:	f04f 0c01 	mov.w	ip, #1
 8000b0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d011      	beq.n	8000b48 <__cmpsf2+0x40>
 8000b24:	b001      	add	sp, #4
 8000b26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b2a:	bf18      	it	ne
 8000b2c:	ea90 0f01 	teqne	r0, r1
 8000b30:	bf58      	it	pl
 8000b32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b36:	bf88      	it	hi
 8000b38:	17c8      	asrhi	r0, r1, #31
 8000b3a:	bf38      	it	cc
 8000b3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b40:	bf18      	it	ne
 8000b42:	f040 0001 	orrne.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	d102      	bne.n	8000b54 <__cmpsf2+0x4c>
 8000b4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b52:	d105      	bne.n	8000b60 <__cmpsf2+0x58>
 8000b54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b58:	d1e4      	bne.n	8000b24 <__cmpsf2+0x1c>
 8000b5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5e:	d0e1      	beq.n	8000b24 <__cmpsf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cfrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	4661      	mov	r1, ip
 8000b6e:	e7ff      	b.n	8000b70 <__aeabi_cfcmpeq>

08000b70 <__aeabi_cfcmpeq>:
 8000b70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b72:	f7ff ffc9 	bl	8000b08 <__cmpsf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b80 <__aeabi_fcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_fcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cfcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_fcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffd2 	bl	8000b68 <__aeabi_cfrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc8 	bl	8000b68 <__aeabi_cfrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_f2iz>:
 8000be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bec:	d30f      	bcc.n	8000c0e <__aeabi_f2iz+0x2a>
 8000bee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bf6:	d90d      	bls.n	8000c14 <__aeabi_f2iz+0x30>
 8000bf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c00:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	bf18      	it	ne
 8000c0a:	4240      	negne	r0, r0
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2iz+0x3a>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_f2iz+0x46>
 8000c1e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <APP_CCD_Init>:

#define CAR_SPEED  375 //巡线的速度

// Initialize K210X axis PID parameters 初始化K210X轴 PID参数
void APP_CCD_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	pid_ccd.target_val = 0.0;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
	pid_ccd.pwm_output = 0.0;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
	pid_ccd.err = 0.0;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
	pid_ccd.err_last = 0.0;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
	pid_ccd.err_next = 0.0;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
	pid_ccd.integral = 0.0;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24

	pid_ccd.Kp = CCD_PID_KP;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c66:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <APP_CCD_Init+0x54>)
 8000c68:	60da      	str	r2, [r3, #12]
	pid_ccd.Ki = CCD_PID_KI;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <APP_CCD_Init+0x58>)
 8000c6e:	611a      	str	r2, [r3, #16]
	pid_ccd.Kd = CCD_PID_KD;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <APP_CCD_Init+0x50>)
 8000c72:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8000c76:	615a      	str	r2, [r3, #20]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	2000004c 	.word	0x2000004c
 8000c84:	42aa0000 	.word	0x42aa0000
 8000c88:	40a00000 	.word	0x40a00000

08000c8c <APP_CCD_PID_Calc>:



float APP_CCD_PID_Calc(float actual_value)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    return PID_Incre_Calc(&pid_ccd, actual_value);
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <APP_CCD_PID_Calc+0x1c>)
 8000c98:	f001 f8dc 	bl	8001e54 <PID_Incre_Calc>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000004c 	.word	0x2000004c

08000cac <APP_CCD_Line_PID>:


void APP_CCD_Line_PID(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	g_ccd_median = 64 - CCD_median; //CCD的中间值是64
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <APP_CCD_Line_PID+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd79 	bl	80007b0 <__aeabi_i2f>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a11      	ldr	r2, [pc, #68]	@ (8000d08 <APP_CCD_Line_PID+0x5c>)
 8000cc2:	6013      	str	r3, [r2, #0]

	pid_output_ccd = (int)(APP_CCD_PID_Calc(g_ccd_median));
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <APP_CCD_Line_PID+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ffdf 	bl	8000c8c <APP_CCD_PID_Calc>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff87 	bl	8000be4 <__aeabi_f2iz>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd69 	bl	80007b0 <__aeabi_i2f>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <APP_CCD_Line_PID+0x60>)
 8000ce2:	6013      	str	r3, [r2, #0]

	Motion_Ctrl(CAR_SPEED, 0, pid_output_ccd);
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <APP_CCD_Line_PID+0x60>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff7b 	bl	8000be4 <__aeabi_f2iz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f240 1077 	movw	r0, #375	@ 0x177
 8000cfa:	f000 fe59 	bl	80019b0 <Motion_Ctrl>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000174 	.word	0x20000174
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000048 	.word	0x20000048

08000d10 <Get_Adc_CCD>:
// Output  : AD conversion results
// 函数功能：AD采样
// 入口参数：ADC的通道
// 返回  值：AD转换结果
uint16_t Get_Adc_CCD(uint8_t ch)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ch;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <Get_Adc_CCD+0x5c>)
 8000d3a:	f002 ff1b 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <Get_Adc_CCD+0x38>
	{
		Error_Handler();
 8000d44:	f001 fd60 	bl	8002808 <Error_Handler>
	}

	HAL_ADC_Start(&hadc3);
 8000d48:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <Get_Adc_CCD+0x5c>)
 8000d4a:	f002 fd03 	bl	8003754 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 500);
 8000d4e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <Get_Adc_CCD+0x5c>)
 8000d54:	f002 fdc4 	bl	80038e0 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc3);
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <Get_Adc_CCD+0x5c>)
 8000d5a:	f002 fee3 	bl	8003b24 <HAL_ADC_GetValue>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29b      	uxth	r3, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000548 	.word	0x20000548

08000d70 <Dly_us>:
// 返回值：无
// Function Function: Delay
// Entry parameters: None
// Return value: None
void Dly_us(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	int ii;
	for (ii = 0; ii < 10; ii++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e002      	b.n	8000d82 <Dly_us+0x12>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	ddf9      	ble.n	8000d7c <Dly_us+0xc>
		;
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <RD_TSL>:
// 返回  值：无
// Function function: CCD data collection
// Entry parameters: None
// Return value: None
void RD_TSL(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	uint8_t i = 0, tslp = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71bb      	strb	r3, [r7, #6]
	TSL_CLK = 1;
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <RD_TSL+0x90>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
	TSL_SI = 0;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <RD_TSL+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	Dly_us();
 8000dae:	f7ff ffdf 	bl	8000d70 <Dly_us>

	TSL_SI = 1;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <RD_TSL+0x94>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
	TSL_CLK = 0;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <RD_TSL+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
	Dly_us();
 8000dbe:	f7ff ffd7 	bl	8000d70 <Dly_us>

	TSL_CLK = 1;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <RD_TSL+0x90>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
	TSL_SI = 0;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <RD_TSL+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
	Dly_us();
 8000dce:	f7ff ffcf 	bl	8000d70 <Dly_us>
	for (i = 0; i < 128; i++) // Read 128 pixel voltage values 读取128个像素点电压值
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e01c      	b.n	8000e12 <RD_TSL+0x7e>
	{
		TSL_CLK = 0;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <RD_TSL+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		Dly_us(); // Adjusting exposure time 调节曝光时间
 8000dde:	f7ff ffc7 	bl	8000d70 <Dly_us>
		Dly_us();
 8000de2:	f7ff ffc5 	bl	8000d70 <Dly_us>

		ADV[tslp] = (Get_Adc_CCD(CCD_ADC_CH)) >> 4;
 8000de6:	2004      	movs	r0, #4
 8000de8:	f7ff ff92 	bl	8000d10 <Get_Adc_CCD>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	0912      	lsrs	r2, r2, #4
 8000df4:	b291      	uxth	r1, r2
 8000df6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <RD_TSL+0x98>)
 8000df8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		++tslp;
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	71bb      	strb	r3, [r7, #6]
		TSL_CLK = 1;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <RD_TSL+0x90>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
		Dly_us();
 8000e08:	f7ff ffb2 	bl	8000d70 <Dly_us>
	for (i = 0; i < 128; i++) // Read 128 pixel voltage values 读取128个像素点电压值
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dade      	bge.n	8000dd8 <RD_TSL+0x44>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	42238194 	.word	0x42238194
 8000e28:	42238190 	.word	0x42238190
 8000e2c:	20000074 	.word	0x20000074

08000e30 <Find_CCD_Median>:
	RD_TSL();
	Find_CCD_Median();
}

void Find_CCD_Median(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

	static uint16_t i, j, Left, Right;
	static uint16_t value1_max, value1_min;

	value1_max = ADV[0];	  // Dynamic threshold algorithm, reading maximum and minimum values 动态阈值算法，读取最大和最小值
 8000e34:	4b80      	ldr	r3, [pc, #512]	@ (8001038 <Find_CCD_Median+0x208>)
 8000e36:	881a      	ldrh	r2, [r3, #0]
 8000e38:	4b80      	ldr	r3, [pc, #512]	@ (800103c <Find_CCD_Median+0x20c>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	for (i = 5; i < 123; i++) // Remove 5 points on each side 两边各去掉5个点
 8000e3c:	4b80      	ldr	r3, [pc, #512]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e3e:	2205      	movs	r2, #5
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	e017      	b.n	8000e74 <Find_CCD_Median+0x44>
	{
		if (value1_max <= ADV[i])
 8000e44:	4b7e      	ldr	r3, [pc, #504]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001038 <Find_CCD_Median+0x208>)
 8000e4c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e50:	4b7a      	ldr	r3, [pc, #488]	@ (800103c <Find_CCD_Median+0x20c>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d307      	bcc.n	8000e68 <Find_CCD_Median+0x38>
			value1_max = ADV[i];
 8000e58:	4b79      	ldr	r3, [pc, #484]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b76      	ldr	r3, [pc, #472]	@ (8001038 <Find_CCD_Median+0x208>)
 8000e60:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e64:	4b75      	ldr	r3, [pc, #468]	@ (800103c <Find_CCD_Median+0x20c>)
 8000e66:	801a      	strh	r2, [r3, #0]
	for (i = 5; i < 123; i++) // Remove 5 points on each side 两边各去掉5个点
 8000e68:	4b75      	ldr	r3, [pc, #468]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b73      	ldr	r3, [pc, #460]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	4b72      	ldr	r3, [pc, #456]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e7a:	d9e3      	bls.n	8000e44 <Find_CCD_Median+0x14>
	}
	value1_min = ADV[0]; // MIN 最小值
 8000e7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001038 <Find_CCD_Median+0x208>)
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	4b70      	ldr	r3, [pc, #448]	@ (8001044 <Find_CCD_Median+0x214>)
 8000e82:	801a      	strh	r2, [r3, #0]
	for (i = 5; i < 123; i++)
 8000e84:	4b6e      	ldr	r3, [pc, #440]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e86:	2205      	movs	r2, #5
 8000e88:	801a      	strh	r2, [r3, #0]
 8000e8a:	e017      	b.n	8000ebc <Find_CCD_Median+0x8c>
	{
		if (value1_min >= ADV[i])
 8000e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001040 <Find_CCD_Median+0x210>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b69      	ldr	r3, [pc, #420]	@ (8001038 <Find_CCD_Median+0x208>)
 8000e94:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e98:	4b6a      	ldr	r3, [pc, #424]	@ (8001044 <Find_CCD_Median+0x214>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d807      	bhi.n	8000eb0 <Find_CCD_Median+0x80>
			value1_min = ADV[i];
 8000ea0:	4b67      	ldr	r3, [pc, #412]	@ (8001040 <Find_CCD_Median+0x210>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b64      	ldr	r3, [pc, #400]	@ (8001038 <Find_CCD_Median+0x208>)
 8000ea8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000eac:	4b65      	ldr	r3, [pc, #404]	@ (8001044 <Find_CCD_Median+0x214>)
 8000eae:	801a      	strh	r2, [r3, #0]
	for (i = 5; i < 123; i++)
 8000eb0:	4b63      	ldr	r3, [pc, #396]	@ (8001040 <Find_CCD_Median+0x210>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b61      	ldr	r3, [pc, #388]	@ (8001040 <Find_CCD_Median+0x210>)
 8000eba:	801a      	strh	r2, [r3, #0]
 8000ebc:	4b60      	ldr	r3, [pc, #384]	@ (8001040 <Find_CCD_Median+0x210>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b7a      	cmp	r3, #122	@ 0x7a
 8000ec2:	d9e3      	bls.n	8000e8c <Find_CCD_Median+0x5c>
	}
	CCD_threshold = (value1_max + value1_min) / 2; // Calculate the threshold for this centerline extraction 计算出本次中线提取的阈值
 8000ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <Find_CCD_Median+0x20c>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b5e      	ldr	r3, [pc, #376]	@ (8001044 <Find_CCD_Median+0x214>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	0fda      	lsrs	r2, r3, #31
 8000ed2:	4413      	add	r3, r2
 8000ed4:	105b      	asrs	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8001048 <Find_CCD_Median+0x218>)
 8000eda:	701a      	strb	r2, [r3, #0]
	for (i = 5; i < 118; i++)					   // Find the left jump edge 寻找左边跳变沿
 8000edc:	4b58      	ldr	r3, [pc, #352]	@ (8001040 <Find_CCD_Median+0x210>)
 8000ede:	2205      	movs	r2, #5
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	e046      	b.n	8000f72 <Find_CCD_Median+0x142>
	{
		if (ADV[i] > CCD_threshold && ADV[i + 1] > CCD_threshold && ADV[i + 2] > CCD_threshold && ADV[i + 3] < CCD_threshold && ADV[i + 4] < CCD_threshold && ADV[i + 5] < CCD_threshold)
 8000ee4:	4b56      	ldr	r3, [pc, #344]	@ (8001040 <Find_CCD_Median+0x210>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b53      	ldr	r3, [pc, #332]	@ (8001038 <Find_CCD_Median+0x208>)
 8000eec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ef0:	4a55      	ldr	r2, [pc, #340]	@ (8001048 <Find_CCD_Median+0x218>)
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d936      	bls.n	8000f66 <Find_CCD_Median+0x136>
 8000ef8:	4b51      	ldr	r3, [pc, #324]	@ (8001040 <Find_CCD_Median+0x210>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a4e      	ldr	r2, [pc, #312]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f04:	4a50      	ldr	r2, [pc, #320]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d92c      	bls.n	8000f66 <Find_CCD_Median+0x136>
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	3302      	adds	r3, #2
 8000f12:	4a49      	ldr	r2, [pc, #292]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f18:	4a4b      	ldr	r2, [pc, #300]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d922      	bls.n	8000f66 <Find_CCD_Median+0x136>
 8000f20:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	3303      	adds	r3, #3
 8000f26:	4a44      	ldr	r2, [pc, #272]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d218      	bcs.n	8000f66 <Find_CCD_Median+0x136>
 8000f34:	4b42      	ldr	r3, [pc, #264]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f40:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f42:	7812      	ldrb	r2, [r2, #0]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d20e      	bcs.n	8000f66 <Find_CCD_Median+0x136>
 8000f48:	4b3d      	ldr	r3, [pc, #244]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f54:	4a3c      	ldr	r2, [pc, #240]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d204      	bcs.n	8000f66 <Find_CCD_Median+0x136>
		{
			Left = i;
 8000f5c:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f5e:	881a      	ldrh	r2, [r3, #0]
 8000f60:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <Find_CCD_Median+0x21c>)
 8000f62:	801a      	strh	r2, [r3, #0]
			break;
 8000f64:	e009      	b.n	8000f7a <Find_CCD_Median+0x14a>
	for (i = 5; i < 118; i++)					   // Find the left jump edge 寻找左边跳变沿
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <Find_CCD_Median+0x210>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b75      	cmp	r3, #117	@ 0x75
 8000f78:	d9b4      	bls.n	8000ee4 <Find_CCD_Median+0xb4>
		}
	}
	for (j = 118; j > 5; j--) // Find the right jump edge 寻找右边跳变沿
 8000f7a:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <Find_CCD_Median+0x220>)
 8000f7c:	2276      	movs	r2, #118	@ 0x76
 8000f7e:	801a      	strh	r2, [r3, #0]
 8000f80:	e046      	b.n	8001010 <Find_CCD_Median+0x1e0>
	{
		if (ADV[j] < CCD_threshold && ADV[j + 1] < CCD_threshold && ADV[j + 2] < CCD_threshold && ADV[j + 3] > CCD_threshold && ADV[j + 4] > CCD_threshold && ADV[j + 5] > CCD_threshold)
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <Find_CCD_Median+0x220>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001048 <Find_CCD_Median+0x218>)
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d236      	bcs.n	8001004 <Find_CCD_Median+0x1d4>
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <Find_CCD_Median+0x220>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <Find_CCD_Median+0x208>)
 8000f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa2:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <Find_CCD_Median+0x218>)
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d22c      	bcs.n	8001004 <Find_CCD_Median+0x1d4>
 8000faa:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <Find_CCD_Median+0x220>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <Find_CCD_Median+0x208>)
 8000fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb6:	4a24      	ldr	r2, [pc, #144]	@ (8001048 <Find_CCD_Median+0x218>)
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d222      	bcs.n	8001004 <Find_CCD_Median+0x1d4>
 8000fbe:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <Find_CCD_Median+0x220>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <Find_CCD_Median+0x208>)
 8000fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <Find_CCD_Median+0x218>)
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d918      	bls.n	8001004 <Find_CCD_Median+0x1d4>
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <Find_CCD_Median+0x220>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <Find_CCD_Median+0x208>)
 8000fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <Find_CCD_Median+0x218>)
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d90e      	bls.n	8001004 <Find_CCD_Median+0x1d4>
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <Find_CCD_Median+0x220>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	3305      	adds	r3, #5
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <Find_CCD_Median+0x208>)
 8000fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <Find_CCD_Median+0x218>)
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d904      	bls.n	8001004 <Find_CCD_Median+0x1d4>
		{
			Right = j;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <Find_CCD_Median+0x220>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <Find_CCD_Median+0x224>)
 8001000:	801a      	strh	r2, [r3, #0]
			break;
 8001002:	e009      	b.n	8001018 <Find_CCD_Median+0x1e8>
	for (j = 118; j > 5; j--) // Find the right jump edge 寻找右边跳变沿
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <Find_CCD_Median+0x220>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <Find_CCD_Median+0x220>)
 800100e:	801a      	strh	r2, [r3, #0]
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <Find_CCD_Median+0x220>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d8b4      	bhi.n	8000f82 <Find_CCD_Median+0x152>
		}
	}
	CCD_median = (Right + Left) / 2; // Calculate centerline position 计算中线位置
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <Find_CCD_Median+0x224>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <Find_CCD_Median+0x21c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	0fda      	lsrs	r2, r3, #31
 8001026:	4413      	add	r3, r2
 8001028:	105b      	asrs	r3, r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <Find_CCD_Median+0x228>)
 800102e:	701a      	strb	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000074 	.word	0x20000074
 800103c:	200001f8 	.word	0x200001f8
 8001040:	200001fa 	.word	0x200001fa
 8001044:	200001fc 	.word	0x200001fc
 8001048:	20000175 	.word	0x20000175
 800104c:	200001fe 	.word	0x200001fe
 8001050:	20000200 	.word	0x20000200
 8001054:	20000202 	.word	0x20000202
 8001058:	20000174 	.word	0x20000174

0800105c <CCD_Get_ADC_128X32>:


uint8_t ADC_128X32[128] = {0};
// Return the ADV acquisition voltage values of 128 pixels and compress the amplitude into 128 * 32.  返回128个像素点的ADV采集电压值，并将幅值压缩成128*32。
uint8_t *CCD_Get_ADC_128X32(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	RD_TSL();
 8001062:	f7ff fe97 	bl	8000d94 <RD_TSL>
	Find_CCD_Median();
 8001066:	f7ff fee3 	bl	8000e30 <Find_CCD_Median>
	// Convert 8-bit AD values to 5-bit AD values 将8位AD值转化成5位AD值
	for (int i = 0; i < 128; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e00e      	b.n	800108e <CCD_Get_ADC_128X32+0x32>
	{
		ADC_128X32[i] = ADV[i] >> 3;
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <CCD_Get_ADC_128X32+0x44>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2d9      	uxtb	r1, r3
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <CCD_Get_ADC_128X32+0x48>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	460a      	mov	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 128; i++)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3301      	adds	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b7f      	cmp	r3, #127	@ 0x7f
 8001092:	dded      	ble.n	8001070 <CCD_Get_ADC_128X32+0x14>
	}
	return ADC_128X32;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <CCD_Get_ADC_128X32+0x48>)
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000074 	.word	0x20000074
 80010a4:	20000178 	.word	0x20000178

080010a8 <OLED_Show_CCD_Image>:

void OLED_Show_CCD_Image(uint8_t *p_img)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 80010b0:	f000 f9b2 	bl	8001418 <OLED_Clear>
	for (int i = 0; i < 128; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e012      	b.n	80010e0 <OLED_Show_CCD_Image+0x38>
	{
		if (p_img[i] < 32)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b1f      	cmp	r3, #31
 80010c4:	d809      	bhi.n	80010da <OLED_Show_CCD_Image+0x32>
		{
			SSD1306_DrawPixel(i, p_img[i], SSD1306_COLOR_WHITE);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b298      	uxth	r0, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4619      	mov	r1, r3
 80010d6:	f000 f941 	bl	800135c <SSD1306_DrawPixel>
	for (int i = 0; i < 128; i++)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e4:	dde9      	ble.n	80010ba <OLED_Show_CCD_Image+0x12>
		}
	}
	OLED_Refresh();
 80010e6:	f000 f99e 	bl	8001426 <OLED_Refresh>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <Key1_is_Press>:
uint16_t g_key3_long_press = 0;

// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the button has been pressed, press to return to KEY_ PRESS, release and return to KEY_ RELEASE
static uint8_t Key1_is_Press(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 80010f8:	2108      	movs	r1, #8
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <Key1_is_Press+0x1c>)
 80010fc:	f003 fb72 	bl	80047e4 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // If the key is pressed, return to KEY_ PRESS 如果按键被按下，则返回KEY_PRESS
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <Key1_is_Press+0x18>
	}
	return KEY_RELEASE; // If the button is released, return to KEY_ RELEASE 如果按键是松开状态，则返回KEY_RELEASE
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000

08001114 <Key1_State>:
// 读取按键K1的状态，按下返回1，松开返回0.
// mode:设置模式，0：按下一直返回1；1：按下只返回一次1
// Read the status of button K1, press to return 1, release to return 0
// Mode: Set mode, 0: Press and hold to return to 1; 1: Press to return only once 1
uint8_t Key1_State(uint8_t mode)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800111e:	f7ff ffe9 	bl	80010f4 <Key1_is_Press>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10e      	bne.n	8001146 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <Key1_State+0x5c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	3301      	adds	r3, #1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	429a      	cmp	r2, r3
 8001136:	da0c      	bge.n	8001152 <Key1_State+0x3e>
		{
			key1_state++;
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <Key1_State+0x5c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <Key1_State+0x5c>)
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	e005      	b.n	8001152 <Key1_State+0x3e>
		}
	}
	else
	{
		key1_state = 0;
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <Key1_State+0x5c>)
 8001148:	2200      	movs	r2, #0
 800114a:	801a      	strh	r2, [r3, #0]
		g_key1_long_press = 0;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <Key1_State+0x60>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <Key1_State+0x5c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d104      	bne.n	8001164 <Key1_State+0x50>
	{
		g_key1_long_press = 1;
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <Key1_State+0x60>)
 800115c:	2201      	movs	r2, #1
 800115e:	801a      	strh	r2, [r3, #0]
		return KEY_PRESS;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <Key1_State+0x52>
	}
	return KEY_RELEASE;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000206 	.word	0x20000206
 8001174:	20000204 	.word	0x20000204

08001178 <I2C_WriteByte>:
static SSD1306_t SSD1306;

// 向oled写数据  -- 使用hal库的i2c,不打开i2c的EV_IRQHandler，使用DMA会有bug，此为hal库的bug
// Write data to OLED - use i2c from the HAL library without opening EV_IRQHandler, there may be a bug when using DMA, which is a bug in the hal library
void I2C_WriteByte(unsigned char addr, unsigned char data)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
    // 不使用DMA的方式传输-阻塞型
    // Transmission without DMA - Blocking
    HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, addr, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2178      	movs	r1, #120	@ 0x78
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <I2C_WriteByte+0x34>)
 800119e:	f003 fd2f 	bl	8004c00 <HAL_I2C_Mem_Write>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000578 	.word	0x20000578

080011b0 <OLED_Init>:
// 函数功能:oled初始化
// 传入参数:无
// Function function: oled initialization
// Incoming parameter: None
void OLED_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	@ 0x64
 80011b6:	f002 f907 	bl	80033c8 <HAL_Delay>

    SSD1306_WRITECOMMAND(0xae); // display off
 80011ba:	21ae      	movs	r1, #174	@ 0xae
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ffdb 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // Set Normal Display (default)
 80011c2:	21a6      	movs	r1, #166	@ 0xa6
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffd7 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xAE); // DISPLAYOFF
 80011ca:	21ae      	movs	r1, #174	@ 0xae
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ffd3 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD5); // SETDISPLAYCLOCKDIV
 80011d2:	21d5      	movs	r1, #213	@ 0xd5
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ffcf 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x80); // the suggested ratio 0x80
 80011da:	2180      	movs	r1, #128	@ 0x80
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ffcb 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xA8); // SSD1306_SETMULTIPLEX
 80011e2:	21a8      	movs	r1, #168	@ 0xa8
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ffc7 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x1F);
 80011ea:	211f      	movs	r1, #31
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ffc3 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD3);       // SETDISPLAYOFFSET
 80011f2:	21d3      	movs	r1, #211	@ 0xd3
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ffbf 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x00);       // no offset
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ffbb 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40 | 0x0); // SETSTARTLINE
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ffb7 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x8D);       // CHARGEPUMP
 800120a:	218d      	movs	r1, #141	@ 0x8d
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ffb3 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x14);       // 0x014 enable, 0x010 disable
 8001212:	2114      	movs	r1, #20
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ffaf 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x20);       // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 800121a:	2120      	movs	r1, #32
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ffab 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02);       // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 8001222:	2102      	movs	r1, #2
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ffa7 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa1);       // segment remap a0/a1
 800122a:	21a1      	movs	r1, #161	@ 0xa1
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffa3 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xc8);       // c0: scan dir normal, c8: reverse
 8001232:	21c8      	movs	r1, #200	@ 0xc8
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff9f 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xda);
 800123a:	21da      	movs	r1, #218	@ 0xda
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ff9b 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02); // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 8001242:	2102      	movs	r1, #2
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff97 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x81);
 800124a:	2181      	movs	r1, #129	@ 0x81
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff ff93 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xcf); // [2] set contrast control
 8001252:	21cf      	movs	r1, #207	@ 0xcf
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff8f 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xd9);
 800125a:	21d9      	movs	r1, #217	@ 0xd9
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff8b 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xf1); // [2] pre-charge period 0x022/f1
 8001262:	21f1      	movs	r1, #241	@ 0xf1
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ff87 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xdb);
 800126a:	21db      	movs	r1, #219	@ 0xdb
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff83 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40); // vcomh deselect level
 8001272:	2140      	movs	r1, #64	@ 0x40
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ff7f 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x2e); // Disable scroll
 800127a:	212e      	movs	r1, #46	@ 0x2e
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ff7b 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa4); // output ram to display
 8001282:	21a4      	movs	r1, #164	@ 0xa4
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ff77 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // none inverted normal display mode
 800128a:	21a6      	movs	r1, #166	@ 0xa6
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff73 	bl	8001178 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xaf); // display on
 8001292:	21af      	movs	r1, #175	@ 0xaf
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff6f 	bl	8001178 <I2C_WriteByte>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f846 	bl	800132c <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 80012a0:	f000 f80e 	bl	80012c0 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <OLED_Init+0x10c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012aa:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <OLED_Init+0x10c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <OLED_Init+0x10c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	715a      	strb	r2, [r3, #5]
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000408 	.word	0x20000408

080012c0 <SSD1306_UpdateScreen>:
// 函数功能:oled屏幕更新显示
// 传入参数:无
// Function function: OLED screen update display
// Incoming parameter: None
void SSD1306_UpdateScreen(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
    uint8_t m, n;

    for (m = 0; m < 8; m++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	e025      	b.n	8001318 <SSD1306_UpdateScreen+0x58>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	3b50      	subs	r3, #80	@ 0x50
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff4f 	bl	8001178 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x00);
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff4b 	bl	8001178 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x10);
 80012e2:	2110      	movs	r1, #16
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ff47 	bl	8001178 <I2C_WriteByte>

        for (n = 0; n < SSD1306_WIDTH; n++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	e00c      	b.n	800130a <SSD1306_UpdateScreen+0x4a>
        {

            SSD1306_WRITEDATA(SSD1306_Buffer[n + SSD1306_WIDTH * m]);
 80012f0:	79ba      	ldrb	r2, [r7, #6]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	01db      	lsls	r3, r3, #7
 80012f6:	4413      	add	r3, r2
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <SSD1306_UpdateScreen+0x68>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	4619      	mov	r1, r3
 80012fe:	2040      	movs	r0, #64	@ 0x40
 8001300:	f7ff ff3a 	bl	8001178 <I2C_WriteByte>
        for (n = 0; n < SSD1306_WIDTH; n++)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	3301      	adds	r3, #1
 8001308:	71bb      	strb	r3, [r7, #6]
 800130a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	daee      	bge.n	80012f0 <SSD1306_UpdateScreen+0x30>
    for (m = 0; m < 8; m++)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3301      	adds	r3, #1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b07      	cmp	r3, #7
 800131c:	d9d6      	bls.n	80012cc <SSD1306_UpdateScreen+0xc>
        }
    }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000208 	.word	0x20000208

0800132c <SSD1306_Fill>:
// 函数功能:oled屏幕清屏，但没刷新显示
// 传入参数:color :SSD1306_COLOR_BLACK SSD1306_COLOR_WHITE
// Function function: OLED screen is cleared, but the display is not refreshed
// Incoming parameter: color: SSD1306_ COLOR_ BLACK SSD1306_ COLOR_ WHITE
void SSD1306_Fill(SSD1306_COLOR_t color)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <SSD1306_Fill+0x14>
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <SSD1306_Fill+0x16>
 8001340:	23ff      	movs	r3, #255	@ 0xff
 8001342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001346:	4619      	mov	r1, r3
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <SSD1306_Fill+0x2c>)
 800134a:	f007 f887 	bl	800845c <memset>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000208 	.word	0x20000208

0800135c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	460b      	mov	r3, r1
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2b7f      	cmp	r3, #127	@ 0x7f
 8001372:	d848      	bhi.n	8001406 <SSD1306_DrawPixel+0xaa>
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	2b1f      	cmp	r3, #31
 8001378:	d845      	bhi.n	8001406 <SSD1306_DrawPixel+0xaa>
    {
        return; // Error, out of range 出错，超出范围
    }

    /* Check if pixels are inverted 检查像素是否倒置 */
    if (SSD1306.Inverted)
 800137a:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <SSD1306_DrawPixel+0xb4>)
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	70fb      	strb	r3, [r7, #3]
    }

    /* COLOR 设置颜色 */
    if (color == SSD1306_COLOR_WHITE)
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d11a      	bne.n	80013cc <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	b298      	uxth	r0, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	01db      	lsls	r3, r3, #7
 80013a2:	4413      	add	r3, r2
 80013a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <SSD1306_DrawPixel+0xb8>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b259      	sxtb	r1, r3
 80013bc:	88fa      	ldrh	r2, [r7, #6]
 80013be:	4603      	mov	r3, r0
 80013c0:	01db      	lsls	r3, r3, #7
 80013c2:	4413      	add	r3, r2
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <SSD1306_DrawPixel+0xb8>)
 80013c8:	54d1      	strb	r1, [r2, r3]
 80013ca:	e01d      	b.n	8001408 <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	b298      	uxth	r0, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	4413      	add	r3, r2
 80013da:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <SSD1306_DrawPixel+0xb8>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	b259      	sxtb	r1, r3
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	4603      	mov	r3, r0
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	4413      	add	r3, r2
 80013fe:	b2c9      	uxtb	r1, r1
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <SSD1306_DrawPixel+0xb8>)
 8001402:	54d1      	strb	r1, [r2, r3]
 8001404:	e000      	b.n	8001408 <SSD1306_DrawPixel+0xac>
        return; // Error, out of range 出错，超出范围
 8001406:	bf00      	nop
    }
}
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000408 	.word	0x20000408
 8001414:	20000208 	.word	0x20000208

08001418 <OLED_Clear>:
    }
}

/* OLED Clear Screen OLED清除屏幕 */
void OLED_Clear(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff85 	bl	800132c <SSD1306_Fill>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <OLED_Refresh>:

/*Refresh OLED screen 刷新OLED屏幕 */
void OLED_Refresh(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 800142a:	f7ff ff49 	bl	80012c0 <SSD1306_UpdateScreen>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <BSP_Init>:


//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
	Bsp_Tim_Init();
 8001436:	f000 ff79 	bl	800232c <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化
 800143a:	f000 fc83 	bl	8001d44 <PID_Param_Init>

	APP_CCD_Init();
 800143e:	f7ff fbf7 	bl	8000c30 <APP_CCD_Init>
	OLED_Init();
 8001442:	f7ff feb5 	bl	80011b0 <OLED_Init>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <BSP_Loop>:


//Loop Run Function
//Parameter:None
void BSP_Loop(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	static uint8_t key_flag = 0;

	OLED_Show_CCD_Image(CCD_Get_ADC_128X32());
 8001450:	f7ff fe04 	bl	800105c <CCD_Get_ADC_128X32>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe26 	bl	80010a8 <OLED_Show_CCD_Image>

	if(Key1_State(1))
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fe59 	bl	8001114 <Key1_State>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d012      	beq.n	800148e <BSP_Loop+0x42>
	{
		LED2_ON;
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <BSP_Loop+0x80>)
 8001470:	f003 f9d8 	bl	8004824 <HAL_GPIO_WritePin>
		key_flag ++;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <BSP_Loop+0x84>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <BSP_Loop+0x84>)
 800147e:	701a      	strb	r2, [r3, #0]
		if(key_flag >2 )
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <BSP_Loop+0x84>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <BSP_Loop+0x42>
		{
			key_flag = 0;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <BSP_Loop+0x84>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(key_flag == 0)
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <BSP_Loop+0x84>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d111      	bne.n	80014ba <BSP_Loop+0x6e>
	{
		APP_CCD_Init();//重置PID
 8001496:	f7ff fbcb 	bl	8000c30 <APP_CCD_Init>
		wheel_State(MOTION_STOP, 0);//小车停止
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fa9d 	bl	80019dc <wheel_State>
		LED2_OFF;
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a8:	4808      	ldr	r0, [pc, #32]	@ (80014cc <BSP_Loop+0x80>)
 80014aa:	f003 f9bb 	bl	8004824 <HAL_GPIO_WritePin>
		key_flag ++;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <BSP_Loop+0x84>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <BSP_Loop+0x84>)
 80014b8:	701a      	strb	r2, [r3, #0]

	}

	if(key_flag == 2)
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <BSP_Loop+0x84>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d101      	bne.n	80014c6 <BSP_Loop+0x7a>
	{
		APP_CCD_Line_PID();
 80014c2:	f7ff fbf3 	bl	8000cac <APP_CCD_Line_PID>
	}




}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012000 	.word	0x40012000
 80014d0:	2000040e 	.word	0x2000040e

080014d4 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d841      	bhi.n	800156c <Encoder_Read_CNT+0x98>
 80014e8:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <Encoder_Read_CNT+0x1c>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	0800151b 	.word	0x0800151b
 80014f8:	08001539 	.word	0x08001539
 80014fc:	08001553 	.word	0x08001553
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <Encoder_Read_CNT+0xa8>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	b29b      	uxth	r3, r3
 8001506:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 800150a:	337f      	adds	r3, #127	@ 0x7f
 800150c:	b29b      	uxth	r3, r3
 800150e:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <Encoder_Read_CNT+0xa8>)
 8001512:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001518:	e029      	b.n	800156e <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 800151a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	b29b      	uxth	r3, r3
 8001522:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001526:	337f      	adds	r3, #127	@ 0x7f
 8001528:	b29b      	uxth	r3, r3
 800152a:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 800152c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001530:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001536:	e01a      	b.n	800156e <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <Encoder_Read_CNT+0xac>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	b29b      	uxth	r3, r3
 800153e:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001542:	337f      	adds	r3, #127	@ 0x7f
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <Encoder_Read_CNT+0xac>)
 800154a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001550:	e00d      	b.n	800156e <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <Encoder_Read_CNT+0xb0>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	b29b      	uxth	r3, r3
 8001558:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 800155c:	337f      	adds	r3, #127	@ 0x7f
 800155e:	b29b      	uxth	r3, r3
 8001560:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <Encoder_Read_CNT+0xb0>)
 8001564:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 800156a:	e000      	b.n	800156e <Encoder_Read_CNT+0x9a>
	default:
		break;
 800156c:	bf00      	nop
	}
	return Encoder_TIM;
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40000800 	.word	0x40000800
 8001580:	40000c00 	.word	0x40000c00
 8001584:	40000400 	.word	0x40000400

08001588 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <Encoder_Get_ALL+0x38>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <Encoder_Get_ALL+0x3c>)
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3308      	adds	r3, #8
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <Encoder_Get_ALL+0x40>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	330c      	adds	r3, #12
 80015b0:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <Encoder_Get_ALL+0x44>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000410 	.word	0x20000410
 80015c4:	20000414 	.word	0x20000414
 80015c8:	20000418 	.word	0x20000418
 80015cc:	2000041c 	.word	0x2000041c

080015d0 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff ff7d 	bl	80014d4 <Encoder_Read_CNT>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <Encoder_Update_Count+0x58>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	4a10      	ldr	r2, [pc, #64]	@ (8001628 <Encoder_Update_Count+0x58>)
 80015e6:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff ff73 	bl	80014d4 <Encoder_Read_CNT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <Encoder_Update_Count+0x5c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <Encoder_Update_Count+0x5c>)
 80015fa:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff ff69 	bl	80014d4 <Encoder_Read_CNT>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <Encoder_Update_Count+0x60>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <Encoder_Update_Count+0x60>)
 800160e:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8001610:	2003      	movs	r0, #3
 8001612:	f7ff ff5f 	bl	80014d4 <Encoder_Read_CNT>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <Encoder_Update_Count+0x64>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <Encoder_Update_Count+0x64>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000410 	.word	0x20000410
 800162c:	20000414 	.word	0x20000414
 8001630:	20000418 	.word	0x20000418
 8001634:	2000041c 	.word	0x2000041c

08001638 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 800163c:	4b02      	ldr	r3, [pc, #8]	@ (8001648 <Motion_Get_Circle_Pulse+0x10>)
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	44820000 	.word	0x44820000

0800164c <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4604      	mov	r4, r0
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	4603      	mov	r3, r0
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8001672:	db0a      	blt.n	800168a <Motion_Set_Pwm+0x3e>
 8001674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001678:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800167c:	dc05      	bgt.n	800168a <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	4619      	mov	r1, r3
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fdbd 	bl	8002204 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 800168a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168e:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8001692:	db0a      	blt.n	80016aa <Motion_Set_Pwm+0x5e>
 8001694:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001698:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800169c:	dc05      	bgt.n	80016aa <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 800169e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a2:	4619      	mov	r1, r3
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 fdad 	bl	8002204 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 80016aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ae:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80016b2:	db0a      	blt.n	80016ca <Motion_Set_Pwm+0x7e>
 80016b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016b8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80016bc:	dc05      	bgt.n	80016ca <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 80016be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016c2:	4619      	mov	r1, r3
 80016c4:	2002      	movs	r0, #2
 80016c6:	f000 fd9d 	bl	8002204 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 80016ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016ce:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80016d2:	db0a      	blt.n	80016ea <Motion_Set_Pwm+0x9e>
 80016d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016d8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80016dc:	dc05      	bgt.n	80016ea <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 80016de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016e2:	4619      	mov	r1, r3
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 fd8d 	bl	8002204 <Motor_Set_Pwm>
    }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
	...

080016f4 <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 80016fe:	2300      	movs	r3, #0
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f815 	bl	8001734 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 800170a:	2004      	movs	r0, #4
 800170c:	f000 fc52 	bl	8001fb4 <PID_Clear_Motor>
    g_start_ctrl = 0;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <Motion_Stop+0x38>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <Motion_Stop+0x3c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd24 	bl	800216c <Motor_Stop>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000470 	.word	0x20000470
 8001730:	200004a4 	.word	0x200004a4

08001734 <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <Motion_Set_Speed+0x80>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <Motion_Set_Speed+0x84>)
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 800175e:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <Motion_Set_Speed+0x84>)
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <Motion_Set_Speed+0x84>)
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 800176a:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <Motion_Set_Speed+0x84>)
 800176c:	883b      	ldrh	r3, [r7, #0]
 800176e:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e016      	b.n	80017a4 <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <Motion_Set_Speed+0x84>)
 800177a:	3310      	adds	r3, #16
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fea1 	bl	80004c8 <__aeabi_i2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7fe ff05 	bl	800059c <__aeabi_d2f>
 8001792:	4602      	mov	r2, r0
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fc97 	bl	80020cc <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	3301      	adds	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d9e5      	bls.n	8001776 <Motion_Set_Speed+0x42>
    }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	20000470 	.word	0x20000470
 80017b8:	2000047c 	.word	0x2000047c

080017bc <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    int i = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 80017d6:	f000 f8b1 	bl	800193c <Motion_Get_Circle_MM>
 80017da:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 80017dc:	f7ff ff2c 	bl	8001638 <Motion_Get_Circle_Pulse>
 80017e0:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 80017e2:	f000 f8a1 	bl	8001928 <Motion_Get_APB>
 80017e6:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 80017e8:	f000 f8b2 	bl	8001950 <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f0:	e01e      	b.n	8001830 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 80017f2:	4a49      	ldr	r2, [pc, #292]	@ (8001918 <Motion_Get_Speed+0x15c>)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	2264      	movs	r2, #100	@ 0x64
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ffd5 	bl	80007b0 <__aeabi_i2f>
 8001806:	4603      	mov	r3, r0
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f824 	bl	8000858 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	69f9      	ldr	r1, [r7, #28]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff f8d3 	bl	80009c0 <__aeabi_fdiv>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	3328      	adds	r3, #40	@ 0x28
 8001824:	443b      	add	r3, r7
 8001826:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	2b03      	cmp	r3, #3
 8001834:	dddd      	ble.n	80017f2 <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe ff03 	bl	8000648 <__addsf3>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7fe fefc 	bl	8000648 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7fe fef5 	bl	8000648 <__addsf3>
 800185e:	4603      	mov	r3, r0
 8001860:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f8ab 	bl	80009c0 <__aeabi_fdiv>
 800186a:	4603      	mov	r3, r0
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f9b9 	bl	8000be4 <__aeabi_f2iz>
 8001872:	4603      	mov	r3, r0
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	801a      	strh	r2, [r3, #0]
    car->Vy = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fede 	bl	8000648 <__addsf3>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f7fe fed5 	bl	8000644 <__aeabi_fsub>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7fe fece 	bl	8000644 <__aeabi_fsub>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018ae:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f884 	bl	80009c0 <__aeabi_fdiv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f87f 	bl	80009c0 <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4915      	ldr	r1, [pc, #84]	@ (800191c <Motion_Get_Speed+0x160>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe ffc6 	bl	8000858 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f988 	bl	8000be4 <__aeabi_f2iz>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 80018dc:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <Motion_Get_Speed+0x164>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <Motion_Get_Speed+0x154>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e8:	e00c      	b.n	8001904 <Motion_Get_Speed+0x148>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	3328      	adds	r3, #40	@ 0x28
 80018f0:	443b      	add	r3, r7
 80018f2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80018f6:	490b      	ldr	r1, [pc, #44]	@ (8001924 <Motion_Get_Speed+0x168>)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	3301      	adds	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	2b03      	cmp	r3, #3
 8001908:	ddef      	ble.n	80018ea <Motion_Get_Speed+0x12e>
        }

        PID_Calc_Motor(&motor_data);
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <Motion_Get_Speed+0x168>)
 800190c:	f000 fb2a 	bl	8001f64 <PID_Calc_Motor>
    }
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	@ 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000460 	.word	0x20000460
 800191c:	447a0000 	.word	0x447a0000
 8001920:	20000470 	.word	0x20000470
 8001924:	2000047c 	.word	0x2000047c

08001928 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 800192c:	4b02      	ldr	r3, [pc, #8]	@ (8001938 <Motion_Get_APB+0x10>)
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	431f0000 	.word	0x431f0000

0800193c <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8001940:	4b02      	ldr	r3, [pc, #8]	@ (800194c <Motion_Get_Circle_MM+0x10>)
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	434c33f8 	.word	0x434c33f8

08001950 <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8001956:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <Motion_Get_Encoder+0x54>)
 8001958:	f7ff fe16 	bl	8001588 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	e017      	b.n	8001992 <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <Motion_Get_Encoder+0x54>)
 8001966:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <Motion_Get_Encoder+0x58>)
 800196e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	1a8a      	subs	r2, r1, r2
 8001976:	490d      	ldr	r1, [pc, #52]	@ (80019ac <Motion_Get_Encoder+0x5c>)
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <Motion_Get_Encoder+0x54>)
 8001982:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <Motion_Get_Encoder+0x58>)
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	3301      	adds	r3, #1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d9e4      	bls.n	8001962 <Motion_Get_Encoder+0x12>
    }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000440 	.word	0x20000440
 80019a8:	20000450 	.word	0x20000450
 80019ac:	20000460 	.word	0x20000460

080019b0 <Motion_Ctrl>:

// 控制小车运动
//Control the movement of the car
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	460b      	mov	r3, r1
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	807b      	strh	r3, [r7, #2]
    wheel_Ctrl(V_x, V_y, V_z);
 80019c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f888 	bl	8001ae4 <wheel_Ctrl>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <wheel_State>:
// 控制小车运动状态。
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 80019ec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae0 <wheel_State+0x104>)
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	8013      	strh	r3, [r2, #0]
    switch (state)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b07      	cmp	r3, #7
 80019f6:	d86d      	bhi.n	8001ad4 <wheel_State+0xf8>
 80019f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001a00 <wheel_State+0x24>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a21 	.word	0x08001a21
 8001a04:	08001a3b 	.word	0x08001a3b
 8001a08:	08001a4b 	.word	0x08001a4b
 8001a0c:	08001a5f 	.word	0x08001a5f
 8001a10:	08001a7f 	.word	0x08001a7f
 8001a14:	08001a99 	.word	0x08001a99
 8001a18:	08001ab5 	.word	0x08001ab5
 8001a1c:	08001acd 	.word	0x08001acd
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <wheel_State+0x104>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fe5e 	bl	80016f4 <Motion_Stop>
        break;
 8001a38:	e04d      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8001a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f84e 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001a48:	e045      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f844 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001a5c:	e03b      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_LEFT:
        wheel_Ctrl(speed/2, 0, -speed*2);
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b218      	sxth	r0, r3
 8001a66:	88bb      	ldrh	r3, [r7, #4]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	03d2      	lsls	r2, r2, #15
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f000 f834 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001a7c:	e02b      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_RIGHT:
        wheel_Ctrl(speed/2, 0, speed*2);
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b218      	sxth	r0, r3
 8001a86:	88bb      	ldrh	r3, [r7, #4]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2100      	movs	r1, #0
 8001a92:	f000 f827 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001a96:	e01e      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_SPIN_LEFT:
        wheel_Ctrl(0, 0, -speed * 5);
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	0392      	lsls	r2, r2, #14
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 f819 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001ab2:	e010      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_SPIN_RIGHT:
        wheel_Ctrl(0, 0, speed * 5);
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f80d 	bl	8001ae4 <wheel_Ctrl>
        break;
 8001aca:	e004      	b.n	8001ad6 <wheel_State+0xfa>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fe11 	bl	80016f4 <Motion_Stop>
        break;
 8001ad2:	e000      	b.n	8001ad6 <wheel_State+0xfa>
    default:
        break;
 8001ad4:	bf00      	nop
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000043c 	.word	0x2000043c

08001ae4 <wheel_Ctrl>:

void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
 8001aee:	460b      	mov	r3, r1
 8001af0:	80bb      	strh	r3, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8001af6:	f7ff ff17 	bl	8001928 <Motion_Get_APB>
 8001afa:	60f8      	str	r0, [r7, #12]
    speed_lr =0;
 8001afc:	4b6f      	ldr	r3, [pc, #444]	@ (8001cbc <wheel_Ctrl+0x1d8>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fe51 	bl	80007b0 <__aeabi_i2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc0 <wheel_Ctrl+0x1dc>)
 8001b12:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8001b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fe49 	bl	80007b0 <__aeabi_i2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4968      	ldr	r1, [pc, #416]	@ (8001cc4 <wheel_Ctrl+0x1e0>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe ff4c 	bl	80009c0 <__aeabi_fdiv>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fe93 	bl	8000858 <__aeabi_fmul>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b64      	ldr	r3, [pc, #400]	@ (8001cc8 <wheel_Ctrl+0x1e4>)
 8001b38:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <wheel_Ctrl+0x76>
 8001b42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <wheel_Ctrl+0x76>
 8001b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fdce 	bl	80016f4 <Motion_Stop>
        return;
 8001b58:	e0ad      	b.n	8001cb6 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001b5a:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <wheel_Ctrl+0x1dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a57      	ldr	r2, [pc, #348]	@ (8001cbc <wheel_Ctrl+0x1d8>)
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd6f 	bl	8000648 <__addsf3>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b56      	ldr	r3, [pc, #344]	@ (8001cc8 <wheel_Ctrl+0x1e4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f7fe fd67 	bl	8000648 <__addsf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f831 	bl	8000be4 <__aeabi_f2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a51      	ldr	r2, [pc, #324]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001b86:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001b88:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc0 <wheel_Ctrl+0x1dc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001cbc <wheel_Ctrl+0x1d8>)
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fd56 	bl	8000644 <__aeabi_fsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc8 <wheel_Ctrl+0x1e4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f7fe fd50 	bl	8000648 <__addsf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f81a 	bl	8000be4 <__aeabi_f2iz>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a47      	ldr	r2, [pc, #284]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001bb4:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001bb6:	4b42      	ldr	r3, [pc, #264]	@ (8001cc0 <wheel_Ctrl+0x1dc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a40      	ldr	r2, [pc, #256]	@ (8001cbc <wheel_Ctrl+0x1d8>)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fd3f 	bl	8000644 <__aeabi_fsub>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <wheel_Ctrl+0x1e4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f7fe fd37 	bl	8000644 <__aeabi_fsub>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f803 	bl	8000be4 <__aeabi_f2iz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001be2:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001be4:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <wheel_Ctrl+0x1dc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a34      	ldr	r2, [pc, #208]	@ (8001cbc <wheel_Ctrl+0x1d8>)
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fd2a 	bl	8000648 <__addsf3>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <wheel_Ctrl+0x1e4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7fe fd20 	bl	8000644 <__aeabi_fsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ffec 	bl	8000be4 <__aeabi_f2iz>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001c10:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8001c12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c1a:	dd03      	ble.n	8001c24 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001c1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c22:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8001c24:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c2c:	da02      	bge.n	8001c34 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001c30:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <wheel_Ctrl+0x1f8>)
 8001c32:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c3c:	dd03      	ble.n	8001c46 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001c40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c44:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c4e:	da02      	bge.n	8001c56 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001c52:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <wheel_Ctrl+0x1f8>)
 8001c54:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c5e:	dd03      	ble.n	8001c68 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001c62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c66:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c70:	da02      	bge.n	8001c78 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <wheel_Ctrl+0x1f8>)
 8001c76:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c80:	dd03      	ble.n	8001c8a <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001c84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c88:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c92:	da02      	bge.n	8001c9a <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001c96:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <wheel_Ctrl+0x1f8>)
 8001c98:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <wheel_Ctrl+0x1e8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b218      	sxth	r0, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <wheel_Ctrl+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b219      	sxth	r1, r3
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <wheel_Ctrl+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <wheel_Ctrl+0x1f4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	f7ff fd3f 	bl	8001734 <Motion_Set_Speed>
}
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000420 	.word	0x20000420
 8001cc0:	20000424 	.word	0x20000424
 8001cc4:	447a0000 	.word	0x447a0000
 8001cc8:	20000428 	.word	0x20000428
 8001ccc:	2000042c 	.word	0x2000042c
 8001cd0:	20000430 	.word	0x20000430
 8001cd4:	20000434 	.word	0x20000434
 8001cd8:	20000438 	.word	0x20000438
 8001cdc:	fffffc18 	.word	0xfffffc18

08001ce0 <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001ce4:	4814      	ldr	r0, [pc, #80]	@ (8001d38 <Motion_Handle+0x58>)
 8001ce6:	f7ff fd69 	bl	80017bc <Motion_Get_Speed>

    if (g_start_ctrl)
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <Motion_Handle+0x5c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <Motion_Handle+0x60>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff74 	bl	8000be4 <__aeabi_f2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b21c      	sxth	r4, r3
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <Motion_Handle+0x60>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff6d 	bl	8000be4 <__aeabi_f2iz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b21d      	sxth	r5, r3
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <Motion_Handle+0x60>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ff66 	bl	8000be4 <__aeabi_f2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b21e      	sxth	r6, r3
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <Motion_Handle+0x60>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ff5f 	bl	8000be4 <__aeabi_f2iz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fc8c 	bl	800164c <Motion_Set_Pwm>
    }
}
 8001d34:	bf00      	nop
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d38:	20000474 	.word	0x20000474
 8001d3c:	20000470 	.word	0x20000470
 8001d40:	2000047c 	.word	0x2000047c

08001d44 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e062      	b.n	8001e16 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001d50:	493a      	ldr	r1, [pc, #232]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3308      	adds	r3, #8
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8001d7a:	4930      	ldr	r1, [pc, #192]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	3318      	adds	r3, #24
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8001d90:	492a      	ldr	r1, [pc, #168]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	331c      	adds	r3, #28
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8001da6:	4925      	ldr	r1, [pc, #148]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3320      	adds	r3, #32
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8001dbc:	491f      	ldr	r1, [pc, #124]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3324      	adds	r3, #36	@ 0x24
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001dd2:	491a      	ldr	r1, [pc, #104]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	330c      	adds	r3, #12
 8001de2:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <PID_Param_Init+0xfc>)
 8001de4:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001de6:	4915      	ldr	r1, [pc, #84]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	3310      	adds	r3, #16
 8001df6:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <PID_Param_Init+0x100>)
 8001df8:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8001dfa:	4910      	ldr	r1, [pc, #64]	@ (8001e3c <PID_Param_Init+0xf8>)
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3314      	adds	r3, #20
 8001e0a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e0e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	dd99      	ble.n	8001d50 <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <PID_Param_Init+0x104>)
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <PID_Param_Init+0x108>)
 8001e20:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <PID_Param_Init+0x104>)
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <PID_Param_Init+0x104>)
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <PID_Param_Init+0x10c>)
 8001e2e:	60da      	str	r2, [r3, #12]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200004a8 	.word	0x200004a8
 8001e40:	3f4ccccd 	.word	0x3f4ccccd
 8001e44:	3d75c28f 	.word	0x3d75c28f
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	3ecccccd 	.word	0x3ecccccd
 8001e50:	3dcccccd 	.word	0x3dcccccd

08001e54 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fbec 	bl	8000644 <__aeabi_fsub>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689c      	ldr	r4, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68dd      	ldr	r5, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7fe fbdc 	bl	8000644 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4628      	mov	r0, r5
 8001e92:	f7fe fce1 	bl	8000858 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461d      	mov	r5, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7fe fcd7 	bl	8000858 <__aeabi_fmul>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4619      	mov	r1, r3
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7fe fbca 	bl	8000648 <__addsf3>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695d      	ldr	r5, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699e      	ldr	r6, [r3, #24]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fbbe 	bl	8000648 <__addsf3>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7fe fbb7 	bl	8000644 <__aeabi_fsub>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f7fe fbb1 	bl	8000648 <__addsf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7fe fcb4 	bl	8000858 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4640      	mov	r0, r8
 8001ef6:	f7fe fba7 	bl	8000648 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7fe fba2 	bl	8000648 <__addsf3>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <PID_Incre_Calc+0x108>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe54 	bl	8000bd0 <__aeabi_fcmpgt>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <PID_Incre_Calc+0x108>)
 8001f32:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4909      	ldr	r1, [pc, #36]	@ (8001f60 <PID_Incre_Calc+0x10c>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fe2a 	bl	8000b94 <__aeabi_fcmplt>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <PID_Incre_Calc+0x10c>)
 8001f4a:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f5a:	bf00      	nop
 8001f5c:	44c80000 	.word	0x44c80000
 8001f60:	c4c80000 	.word	0xc4c80000

08001f64 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e016      	b.n	8001fa0 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <PID_Calc_Motor+0x4c>)
 8001f7e:	1898      	adds	r0, r3, r2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff ff63 	bl	8001e54 <PID_Incre_Calc>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	3204      	adds	r2, #4
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	dde5      	ble.n	8001f72 <PID_Calc_Motor+0xe>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200004a8 	.word	0x200004a8

08001fb4 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d87b      	bhi.n	80020bc <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d140      	bne.n	800204c <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e039      	b.n	8002044 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8001fd0:	493d      	ldr	r1, [pc, #244]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3308      	adds	r3, #8
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8001fe6:	4938      	ldr	r1, [pc, #224]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3318      	adds	r3, #24
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8001ffc:	4932      	ldr	r1, [pc, #200]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	331c      	adds	r3, #28
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8002012:	492d      	ldr	r1, [pc, #180]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3320      	adds	r3, #32
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8002028:	4927      	ldr	r1, [pc, #156]	@ (80020c8 <PID_Clear_Motor+0x114>)
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3324      	adds	r3, #36	@ 0x24
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b03      	cmp	r3, #3
 8002048:	ddc2      	ble.n	8001fd0 <PID_Clear_Motor+0x1c>
 800204a:	e038      	b.n	80020be <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	491e      	ldr	r1, [pc, #120]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3308      	adds	r3, #8
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4918      	ldr	r1, [pc, #96]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3318      	adds	r3, #24
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	4913      	ldr	r1, [pc, #76]	@ (80020c8 <PID_Clear_Motor+0x114>)
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	331c      	adds	r3, #28
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <PID_Clear_Motor+0x114>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3320      	adds	r3, #32
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	4908      	ldr	r1, [pc, #32]	@ (80020c8 <PID_Clear_Motor+0x114>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3324      	adds	r3, #36	@ 0x24
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e000      	b.n	80020be <PID_Clear_Motor+0x10a>
        return;
 80020bc:	bf00      	nop
    }
}
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200004a8 	.word	0x200004a8

080020cc <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d81f      	bhi.n	800211e <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d112      	bne.n	800210a <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e00b      	b.n	8002102 <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 80020ea:	490f      	ldr	r1, [pc, #60]	@ (8002128 <PID_Set_Motor_Target+0x5c>)
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3301      	adds	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b03      	cmp	r3, #3
 8002106:	ddf0      	ble.n	80020ea <PID_Set_Motor_Target+0x1e>
 8002108:	e00a      	b.n	8002120 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	4906      	ldr	r1, [pc, #24]	@ (8002128 <PID_Set_Motor_Target+0x5c>)
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e000      	b.n	8002120 <PID_Set_Motor_Target+0x54>
        return;
 800211e:	bf00      	nop
    }
}
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	200004a8 	.word	0x200004a8

0800212c <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8002136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	dd05      	ble.n	800214a <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002144:	b29b      	uxth	r3, r3
 8002146:	b21b      	sxth	r3, r3
 8002148:	e00a      	b.n	8002160 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da05      	bge.n	800215e <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002158:	b29b      	uxth	r3, r3
 800215a:	b21b      	sxth	r3, r3
 800215c:	e000      	b.n	8002160 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <Motor_Stop+0x14>
        brake = 1;
 800217c:	2301      	movs	r3, #1
 800217e:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <Motor_Stop+0x90>)
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002194:	fb03 f202 	mul.w	r2, r3, r2
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <Motor_Stop+0x90>)
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <Motor_Stop+0x90>)
 80021a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021b0:	fb03 f202 	mul.w	r2, r3, r2
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <Motor_Stop+0x90>)
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021be:	fb03 f202 	mul.w	r2, r3, r2
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <Motor_Stop+0x94>)
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021cc:	fb03 f202 	mul.w	r2, r3, r2
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <Motor_Stop+0x94>)
 80021d2:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021da:	fb03 f202 	mul.w	r2, r3, r2
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <Motor_Stop+0x94>)
 80021e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80021e8:	fb03 f202 	mul.w	r2, r3, r2
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <Motor_Stop+0x94>)
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40013400 	.word	0x40013400
 8002200:	40012c00 	.word	0x40012c00

08002204 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff87 	bl	800212c <Motor_Ignore_Dead_Zone>
 800221e:	4603      	mov	r3, r0
 8002220:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8002222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002226:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800222a:	db02      	blt.n	8002232 <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 800222c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002230:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8002232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002236:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800223a:	dc02      	bgt.n	8002242 <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 800223c:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8002240:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d867      	bhi.n	8002318 <Motor_Set_Pwm+0x114>
 8002248:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <Motor_Set_Pwm+0x4c>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	08002261 	.word	0x08002261
 8002254:	08002293 	.word	0x08002293
 8002258:	080022c5 	.word	0x080022c5
 800225c:	080022ef 	.word	0x080022ef
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	425b      	negs	r3, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db07      	blt.n	8002280 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8002270:	4a2c      	ldr	r2, [pc, #176]	@ (8002324 <Motor_Set_Pwm+0x120>)
 8002272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002276:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8002278:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <Motor_Set_Pwm+0x120>)
 800227a:	2200      	movs	r2, #0
 800227c:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800227e:	e04c      	b.n	800231a <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8002280:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <Motor_Set_Pwm+0x120>)
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800228a:	425a      	negs	r2, r3
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <Motor_Set_Pwm+0x120>)
 800228e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8002290:	e043      	b.n	800231a <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	425b      	negs	r3, r3
 8002296:	b29b      	uxth	r3, r3
 8002298:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 800229a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db07      	blt.n	80022b2 <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80022a2:	4a20      	ldr	r2, [pc, #128]	@ (8002324 <Motor_Set_Pwm+0x120>)
 80022a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <Motor_Set_Pwm+0x120>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80022b0:	e033      	b.n	800231a <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <Motor_Set_Pwm+0x120>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 80022b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022bc:	425a      	negs	r2, r3
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <Motor_Set_Pwm+0x120>)
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80022c2:	e02a      	b.n	800231a <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 80022c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db07      	blt.n	80022dc <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80022cc:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <Motor_Set_Pwm+0x124>)
 80022ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022d2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <Motor_Set_Pwm+0x124>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80022da:	e01e      	b.n	800231a <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <Motor_Set_Pwm+0x124>)
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 80022e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e6:	425a      	negs	r2, r3
 80022e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <Motor_Set_Pwm+0x124>)
 80022ea:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80022ec:	e015      	b.n	800231a <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 80022ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db07      	blt.n	8002306 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 80022f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <Motor_Set_Pwm+0x124>)
 80022f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <Motor_Set_Pwm+0x124>)
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8002304:	e009      	b.n	800231a <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <Motor_Set_Pwm+0x124>)
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 800230c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002310:	425a      	negs	r2, r3
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <Motor_Set_Pwm+0x124>)
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002316:	e000      	b.n	800231a <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8002318:	bf00      	nop
    }
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40013400 	.word	0x40013400
 8002328:	40012c00 	.word	0x40012c00

0800232c <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002330:	2100      	movs	r1, #0
 8002332:	4822      	ldr	r0, [pc, #136]	@ (80023bc <Bsp_Tim_Init+0x90>)
 8002334:	f004 f9cc 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002338:	2104      	movs	r1, #4
 800233a:	4820      	ldr	r0, [pc, #128]	@ (80023bc <Bsp_Tim_Init+0x90>)
 800233c:	f004 f9c8 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002340:	2108      	movs	r1, #8
 8002342:	481e      	ldr	r0, [pc, #120]	@ (80023bc <Bsp_Tim_Init+0x90>)
 8002344:	f004 f9c4 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002348:	210c      	movs	r1, #12
 800234a:	481c      	ldr	r0, [pc, #112]	@ (80023bc <Bsp_Tim_Init+0x90>)
 800234c:	f004 f9c0 	bl	80066d0 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002350:	2100      	movs	r1, #0
 8002352:	481b      	ldr	r0, [pc, #108]	@ (80023c0 <Bsp_Tim_Init+0x94>)
 8002354:	f004 f9bc 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002358:	2104      	movs	r1, #4
 800235a:	4819      	ldr	r0, [pc, #100]	@ (80023c0 <Bsp_Tim_Init+0x94>)
 800235c:	f004 f9b8 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002360:	2108      	movs	r1, #8
 8002362:	4817      	ldr	r0, [pc, #92]	@ (80023c0 <Bsp_Tim_Init+0x94>)
 8002364:	f004 f9b4 	bl	80066d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002368:	210c      	movs	r1, #12
 800236a:	4815      	ldr	r0, [pc, #84]	@ (80023c0 <Bsp_Tim_Init+0x94>)
 800236c:	f004 f9b0 	bl	80066d0 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 8002370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002374:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800237a:	2104      	movs	r1, #4
 800237c:	4811      	ldr	r0, [pc, #68]	@ (80023c4 <Bsp_Tim_Init+0x98>)
 800237e:	f004 fc73 	bl	8006c68 <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <Bsp_Tim_Init+0x9c>)
 8002384:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800238a:	2104      	movs	r1, #4
 800238c:	480f      	ldr	r0, [pc, #60]	@ (80023cc <Bsp_Tim_Init+0xa0>)
 800238e:	f004 fc6b 	bl	8006c68 <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 8002392:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <Bsp_Tim_Init+0xa4>)
 8002394:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800239a:	2104      	movs	r1, #4
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <Bsp_Tim_Init+0xa8>)
 800239e:	f004 fc63 	bl	8006c68 <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <Bsp_Tim_Init+0xac>)
 80023a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	480b      	ldr	r0, [pc, #44]	@ (80023dc <Bsp_Tim_Init+0xb0>)
 80023ae:	f004 fc5b 	bl	8006c68 <HAL_TIM_Encoder_Start>


	//启动定时6中断
	HAL_TIM_Base_Start_IT(&htim6);
 80023b2:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <Bsp_Tim_Init+0xb4>)
 80023b4:	f004 f81c 	bl	80063f0 <HAL_TIM_Base_Start_IT>
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200005cc 	.word	0x200005cc
 80023c0:	2000077c 	.word	0x2000077c
 80023c4:	20000614 	.word	0x20000614
 80023c8:	40000400 	.word	0x40000400
 80023cc:	2000065c 	.word	0x2000065c
 80023d0:	40000800 	.word	0x40000800
 80023d4:	200006a4 	.word	0x200006a4
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	200006ec 	.word	0x200006ec
 80023e0:	20000734 	.word	0x20000734

080023e4 <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d103      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速
 80023f6:	f7ff f8eb 	bl	80015d0 <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度
 80023fa:	f7ff fc71 	bl	8001ce0 <Motion_Handle>

	if (htim->Instance == TIM7)//10us
	{

	}
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40001000 	.word	0x40001000

0800240c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_ADC3_Init+0x74>)
 800241e:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <MX_ADC3_Init+0x78>)
 8002420:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_ADC3_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_ADC3_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_ADC3_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_ADC3_Init+0x74>)
 8002436:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800243a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243c:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <MX_ADC3_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_ADC3_Init+0x74>)
 8002444:	2201      	movs	r2, #1
 8002446:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <MX_ADC3_Init+0x74>)
 800244a:	f000 ffe1 	bl	8003410 <HAL_ADC_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 f9d8 	bl	8002808 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002458:	2304      	movs	r3, #4
 800245a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800245c:	2301      	movs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_ADC3_Init+0x74>)
 800246a:	f001 fb83 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8002474:	f000 f9c8 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000548 	.word	0x20000548
 8002484:	40013c00 	.word	0x40013c00

08002488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <HAL_ADC_MspInit+0x6c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d121      	bne.n	80024ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024c0:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_ADC_MspInit+0x70>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = CCD_AO_Pin;
 80024d8:	2340      	movs	r3, #64	@ 0x40
 80024da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024dc:	2303      	movs	r3, #3
 80024de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CCD_AO_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	4805      	ldr	r0, [pc, #20]	@ (80024fc <HAL_ADC_MspInit+0x74>)
 80024e8:	f001 fee8 	bl	80042bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40013c00 	.word	0x40013c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40011c00 	.word	0x40011c00

08002500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	@ 0x30
 8002504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002506:	f107 0320 	add.w	r3, r7, #32
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002514:	4b45      	ldr	r3, [pc, #276]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a44      	ldr	r2, [pc, #272]	@ (800262c <MX_GPIO_Init+0x12c>)
 800251a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b42      	ldr	r3, [pc, #264]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b3f      	ldr	r3, [pc, #252]	@ (800262c <MX_GPIO_Init+0x12c>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a3e      	ldr	r2, [pc, #248]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b3c      	ldr	r3, [pc, #240]	@ (800262c <MX_GPIO_Init+0x12c>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002544:	4b39      	ldr	r3, [pc, #228]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a38      	ldr	r2, [pc, #224]	@ (800262c <MX_GPIO_Init+0x12c>)
 800254a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255c:	4b33      	ldr	r3, [pc, #204]	@ (800262c <MX_GPIO_Init+0x12c>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a32      	ldr	r2, [pc, #200]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b30      	ldr	r3, [pc, #192]	@ (800262c <MX_GPIO_Init+0x12c>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002574:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a2c      	ldr	r2, [pc, #176]	@ (800262c <MX_GPIO_Init+0x12c>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258c:	4b27      	ldr	r3, [pc, #156]	@ (800262c <MX_GPIO_Init+0x12c>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <MX_GPIO_Init+0x12c>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <MX_GPIO_Init+0x12c>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b21      	ldr	r3, [pc, #132]	@ (800262c <MX_GPIO_Init+0x12c>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a20      	ldr	r2, [pc, #128]	@ (800262c <MX_GPIO_Init+0x12c>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_GPIO_Init+0x12c>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CCD_SI_Pin|CCD_CLK_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	2130      	movs	r1, #48	@ 0x30
 80025c0:	481b      	ldr	r0, [pc, #108]	@ (8002630 <MX_GPIO_Init+0x130>)
 80025c2:	f002 f92f 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025c6:	2200      	movs	r2, #0
 80025c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025cc:	4819      	ldr	r0, [pc, #100]	@ (8002634 <MX_GPIO_Init+0x134>)
 80025ce:	f002 f929 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = CCD_SI_Pin|CCD_CLK_Pin;
 80025d2:	2330      	movs	r3, #48	@ 0x30
 80025d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2302      	movs	r3, #2
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e2:	f107 0320 	add.w	r3, r7, #32
 80025e6:	4619      	mov	r1, r3
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <MX_GPIO_Init+0x130>)
 80025ea:	f001 fe67 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin;
 80025ee:	2338      	movs	r3, #56	@ 0x38
 80025f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025fa:	f107 0320 	add.w	r3, r7, #32
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <MX_GPIO_Init+0x134>)
 8002602:	f001 fe5b 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2302      	movs	r3, #2
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	4619      	mov	r1, r3
 800261e:	4805      	ldr	r0, [pc, #20]	@ (8002634 <MX_GPIO_Init+0x134>)
 8002620:	f001 fe4c 	bl	80042bc <HAL_GPIO_Init>

}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	@ 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40011c00 	.word	0x40011c00
 8002634:	40012000 	.word	0x40012000

08002638 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <MX_I2C1_Init+0x50>)
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <MX_I2C1_Init+0x54>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002644:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <MX_I2C1_Init+0x58>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <MX_I2C1_Init+0x50>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800265a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <MX_I2C1_Init+0x50>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	@ (8002688 <MX_I2C1_Init+0x50>)
 8002676:	f002 f901 	bl	800487c <HAL_I2C_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002680:	f000 f8c2 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000578 	.word	0x20000578
 800268c:	40005400 	.word	0x40005400
 8002690:	00061a80 	.word	0x00061a80

08002694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a15      	ldr	r2, [pc, #84]	@ (8002704 <HAL_I2C_MspInit+0x70>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d123      	bne.n	80026fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80026cc:	23c0      	movs	r3, #192	@ 0xc0
 80026ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d0:	2312      	movs	r3, #18
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	480b      	ldr	r0, [pc, #44]	@ (800270c <HAL_I2C_MspInit+0x78>)
 80026e0:	f001 fdec 	bl	80042bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026ee:	61d3      	str	r3, [r2, #28]
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_I2C_MspInit+0x74>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026fc:	bf00      	nop
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40005400 	.word	0x40005400
 8002708:	40021000 	.word	0x40021000
 800270c:	40010c00 	.word	0x40010c00

08002710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002714:	f000 fdf6 	bl	8003304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002718:	f000 f819 	bl	800274e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271c:	f7ff fef0 	bl	8002500 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002720:	f000 f8f2 	bl	8002908 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002724:	f000 f9b4 	bl	8002a90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002728:	f000 fa06 	bl	8002b38 <MX_TIM3_Init>
  MX_TIM4_Init();
 800272c:	f000 fa58 	bl	8002be0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002730:	f000 faaa 	bl	8002c88 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002734:	f000 fafc 	bl	8002d30 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002738:	f000 fb30 	bl	8002d9c <MX_TIM8_Init>
  MX_ADC3_Init();
 800273c:	f7ff fe66 	bl	800240c <MX_ADC3_Init>
  MX_I2C1_Init();
 8002740:	f7ff ff7a 	bl	8002638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 8002744:	f7fe fe75 	bl	8001432 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8002748:	f7fe fe80 	bl	800144c <BSP_Loop>
 800274c:	e7fc      	b.n	8002748 <main+0x38>

0800274e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b096      	sub	sp, #88	@ 0x58
 8002752:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002754:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002758:	2228      	movs	r2, #40	@ 0x28
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f005 fe7d 	bl	800845c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002762:	f107 031c 	add.w	r3, r7, #28
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002782:	2301      	movs	r3, #1
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800278c:	2300      	movs	r3, #0
 800278e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002790:	2301      	movs	r3, #1
 8002792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002794:	2302      	movs	r3, #2
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800279c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800279e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80027a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027a8:	4618      	mov	r0, r3
 80027aa:	f002 fd9d 	bl	80052e8 <HAL_RCC_OscConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80027b4:	f000 f828 	bl	8002808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b8:	230f      	movs	r3, #15
 80027ba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027bc:	2302      	movs	r3, #2
 80027be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 f8f5 	bl	80059c4 <HAL_RCC_ClockConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027e0:	f000 f812 	bl	8002808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027e4:	2302      	movs	r3, #2
 80027e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fb1b 	bl	8005e2c <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80027fc:	f000 f804 	bl	8002808 <Error_Handler>
  }
}
 8002800:	bf00      	nop
 8002802:	3758      	adds	r7, #88	@ 0x58
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800280c:	b672      	cpsid	i
}
 800280e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <Error_Handler+0x8>

08002814 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_MspInit+0x60>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_MspInit+0x60>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6193      	str	r3, [r2, #24]
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <HAL_MspInit+0x60>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_MspInit+0x60>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <HAL_MspInit+0x60>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_MspInit+0x60>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800285e:	2005      	movs	r0, #5
 8002860:	f001 fcbc 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_MspInit+0x64>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4a04      	ldr	r2, [pc, #16]	@ (800288c <HAL_MspInit+0x64>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000

08002890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <NMI_Handler+0x4>

08002898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <MemManage_Handler+0x4>

080028a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f000 fd56 	bl	8003390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <TIM6_IRQHandler+0x10>)
 80028ee:	f004 fa79 	bl	8006de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000734 	.word	0x20000734

080028fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b096      	sub	sp, #88	@ 0x58
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	2220      	movs	r2, #32
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f005 fd8b 	bl	800845c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002946:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002948:	4a50      	ldr	r2, [pc, #320]	@ (8002a8c <MX_TIM1_Init+0x184>)
 800294a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800294c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <MX_TIM1_Init+0x180>)
 800294e:	2200      	movs	r2, #0
 8002950:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002952:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <MX_TIM1_Init+0x180>)
 800295a:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800295e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002960:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002966:	4b48      	ldr	r3, [pc, #288]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800296c:	4b46      	ldr	r3, [pc, #280]	@ (8002a88 <MX_TIM1_Init+0x180>)
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002972:	4845      	ldr	r0, [pc, #276]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002974:	f003 fc68 	bl	8006248 <HAL_TIM_Base_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800297e:	f7ff ff43 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002986:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002988:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800298c:	4619      	mov	r1, r3
 800298e:	483e      	ldr	r0, [pc, #248]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002990:	f004 fcd2 	bl	8007338 <HAL_TIM_ConfigClockSource>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800299a:	f7ff ff35 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800299e:	483a      	ldr	r0, [pc, #232]	@ (8002a88 <MX_TIM1_Init+0x180>)
 80029a0:	f003 fdb8 	bl	8006514 <HAL_TIM_PWM_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80029aa:	f7ff ff2d 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029ba:	4619      	mov	r1, r3
 80029bc:	4832      	ldr	r0, [pc, #200]	@ (8002a88 <MX_TIM1_Init+0x180>)
 80029be:	f005 fb9f 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029c8:	f7ff ff1e 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029cc:	2360      	movs	r3, #96	@ 0x60
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029d8:	2300      	movs	r3, #0
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ec:	2200      	movs	r2, #0
 80029ee:	4619      	mov	r1, r3
 80029f0:	4825      	ldr	r0, [pc, #148]	@ (8002a88 <MX_TIM1_Init+0x180>)
 80029f2:	f004 faff 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80029fc:	f7ff ff04 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a04:	2204      	movs	r2, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	481f      	ldr	r0, [pc, #124]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002a0a:	f004 faf3 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002a14:	f7ff fef8 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4819      	ldr	r0, [pc, #100]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002a22:	f004 fae7 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002a2c:	f7ff feec 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a34:	220c      	movs	r2, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	4813      	ldr	r0, [pc, #76]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002a3a:	f004 fadb 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002a44:	f7ff fee0 	bl	8002808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4807      	ldr	r0, [pc, #28]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002a6c:	f005 fc18 	bl	80082a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002a76:	f7ff fec7 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a7a:	4803      	ldr	r0, [pc, #12]	@ (8002a88 <MX_TIM1_Init+0x180>)
 8002a7c:	f000 fbb2 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002a80:	bf00      	nop
 8002a82:	3758      	adds	r7, #88	@ 0x58
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200005cc 	.word	0x200005cc
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	2224      	movs	r2, #36	@ 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fcdc 	bl	800845c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002ac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4619      	mov	r1, r3
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002b00:	f003 ff0e 	bl	8006920 <HAL_TIM_Encoder_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b0a:	f7ff fe7d 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	@ (8002b34 <MX_TIM2_Init+0xa4>)
 8002b1c:	f005 faf0 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b26:	f7ff fe6f 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	@ 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000614 	.word	0x20000614

08002b38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	@ 0x30
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	2224      	movs	r2, #36	@ 0x24
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 fc88 	bl	800845c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b54:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b56:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <MX_TIM3_Init+0xa4>)
 8002b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b92:	2301      	movs	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480c      	ldr	r0, [pc, #48]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002ba6:	f003 febb 	bl	8006920 <HAL_TIM_Encoder_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bb0:	f7ff fe2a 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <MX_TIM3_Init+0xa0>)
 8002bc2:	f005 fa9d 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002bcc:	f7ff fe1c 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	3730      	adds	r7, #48	@ 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2000065c 	.word	0x2000065c
 8002bdc:	40000400 	.word	0x40000400

08002be0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	@ 0x30
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	2224      	movs	r2, #36	@ 0x24
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 fc34 	bl	800845c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bfc:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002bfe:	4a21      	ldr	r2, [pc, #132]	@ (8002c84 <MX_TIM4_Init+0xa4>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c22:	2303      	movs	r3, #3
 8002c24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c4e:	f003 fe67 	bl	8006920 <HAL_TIM_Encoder_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c58:	f7ff fdd6 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <MX_TIM4_Init+0xa0>)
 8002c6a:	f005 fa49 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002c74:	f7ff fdc8 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	3730      	adds	r7, #48	@ 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200006a4 	.word	0x200006a4
 8002c84:	40000800 	.word	0x40000800

08002c88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	@ 0x30
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fbe0 	bl	800845c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002ca6:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <MX_TIM5_Init+0xa4>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002cf6:	f003 fe13 	bl	8006920 <HAL_TIM_Encoder_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d00:	f7ff fd82 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <MX_TIM5_Init+0xa0>)
 8002d12:	f005 f9f5 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d1c:	f7ff fd74 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3730      	adds	r7, #48	@ 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200006ec 	.word	0x200006ec
 8002d2c:	40000c00 	.word	0x40000c00

08002d30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d36:	463b      	mov	r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <MX_TIM6_Init+0x68>)
 8002d42:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d46:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d54:	2263      	movs	r2, #99	@ 0x63
 8002d56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d5e:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d60:	f003 fa72 	bl	8006248 <HAL_TIM_Base_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d6a:	f7ff fd4d 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4806      	ldr	r0, [pc, #24]	@ (8002d94 <MX_TIM6_Init+0x64>)
 8002d7c:	f005 f9c0 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d86:	f7ff fd3f 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000734 	.word	0x20000734
 8002d98:	40001000 	.word	0x40001000

08002d9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b096      	sub	sp, #88	@ 0x58
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 fb41 	bl	800845c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dda:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002ddc:	4a50      	ldr	r2, [pc, #320]	@ (8002f20 <MX_TIM8_Init+0x184>)
 8002dde:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002dee:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002df2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dfa:	4b48      	ldr	r3, [pc, #288]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e00:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e02:	2280      	movs	r2, #128	@ 0x80
 8002e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e06:	4845      	ldr	r0, [pc, #276]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e08:	f003 fa1e 	bl	8006248 <HAL_TIM_Base_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e12:	f7ff fcf9 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e1c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e20:	4619      	mov	r1, r3
 8002e22:	483e      	ldr	r0, [pc, #248]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e24:	f004 fa88 	bl	8007338 <HAL_TIM_ConfigClockSource>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002e2e:	f7ff fceb 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e32:	483a      	ldr	r0, [pc, #232]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e34:	f003 fb6e 	bl	8006514 <HAL_TIM_PWM_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e3e:	f7ff fce3 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4832      	ldr	r0, [pc, #200]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e52:	f005 f955 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002e5c:	f7ff fcd4 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e60:	2360      	movs	r3, #96	@ 0x60
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	4825      	ldr	r0, [pc, #148]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e86:	f004 f8b5 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002e90:	f7ff fcba 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	481f      	ldr	r0, [pc, #124]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002e9e:	f004 f8a9 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002ea8:	f7ff fcae 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4819      	ldr	r0, [pc, #100]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002eb6:	f004 f89d 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002ec0:	f7ff fca2 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec8:	220c      	movs	r2, #12
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4813      	ldr	r0, [pc, #76]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002ece:	f004 f891 	bl	8006ff4 <HAL_TIM_PWM_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002ed8:	f7ff fc96 	bl	8002808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4807      	ldr	r0, [pc, #28]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002f00:	f005 f9ce 	bl	80082a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002f0a:	f7ff fc7d 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f0e:	4803      	ldr	r0, [pc, #12]	@ (8002f1c <MX_TIM8_Init+0x180>)
 8002f10:	f000 f968 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002f14:	bf00      	nop
 8002f16:	3758      	adds	r7, #88	@ 0x58
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000077c 	.word	0x2000077c
 8002f20:	40013400 	.word	0x40013400

08002f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_TIM_Base_MspInit+0x8c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10c      	bne.n	8002f50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f36:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f40:	6193      	str	r3, [r2, #24]
 8002f42:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f4e:	e02a      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_TIM_Base_MspInit+0x94>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d114      	bne.n	8002f84 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a15      	ldr	r2, [pc, #84]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	61d3      	str	r3, [r2, #28]
 8002f66:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 2);
 8002f72:	2202      	movs	r2, #2
 8002f74:	2102      	movs	r1, #2
 8002f76:	2036      	movs	r0, #54	@ 0x36
 8002f78:	f001 f950 	bl	800421c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002f7c:	2036      	movs	r0, #54	@ 0x36
 8002f7e:	f001 f979 	bl	8004274 <HAL_NVIC_EnableIRQ>
}
 8002f82:	e010      	b.n	8002fa6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	@ (8002fbc <HAL_TIM_Base_MspInit+0x98>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f98:	6193      	str	r3, [r2, #24]
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_TIM_Base_MspInit+0x90>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40001000 	.word	0x40001000
 8002fbc:	40013400 	.word	0x40013400

08002fc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b092      	sub	sp, #72	@ 0x48
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fde:	d14f      	bne.n	8003080 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe0:	4b78      	ldr	r3, [pc, #480]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a77      	ldr	r2, [pc, #476]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b75      	ldr	r3, [pc, #468]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b72      	ldr	r3, [pc, #456]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003010:	4b6c      	ldr	r3, [pc, #432]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4a6b      	ldr	r2, [pc, #428]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6193      	str	r3, [r2, #24]
 800301c:	4b69      	ldr	r3, [pc, #420]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 8003028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	2300      	movs	r3, #0
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800303a:	4619      	mov	r1, r3
 800303c:	4862      	ldr	r0, [pc, #392]	@ (80031c8 <HAL_TIM_Encoder_MspInit+0x208>)
 800303e:	f001 f93d 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 8003042:	2308      	movs	r3, #8
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003046:	2300      	movs	r3, #0
 8003048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	485d      	ldr	r0, [pc, #372]	@ (80031cc <HAL_TIM_Encoder_MspInit+0x20c>)
 8003056:	f001 f931 	bl	80042bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800305a:	4b5d      	ldr	r3, [pc, #372]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003078:	4a55      	ldr	r2, [pc, #340]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 800307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800307e:	e09d      	b.n	80031bc <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a53      	ldr	r2, [pc, #332]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x214>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d136      	bne.n	80030f8 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800308a:	4b4e      	ldr	r3, [pc, #312]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a4d      	ldr	r2, [pc, #308]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b4b      	ldr	r3, [pc, #300]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	4b48      	ldr	r3, [pc, #288]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	4a47      	ldr	r2, [pc, #284]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	6193      	str	r3, [r2, #24]
 80030ae:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80030ba:	2330      	movs	r3, #48	@ 0x30
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030be:	2300      	movs	r3, #0
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ca:	4619      	mov	r1, r3
 80030cc:	483f      	ldr	r0, [pc, #252]	@ (80031cc <HAL_TIM_Encoder_MspInit+0x20c>)
 80030ce:	f001 f8f5 	bl	80042bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80030d2:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80030de:	643b      	str	r3, [r7, #64]	@ 0x40
 80030e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80030e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80030e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80030f0:	4a37      	ldr	r2, [pc, #220]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	6053      	str	r3, [r2, #4]
}
 80030f6:	e061      	b.n	80031bc <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a36      	ldr	r2, [pc, #216]	@ (80031d8 <HAL_TIM_Encoder_MspInit+0x218>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d133      	bne.n	800316a <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003102:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003120:	f043 0320 	orr.w	r3, r3, #32
 8003124:	6193      	str	r3, [r2, #24]
 8003126:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 8003132:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003144:	4619      	mov	r1, r3
 8003146:	4825      	ldr	r0, [pc, #148]	@ (80031dc <HAL_TIM_Encoder_MspInit+0x21c>)
 8003148:	f001 f8b8 	bl	80042bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800314c:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
 8003152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003154:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003158:	647b      	str	r3, [r7, #68]	@ 0x44
 800315a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003160:	647b      	str	r3, [r7, #68]	@ 0x44
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x210>)
 8003164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003166:	6053      	str	r3, [r2, #4]
}
 8003168:	e028      	b.n	80031bc <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1c      	ldr	r2, [pc, #112]	@ (80031e0 <HAL_TIM_Encoder_MspInit+0x220>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d123      	bne.n	80031bc <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003174:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	61d3      	str	r3, [r2, #28]
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	4a0c      	ldr	r2, [pc, #48]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6193      	str	r3, [r2, #24]
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x204>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 80031a4:	2303      	movs	r3, #3
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031b4:	4619      	mov	r1, r3
 80031b6:	4804      	ldr	r0, [pc, #16]	@ (80031c8 <HAL_TIM_Encoder_MspInit+0x208>)
 80031b8:	f001 f880 	bl	80042bc <HAL_GPIO_Init>
}
 80031bc:	bf00      	nop
 80031be:	3748      	adds	r7, #72	@ 0x48
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010800 	.word	0x40010800
 80031cc:	40010c00 	.word	0x40010c00
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40011400 	.word	0x40011400
 80031e0:	40000c00 	.word	0x40000c00

080031e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	@ 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a28      	ldr	r2, [pc, #160]	@ (80032a0 <HAL_TIM_MspPostInit+0xbc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d12b      	bne.n	800325c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003204:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 800320a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 800321c:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2302      	movs	r3, #2
 8003228:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	481d      	ldr	r0, [pc, #116]	@ (80032a8 <HAL_TIM_MspPostInit+0xc4>)
 8003232:	f001 f843 	bl	80042bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_TIM_MspPostInit+0xc8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
 8003254:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <HAL_TIM_MspPostInit+0xc8>)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800325a:	e01d      	b.n	8003298 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <HAL_TIM_MspPostInit+0xcc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d118      	bne.n	8003298 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003266:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	4a0e      	ldr	r2, [pc, #56]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 800326c:	f043 0310 	orr.w	r3, r3, #16
 8003270:	6193      	str	r3, [r2, #24]
 8003272:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <HAL_TIM_MspPostInit+0xc0>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 800327e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2302      	movs	r3, #2
 800328a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	4808      	ldr	r0, [pc, #32]	@ (80032b4 <HAL_TIM_MspPostInit+0xd0>)
 8003294:	f001 f812 	bl	80042bc <HAL_GPIO_Init>
}
 8003298:	bf00      	nop
 800329a:	3728      	adds	r7, #40	@ 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40011800 	.word	0x40011800
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40011000 	.word	0x40011000

080032b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032b8:	f7ff fb20 	bl	80028fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032bc:	480b      	ldr	r0, [pc, #44]	@ (80032ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032be:	490c      	ldr	r1, [pc, #48]	@ (80032f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032c0:	4a0c      	ldr	r2, [pc, #48]	@ (80032f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c4:	e002      	b.n	80032cc <LoopCopyDataInit>

080032c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ca:	3304      	adds	r3, #4

080032cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d0:	d3f9      	bcc.n	80032c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d2:	4a09      	ldr	r2, [pc, #36]	@ (80032f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032d4:	4c09      	ldr	r4, [pc, #36]	@ (80032fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d8:	e001      	b.n	80032de <LoopFillZerobss>

080032da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032dc:	3204      	adds	r2, #4

080032de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e0:	d3fb      	bcc.n	80032da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032e2:	f005 f8c3 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032e6:	f7ff fa13 	bl	8002710 <main>
  bx lr
 80032ea:	4770      	bx	lr
  ldr r0, =_sdata
 80032ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80032f4:	080086e4 	.word	0x080086e4
  ldr r2, =_sbss
 80032f8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80032fc:	200007c8 	.word	0x200007c8

08003300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <ADC1_2_IRQHandler>
	...

08003304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_Init+0x28>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_Init+0x28>)
 800330e:	f043 0310 	orr.w	r3, r3, #16
 8003312:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003314:	2003      	movs	r0, #3
 8003316:	f000 ff61 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331a:	2003      	movs	r0, #3
 800331c:	f000 f808 	bl	8003330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003320:	f7ff fa82 	bl	8002828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40022000 	.word	0x40022000

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003338:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_InitTick+0x54>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_InitTick+0x58>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003346:	fbb3 f3f1 	udiv	r3, r3, r1
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f000 ffa8 	bl	80042a4 <HAL_SYSTICK_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00e      	b.n	800337c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d80a      	bhi.n	800337a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003364:	2200      	movs	r2, #0
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	f000 ff56 	bl	800421c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003370:	4a06      	ldr	r2, [pc, #24]	@ (800338c <HAL_InitTick+0x5c>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000001c 	.word	0x2000001c
 8003388:	20000024 	.word	0x20000024
 800338c:	20000020 	.word	0x20000020

08003390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <HAL_IncTick+0x1c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_IncTick+0x20>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	4a03      	ldr	r2, [pc, #12]	@ (80033b0 <HAL_IncTick+0x20>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	20000024 	.word	0x20000024
 80033b0:	200007c4 	.word	0x200007c4

080033b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b02      	ldr	r3, [pc, #8]	@ (80033c4 <HAL_GetTick+0x10>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	200007c4 	.word	0x200007c4

080033c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff fff0 	bl	80033b4 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d005      	beq.n	80033ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_Delay+0x44>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ee:	bf00      	nop
 80033f0:	f7ff ffe0 	bl	80033b4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d8f7      	bhi.n	80033f0 <HAL_Delay+0x28>
  {
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000024 	.word	0x20000024

08003410 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e188      	b.n	8003744 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8c      	ldr	r2, [pc, #560]	@ (8003668 <HAL_ADC_Init+0x258>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_ADC_Init+0x4a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a8a      	ldr	r2, [pc, #552]	@ (800366c <HAL_ADC_Init+0x25c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_ADC_Init+0x4a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a89      	ldr	r2, [pc, #548]	@ (8003670 <HAL_ADC_Init+0x260>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_ADC_Init+0x4a>
 8003450:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8003454:	4887      	ldr	r0, [pc, #540]	@ (8003674 <HAL_ADC_Init+0x264>)
 8003456:	f7ff f9dd 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_ADC_Init+0x66>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800346a:	d004      	beq.n	8003476 <HAL_ADC_Init+0x66>
 800346c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003470:	4880      	ldr	r0, [pc, #512]	@ (8003674 <HAL_ADC_Init+0x264>)
 8003472:	f7ff f9cf 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_ADC_Init+0x82>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003486:	d004      	beq.n	8003492 <HAL_ADC_Init+0x82>
 8003488:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800348c:	4879      	ldr	r0, [pc, #484]	@ (8003674 <HAL_ADC_Init+0x264>)
 800348e:	f7ff f9c1 	bl	8002814 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7b1b      	ldrb	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_ADC_Init+0x9c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7b1b      	ldrb	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d004      	beq.n	80034ac <HAL_ADC_Init+0x9c>
 80034a2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80034a6:	4873      	ldr	r0, [pc, #460]	@ (8003674 <HAL_ADC_Init+0x264>)
 80034a8:	f7ff f9b4 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d044      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034bc:	d03f      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80034c6:	d03a      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d0:	d035      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 80034da:	d030      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034e4:	d02b      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d027      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f6:	d022      	beq.n	800353e <HAL_ADC_Init+0x12e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003500:	d01d      	beq.n	800353e <HAL_ADC_Init+0x12e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 800350a:	d018      	beq.n	800353e <HAL_ADC_Init+0x12e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003514:	d013      	beq.n	800353e <HAL_ADC_Init+0x12e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800351e:	d00e      	beq.n	800353e <HAL_ADC_Init+0x12e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003528:	d009      	beq.n	800353e <HAL_ADC_Init+0x12e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003532:	d004      	beq.n	800353e <HAL_ADC_Init+0x12e>
 8003534:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003538:	484e      	ldr	r0, [pc, #312]	@ (8003674 <HAL_ADC_Init+0x264>)
 800353a:	f7ff f96b 	bl	8002814 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02a      	beq.n	800359c <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_ADC_Init+0x146>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d904      	bls.n	8003560 <HAL_ADC_Init+0x150>
 8003556:	f240 11b1 	movw	r1, #433	@ 0x1b1
 800355a:	4846      	ldr	r0, [pc, #280]	@ (8003674 <HAL_ADC_Init+0x264>)
 800355c:	f7ff f95a 	bl	8002814 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7d1b      	ldrb	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_ADC_Init+0x16a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7d1b      	ldrb	r3, [r3, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d004      	beq.n	800357a <HAL_ADC_Init+0x16a>
 8003570:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8003574:	483f      	ldr	r0, [pc, #252]	@ (8003674 <HAL_ADC_Init+0x264>)
 8003576:	f7ff f94d 	bl	8002814 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7d1b      	ldrb	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_ADC_Init+0x182>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d904      	bls.n	800359c <HAL_ADC_Init+0x18c>
 8003592:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8003596:	4837      	ldr	r0, [pc, #220]	@ (8003674 <HAL_ADC_Init+0x264>)
 8003598:	f7ff f93c 	bl	8002814 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fe ff68 	bl	8002488 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fd01 	bl	8003fc0 <ADC_ConversionStop_Disable>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 80b1 	bne.w	8003732 <HAL_ADC_Init+0x322>
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80ad 	bne.w	8003732 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	f043 0202 	orr.w	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	491e      	ldr	r1, [pc, #120]	@ (8003670 <HAL_ADC_Init+0x260>)
 80035f6:	428b      	cmp	r3, r1
 80035f8:	d10a      	bne.n	8003610 <HAL_ADC_Init+0x200>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003602:	d002      	beq.n	800360a <HAL_ADC_Init+0x1fa>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	e004      	b.n	8003614 <HAL_ADC_Init+0x204>
 800360a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800360e:	e001      	b.n	8003614 <HAL_ADC_Init+0x204>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003614:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7b1b      	ldrb	r3, [r3, #12]
 800361a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800361c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362c:	d003      	beq.n	8003636 <HAL_ADC_Init+0x226>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_ADC_Init+0x22c>
 8003636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800363a:	e000      	b.n	800363e <HAL_ADC_Init+0x22e>
 800363c:	2300      	movs	r3, #0
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7d1b      	ldrb	r3, [r3, #20]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d121      	bne.n	8003690 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7b1b      	ldrb	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d111      	bne.n	8003678 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	3b01      	subs	r3, #1
 800365a:	035a      	lsls	r2, r3, #13
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e013      	b.n	8003690 <HAL_ADC_Init+0x280>
 8003668:	40012400 	.word	0x40012400
 800366c:	40012800 	.word	0x40012800
 8003670:	40013c00 	.word	0x40013c00
 8003674:	080084cc 	.word	0x080084cc
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	4b28      	ldr	r3, [pc, #160]	@ (800374c <HAL_ADC_Init+0x33c>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c0:	d003      	beq.n	80036ca <HAL_ADC_Init+0x2ba>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d104      	bne.n	80036d4 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	051b      	lsls	r3, r3, #20
 80036d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b18      	ldr	r3, [pc, #96]	@ (8003750 <HAL_ADC_Init+0x340>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d10b      	bne.n	8003710 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800370e:	e018      	b.n	8003742 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	f023 0312 	bic.w	r3, r3, #18
 8003718:	f043 0210 	orr.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003730:	e007      	b.n	8003742 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	ffe1f7fd 	.word	0xffe1f7fd
 8003750:	ff1f0efe 	.word	0xff1f0efe

08003754 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5a      	ldr	r2, [pc, #360]	@ (80038d0 <HAL_ADC_Start+0x17c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_ADC_Start+0x34>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a59      	ldr	r2, [pc, #356]	@ (80038d4 <HAL_ADC_Start+0x180>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_ADC_Start+0x34>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a57      	ldr	r2, [pc, #348]	@ (80038d8 <HAL_ADC_Start+0x184>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_ADC_Start+0x34>
 800377e:	f240 4111 	movw	r1, #1041	@ 0x411
 8003782:	4856      	ldr	r0, [pc, #344]	@ (80038dc <HAL_ADC_Start+0x188>)
 8003784:	f7ff f846 	bl	8002814 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_ADC_Start+0x42>
 8003792:	2302      	movs	r3, #2
 8003794:	e098      	b.n	80038c8 <HAL_ADC_Start+0x174>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fbb4 	bl	8003f0c <ADC_Enable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 8087 	bne.w	80038be <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a42      	ldr	r2, [pc, #264]	@ (80038d4 <HAL_ADC_Start+0x180>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d105      	bne.n	80037da <HAL_ADC_Start+0x86>
 80037ce:	4b40      	ldr	r3, [pc, #256]	@ (80038d0 <HAL_ADC_Start+0x17c>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d026      	beq.n	8003842 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003804:	e01d      	b.n	8003842 <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2e      	ldr	r2, [pc, #184]	@ (80038d0 <HAL_ADC_Start+0x17c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_ADC_Start+0xd2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <HAL_ADC_Start+0x180>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <HAL_ADC_Start+0xee>
 8003826:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <HAL_ADC_Start+0x17c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800383a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	f023 0206 	bic.w	r2, r3, #6
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	62da      	str	r2, [r3, #44]	@ 0x2c
 800385a:	e002      	b.n	8003862 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f06f 0202 	mvn.w	r2, #2
 8003872:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800387e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003882:	d113      	bne.n	80038ac <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003888:	4a12      	ldr	r2, [pc, #72]	@ (80038d4 <HAL_ADC_Start+0x180>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d105      	bne.n	800389a <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800388e:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <HAL_ADC_Start+0x17c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	e00c      	b.n	80038c6 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	e003      	b.n	80038c6 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40012400 	.word	0x40012400
 80038d4:	40012800 	.word	0x40012800
 80038d8:	40013c00 	.word	0x40013c00
 80038dc:	080084cc 	.word	0x080084cc

080038e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a80      	ldr	r2, [pc, #512]	@ (8003afc <HAL_ADC_PollForConversion+0x21c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_ADC_PollForConversion+0x3e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a7e      	ldr	r2, [pc, #504]	@ (8003b00 <HAL_ADC_PollForConversion+0x220>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_ADC_PollForConversion+0x3e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b04 <HAL_ADC_PollForConversion+0x224>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_ADC_PollForConversion+0x3e>
 8003914:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 8003918:	487b      	ldr	r0, [pc, #492]	@ (8003b08 <HAL_ADC_PollForConversion+0x228>)
 800391a:	f7fe ff7b 	bl	8002814 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800391e:	f7ff fd49 	bl	80033b4 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0d3      	b.n	8003af2 <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d131      	bne.n	80039bc <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d12a      	bne.n	80039bc <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003966:	e021      	b.n	80039ac <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d01d      	beq.n	80039ac <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_ADC_PollForConversion+0xa6>
 8003976:	f7ff fd1d 	bl	80033b4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d212      	bcs.n	80039ac <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0a2      	b.n	8003af2 <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0d6      	beq.n	8003968 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80039ba:	e070      	b.n	8003a9e <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80039bc:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <HAL_ADC_PollForConversion+0x22c>)
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	2002      	movs	r0, #2
 80039c2:	f002 fb49 	bl	8006058 <HAL_RCCEx_GetPeriphCLKFreq>
 80039c6:	4603      	mov	r3, r0
 80039c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003b10 <HAL_ADC_PollForConversion+0x230>)
 80039d4:	400b      	ands	r3, r1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x12c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68d9      	ldr	r1, [r3, #12]
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_ADC_PollForConversion+0x234>)
 80039e2:	400b      	ands	r3, r1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x12c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6919      	ldr	r1, [r3, #16]
 80039ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_ADC_PollForConversion+0x238>)
 80039f0:	400b      	ands	r3, r1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_ADC_PollForConversion+0x128>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68d9      	ldr	r1, [r3, #12]
 80039fc:	4b47      	ldr	r3, [pc, #284]	@ (8003b1c <HAL_ADC_PollForConversion+0x23c>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_PollForConversion+0x128>
 8003a04:	2314      	movs	r3, #20
 8003a06:	e020      	b.n	8003a4a <HAL_ADC_PollForConversion+0x16a>
 8003a08:	2329      	movs	r3, #41	@ 0x29
 8003a0a:	e01e      	b.n	8003a4a <HAL_ADC_PollForConversion+0x16a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6919      	ldr	r1, [r3, #16]
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_ADC_PollForConversion+0x238>)
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_ADC_PollForConversion+0x148>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68d9      	ldr	r1, [r3, #12]
 8003a20:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <HAL_ADC_PollForConversion+0x23c>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_ADC_PollForConversion+0x164>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6919      	ldr	r1, [r3, #16]
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b20 <HAL_ADC_PollForConversion+0x240>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x168>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68d9      	ldr	r1, [r3, #12]
 8003a3c:	4b38      	ldr	r3, [pc, #224]	@ (8003b20 <HAL_ADC_PollForConversion+0x240>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x168>
 8003a44:	2354      	movs	r3, #84	@ 0x54
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_PollForConversion+0x16a>
 8003a48:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003a50:	e021      	b.n	8003a96 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d01a      	beq.n	8003a90 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_ADC_PollForConversion+0x190>
 8003a60:	f7ff fca8 	bl	80033b4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d20f      	bcs.n	8003a90 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d90b      	bls.n	8003a90 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e030      	b.n	8003af2 <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d8d9      	bhi.n	8003a52 <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f06f 0212 	mvn.w	r2, #18
 8003aa6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003abe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ac2:	d115      	bne.n	8003af0 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd90      	pop	{r4, r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40012400 	.word	0x40012400
 8003b00:	40012800 	.word	0x40012800
 8003b04:	40013c00 	.word	0x40013c00
 8003b08:	080084cc 	.word	0x080084cc
 8003b0c:	2000001c 	.word	0x2000001c
 8003b10:	24924924 	.word	0x24924924
 8003b14:	00924924 	.word	0x00924924
 8003b18:	12492492 	.word	0x12492492
 8003b1c:	00492492 	.word	0x00492492
 8003b20:	00249249 	.word	0x00249249

08003b24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <HAL_ADC_GetValue+0x40>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_ADC_GetValue+0x30>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <HAL_ADC_GetValue+0x44>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_ADC_GetValue+0x30>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_ADC_GetValue+0x48>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_ADC_GetValue+0x30>
 8003b4a:	f240 61e5 	movw	r1, #1765	@ 0x6e5
 8003b4e:	4808      	ldr	r0, [pc, #32]	@ (8003b70 <HAL_ADC_GetValue+0x4c>)
 8003b50:	f7fe fe60 	bl	8002814 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40012400 	.word	0x40012400
 8003b68:	40012800 	.word	0x40012800
 8003b6c:	40013c00 	.word	0x40013c00
 8003b70:	080084cc 	.word	0x080084cc

08003b74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a8b      	ldr	r2, [pc, #556]	@ (8003db8 <HAL_ADC_ConfigChannel+0x244>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x3a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a89      	ldr	r2, [pc, #548]	@ (8003dbc <HAL_ADC_ConfigChannel+0x248>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x3a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a88      	ldr	r2, [pc, #544]	@ (8003dc0 <HAL_ADC_ConfigChannel+0x24c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x3a>
 8003ba4:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8003ba8:	4886      	ldr	r0, [pc, #536]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x250>)
 8003baa:	f7fe fe33 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d048      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d044      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d040      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d03c      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d038      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d034      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d030      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b07      	cmp	r3, #7
 8003bec:	d02c      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d028      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	d024      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b0a      	cmp	r3, #10
 8003c04:	d020      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b0b      	cmp	r3, #11
 8003c0c:	d01c      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d018      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b0d      	cmp	r3, #13
 8003c1c:	d014      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b0e      	cmp	r3, #14
 8003c24:	d010      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	d00c      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d008      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b11      	cmp	r3, #17
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xd4>
 8003c3e:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8003c42:	4860      	ldr	r0, [pc, #384]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x250>)
 8003c44:	f7fe fde6 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d040      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d03c      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d038      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d034      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d030      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d02c      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b07      	cmp	r3, #7
 8003c7e:	d028      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d024      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	d020      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b0a      	cmp	r3, #10
 8003c96:	d01c      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b0b      	cmp	r3, #11
 8003c9e:	d018      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d014      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b0d      	cmp	r3, #13
 8003cae:	d010      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b0e      	cmp	r3, #14
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d008      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d004      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x15e>
 8003cc8:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 8003ccc:	483d      	ldr	r0, [pc, #244]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x250>)
 8003cce:	f7fe fda1 	bl	8002814 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d020      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d01c      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d018      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d014      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d010      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d00c      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d008      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b07      	cmp	r3, #7
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003d12:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8003d16:	482b      	ldr	r0, [pc, #172]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x250>)
 8003d18:	f7fe fd7c 	bl	8002814 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x1b6>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0e5      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x382>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d81c      	bhi.n	8003d74 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b05      	subs	r3, #5
 8003d4c:	221f      	movs	r2, #31
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	4019      	ands	r1, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b05      	subs	r3, #5
 8003d66:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d72:	e045      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d825      	bhi.n	8003dc8 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3b23      	subs	r3, #35	@ 0x23
 8003d8e:	221f      	movs	r2, #31
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	4019      	ands	r1, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	3b23      	subs	r3, #35	@ 0x23
 8003da8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003db4:	e024      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x28c>
 8003db6:	bf00      	nop
 8003db8:	40012400 	.word	0x40012400
 8003dbc:	40012800 	.word	0x40012800
 8003dc0:	40013c00 	.word	0x40013c00
 8003dc4:	080084cc 	.word	0x080084cc
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3b41      	subs	r3, #65	@ 0x41
 8003dda:	221f      	movs	r2, #31
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	4019      	ands	r1, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	3b41      	subs	r3, #65	@ 0x41
 8003df4:	fa00 f203 	lsl.w	r2, r0, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b09      	cmp	r3, #9
 8003e06:	d91c      	bls.n	8003e42 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	3b1e      	subs	r3, #30
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	4019      	ands	r1, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6898      	ldr	r0, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	3b1e      	subs	r3, #30
 8003e34:	fa00 f203 	lsl.w	r2, r0, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	60da      	str	r2, [r3, #12]
 8003e40:	e019      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6919      	ldr	r1, [r3, #16]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	2207      	movs	r2, #7
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	4019      	ands	r1, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6898      	ldr	r0, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d003      	beq.n	8003e86 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e82:	2b11      	cmp	r3, #17
 8003e84:	d132      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <HAL_ADC_ConfigChannel+0x38c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d125      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d126      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003eac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d11a      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eb6:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_ADC_ConfigChannel+0x390>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <HAL_ADC_ConfigChannel+0x394>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	0c9a      	lsrs	r2, r3, #18
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ecc:	e002      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f9      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x35a>
 8003eda:	e007      	b.n	8003eec <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40012400 	.word	0x40012400
 8003f04:	2000001c 	.word	0x2000001c
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d040      	beq.n	8003fac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <ADC_Enable+0xac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fbc <ADC_Enable+0xb0>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9b      	lsrs	r3, r3, #18
 8003f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f48:	e002      	b.n	8003f50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f9      	bne.n	8003f4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f56:	f7ff fa2d 	bl	80033b4 <HAL_GetTick>
 8003f5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f5c:	e01f      	b.n	8003f9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f5e:	f7ff fa29 	bl	80033b4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d918      	bls.n	8003f9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d011      	beq.n	8003f9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e007      	b.n	8003fae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d1d8      	bne.n	8003f5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000001c 	.word	0x2000001c
 8003fbc:	431bde83 	.word	0x431bde83

08003fc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d12e      	bne.n	8004038 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fea:	f7ff f9e3 	bl	80033b4 <HAL_GetTick>
 8003fee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ff0:	e01b      	b.n	800402a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ff2:	f7ff f9df 	bl	80033b4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d914      	bls.n	800402a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10d      	bne.n	800402a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d0dc      	beq.n	8003ff2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <__NVIC_SetPriorityGrouping+0x44>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004060:	4013      	ands	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800406c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004076:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <__NVIC_SetPriorityGrouping+0x44>)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	60d3      	str	r3, [r2, #12]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004090:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	f003 0307 	and.w	r3, r3, #7
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db0b      	blt.n	80040d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4906      	ldr	r1, [pc, #24]	@ (80040dc <__NVIC_EnableIRQ+0x34>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2001      	movs	r0, #1
 80040ca:	fa00 f202 	lsl.w	r2, r0, r2
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0a      	blt.n	800410a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	490c      	ldr	r1, [pc, #48]	@ (800412c <__NVIC_SetPriority+0x4c>)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	440b      	add	r3, r1
 8004104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004108:	e00a      	b.n	8004120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4908      	ldr	r1, [pc, #32]	@ (8004130 <__NVIC_SetPriority+0x50>)
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3b04      	subs	r3, #4
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	440b      	add	r3, r1
 800411e:	761a      	strb	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	@ 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf28      	it	cs
 8004152:	2304      	movcs	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3304      	adds	r3, #4
 800415a:	2b06      	cmp	r3, #6
 800415c:	d902      	bls.n	8004164 <NVIC_EncodePriority+0x30>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b03      	subs	r3, #3
 8004162:	e000      	b.n	8004166 <NVIC_EncodePriority+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	401a      	ands	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	43d9      	mvns	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	4313      	orrs	r3, r2
         );
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	@ 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f7ff ff90 	bl	80040e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b07      	cmp	r3, #7
 80041e8:	d00f      	beq.n	800420a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d00c      	beq.n	800420a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d009      	beq.n	800420a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d006      	beq.n	800420a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d003      	beq.n	800420a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004202:	2191      	movs	r1, #145	@ 0x91
 8004204:	4804      	ldr	r0, [pc, #16]	@ (8004218 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004206:	f7fe fb05 	bl	8002814 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff1a 	bl	8004044 <__NVIC_SetPriorityGrouping>
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	08008504 	.word	0x08008504

0800421c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b0f      	cmp	r3, #15
 8004232:	d903      	bls.n	800423c <HAL_NVIC_SetPriority+0x20>
 8004234:	21a9      	movs	r1, #169	@ 0xa9
 8004236:	480e      	ldr	r0, [pc, #56]	@ (8004270 <HAL_NVIC_SetPriority+0x54>)
 8004238:	f7fe faec 	bl	8002814 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d903      	bls.n	800424a <HAL_NVIC_SetPriority+0x2e>
 8004242:	21aa      	movs	r1, #170	@ 0xaa
 8004244:	480a      	ldr	r0, [pc, #40]	@ (8004270 <HAL_NVIC_SetPriority+0x54>)
 8004246:	f7fe fae5 	bl	8002814 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800424a:	f7ff ff1f 	bl	800408c <__NVIC_GetPriorityGrouping>
 800424e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f7ff ff6d 	bl	8004134 <NVIC_EncodePriority>
 800425a:	4602      	mov	r2, r0
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff3c 	bl	80040e0 <__NVIC_SetPriority>
}
 8004268:	bf00      	nop
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08008504 	.word	0x08008504

08004274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	da03      	bge.n	800428e <HAL_NVIC_EnableIRQ+0x1a>
 8004286:	21bd      	movs	r1, #189	@ 0xbd
 8004288:	4805      	ldr	r0, [pc, #20]	@ (80042a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800428a:	f7fe fac3 	bl	8002814 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff08 	bl	80040a8 <__NVIC_EnableIRQ>
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08008504 	.word	0x08008504

080042a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff73 	bl	8004198 <SysTick_Config>
 80042b2:	4603      	mov	r3, r0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a94      	ldr	r2, [pc, #592]	@ (8004524 <HAL_GPIO_Init+0x268>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01b      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a93      	ldr	r2, [pc, #588]	@ (8004528 <HAL_GPIO_Init+0x26c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d017      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a92      	ldr	r2, [pc, #584]	@ (800452c <HAL_GPIO_Init+0x270>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a91      	ldr	r2, [pc, #580]	@ (8004530 <HAL_GPIO_Init+0x274>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a90      	ldr	r2, [pc, #576]	@ (8004534 <HAL_GPIO_Init+0x278>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a8f      	ldr	r2, [pc, #572]	@ (8004538 <HAL_GPIO_Init+0x27c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <HAL_GPIO_Init+0x52>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a8e      	ldr	r2, [pc, #568]	@ (800453c <HAL_GPIO_Init+0x280>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x52>
 8004306:	21bd      	movs	r1, #189	@ 0xbd
 8004308:	488d      	ldr	r0, [pc, #564]	@ (8004540 <HAL_GPIO_Init+0x284>)
 800430a:	f7fe fa83 	bl	8002814 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_GPIO_Init+0x66>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004320:	d303      	bcc.n	800432a <HAL_GPIO_Init+0x6e>
 8004322:	21be      	movs	r1, #190	@ 0xbe
 8004324:	4886      	ldr	r0, [pc, #536]	@ (8004540 <HAL_GPIO_Init+0x284>)
 8004326:	f7fe fa75 	bl	8002814 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8236 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	f000 8231 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b11      	cmp	r3, #17
 8004344:	f000 822c 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	f000 8227 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b12      	cmp	r3, #18
 8004358:	f000 8222 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a78      	ldr	r2, [pc, #480]	@ (8004544 <HAL_GPIO_Init+0x288>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 821c 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a76      	ldr	r2, [pc, #472]	@ (8004548 <HAL_GPIO_Init+0x28c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f000 8216 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a74      	ldr	r2, [pc, #464]	@ (800454c <HAL_GPIO_Init+0x290>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f000 8210 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a72      	ldr	r2, [pc, #456]	@ (8004550 <HAL_GPIO_Init+0x294>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 820a 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a70      	ldr	r2, [pc, #448]	@ (8004554 <HAL_GPIO_Init+0x298>)
 8004392:	4293      	cmp	r3, r2
 8004394:	f000 8204 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a6e      	ldr	r2, [pc, #440]	@ (8004558 <HAL_GPIO_Init+0x29c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 81fe 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	f000 81f9 	beq.w	80047a0 <HAL_GPIO_Init+0x4e4>
 80043ae:	21bf      	movs	r1, #191	@ 0xbf
 80043b0:	4863      	ldr	r0, [pc, #396]	@ (8004540 <HAL_GPIO_Init+0x284>)
 80043b2:	f7fe fa2f 	bl	8002814 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b6:	e1f3      	b.n	80047a0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043b8:	2201      	movs	r2, #1
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f040 81e2 	bne.w	800479a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a52      	ldr	r2, [pc, #328]	@ (8004524 <HAL_GPIO_Init+0x268>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01b      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a51      	ldr	r2, [pc, #324]	@ (8004528 <HAL_GPIO_Init+0x26c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a50      	ldr	r2, [pc, #320]	@ (800452c <HAL_GPIO_Init+0x270>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004530 <HAL_GPIO_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004534 <HAL_GPIO_Init+0x278>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4d      	ldr	r2, [pc, #308]	@ (8004538 <HAL_GPIO_Init+0x27c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4c      	ldr	r2, [pc, #304]	@ (800453c <HAL_GPIO_Init+0x280>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x15a>
 800440e:	21cd      	movs	r1, #205	@ 0xcd
 8004410:	484b      	ldr	r0, [pc, #300]	@ (8004540 <HAL_GPIO_Init+0x284>)
 8004412:	f7fe f9ff 	bl	8002814 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a4f      	ldr	r2, [pc, #316]	@ (8004558 <HAL_GPIO_Init+0x29c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	f000 80c7 	beq.w	80045b0 <HAL_GPIO_Init+0x2f4>
 8004422:	4a4d      	ldr	r2, [pc, #308]	@ (8004558 <HAL_GPIO_Init+0x29c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f200 80ed 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 800442a:	4a48      	ldr	r2, [pc, #288]	@ (800454c <HAL_GPIO_Init+0x290>)
 800442c:	4293      	cmp	r3, r2
 800442e:	f000 80bf 	beq.w	80045b0 <HAL_GPIO_Init+0x2f4>
 8004432:	4a46      	ldr	r2, [pc, #280]	@ (800454c <HAL_GPIO_Init+0x290>)
 8004434:	4293      	cmp	r3, r2
 8004436:	f200 80e5 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 800443a:	4a46      	ldr	r2, [pc, #280]	@ (8004554 <HAL_GPIO_Init+0x298>)
 800443c:	4293      	cmp	r3, r2
 800443e:	f000 80b7 	beq.w	80045b0 <HAL_GPIO_Init+0x2f4>
 8004442:	4a44      	ldr	r2, [pc, #272]	@ (8004554 <HAL_GPIO_Init+0x298>)
 8004444:	4293      	cmp	r3, r2
 8004446:	f200 80dd 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 800444a:	4a3f      	ldr	r2, [pc, #252]	@ (8004548 <HAL_GPIO_Init+0x28c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	f000 80af 	beq.w	80045b0 <HAL_GPIO_Init+0x2f4>
 8004452:	4a3d      	ldr	r2, [pc, #244]	@ (8004548 <HAL_GPIO_Init+0x28c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	f200 80d5 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 800445a:	4a3d      	ldr	r2, [pc, #244]	@ (8004550 <HAL_GPIO_Init+0x294>)
 800445c:	4293      	cmp	r3, r2
 800445e:	f000 80a7 	beq.w	80045b0 <HAL_GPIO_Init+0x2f4>
 8004462:	4a3b      	ldr	r2, [pc, #236]	@ (8004550 <HAL_GPIO_Init+0x294>)
 8004464:	4293      	cmp	r3, r2
 8004466:	f200 80cd 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 800446a:	2b12      	cmp	r3, #18
 800446c:	d82c      	bhi.n	80044c8 <HAL_GPIO_Init+0x20c>
 800446e:	2b12      	cmp	r3, #18
 8004470:	f200 80c8 	bhi.w	8004604 <HAL_GPIO_Init+0x348>
 8004474:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <HAL_GPIO_Init+0x1c0>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080045b1 	.word	0x080045b1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	0800455d 	.word	0x0800455d
 8004488:	080045ff 	.word	0x080045ff
 800448c:	08004605 	.word	0x08004605
 8004490:	08004605 	.word	0x08004605
 8004494:	08004605 	.word	0x08004605
 8004498:	08004605 	.word	0x08004605
 800449c:	08004605 	.word	0x08004605
 80044a0:	08004605 	.word	0x08004605
 80044a4:	08004605 	.word	0x08004605
 80044a8:	08004605 	.word	0x08004605
 80044ac:	08004605 	.word	0x08004605
 80044b0:	08004605 	.word	0x08004605
 80044b4:	08004605 	.word	0x08004605
 80044b8:	08004605 	.word	0x08004605
 80044bc:	08004605 	.word	0x08004605
 80044c0:	080044f9 	.word	0x080044f9
 80044c4:	08004587 	.word	0x08004587
 80044c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <HAL_GPIO_Init+0x288>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d070      	beq.n	80045b0 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ce:	e099      	b.n	8004604 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d00b      	beq.n	80044f0 <HAL_GPIO_Init+0x234>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d007      	beq.n	80044f0 <HAL_GPIO_Init+0x234>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x234>
 80044e8:	21d5      	movs	r1, #213	@ 0xd5
 80044ea:	4815      	ldr	r0, [pc, #84]	@ (8004540 <HAL_GPIO_Init+0x284>)
 80044ec:	f7fe f992 	bl	8002814 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	623b      	str	r3, [r7, #32]
          break;
 80044f6:	e086      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d00b      	beq.n	8004518 <HAL_GPIO_Init+0x25c>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d007      	beq.n	8004518 <HAL_GPIO_Init+0x25c>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x25c>
 8004510:	21dc      	movs	r1, #220	@ 0xdc
 8004512:	480b      	ldr	r0, [pc, #44]	@ (8004540 <HAL_GPIO_Init+0x284>)
 8004514:	f7fe f97e 	bl	8002814 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	3304      	adds	r3, #4
 800451e:	623b      	str	r3, [r7, #32]
          break;
 8004520:	e071      	b.n	8004606 <HAL_GPIO_Init+0x34a>
 8004522:	bf00      	nop
 8004524:	40010800 	.word	0x40010800
 8004528:	40010c00 	.word	0x40010c00
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	40011800 	.word	0x40011800
 8004538:	40011c00 	.word	0x40011c00
 800453c:	40012000 	.word	0x40012000
 8004540:	08008540 	.word	0x08008540
 8004544:	10110000 	.word	0x10110000
 8004548:	10210000 	.word	0x10210000
 800454c:	10310000 	.word	0x10310000
 8004550:	10120000 	.word	0x10120000
 8004554:	10220000 	.word	0x10220000
 8004558:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d00b      	beq.n	800457c <HAL_GPIO_Init+0x2c0>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d007      	beq.n	800457c <HAL_GPIO_Init+0x2c0>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x2c0>
 8004574:	21e3      	movs	r1, #227	@ 0xe3
 8004576:	4891      	ldr	r0, [pc, #580]	@ (80047bc <HAL_GPIO_Init+0x500>)
 8004578:	f7fe f94c 	bl	8002814 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	3308      	adds	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
          break;
 8004584:	e03f      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d00b      	beq.n	80045a6 <HAL_GPIO_Init+0x2ea>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d007      	beq.n	80045a6 <HAL_GPIO_Init+0x2ea>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x2ea>
 800459e:	21ea      	movs	r1, #234	@ 0xea
 80045a0:	4886      	ldr	r0, [pc, #536]	@ (80047bc <HAL_GPIO_Init+0x500>)
 80045a2:	f7fe f937 	bl	8002814 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	330c      	adds	r3, #12
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e02a      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <HAL_GPIO_Init+0x314>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x314>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x314>
 80045c8:	21f7      	movs	r1, #247	@ 0xf7
 80045ca:	487c      	ldr	r0, [pc, #496]	@ (80047bc <HAL_GPIO_Init+0x500>)
 80045cc:	f7fe f922 	bl	8002814 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045d8:	2304      	movs	r3, #4
 80045da:	623b      	str	r3, [r7, #32]
          break;
 80045dc:	e013      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e6:	2308      	movs	r3, #8
 80045e8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	611a      	str	r2, [r3, #16]
          break;
 80045f0:	e009      	b.n	8004606 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f2:	2308      	movs	r3, #8
 80045f4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	615a      	str	r2, [r3, #20]
          break;
 80045fc:	e003      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
          break;
 8004602:	e000      	b.n	8004606 <HAL_GPIO_Init+0x34a>
          break;
 8004604:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2bff      	cmp	r3, #255	@ 0xff
 800460a:	d801      	bhi.n	8004610 <HAL_GPIO_Init+0x354>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	e001      	b.n	8004614 <HAL_GPIO_Init+0x358>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2bff      	cmp	r3, #255	@ 0xff
 800461a:	d802      	bhi.n	8004622 <HAL_GPIO_Init+0x366>
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	e002      	b.n	8004628 <HAL_GPIO_Init+0x36c>
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	3b08      	subs	r3, #8
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	210f      	movs	r1, #15
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	401a      	ands	r2, r3
 800463a:	6a39      	ldr	r1, [r7, #32]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	431a      	orrs	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a2 	beq.w	800479a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004656:	4b5a      	ldr	r3, [pc, #360]	@ (80047c0 <HAL_GPIO_Init+0x504>)
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4a59      	ldr	r2, [pc, #356]	@ (80047c0 <HAL_GPIO_Init+0x504>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6193      	str	r3, [r2, #24]
 8004662:	4b57      	ldr	r3, [pc, #348]	@ (80047c0 <HAL_GPIO_Init+0x504>)
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800466e:	4a55      	ldr	r2, [pc, #340]	@ (80047c4 <HAL_GPIO_Init+0x508>)
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	089b      	lsrs	r3, r3, #2
 8004674:	3302      	adds	r3, #2
 8004676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	220f      	movs	r2, #15
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a4c      	ldr	r2, [pc, #304]	@ (80047c8 <HAL_GPIO_Init+0x50c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01f      	beq.n	80046da <HAL_GPIO_Init+0x41e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a4b      	ldr	r2, [pc, #300]	@ (80047cc <HAL_GPIO_Init+0x510>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d019      	beq.n	80046d6 <HAL_GPIO_Init+0x41a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4a      	ldr	r2, [pc, #296]	@ (80047d0 <HAL_GPIO_Init+0x514>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_GPIO_Init+0x416>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a49      	ldr	r2, [pc, #292]	@ (80047d4 <HAL_GPIO_Init+0x518>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00d      	beq.n	80046ce <HAL_GPIO_Init+0x412>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a48      	ldr	r2, [pc, #288]	@ (80047d8 <HAL_GPIO_Init+0x51c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <HAL_GPIO_Init+0x40e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a47      	ldr	r2, [pc, #284]	@ (80047dc <HAL_GPIO_Init+0x520>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <HAL_GPIO_Init+0x40a>
 80046c2:	2305      	movs	r3, #5
 80046c4:	e00a      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e008      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046ca:	2304      	movs	r3, #4
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046ce:	2303      	movs	r3, #3
 80046d0:	e004      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e002      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_GPIO_Init+0x420>
 80046da:	2300      	movs	r3, #0
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	f002 0203 	and.w	r2, r2, #3
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	4093      	lsls	r3, r2
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046ec:	4935      	ldr	r1, [pc, #212]	@ (80047c4 <HAL_GPIO_Init+0x508>)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	3302      	adds	r3, #2
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004706:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4935      	ldr	r1, [pc, #212]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
 8004712:	e006      	b.n	8004722 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004714:	4b32      	ldr	r3, [pc, #200]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	43db      	mvns	r3, r3
 800471c:	4930      	ldr	r1, [pc, #192]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800471e:	4013      	ands	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800472e:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	492b      	ldr	r1, [pc, #172]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	60cb      	str	r3, [r1, #12]
 800473a:	e006      	b.n	800474a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800473c:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	43db      	mvns	r3, r3
 8004744:	4926      	ldr	r1, [pc, #152]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004746:	4013      	ands	r3, r2
 8004748:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004756:	4b22      	ldr	r3, [pc, #136]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4921      	ldr	r1, [pc, #132]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
 8004762:	e006      	b.n	8004772 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004764:	4b1e      	ldr	r3, [pc, #120]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	43db      	mvns	r3, r3
 800476c:	491c      	ldr	r1, [pc, #112]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800476e:	4013      	ands	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d006      	beq.n	800478c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800477e:	4b18      	ldr	r3, [pc, #96]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4917      	ldr	r1, [pc, #92]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
 800478a:	e006      	b.n	800479a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800478c:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	43db      	mvns	r3, r3
 8004794:	4912      	ldr	r1, [pc, #72]	@ (80047e0 <HAL_GPIO_Init+0x524>)
 8004796:	4013      	ands	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	3301      	adds	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f47f ae04 	bne.w	80043b8 <HAL_GPIO_Init+0xfc>
  }
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3728      	adds	r7, #40	@ 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08008540 	.word	0x08008540
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40010800 	.word	0x40010800
 80047cc:	40010c00 	.word	0x40010c00
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	40011800 	.word	0x40011800
 80047dc:	40011c00 	.word	0x40011c00
 80047e0:	40010400 	.word	0x40010400

080047e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_GPIO_ReadPin+0x1c>
 80047f6:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80047fa:	4809      	ldr	r0, [pc, #36]	@ (8004820 <HAL_GPIO_ReadPin+0x3c>)
 80047fc:	f7fe f80a 	bl	8002814 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e001      	b.n	8004816 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	08008540 	.word	0x08008540

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004834:	887b      	ldrh	r3, [r7, #2]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_GPIO_WritePin+0x20>
 800483a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800483e:	480e      	ldr	r0, [pc, #56]	@ (8004878 <HAL_GPIO_WritePin+0x54>)
 8004840:	f7fd ffe8 	bl	8002814 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004844:	787b      	ldrb	r3, [r7, #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_GPIO_WritePin+0x36>
 800484a:	787b      	ldrb	r3, [r7, #1]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d004      	beq.n	800485a <HAL_GPIO_WritePin+0x36>
 8004850:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8004854:	4808      	ldr	r0, [pc, #32]	@ (8004878 <HAL_GPIO_WritePin+0x54>)
 8004856:	f7fd ffdd 	bl	8002814 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800485a:	787b      	ldrb	r3, [r7, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004866:	e003      	b.n	8004870 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	041a      	lsls	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	08008540 	.word	0x08008540

0800487c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e1b4      	b.n	8004bf8 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a9b      	ldr	r2, [pc, #620]	@ (8004b00 <HAL_I2C_Init+0x284>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_I2C_Init+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a99      	ldr	r2, [pc, #612]	@ (8004b04 <HAL_I2C_Init+0x288>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_I2C_Init+0x30>
 80048a2:	f240 11db 	movw	r1, #475	@ 0x1db
 80048a6:	4898      	ldr	r0, [pc, #608]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 80048a8:	f7fd ffb4 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_I2C_Init+0x42>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a94      	ldr	r2, [pc, #592]	@ (8004b0c <HAL_I2C_Init+0x290>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d904      	bls.n	80048c8 <HAL_I2C_Init+0x4c>
 80048be:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80048c2:	4891      	ldr	r0, [pc, #580]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 80048c4:	f7fd ffa6 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <HAL_I2C_Init+0x68>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d8:	d004      	beq.n	80048e4 <HAL_I2C_Init+0x68>
 80048da:	f240 11dd 	movw	r1, #477	@ 0x1dd
 80048de:	488a      	ldr	r0, [pc, #552]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 80048e0:	f7fd ff98 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ec:	d304      	bcc.n	80048f8 <HAL_I2C_Init+0x7c>
 80048ee:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80048f2:	4885      	ldr	r0, [pc, #532]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 80048f4:	f7fd ff8e 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004900:	d009      	beq.n	8004916 <HAL_I2C_Init+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800490a:	d004      	beq.n	8004916 <HAL_I2C_Init+0x9a>
 800490c:	f240 11df 	movw	r1, #479	@ 0x1df
 8004910:	487d      	ldr	r0, [pc, #500]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 8004912:	f7fd ff7f 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_I2C_Init+0xb4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d004      	beq.n	8004930 <HAL_I2C_Init+0xb4>
 8004926:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800492a:	4877      	ldr	r0, [pc, #476]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 800492c:	f7fd ff72 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_I2C_Init+0xca>
 800493c:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8004940:	4871      	ldr	r0, [pc, #452]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 8004942:	f7fd ff67 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_I2C_Init+0xe4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d004      	beq.n	8004960 <HAL_I2C_Init+0xe4>
 8004956:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800495a:	486b      	ldr	r0, [pc, #428]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 800495c:	f7fd ff5a 	bl	8002814 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_I2C_Init+0xfe>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	2b80      	cmp	r3, #128	@ 0x80
 800496e:	d004      	beq.n	800497a <HAL_I2C_Init+0xfe>
 8004970:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8004974:	4864      	ldr	r0, [pc, #400]	@ (8004b08 <HAL_I2C_Init+0x28c>)
 8004976:	f7fd ff4d 	bl	8002814 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fe80 	bl	8002694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	@ 0x24
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049cc:	f001 f9e8 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 80049d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004b10 <HAL_I2C_Init+0x294>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d807      	bhi.n	80049ec <HAL_I2C_Init+0x170>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a4d      	ldr	r2, [pc, #308]	@ (8004b14 <HAL_I2C_Init+0x298>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bf94      	ite	ls
 80049e4:	2301      	movls	r3, #1
 80049e6:	2300      	movhi	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e006      	b.n	80049fa <HAL_I2C_Init+0x17e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <HAL_I2C_Init+0x29c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e0fa      	b.n	8004bf8 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a45      	ldr	r2, [pc, #276]	@ (8004b1c <HAL_I2C_Init+0x2a0>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	0c9b      	lsrs	r3, r3, #18
 8004a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a37      	ldr	r2, [pc, #220]	@ (8004b10 <HAL_I2C_Init+0x294>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d802      	bhi.n	8004a3c <HAL_I2C_Init+0x1c0>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	e009      	b.n	8004a50 <HAL_I2C_Init+0x1d4>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	4a36      	ldr	r2, [pc, #216]	@ (8004b20 <HAL_I2C_Init+0x2a4>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	099b      	lsrs	r3, r3, #6
 8004a4e:	3301      	adds	r3, #1
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4929      	ldr	r1, [pc, #164]	@ (8004b10 <HAL_I2C_Init+0x294>)
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	d819      	bhi.n	8004aa4 <HAL_I2C_Init+0x228>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e59      	subs	r1, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a7e:	1c59      	adds	r1, r3, #1
 8004a80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a84:	400b      	ands	r3, r1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_I2C_Init+0x224>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1e59      	subs	r1, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	e064      	b.n	8004b6a <HAL_I2C_Init+0x2ee>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	e062      	b.n	8004b6a <HAL_I2C_Init+0x2ee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d111      	bne.n	8004ad0 <HAL_I2C_Init+0x254>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1e58      	subs	r0, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	440b      	add	r3, r1
 8004aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e012      	b.n	8004af6 <HAL_I2C_Init+0x27a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1e58      	subs	r0, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	0099      	lsls	r1, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_I2C_Init+0x2a8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e035      	b.n	8004b6a <HAL_I2C_Init+0x2ee>
 8004afe:	bf00      	nop
 8004b00:	40005400 	.word	0x40005400
 8004b04:	40005800 	.word	0x40005800
 8004b08:	0800857c 	.word	0x0800857c
 8004b0c:	00061a80 	.word	0x00061a80
 8004b10:	000186a0 	.word	0x000186a0
 8004b14:	001e847f 	.word	0x001e847f
 8004b18:	003d08ff 	.word	0x003d08ff
 8004b1c:	431bde83 	.word	0x431bde83
 8004b20:	10624dd3 	.word	0x10624dd3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10e      	bne.n	8004b4a <HAL_I2C_Init+0x2ce>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b48:	e00f      	b.n	8004b6a <HAL_I2C_Init+0x2ee>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e58      	subs	r0, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	0099      	lsls	r1, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	6809      	ldr	r1, [r1, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6911      	ldr	r1, [r2, #16]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	817b      	strh	r3, [r7, #10]
 8004c12:	460b      	mov	r3, r1
 8004c14:	813b      	strh	r3, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c1a:	f7fe fbcb 	bl	80033b4 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d007      	beq.n	8004c36 <HAL_I2C_Mem_Write+0x36>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d004      	beq.n	8004c36 <HAL_I2C_Mem_Write+0x36>
 8004c2c:	f640 2106 	movw	r1, #2566	@ 0xa06
 8004c30:	4873      	ldr	r0, [pc, #460]	@ (8004e00 <HAL_I2C_Mem_Write+0x200>)
 8004c32:	f7fd fdef 	bl	8002814 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	f040 80d9 	bne.w	8004df6 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2319      	movs	r3, #25
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	496d      	ldr	r1, [pc, #436]	@ (8004e04 <HAL_I2C_Mem_Write+0x204>)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f972 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0cc      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2C_Mem_Write+0x6c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0c5      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d007      	beq.n	8004c92 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2221      	movs	r2, #33	@ 0x21
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a3a      	ldr	r2, [r7, #32]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8004e08 <HAL_I2C_Mem_Write+0x208>)
 8004cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd4:	88f8      	ldrh	r0, [r7, #6]
 8004cd6:	893a      	ldrh	r2, [r7, #8]
 8004cd8:	8979      	ldrh	r1, [r7, #10]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f891 	bl	8004e0c <I2C_RequestMemoryWrite>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d052      	beq.n	8004d96 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e081      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fa37 	bl	800516c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d107      	bne.n	8004d1c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e06b      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d11b      	bne.n	8004d96 <HAL_I2C_Mem_Write+0x196>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1aa      	bne.n	8004cf4 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa2a 	bl	80051fc <I2C_WaitOnBTFFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00d      	beq.n	8004dca <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d107      	bne.n	8004dc6 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e016      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	0800857c 	.word	0x0800857c
 8004e04:	00100002 	.word	0x00100002
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	813b      	strh	r3, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f878 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5c:	d103      	bne.n	8004e66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e05f      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	492d      	ldr	r1, [pc, #180]	@ (8004f34 <I2C_RequestMemoryWrite+0x128>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f8d3 	bl	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e04c      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f95e 	bl	800516c <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d107      	bne.n	8004ece <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e02b      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed8:	893b      	ldrh	r3, [r7, #8]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]
 8004ee2:	e021      	b.n	8004f28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee4:	893b      	ldrh	r3, [r7, #8]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f938 	bl	800516c <I2C_WaitOnTXEFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d107      	bne.n	8004f1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e005      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	00010002 	.word	0x00010002

08004f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f48:	e048      	b.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d044      	beq.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f52:	f7fe fa2f 	bl	80033b4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d139      	bne.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10d      	bne.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	e00c      	b.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	43da      	mvns	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d116      	bne.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e023      	b.n	8005024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10d      	bne.n	8005002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	43da      	mvns	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	e00c      	b.n	800501c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	43da      	mvns	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	d093      	beq.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800503a:	e071      	b.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d123      	bne.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	f043 0204 	orr.w	r2, r3, #4
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e067      	b.n	8005164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d041      	beq.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509c:	f7fe f98a 	bl	80033b4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d136      	bne.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e00b      	b.n	80050ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	43da      	mvns	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e021      	b.n	8005164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d10c      	bne.n	8005144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	43da      	mvns	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4013      	ands	r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e00b      	b.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	43da      	mvns	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f af6d 	bne.w	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f886 	bl	800528c <I2C_IsAcknowledgeFailed>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e034      	b.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d028      	beq.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fe f90f 	bl	80033b4 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d016      	beq.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e007      	b.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b80      	cmp	r3, #128	@ 0x80
 80051f0:	d1c3      	bne.n	800517a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005208:	e034      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f83e 	bl	800528c <I2C_IsAcknowledgeFailed>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e034      	b.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d028      	beq.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fe f8c7 	bl	80033b4 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11d      	bne.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d016      	beq.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e007      	b.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d1c3      	bne.n	800520a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a2:	d11b      	bne.n	80052dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e35a      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01c      	beq.n	800533c <HAL_RCC_OscConfig+0x54>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <HAL_RCC_OscConfig+0x54>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d110      	bne.n	800533c <HAL_RCC_OscConfig+0x54>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_RCC_OscConfig+0x54>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_RCC_OscConfig+0x54>
 8005332:	f240 1165 	movw	r1, #357	@ 0x165
 8005336:	488f      	ldr	r0, [pc, #572]	@ (8005574 <HAL_RCC_OscConfig+0x28c>)
 8005338:	f7fd fa6c 	bl	8002814 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 809a 	beq.w	800547e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <HAL_RCC_OscConfig+0x88>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535a:	d009      	beq.n	8005370 <HAL_RCC_OscConfig+0x88>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005364:	d004      	beq.n	8005370 <HAL_RCC_OscConfig+0x88>
 8005366:	f240 116b 	movw	r1, #363	@ 0x16b
 800536a:	4882      	ldr	r0, [pc, #520]	@ (8005574 <HAL_RCC_OscConfig+0x28c>)
 800536c:	f7fd fa52 	bl	8002814 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005370:	4b81      	ldr	r3, [pc, #516]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b04      	cmp	r3, #4
 800537a:	d00c      	beq.n	8005396 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800537c:	4b7e      	ldr	r3, [pc, #504]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d112      	bne.n	80053ae <HAL_RCC_OscConfig+0xc6>
 8005388:	4b7b      	ldr	r3, [pc, #492]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005394:	d10b      	bne.n	80053ae <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005396:	4b78      	ldr	r3, [pc, #480]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d06c      	beq.n	800547c <HAL_RCC_OscConfig+0x194>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d168      	bne.n	800547c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e300      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b6:	d106      	bne.n	80053c6 <HAL_RCC_OscConfig+0xde>
 80053b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	e02e      	b.n	8005424 <HAL_RCC_OscConfig+0x13c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x100>
 80053ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a69      	ldr	r2, [pc, #420]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b67      	ldr	r3, [pc, #412]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a66      	ldr	r2, [pc, #408]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e01d      	b.n	8005424 <HAL_RCC_OscConfig+0x13c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0x124>
 80053f2:	4b61      	ldr	r3, [pc, #388]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a60      	ldr	r2, [pc, #384]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80053f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b5e      	ldr	r3, [pc, #376]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5d      	ldr	r2, [pc, #372]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00b      	b.n	8005424 <HAL_RCC_OscConfig+0x13c>
 800540c:	4b5a      	ldr	r3, [pc, #360]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a59      	ldr	r2, [pc, #356]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b57      	ldr	r3, [pc, #348]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a56      	ldr	r2, [pc, #344]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800541e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd ffc2 	bl	80033b4 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd ffbe 	bl	80033b4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	@ 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e2b4      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	4b4c      	ldr	r3, [pc, #304]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x14c>
 8005452:	e014      	b.n	800547e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd ffae 	bl	80033b4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fd ffaa 	bl	80033b4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	@ 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e2a0      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546e:	4b42      	ldr	r3, [pc, #264]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x174>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8080 	beq.w	800558c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1be>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d004      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1be>
 800549c:	f240 119f 	movw	r1, #415	@ 0x19f
 80054a0:	4834      	ldr	r0, [pc, #208]	@ (8005574 <HAL_RCC_OscConfig+0x28c>)
 80054a2:	f7fd f9b7 	bl	8002814 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b1f      	cmp	r3, #31
 80054ac:	d904      	bls.n	80054b8 <HAL_RCC_OscConfig+0x1d0>
 80054ae:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80054b2:	4830      	ldr	r0, [pc, #192]	@ (8005574 <HAL_RCC_OscConfig+0x28c>)
 80054b4:	f7fd f9ae 	bl	8002814 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d11c      	bne.n	800550a <HAL_RCC_OscConfig+0x222>
 80054d0:	4b29      	ldr	r3, [pc, #164]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054dc:	4b26      	ldr	r3, [pc, #152]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_OscConfig+0x20c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e25d      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f4:	4b20      	ldr	r3, [pc, #128]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	491d      	ldr	r1, [pc, #116]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005508:	e040      	b.n	800558c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005512:	4b1a      	ldr	r3, [pc, #104]	@ (800557c <HAL_RCC_OscConfig+0x294>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fd ff4c 	bl	80033b4 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005520:	f7fd ff48 	bl	80033b4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e23e      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005532:	4b11      	ldr	r3, [pc, #68]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553e:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	490a      	ldr	r1, [pc, #40]	@ (8005578 <HAL_RCC_OscConfig+0x290>)
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
 8005552:	e01b      	b.n	800558c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005554:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_OscConfig+0x294>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd ff2b 	bl	80033b4 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005560:	e00e      	b.n	8005580 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005562:	f7fd ff27 	bl	80033b4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d907      	bls.n	8005580 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e21d      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
 8005574:	080085b4 	.word	0x080085b4
 8005578:	40021000 	.word	0x40021000
 800557c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005580:	4b7d      	ldr	r3, [pc, #500]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ea      	bne.n	8005562 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d040      	beq.n	800561a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2ca>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d004      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2ca>
 80055a8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80055ac:	4873      	ldr	r0, [pc, #460]	@ (800577c <HAL_RCC_OscConfig+0x494>)
 80055ae:	f7fd f931 	bl	8002814 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d019      	beq.n	80055ee <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ba:	4b71      	ldr	r3, [pc, #452]	@ (8005780 <HAL_RCC_OscConfig+0x498>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fd fef8 	bl	80033b4 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fd fef4 	bl	80033b4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e1ea      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	4b67      	ldr	r3, [pc, #412]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f000 fc02 	bl	8005df0 <RCC_Delay>
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ee:	4b64      	ldr	r3, [pc, #400]	@ (8005780 <HAL_RCC_OscConfig+0x498>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f4:	f7fd fede 	bl	80033b4 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fd feda 	bl	80033b4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1d0      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560e:	4b5a      	ldr	r3, [pc, #360]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80bf 	beq.w	80057a6 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HAL_RCC_OscConfig+0x366>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d008      	beq.n	800564e <HAL_RCC_OscConfig+0x366>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b05      	cmp	r3, #5
 8005642:	d004      	beq.n	800564e <HAL_RCC_OscConfig+0x366>
 8005644:	f240 210f 	movw	r1, #527	@ 0x20f
 8005648:	484c      	ldr	r0, [pc, #304]	@ (800577c <HAL_RCC_OscConfig+0x494>)
 800564a:	f7fd f8e3 	bl	8002814 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564e:	4b4a      	ldr	r3, [pc, #296]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b47      	ldr	r3, [pc, #284]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4a46      	ldr	r2, [pc, #280]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005664:	61d3      	str	r3, [r2, #28]
 8005666:	4b44      	ldr	r3, [pc, #272]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <HAL_RCC_OscConfig+0x49c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005682:	4b40      	ldr	r3, [pc, #256]	@ (8005784 <HAL_RCC_OscConfig+0x49c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3f      	ldr	r2, [pc, #252]	@ (8005784 <HAL_RCC_OscConfig+0x49c>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fd fe91 	bl	80033b4 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fd fe8d 	bl	80033b4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b64      	cmp	r3, #100	@ 0x64
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e183      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b36      	ldr	r3, [pc, #216]	@ (8005784 <HAL_RCC_OscConfig+0x49c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x3e2>
 80056bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6213      	str	r3, [r2, #32]
 80056c8:	e02d      	b.n	8005726 <HAL_RCC_OscConfig+0x43e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x404>
 80056d2:	4b29      	ldr	r3, [pc, #164]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	6213      	str	r3, [r2, #32]
 80056de:	4b26      	ldr	r3, [pc, #152]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	4a25      	ldr	r2, [pc, #148]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056e4:	f023 0304 	bic.w	r3, r3, #4
 80056e8:	6213      	str	r3, [r2, #32]
 80056ea:	e01c      	b.n	8005726 <HAL_RCC_OscConfig+0x43e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b05      	cmp	r3, #5
 80056f2:	d10c      	bne.n	800570e <HAL_RCC_OscConfig+0x426>
 80056f4:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	6213      	str	r3, [r2, #32]
 8005700:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6213      	str	r3, [r2, #32]
 800570c:	e00b      	b.n	8005726 <HAL_RCC_OscConfig+0x43e>
 800570e:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4a19      	ldr	r2, [pc, #100]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	6213      	str	r3, [r2, #32]
 800571a:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d015      	beq.n	800575a <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572e:	f7fd fe41 	bl	80033b4 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fd fe3d 	bl	80033b4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e131      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <HAL_RCC_OscConfig+0x490>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ee      	beq.n	8005736 <HAL_RCC_OscConfig+0x44e>
 8005758:	e01c      	b.n	8005794 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575a:	f7fd fe2b 	bl	80033b4 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005760:	e012      	b.n	8005788 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005762:	f7fd fe27 	bl	80033b4 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d909      	bls.n	8005788 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e11b      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
 8005778:	40021000 	.word	0x40021000
 800577c:	080085b4 	.word	0x080085b4
 8005780:	42420480 	.word	0x42420480
 8005784:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005788:	4b8b      	ldr	r3, [pc, #556]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e6      	bne.n	8005762 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d105      	bne.n	80057a6 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579a:	4b87      	ldr	r3, [pc, #540]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	4a86      	ldr	r2, [pc, #536]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 80057a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057a4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d008      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d004      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4e0>
 80057be:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80057c2:	487e      	ldr	r0, [pc, #504]	@ (80059bc <HAL_RCC_OscConfig+0x6d4>)
 80057c4:	f7fd f826 	bl	8002814 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80ee 	beq.w	80059ae <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d2:	4b79      	ldr	r3, [pc, #484]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b08      	cmp	r3, #8
 80057dc:	f000 80ce 	beq.w	800597c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	f040 80b2 	bne.w	800594e <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_OscConfig+0x51e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fa:	d004      	beq.n	8005806 <HAL_RCC_OscConfig+0x51e>
 80057fc:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8005800:	486e      	ldr	r0, [pc, #440]	@ (80059bc <HAL_RCC_OscConfig+0x6d4>)
 8005802:	f7fd f807 	bl	8002814 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04a      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005816:	d045      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005820:	d040      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800582a:	d03b      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005834:	d036      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800583e:	d031      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005848:	d02c      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005852:	d027      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800585c:	d022      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005866:	d01d      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005870:	d018      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005884:	d00e      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800588e:	d009      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8005898:	d004      	beq.n	80058a4 <HAL_RCC_OscConfig+0x5bc>
 800589a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800589e:	4847      	ldr	r0, [pc, #284]	@ (80059bc <HAL_RCC_OscConfig+0x6d4>)
 80058a0:	f7fc ffb8 	bl	8002814 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a4:	4b46      	ldr	r3, [pc, #280]	@ (80059c0 <HAL_RCC_OscConfig+0x6d8>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7fd fd83 	bl	80033b4 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fd fd7f 	bl	80033b4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e075      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058c4:	4b3c      	ldr	r3, [pc, #240]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d116      	bne.n	8005908 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_RCC_OscConfig+0x60e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ea:	d004      	beq.n	80058f6 <HAL_RCC_OscConfig+0x60e>
 80058ec:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80058f0:	4832      	ldr	r0, [pc, #200]	@ (80059bc <HAL_RCC_OscConfig+0x6d4>)
 80058f2:	f7fc ff8f 	bl	8002814 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058f6:	4b30      	ldr	r3, [pc, #192]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	492d      	ldr	r1, [pc, #180]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 8005904:	4313      	orrs	r3, r2
 8005906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005908:	4b2b      	ldr	r3, [pc, #172]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a19      	ldr	r1, [r3, #32]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	430b      	orrs	r3, r1
 800591a:	4927      	ldr	r1, [pc, #156]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b27      	ldr	r3, [pc, #156]	@ (80059c0 <HAL_RCC_OscConfig+0x6d8>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fd fd45 	bl	80033b4 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592e:	f7fd fd41 	bl	80033b4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e037      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x646>
 800594c:	e02f      	b.n	80059ae <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <HAL_RCC_OscConfig+0x6d8>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fd fd2e 	bl	80033b4 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595c:	f7fd fd2a 	bl	80033b4 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e020      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596e:	4b12      	ldr	r3, [pc, #72]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x674>
 800597a:	e018      	b.n	80059ae <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e013      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_RCC_OscConfig+0x6d0>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	429a      	cmp	r2, r3
 800599a:	d106      	bne.n	80059aa <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	080085b4 	.word	0x080085b4
 80059c0:	42420060 	.word	0x42420060

080059c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e176      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d116      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x4e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d110      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x4e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x4e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x4e>
 8005a08:	f240 3136 	movw	r1, #822	@ 0x336
 8005a0c:	4874      	ldr	r0, [pc, #464]	@ (8005be0 <HAL_RCC_ClockConfig+0x21c>)
 8005a0e:	f7fc ff01 	bl	8002814 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x6a>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d007      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x6a>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d004      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x6a>
 8005a24:	f240 3137 	movw	r1, #823	@ 0x337
 8005a28:	486d      	ldr	r0, [pc, #436]	@ (8005be0 <HAL_RCC_ClockConfig+0x21c>)
 8005a2a:	f7fc fef3 	bl	8002814 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d910      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3c:	4b69      	ldr	r3, [pc, #420]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 0207 	bic.w	r2, r3, #7
 8005a44:	4967      	ldr	r1, [pc, #412]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4c:	4b65      	ldr	r3, [pc, #404]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d001      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e133      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d049      	beq.n	8005afe <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a76:	4b5c      	ldr	r3, [pc, #368]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005a7c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a80:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8e:	4b56      	ldr	r3, [pc, #344]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4a55      	ldr	r2, [pc, #340]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005a94:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a98:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d024      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d020      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b90      	cmp	r3, #144	@ 0x90
 8005ab0:	d01c      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ab8:	d018      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2bb0      	cmp	r3, #176	@ 0xb0
 8005ac0:	d014      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ac8:	d010      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2bd0      	cmp	r3, #208	@ 0xd0
 8005ad0:	d00c      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2be0      	cmp	r3, #224	@ 0xe0
 8005ad8:	d008      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2bf0      	cmp	r3, #240	@ 0xf0
 8005ae0:	d004      	beq.n	8005aec <HAL_RCC_ClockConfig+0x128>
 8005ae2:	f240 315d 	movw	r1, #861	@ 0x35d
 8005ae6:	483e      	ldr	r0, [pc, #248]	@ (8005be0 <HAL_RCC_ClockConfig+0x21c>)
 8005ae8:	f7fc fe94 	bl	8002814 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aec:	4b3e      	ldr	r3, [pc, #248]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	493b      	ldr	r1, [pc, #236]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d051      	beq.n	8005bae <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x168>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d008      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x168>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d004      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x168>
 8005b22:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8005b26:	482e      	ldr	r0, [pc, #184]	@ (8005be0 <HAL_RCC_ClockConfig+0x21c>)
 8005b28:	f7fc fe74 	bl	8002814 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b34:	4b2c      	ldr	r3, [pc, #176]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d115      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0c0      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d107      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4c:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0b4      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5c:	4b22      	ldr	r3, [pc, #136]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0ac      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f023 0203 	bic.w	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	491b      	ldr	r1, [pc, #108]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b7e:	f7fd fc19 	bl	80033b4 <HAL_GetTick>
 8005b82:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b86:	f7fd fc15 	bl	80033b4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e094      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9c:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <HAL_RCC_ClockConfig+0x224>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 020c 	and.w	r2, r3, #12
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d1eb      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d217      	bcs.n	8005bec <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbc:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 0207 	bic.w	r2, r3, #7
 8005bc4:	4907      	ldr	r1, [pc, #28]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <HAL_RCC_ClockConfig+0x220>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d008      	beq.n	8005bec <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e073      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x302>
 8005bde:	bf00      	nop
 8005be0:	080085b4 	.word	0x080085b4
 8005be4:	40022000 	.word	0x40022000
 8005be8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d025      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d018      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x26e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c08:	d013      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x26e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005c12:	d00e      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x26e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c1c:	d009      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x26e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c26:	d004      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x26e>
 8005c28:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8005c2c:	4828      	ldr	r0, [pc, #160]	@ (8005cd0 <HAL_RCC_ClockConfig+0x30c>)
 8005c2e:	f7fc fdf1 	bl	8002814 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c32:	4b28      	ldr	r3, [pc, #160]	@ (8005cd4 <HAL_RCC_ClockConfig+0x310>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4925      	ldr	r1, [pc, #148]	@ (8005cd4 <HAL_RCC_ClockConfig+0x310>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d026      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d018      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x2c6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c60:	d013      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x2c6>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005c6a:	d00e      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x2c6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c74:	d009      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x2c6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c7e:	d004      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x2c6>
 8005c80:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8005c84:	4812      	ldr	r0, [pc, #72]	@ (8005cd0 <HAL_RCC_ClockConfig+0x30c>)
 8005c86:	f7fc fdc5 	bl	8002814 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c8a:	4b12      	ldr	r3, [pc, #72]	@ (8005cd4 <HAL_RCC_ClockConfig+0x310>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	490e      	ldr	r1, [pc, #56]	@ (8005cd4 <HAL_RCC_ClockConfig+0x310>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c9e:	f000 f821 	bl	8005ce4 <HAL_RCC_GetSysClockFreq>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <HAL_RCC_ClockConfig+0x310>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	490a      	ldr	r1, [pc, #40]	@ (8005cd8 <HAL_RCC_ClockConfig+0x314>)
 8005cb0:	5ccb      	ldrb	r3, [r1, r3]
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	4a09      	ldr	r2, [pc, #36]	@ (8005cdc <HAL_RCC_ClockConfig+0x318>)
 8005cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cba:	4b09      	ldr	r3, [pc, #36]	@ (8005ce0 <HAL_RCC_ClockConfig+0x31c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd fb36 	bl	8003330 <HAL_InitTick>

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	080085b4 	.word	0x080085b4
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	0800869c 	.word	0x0800869c
 8005cdc:	2000001c 	.word	0x2000001c
 8005ce0:	20000020 	.word	0x20000020

08005ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d002      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x30>
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d003      	beq.n	8005d1a <HAL_RCC_GetSysClockFreq+0x36>
 8005d12:	e027      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d14:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d16:	613b      	str	r3, [r7, #16]
      break;
 8005d18:	e027      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	0c9b      	lsrs	r3, r3, #18
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a17      	ldr	r2, [pc, #92]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d24:	5cd3      	ldrb	r3, [r2, r3]
 8005d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d32:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	0c5b      	lsrs	r3, r3, #17
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	4a11      	ldr	r2, [pc, #68]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d46:	fb03 f202 	mul.w	r2, r3, r2
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e004      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a0c      	ldr	r2, [pc, #48]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	613b      	str	r3, [r7, #16]
      break;
 8005d62:	e002      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d64:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d66:	613b      	str	r3, [r7, #16]
      break;
 8005d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d6a:	693b      	ldr	r3, [r7, #16]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	007a1200 	.word	0x007a1200
 8005d80:	080086b4 	.word	0x080086b4
 8005d84:	080086c4 	.word	0x080086c4
 8005d88:	003d0900 	.word	0x003d0900

08005d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d90:	4b02      	ldr	r3, [pc, #8]	@ (8005d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d92:	681b      	ldr	r3, [r3, #0]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	2000001c 	.word	0x2000001c

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005da4:	f7ff fff2 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4903      	ldr	r1, [pc, #12]	@ (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	080086ac 	.word	0x080086ac

08005dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dcc:	f7ff ffde 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	0adb      	lsrs	r3, r3, #11
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4903      	ldr	r1, [pc, #12]	@ (8005dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000
 8005dec:	080086ac 	.word	0x080086ac

08005df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <RCC_Delay+0x34>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e28 <RCC_Delay+0x38>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0a5b      	lsrs	r3, r3, #9
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e0c:	bf00      	nop
  }
  while (Delay --);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1e5a      	subs	r2, r3, #1
 8005e12:	60fa      	str	r2, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f9      	bne.n	8005e0c <RCC_Delay+0x1c>
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr
 8005e24:	2000001c 	.word	0x2000001c
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11b      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d115      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005e78:	216a      	movs	r1, #106	@ 0x6a
 8005e7a:	4873      	ldr	r0, [pc, #460]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005e7c:	f7fc fcca 	bl	8002814 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8095 	beq.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d012      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8005eb8:	2172      	movs	r1, #114	@ 0x72
 8005eba:	4863      	ldr	r0, [pc, #396]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005ebc:	f7fc fcaa 	bl	8002814 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec0:	4b62      	ldr	r3, [pc, #392]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10d      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ecc:	4b5f      	ldr	r3, [pc, #380]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed6:	61d3      	str	r3, [r2, #28]
 8005ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	4b59      	ldr	r3, [pc, #356]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d118      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef4:	4b56      	ldr	r3, [pc, #344]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a55      	ldr	r2, [pc, #340]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f00:	f7fd fa58 	bl	80033b4 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f08:	f7fd fa54 	bl	80033b4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	@ 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e092      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f26:	4b49      	ldr	r3, [pc, #292]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02e      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d027      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f44:	4b41      	ldr	r3, [pc, #260]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f4e:	4b41      	ldr	r3, [pc, #260]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f54:	4b3f      	ldr	r3, [pc, #252]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6a:	f7fd fa23 	bl	80033b4 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f70:	e00a      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f72:	f7fd fa1f 	bl	80033b4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e05b      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f88:	4b30      	ldr	r3, [pc, #192]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0ee      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f94:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	492a      	ldr	r1, [pc, #168]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b27      	ldr	r3, [pc, #156]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4a26      	ldr	r2, [pc, #152]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005fea:	21b7      	movs	r1, #183	@ 0xb7
 8005fec:	4816      	ldr	r0, [pc, #88]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005fee:	f7fc fc11 	bl	8002814 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ff2:	4b16      	ldr	r3, [pc, #88]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4913      	ldr	r1, [pc, #76]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d016      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006018:	d008      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006022:	f240 1113 	movw	r1, #275	@ 0x113
 8006026:	4808      	ldr	r0, [pc, #32]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006028:	f7fc fbf4 	bl	8002814 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4904      	ldr	r1, [pc, #16]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	080085ec 	.word	0x080085ec
 800604c:	40021000 	.word	0x40021000
 8006050:	40007000 	.word	0x40007000
 8006054:	42420440 	.word	0x42420440

08006058 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d113      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10e      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80060a6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80060aa:	4860      	ldr	r0, [pc, #384]	@ (800622c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80060ac:	f7fc fbb2 	bl	8002814 <assert_failed>

  switch (PeriphClk)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	2b0f      	cmp	r3, #15
 80060b6:	f200 80af 	bhi.w	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	08006197 	.word	0x08006197
 80060c4:	080061fd 	.word	0x080061fd
 80060c8:	08006219 	.word	0x08006219
 80060cc:	08006187 	.word	0x08006187
 80060d0:	08006219 	.word	0x08006219
 80060d4:	08006219 	.word	0x08006219
 80060d8:	08006219 	.word	0x08006219
 80060dc:	0800618f 	.word	0x0800618f
 80060e0:	08006219 	.word	0x08006219
 80060e4:	08006219 	.word	0x08006219
 80060e8:	08006219 	.word	0x08006219
 80060ec:	08006219 	.word	0x08006219
 80060f0:	08006219 	.word	0x08006219
 80060f4:	08006219 	.word	0x08006219
 80060f8:	08006219 	.word	0x08006219
 80060fc:	08006101 	.word	0x08006101
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006100:	4b4b      	ldr	r3, [pc, #300]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006106:	4b4a      	ldr	r3, [pc, #296]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8084 	beq.w	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0c9b      	lsrs	r3, r3, #18
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	4a45      	ldr	r2, [pc, #276]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800612c:	4b40      	ldr	r3, [pc, #256]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	0c5b      	lsrs	r3, r3, #17
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	4a40      	ldr	r2, [pc, #256]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8006138:	5cd3      	ldrb	r3, [r2, r3]
 800613a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006146:	4a3d      	ldr	r2, [pc, #244]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	fbb2 f2f3 	udiv	r2, r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4a39      	ldr	r2, [pc, #228]	@ (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 800615c:	fb02 f303 	mul.w	r3, r2, r3
 8006160:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006162:	4b33      	ldr	r3, [pc, #204]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800616a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800616e:	d102      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006174:	e052      	b.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = (pllclk * 2) / 3;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4a32      	ldr	r2, [pc, #200]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
      break;
 8006184:	e04a      	b.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006186:	f7ff fdad 	bl	8005ce4 <HAL_RCC_GetSysClockFreq>
 800618a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800618c:	e049      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800618e:	f7ff fda9 	bl	8005ce4 <HAL_RCC_GetSysClockFreq>
 8006192:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006194:	e045      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006196:	4b26      	ldr	r3, [pc, #152]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a6:	d108      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSE_VALUE;
 80061b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e01f      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c4:	d109      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80061c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSI_VALUE;
 80061d2:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e4:	d11c      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80061e6:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d016      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
      {
        frequency = HSE_VALUE / 128U;
 80061f2:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80061f6:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80061f8:	e012      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80061fa:	e011      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061fc:	f7ff fde4 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 8006200:	4602      	mov	r2, r0
 8006202:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0b9b      	lsrs	r3, r3, #14
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	3301      	adds	r3, #1
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	61bb      	str	r3, [r7, #24]
      break;
 8006216:	e004      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    default:
    {
      break;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 8006220:	bf00      	nop
    }
  }
  return (frequency);
 8006222:	69bb      	ldr	r3, [r7, #24]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	080085ec 	.word	0x080085ec
 8006230:	40021000 	.word	0x40021000
 8006234:	080086c8 	.word	0x080086c8
 8006238:	080086d8 	.word	0x080086d8
 800623c:	007a1200 	.word	0x007a1200
 8006240:	003d0900 	.word	0x003d0900
 8006244:	aaaaaaab 	.word	0xaaaaaaab

08006248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e0b5      	b.n	80063c6 <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5c      	ldr	r2, [pc, #368]	@ (80063d0 <HAL_TIM_Base_Init+0x188>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d027      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a5a      	ldr	r2, [pc, #360]	@ (80063d4 <HAL_TIM_Base_Init+0x18c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006276:	d01d      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a56      	ldr	r2, [pc, #344]	@ (80063d8 <HAL_TIM_Base_Init+0x190>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a55      	ldr	r2, [pc, #340]	@ (80063dc <HAL_TIM_Base_Init+0x194>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a53      	ldr	r2, [pc, #332]	@ (80063e0 <HAL_TIM_Base_Init+0x198>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a52      	ldr	r2, [pc, #328]	@ (80063e4 <HAL_TIM_Base_Init+0x19c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a50      	ldr	r2, [pc, #320]	@ (80063e8 <HAL_TIM_Base_Init+0x1a0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_Base_Init+0x6c>
 80062aa:	f240 1113 	movw	r1, #275	@ 0x113
 80062ae:	484f      	ldr	r0, [pc, #316]	@ (80063ec <HAL_TIM_Base_Init+0x1a4>)
 80062b0:	f7fc fab0 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d014      	beq.n	80062e6 <HAL_TIM_Base_Init+0x9e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d010      	beq.n	80062e6 <HAL_TIM_Base_Init+0x9e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d00c      	beq.n	80062e6 <HAL_TIM_Base_Init+0x9e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b40      	cmp	r3, #64	@ 0x40
 80062d2:	d008      	beq.n	80062e6 <HAL_TIM_Base_Init+0x9e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b60      	cmp	r3, #96	@ 0x60
 80062da:	d004      	beq.n	80062e6 <HAL_TIM_Base_Init+0x9e>
 80062dc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80062e0:	4842      	ldr	r0, [pc, #264]	@ (80063ec <HAL_TIM_Base_Init+0x1a4>)
 80062e2:	f7fc fa97 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <HAL_TIM_Base_Init+0xc4>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f6:	d009      	beq.n	800630c <HAL_TIM_Base_Init+0xc4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006300:	d004      	beq.n	800630c <HAL_TIM_Base_Init+0xc4>
 8006302:	f240 1115 	movw	r1, #277	@ 0x115
 8006306:	4839      	ldr	r0, [pc, #228]	@ (80063ec <HAL_TIM_Base_Init+0x1a4>)
 8006308:	f7fc fa84 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <HAL_TIM_Base_Init+0xd6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800631c:	d304      	bcc.n	8006328 <HAL_TIM_Base_Init+0xe0>
 800631e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006322:	4832      	ldr	r0, [pc, #200]	@ (80063ec <HAL_TIM_Base_Init+0x1a4>)
 8006324:	f7fc fa76 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_TIM_Base_Init+0xfa>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b80      	cmp	r3, #128	@ 0x80
 8006336:	d004      	beq.n	8006342 <HAL_TIM_Base_Init+0xfa>
 8006338:	f240 1117 	movw	r1, #279	@ 0x117
 800633c:	482b      	ldr	r0, [pc, #172]	@ (80063ec <HAL_TIM_Base_Init+0x1a4>)
 800633e:	f7fc fa69 	bl	8002814 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fde4 	bl	8002f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f001 fb1c 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40013400 	.word	0x40013400
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800
 80063e0:	40000c00 	.word	0x40000c00
 80063e4:	40001000 	.word	0x40001000
 80063e8:	40001400 	.word	0x40001400
 80063ec:	08008628 	.word	0x08008628

080063f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a3d      	ldr	r2, [pc, #244]	@ (80064f4 <HAL_TIM_Base_Start_IT+0x104>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d027      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3c      	ldr	r2, [pc, #240]	@ (80064f8 <HAL_TIM_Base_Start_IT+0x108>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006414:	d01d      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a38      	ldr	r2, [pc, #224]	@ (80064fc <HAL_TIM_Base_Start_IT+0x10c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a36      	ldr	r2, [pc, #216]	@ (8006500 <HAL_TIM_Base_Start_IT+0x110>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a35      	ldr	r2, [pc, #212]	@ (8006504 <HAL_TIM_Base_Start_IT+0x114>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a33      	ldr	r2, [pc, #204]	@ (8006508 <HAL_TIM_Base_Start_IT+0x118>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a32      	ldr	r2, [pc, #200]	@ (800650c <HAL_TIM_Base_Start_IT+0x11c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIM_Base_Start_IT+0x62>
 8006448:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 800644c:	4830      	ldr	r0, [pc, #192]	@ (8006510 <HAL_TIM_Base_Start_IT+0x120>)
 800644e:	f7fc f9e1 	bl	8002814 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e044      	b.n	80064ec <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <HAL_TIM_Base_Start_IT+0x104>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xc6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <HAL_TIM_Base_Start_IT+0x108>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xc6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006496:	d00e      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xc6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <HAL_TIM_Base_Start_IT+0x10c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xc6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a16      	ldr	r2, [pc, #88]	@ (8006500 <HAL_TIM_Base_Start_IT+0x110>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xc6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a14      	ldr	r2, [pc, #80]	@ (8006504 <HAL_TIM_Base_Start_IT+0x114>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b06      	cmp	r3, #6
 80064c6:	d010      	beq.n	80064ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	e007      	b.n	80064ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40001000 	.word	0x40001000
 800650c:	40001400 	.word	0x40001400
 8006510:	08008628 	.word	0x08008628

08006514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0b5      	b.n	8006692 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5c      	ldr	r2, [pc, #368]	@ (800669c <HAL_TIM_PWM_Init+0x188>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d027      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5a      	ldr	r2, [pc, #360]	@ (80066a0 <HAL_TIM_PWM_Init+0x18c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006542:	d01d      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a56      	ldr	r2, [pc, #344]	@ (80066a4 <HAL_TIM_PWM_Init+0x190>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a55      	ldr	r2, [pc, #340]	@ (80066a8 <HAL_TIM_PWM_Init+0x194>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a53      	ldr	r2, [pc, #332]	@ (80066ac <HAL_TIM_PWM_Init+0x198>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a52      	ldr	r2, [pc, #328]	@ (80066b0 <HAL_TIM_PWM_Init+0x19c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a50      	ldr	r2, [pc, #320]	@ (80066b4 <HAL_TIM_PWM_Init+0x1a0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_TIM_PWM_Init+0x6c>
 8006576:	f240 512c 	movw	r1, #1324	@ 0x52c
 800657a:	484f      	ldr	r0, [pc, #316]	@ (80066b8 <HAL_TIM_PWM_Init+0x1a4>)
 800657c:	f7fc f94a 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d014      	beq.n	80065b2 <HAL_TIM_PWM_Init+0x9e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b10      	cmp	r3, #16
 800658e:	d010      	beq.n	80065b2 <HAL_TIM_PWM_Init+0x9e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b20      	cmp	r3, #32
 8006596:	d00c      	beq.n	80065b2 <HAL_TIM_PWM_Init+0x9e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d008      	beq.n	80065b2 <HAL_TIM_PWM_Init+0x9e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b60      	cmp	r3, #96	@ 0x60
 80065a6:	d004      	beq.n	80065b2 <HAL_TIM_PWM_Init+0x9e>
 80065a8:	f240 512d 	movw	r1, #1325	@ 0x52d
 80065ac:	4842      	ldr	r0, [pc, #264]	@ (80066b8 <HAL_TIM_PWM_Init+0x1a4>)
 80065ae:	f7fc f931 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00e      	beq.n	80065d8 <HAL_TIM_PWM_Init+0xc4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c2:	d009      	beq.n	80065d8 <HAL_TIM_PWM_Init+0xc4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065cc:	d004      	beq.n	80065d8 <HAL_TIM_PWM_Init+0xc4>
 80065ce:	f240 512e 	movw	r1, #1326	@ 0x52e
 80065d2:	4839      	ldr	r0, [pc, #228]	@ (80066b8 <HAL_TIM_PWM_Init+0x1a4>)
 80065d4:	f7fc f91e 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <HAL_TIM_PWM_Init+0xd6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d304      	bcc.n	80065f4 <HAL_TIM_PWM_Init+0xe0>
 80065ea:	f240 512f 	movw	r1, #1327	@ 0x52f
 80065ee:	4832      	ldr	r0, [pc, #200]	@ (80066b8 <HAL_TIM_PWM_Init+0x1a4>)
 80065f0:	f7fc f910 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <HAL_TIM_PWM_Init+0xfa>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b80      	cmp	r3, #128	@ 0x80
 8006602:	d004      	beq.n	800660e <HAL_TIM_PWM_Init+0xfa>
 8006604:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8006608:	482b      	ldr	r0, [pc, #172]	@ (80066b8 <HAL_TIM_PWM_Init+0x1a4>)
 800660a:	f7fc f903 	bl	8002814 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f84a 	bl	80066bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f001 f9b6 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40001000 	.word	0x40001000
 80066b4:	40001400 	.word	0x40001400
 80066b8:	08008628 	.word	0x08008628

080066bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr
	...

080066d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a8a      	ldr	r2, [pc, #552]	@ (8006908 <HAL_TIM_PWM_Start+0x238>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10b      	bne.n	80066fc <HAL_TIM_PWM_Start+0x2c>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d062      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d05f      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d05c      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	d059      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a82      	ldr	r2, [pc, #520]	@ (800690c <HAL_TIM_PWM_Start+0x23c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10b      	bne.n	800671e <HAL_TIM_PWM_Start+0x4e>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d051      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d04e      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d04b      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b0c      	cmp	r3, #12
 800671c:	d048      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006726:	d10b      	bne.n	8006740 <HAL_TIM_PWM_Start+0x70>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d040      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d03d      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b08      	cmp	r3, #8
 8006738:	d03a      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d037      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a72      	ldr	r2, [pc, #456]	@ (8006910 <HAL_TIM_PWM_Start+0x240>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10b      	bne.n	8006762 <HAL_TIM_PWM_Start+0x92>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02f      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b04      	cmp	r3, #4
 8006754:	d02c      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d029      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d026      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6b      	ldr	r2, [pc, #428]	@ (8006914 <HAL_TIM_PWM_Start+0x244>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10b      	bne.n	8006784 <HAL_TIM_PWM_Start+0xb4>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01e      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d01b      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d018      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d015      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a63      	ldr	r2, [pc, #396]	@ (8006918 <HAL_TIM_PWM_Start+0x248>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d10b      	bne.n	80067a6 <HAL_TIM_PWM_Start+0xd6>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00d      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b04      	cmp	r3, #4
 8006798:	d00a      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d007      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d004      	beq.n	80067b0 <HAL_TIM_PWM_Start+0xe0>
 80067a6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 80067aa:	485c      	ldr	r0, [pc, #368]	@ (800691c <HAL_TIM_PWM_Start+0x24c>)
 80067ac:	f7fc f832 	bl	8002814 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_TIM_PWM_Start+0xfa>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b01      	cmp	r3, #1
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	e022      	b.n	8006810 <HAL_TIM_PWM_Start+0x140>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d109      	bne.n	80067e4 <HAL_TIM_PWM_Start+0x114>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	e015      	b.n	8006810 <HAL_TIM_PWM_Start+0x140>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d109      	bne.n	80067fe <HAL_TIM_PWM_Start+0x12e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	bf14      	ite	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	2300      	moveq	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	e008      	b.n	8006810 <HAL_TIM_PWM_Start+0x140>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e072      	b.n	80068fe <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <HAL_TIM_PWM_Start+0x158>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006826:	e013      	b.n	8006850 <HAL_TIM_PWM_Start+0x180>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b04      	cmp	r3, #4
 800682c:	d104      	bne.n	8006838 <HAL_TIM_PWM_Start+0x168>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006836:	e00b      	b.n	8006850 <HAL_TIM_PWM_Start+0x180>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b08      	cmp	r3, #8
 800683c:	d104      	bne.n	8006848 <HAL_TIM_PWM_Start+0x178>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006846:	e003      	b.n	8006850 <HAL_TIM_PWM_Start+0x180>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2201      	movs	r2, #1
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fbf1 	bl	8008040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a29      	ldr	r2, [pc, #164]	@ (8006908 <HAL_TIM_PWM_Start+0x238>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIM_PWM_Start+0x1a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a27      	ldr	r2, [pc, #156]	@ (800690c <HAL_TIM_PWM_Start+0x23c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_TIM_PWM_Start+0x1a6>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <HAL_TIM_PWM_Start+0x1a8>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800688a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1d      	ldr	r2, [pc, #116]	@ (8006908 <HAL_TIM_PWM_Start+0x238>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x1f8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1c      	ldr	r2, [pc, #112]	@ (800690c <HAL_TIM_PWM_Start+0x23c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x1f8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a8:	d00e      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x1f8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a18      	ldr	r2, [pc, #96]	@ (8006910 <HAL_TIM_PWM_Start+0x240>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x1f8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <HAL_TIM_PWM_Start+0x244>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_TIM_PWM_Start+0x1f8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <HAL_TIM_PWM_Start+0x248>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d111      	bne.n	80068ec <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d010      	beq.n	80068fc <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	e007      	b.n	80068fc <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	08008628 	.word	0x08008628

08006920 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e194      	b.n	8006c5e <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7f      	ldr	r2, [pc, #508]	@ (8006b38 <HAL_TIM_Encoder_Init+0x218>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7e      	ldr	r2, [pc, #504]	@ (8006b3c <HAL_TIM_Encoder_Init+0x21c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006950:	d013      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a7a      	ldr	r2, [pc, #488]	@ (8006b40 <HAL_TIM_Encoder_Init+0x220>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a78      	ldr	r2, [pc, #480]	@ (8006b44 <HAL_TIM_Encoder_Init+0x224>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a77      	ldr	r2, [pc, #476]	@ (8006b48 <HAL_TIM_Encoder_Init+0x228>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_Encoder_Init+0x5a>
 8006970:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8006974:	4875      	ldr	r0, [pc, #468]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006976:	f7fb ff4d 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <HAL_TIM_Encoder_Init+0x8c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b10      	cmp	r3, #16
 8006988:	d010      	beq.n	80069ac <HAL_TIM_Encoder_Init+0x8c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b20      	cmp	r3, #32
 8006990:	d00c      	beq.n	80069ac <HAL_TIM_Encoder_Init+0x8c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b40      	cmp	r3, #64	@ 0x40
 8006998:	d008      	beq.n	80069ac <HAL_TIM_Encoder_Init+0x8c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b60      	cmp	r3, #96	@ 0x60
 80069a0:	d004      	beq.n	80069ac <HAL_TIM_Encoder_Init+0x8c>
 80069a2:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 80069a6:	4869      	ldr	r0, [pc, #420]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 80069a8:	f7fb ff34 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIM_Encoder_Init+0xb2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_Encoder_Init+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_Encoder_Init+0xb2>
 80069c8:	f640 31da 	movw	r1, #3034	@ 0xbda
 80069cc:	485f      	ldr	r0, [pc, #380]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 80069ce:	f7fb ff21 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_TIM_Encoder_Init+0xcc>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b80      	cmp	r3, #128	@ 0x80
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_Encoder_Init+0xcc>
 80069e2:	f640 31db 	movw	r1, #3035	@ 0xbdb
 80069e6:	4859      	ldr	r0, [pc, #356]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 80069e8:	f7fb ff14 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_Encoder_Init+0xee>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d008      	beq.n	8006a0e <HAL_TIM_Encoder_Init+0xee>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d004      	beq.n	8006a0e <HAL_TIM_Encoder_Init+0xee>
 8006a04:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8006a08:	4850      	ldr	r0, [pc, #320]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006a0a:	f7fb ff03 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d00c      	beq.n	8006a30 <HAL_TIM_Encoder_Init+0x110>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d008      	beq.n	8006a30 <HAL_TIM_Encoder_Init+0x110>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_Encoder_Init+0x110>
 8006a26:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 8006a2a:	4848      	ldr	r0, [pc, #288]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006a2c:	f7fb fef2 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d00c      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x132>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d008      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x132>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d004      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x132>
 8006a48:	f640 31de 	movw	r1, #3038	@ 0xbde
 8006a4c:	483f      	ldr	r0, [pc, #252]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006a4e:	f7fb fee1 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d008      	beq.n	8006a6c <HAL_TIM_Encoder_Init+0x14c>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d004      	beq.n	8006a6c <HAL_TIM_Encoder_Init+0x14c>
 8006a62:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8006a66:	4839      	ldr	r0, [pc, #228]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006a68:	f7fb fed4 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_TIM_Encoder_Init+0x166>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d004      	beq.n	8006a86 <HAL_TIM_Encoder_Init+0x166>
 8006a7c:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8006a80:	4832      	ldr	r0, [pc, #200]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006a82:	f7fb fec7 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d010      	beq.n	8006ab0 <HAL_TIM_Encoder_Init+0x190>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d00c      	beq.n	8006ab0 <HAL_TIM_Encoder_Init+0x190>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d008      	beq.n	8006ab0 <HAL_TIM_Encoder_Init+0x190>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d004      	beq.n	8006ab0 <HAL_TIM_Encoder_Init+0x190>
 8006aa6:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 8006aaa:	4828      	ldr	r0, [pc, #160]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006aac:	f7fb feb2 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_TIM_Encoder_Init+0x1ba>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d00c      	beq.n	8006ada <HAL_TIM_Encoder_Init+0x1ba>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d008      	beq.n	8006ada <HAL_TIM_Encoder_Init+0x1ba>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d004      	beq.n	8006ada <HAL_TIM_Encoder_Init+0x1ba>
 8006ad0:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8006ad4:	481d      	ldr	r0, [pc, #116]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006ad6:	f7fb fe9d 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b0f      	cmp	r3, #15
 8006ae0:	d904      	bls.n	8006aec <HAL_TIM_Encoder_Init+0x1cc>
 8006ae2:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8006ae6:	4819      	ldr	r0, [pc, #100]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006ae8:	f7fb fe94 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	2b0f      	cmp	r3, #15
 8006af2:	d904      	bls.n	8006afe <HAL_TIM_Encoder_Init+0x1de>
 8006af4:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8006af8:	4814      	ldr	r0, [pc, #80]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006afa:	f7fb fe8b 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_Encoder_Init+0x1f0>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b0e:	d304      	bcc.n	8006b1a <HAL_TIM_Encoder_Init+0x1fa>
 8006b10:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8006b14:	480d      	ldr	r0, [pc, #52]	@ (8006b4c <HAL_TIM_Encoder_Init+0x22c>)
 8006b16:	f7fb fe7d 	bl	8002814 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d114      	bne.n	8006b50 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fc fa46 	bl	8002fc0 <HAL_TIM_Encoder_MspInit>
 8006b34:	e00c      	b.n	8006b50 <HAL_TIM_Encoder_Init+0x230>
 8006b36:	bf00      	nop
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40013400 	.word	0x40013400
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	08008628 	.word	0x08008628
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b66:	f023 0307 	bic.w	r3, r3, #7
 8006b6a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 ff18 	bl	80079ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006bc2:	f023 030c 	bic.w	r3, r3, #12
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	4313      	orrs	r3, r2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	011a      	lsls	r2, r3, #4
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	031b      	lsls	r3, r3, #12
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop

08006c68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a4d      	ldr	r2, [pc, #308]	@ (8006dcc <HAL_TIM_Encoder_Start+0x164>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8006dd0 <HAL_TIM_Encoder_Start+0x168>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	d013      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a47      	ldr	r2, [pc, #284]	@ (8006dd4 <HAL_TIM_Encoder_Start+0x16c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a46      	ldr	r2, [pc, #280]	@ (8006dd8 <HAL_TIM_Encoder_Start+0x170>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a44      	ldr	r2, [pc, #272]	@ (8006ddc <HAL_TIM_Encoder_Start+0x174>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x70>
 8006cce:	f640 4195 	movw	r1, #3221	@ 0xc95
 8006cd2:	4843      	ldr	r0, [pc, #268]	@ (8006de0 <HAL_TIM_Encoder_Start+0x178>)
 8006cd4:	f7fb fd9e 	bl	8002814 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d110      	bne.n	8006d00 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d102      	bne.n	8006cea <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce4:	7b7b      	ldrb	r3, [r7, #13]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d001      	beq.n	8006cee <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e069      	b.n	8006dc2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cfe:	e031      	b.n	8006d64 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d110      	bne.n	8006d28 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d0c:	7b3b      	ldrb	r3, [r7, #12]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d001      	beq.n	8006d16 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e055      	b.n	8006dc2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d26:	e01d      	b.n	8006d64 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d108      	bne.n	8006d40 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d105      	bne.n	8006d40 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d34:	7b7b      	ldrb	r3, [r7, #13]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d102      	bne.n	8006d40 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d3a:	7b3b      	ldrb	r3, [r7, #12]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d001      	beq.n	8006d44 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e03e      	b.n	8006dc2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_Encoder_Start+0x10a>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d008      	beq.n	8006d82 <HAL_TIM_Encoder_Start+0x11a>
 8006d70:	e00f      	b.n	8006d92 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2201      	movs	r2, #1
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f960 	bl	8008040 <TIM_CCxChannelCmd>
      break;
 8006d80:	e016      	b.n	8006db0 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	2104      	movs	r1, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f958 	bl	8008040 <TIM_CCxChannelCmd>
      break;
 8006d90:	e00e      	b.n	8006db0 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2201      	movs	r2, #1
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f950 	bl	8008040 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2201      	movs	r2, #1
 8006da6:	2104      	movs	r1, #4
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 f949 	bl	8008040 <TIM_CCxChannelCmd>
      break;
 8006dae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	08008628 	.word	0x08008628

08006de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d122      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0202 	mvn.w	r2, #2
 8006e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fda5 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fd98 	bl	8007964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fda7 	bl	8007988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0204 	mvn.w	r2, #4
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fd7b 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd6e 	bl	8007964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fd7d 	bl	8007988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d122      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d11b      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0208 	mvn.w	r2, #8
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fd51 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fd44 	bl	8007964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fd53 	bl	8007988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d122      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d11b      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0210 	mvn.w	r2, #16
 8006f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2208      	movs	r2, #8
 8006f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fd27 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8006f28:	e005      	b.n	8006f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fd1a 	bl	8007964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fd29 	bl	8007988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10e      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0201 	mvn.w	r2, #1
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fb fa3e 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f80:	2b80      	cmp	r3, #128	@ 0x80
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fa5b 	bl	800844a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fac:	2b40      	cmp	r3, #64	@ 0x40
 8006fae:	d107      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fced 	bl	800799a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0220 	mvn.w	r2, #32
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fa26 	bl	8008438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d010      	beq.n	800702c <HAL_TIM_PWM_ConfigChannel+0x38>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d00d      	beq.n	800702c <HAL_TIM_PWM_ConfigChannel+0x38>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b08      	cmp	r3, #8
 8007014:	d00a      	beq.n	800702c <HAL_TIM_PWM_ConfigChannel+0x38>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d007      	beq.n	800702c <HAL_TIM_PWM_ConfigChannel+0x38>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007020:	d004      	beq.n	800702c <HAL_TIM_PWM_ConfigChannel+0x38>
 8007022:	f241 017e 	movw	r1, #4222	@ 0x107e
 8007026:	4890      	ldr	r0, [pc, #576]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007028:	f7fb fbf4 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b60      	cmp	r3, #96	@ 0x60
 8007032:	d008      	beq.n	8007046 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b70      	cmp	r3, #112	@ 0x70
 800703a:	d004      	beq.n	8007046 <HAL_TIM_PWM_ConfigChannel+0x52>
 800703c:	f241 017f 	movw	r1, #4223	@ 0x107f
 8007040:	4889      	ldr	r0, [pc, #548]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007042:	f7fb fbe7 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007056:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 800705a:	4883      	ldr	r0, [pc, #524]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800705c:	f7fb fbda 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <HAL_TIM_PWM_ConfigChannel+0x86>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d004      	beq.n	800707a <HAL_TIM_PWM_ConfigChannel+0x86>
 8007070:	f241 0181 	movw	r1, #4225	@ 0x1081
 8007074:	487c      	ldr	r0, [pc, #496]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007076:	f7fb fbcd 	bl	8002814 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIM_PWM_ConfigChannel+0x94>
 8007084:	2302      	movs	r3, #2
 8007086:	e147      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x324>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b0c      	cmp	r3, #12
 8007094:	f200 8138 	bhi.w	8007308 <HAL_TIM_PWM_ConfigChannel+0x314>
 8007098:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	08007309 	.word	0x08007309
 80070a8:	08007309 	.word	0x08007309
 80070ac:	08007309 	.word	0x08007309
 80070b0:	0800715b 	.word	0x0800715b
 80070b4:	08007309 	.word	0x08007309
 80070b8:	08007309 	.word	0x08007309
 80070bc:	08007309 	.word	0x08007309
 80070c0:	080071e3 	.word	0x080071e3
 80070c4:	08007309 	.word	0x08007309
 80070c8:	08007309 	.word	0x08007309
 80070cc:	08007309 	.word	0x08007309
 80070d0:	08007281 	.word	0x08007281
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a64      	ldr	r2, [pc, #400]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x278>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01d      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a63      	ldr	r2, [pc, #396]	@ (8007270 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d018      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f0:	d013      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007274 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00e      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5d      	ldr	r2, [pc, #372]	@ (8007278 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5c      	ldr	r2, [pc, #368]	@ (800727c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x126>
 8007110:	f241 018b 	movw	r1, #4235	@ 0x108b
 8007114:	4854      	ldr	r0, [pc, #336]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007116:	f7fb fb7d 	bl	8002814 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fcbd 	bl	8007aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0208 	orr.w	r2, r2, #8
 8007134:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0204 	bic.w	r2, r2, #4
 8007144:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6999      	ldr	r1, [r3, #24]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	619a      	str	r2, [r3, #24]
      break;
 8007158:	e0d9      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a43      	ldr	r2, [pc, #268]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d01d      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a41      	ldr	r2, [pc, #260]	@ (8007270 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d018      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d013      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a3d      	ldr	r2, [pc, #244]	@ (8007274 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00e      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a3c      	ldr	r2, [pc, #240]	@ (8007278 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a3a      	ldr	r2, [pc, #232]	@ (800727c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007196:	f241 019c 	movw	r1, #4252	@ 0x109c
 800719a:	4833      	ldr	r0, [pc, #204]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800719c:	f7fb fb3a 	bl	8002814 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fd14 	bl	8007bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	619a      	str	r2, [r3, #24]
      break;
 80071e0:	e095      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a21      	ldr	r2, [pc, #132]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x278>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01d      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007270 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d018      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fe:	d013      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00e      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1a      	ldr	r2, [pc, #104]	@ (8007278 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a18      	ldr	r2, [pc, #96]	@ (800727c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x234>
 800721e:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 8007222:	4811      	ldr	r0, [pc, #68]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007224:	f7fb faf6 	bl	8002814 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fd6e 	bl	8007d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0208 	orr.w	r2, r2, #8
 8007242:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69d9      	ldr	r1, [r3, #28]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	61da      	str	r2, [r3, #28]
      break;
 8007266:	e052      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007268:	08008628 	.word	0x08008628
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40013400 	.word	0x40013400
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a26      	ldr	r2, [pc, #152]	@ (8007320 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01d      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a25      	ldr	r2, [pc, #148]	@ (8007324 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729c:	d013      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a21      	ldr	r2, [pc, #132]	@ (8007328 <HAL_TIM_PWM_ConfigChannel+0x334>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	@ (800732c <HAL_TIM_PWM_ConfigChannel+0x338>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007330 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80072bc:	f241 01be 	movw	r1, #4286	@ 0x10be
 80072c0:	481c      	ldr	r0, [pc, #112]	@ (8007334 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80072c2:	f7fb faa7 	bl	8002814 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fdbd 	bl	8007e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	021a      	lsls	r2, r3, #8
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	61da      	str	r2, [r3, #28]
      break;
 8007306:	e002      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	08008628 	.word	0x08008628

08007338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIM_ConfigClockSource+0x1c>
 8007350:	2302      	movs	r3, #2
 8007352:	e2f6      	b.n	8007942 <HAL_TIM_ConfigClockSource+0x60a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736c:	d029      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b70      	cmp	r3, #112	@ 0x70
 8007374:	d025      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800737e:	d020      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d01c      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b50      	cmp	r3, #80	@ 0x50
 800738e:	d018      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b60      	cmp	r3, #96	@ 0x60
 8007396:	d014      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d00c      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d008      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b30      	cmp	r3, #48	@ 0x30
 80073b6:	d004      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x8a>
 80073b8:	f241 41be 	movw	r1, #5310	@ 0x14be
 80073bc:	487c      	ldr	r0, [pc, #496]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 80073be:	f7fb fa29 	bl	8002814 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ea:	f000 80f1 	beq.w	80075d0 <HAL_TIM_ConfigClockSource+0x298>
 80073ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f2:	f200 8299 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fa:	d02d      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0x120>
 80073fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007400:	f200 8292 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 8007404:	2b70      	cmp	r3, #112	@ 0x70
 8007406:	d05d      	beq.n	80074c4 <HAL_TIM_ConfigClockSource+0x18c>
 8007408:	2b70      	cmp	r3, #112	@ 0x70
 800740a:	f200 828d 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 800740e:	2b60      	cmp	r3, #96	@ 0x60
 8007410:	f000 81a5 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x426>
 8007414:	2b60      	cmp	r3, #96	@ 0x60
 8007416:	f200 8287 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 800741a:	2b50      	cmp	r3, #80	@ 0x50
 800741c:	f000 8149 	beq.w	80076b2 <HAL_TIM_ConfigClockSource+0x37a>
 8007420:	2b50      	cmp	r3, #80	@ 0x50
 8007422:	f200 8281 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	f000 81fc 	beq.w	8007824 <HAL_TIM_ConfigClockSource+0x4ec>
 800742c:	2b40      	cmp	r3, #64	@ 0x40
 800742e:	f200 827b 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 8007432:	2b30      	cmp	r3, #48	@ 0x30
 8007434:	f000 824c 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x598>
 8007438:	2b30      	cmp	r3, #48	@ 0x30
 800743a:	f200 8275 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 800743e:	2b20      	cmp	r3, #32
 8007440:	f000 8246 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x598>
 8007444:	2b20      	cmp	r3, #32
 8007446:	f200 826f 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8240 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x598>
 8007450:	2b10      	cmp	r3, #16
 8007452:	f000 823d 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x598>
 8007456:	e267      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a55      	ldr	r2, [pc, #340]	@ (80075b4 <HAL_TIM_ConfigClockSource+0x27c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f000 8265 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a53      	ldr	r2, [pc, #332]	@ (80075b8 <HAL_TIM_ConfigClockSource+0x280>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f000 825f 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007478:	f000 8259 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a4e      	ldr	r2, [pc, #312]	@ (80075bc <HAL_TIM_ConfigClockSource+0x284>)
 8007482:	4293      	cmp	r3, r2
 8007484:	f000 8253 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a4c      	ldr	r2, [pc, #304]	@ (80075c0 <HAL_TIM_ConfigClockSource+0x288>)
 800748e:	4293      	cmp	r3, r2
 8007490:	f000 824d 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a4a      	ldr	r2, [pc, #296]	@ (80075c4 <HAL_TIM_ConfigClockSource+0x28c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	f000 8247 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a48      	ldr	r2, [pc, #288]	@ (80075c8 <HAL_TIM_ConfigClockSource+0x290>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f000 8241 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a46      	ldr	r2, [pc, #280]	@ (80075cc <HAL_TIM_ConfigClockSource+0x294>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f000 823b 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x5f6>
 80074b8:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 80074bc:	483c      	ldr	r0, [pc, #240]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 80074be:	f7fb f9a9 	bl	8002814 <assert_failed>
      break;
 80074c2:	e234      	b.n	800792e <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a3a      	ldr	r2, [pc, #232]	@ (80075b4 <HAL_TIM_ConfigClockSource+0x27c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01d      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a39      	ldr	r2, [pc, #228]	@ (80075b8 <HAL_TIM_ConfigClockSource+0x280>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e0:	d013      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a35      	ldr	r2, [pc, #212]	@ (80075bc <HAL_TIM_ConfigClockSource+0x284>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00e      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a33      	ldr	r2, [pc, #204]	@ (80075c0 <HAL_TIM_ConfigClockSource+0x288>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a32      	ldr	r2, [pc, #200]	@ (80075c4 <HAL_TIM_ConfigClockSource+0x28c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x1d2>
 8007500:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8007504:	482a      	ldr	r0, [pc, #168]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 8007506:	f7fb f985 	bl	8002814 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x202>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751a:	d00e      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x202>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007524:	d009      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x202>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800752e:	d004      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x202>
 8007530:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8007534:	481e      	ldr	r0, [pc, #120]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 8007536:	f7fb f96d 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007542:	d014      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x236>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x236>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x236>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d008      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x236>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b0a      	cmp	r3, #10
 8007562:	d004      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x236>
 8007564:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8007568:	4811      	ldr	r0, [pc, #68]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 800756a:	f7fb f953 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	d904      	bls.n	8007580 <HAL_TIM_ConfigClockSource+0x248>
 8007576:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 800757a:	480d      	ldr	r0, [pc, #52]	@ (80075b0 <HAL_TIM_ConfigClockSource+0x278>)
 800757c:	f7fb f94a 	bl	8002814 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007590:	f000 fd37 	bl	8008002 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]
      break;
 80075ac:	e1c0      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
 80075ae:	bf00      	nop
 80075b0:	08008628 	.word	0x08008628
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40013400 	.word	0x40013400
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40001000 	.word	0x40001000
 80075cc:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a8d      	ldr	r2, [pc, #564]	@ (800780c <HAL_TIM_ConfigClockSource+0x4d4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01d      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a8c      	ldr	r2, [pc, #560]	@ (8007810 <HAL_TIM_ConfigClockSource+0x4d8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d018      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ec:	d013      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a88      	ldr	r2, [pc, #544]	@ (8007814 <HAL_TIM_ConfigClockSource+0x4dc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a86      	ldr	r2, [pc, #536]	@ (8007818 <HAL_TIM_ConfigClockSource+0x4e0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a85      	ldr	r2, [pc, #532]	@ (800781c <HAL_TIM_ConfigClockSource+0x4e4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x2de>
 800760c:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8007610:	4883      	ldr	r0, [pc, #524]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007612:	f7fb f8ff 	bl	8002814 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d013      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x30e>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007626:	d00e      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x30e>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007630:	d009      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x30e>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800763a:	d004      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x30e>
 800763c:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8007640:	4877      	ldr	r0, [pc, #476]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007642:	f7fb f8e7 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764e:	d014      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x342>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d010      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x342>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x342>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d008      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x342>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b0a      	cmp	r3, #10
 800766e:	d004      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x342>
 8007670:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8007674:	486a      	ldr	r0, [pc, #424]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007676:	f7fb f8cd 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b0f      	cmp	r3, #15
 8007680:	d904      	bls.n	800768c <HAL_TIM_ConfigClockSource+0x354>
 8007682:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8007686:	4866      	ldr	r0, [pc, #408]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007688:	f7fb f8c4 	bl	8002814 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800769c:	f000 fcb1 	bl	8008002 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076ae:	609a      	str	r2, [r3, #8]
      break;
 80076b0:	e13e      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a55      	ldr	r2, [pc, #340]	@ (800780c <HAL_TIM_ConfigClockSource+0x4d4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d01d      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a53      	ldr	r2, [pc, #332]	@ (8007810 <HAL_TIM_ConfigClockSource+0x4d8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d013      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a4f      	ldr	r2, [pc, #316]	@ (8007814 <HAL_TIM_ConfigClockSource+0x4dc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a4e      	ldr	r2, [pc, #312]	@ (8007818 <HAL_TIM_ConfigClockSource+0x4e0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a4c      	ldr	r2, [pc, #304]	@ (800781c <HAL_TIM_ConfigClockSource+0x4e4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x3c0>
 80076ee:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 80076f2:	484b      	ldr	r0, [pc, #300]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 80076f4:	f7fb f88e 	bl	8002814 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007700:	d014      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x3f4>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d010      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x3f4>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x3f4>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d008      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x3f4>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b0a      	cmp	r3, #10
 8007720:	d004      	beq.n	800772c <HAL_TIM_ConfigClockSource+0x3f4>
 8007722:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8007726:	483e      	ldr	r0, [pc, #248]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007728:	f7fb f874 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b0f      	cmp	r3, #15
 8007732:	d904      	bls.n	800773e <HAL_TIM_ConfigClockSource+0x406>
 8007734:	f241 5101 	movw	r1, #5377	@ 0x1501
 8007738:	4839      	ldr	r0, [pc, #228]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 800773a:	f7fb f86b 	bl	8002814 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800774a:	461a      	mov	r2, r3
 800774c:	f000 fbe2 	bl	8007f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2150      	movs	r1, #80	@ 0x50
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fc39 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 800775c:	e0e8      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2a      	ldr	r2, [pc, #168]	@ (800780c <HAL_TIM_ConfigClockSource+0x4d4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d01d      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a28      	ldr	r2, [pc, #160]	@ (8007810 <HAL_TIM_ConfigClockSource+0x4d8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a24      	ldr	r2, [pc, #144]	@ (8007814 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a23      	ldr	r2, [pc, #140]	@ (8007818 <HAL_TIM_ConfigClockSource+0x4e0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a21      	ldr	r2, [pc, #132]	@ (800781c <HAL_TIM_ConfigClockSource+0x4e4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0x46c>
 800779a:	f241 510d 	movw	r1, #5389	@ 0x150d
 800779e:	4820      	ldr	r0, [pc, #128]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 80077a0:	f7fb f838 	bl	8002814 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ac:	d014      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x4a0>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d010      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x4a0>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x4a0>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d008      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x4a0>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b0a      	cmp	r3, #10
 80077cc:	d004      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x4a0>
 80077ce:	f241 5110 	movw	r1, #5392	@ 0x1510
 80077d2:	4813      	ldr	r0, [pc, #76]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 80077d4:	f7fb f81e 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b0f      	cmp	r3, #15
 80077de:	d904      	bls.n	80077ea <HAL_TIM_ConfigClockSource+0x4b2>
 80077e0:	f241 5111 	movw	r1, #5393	@ 0x1511
 80077e4:	480e      	ldr	r0, [pc, #56]	@ (8007820 <HAL_TIM_ConfigClockSource+0x4e8>)
 80077e6:	f7fb f815 	bl	8002814 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077f6:	461a      	mov	r2, r3
 80077f8:	f000 fbba 	bl	8007f70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2160      	movs	r1, #96	@ 0x60
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fbe3 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007808:	e092      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
 800780a:	bf00      	nop
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	08008628 	.word	0x08008628
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a48      	ldr	r2, [pc, #288]	@ (800794c <HAL_TIM_ConfigClockSource+0x614>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01d      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a47      	ldr	r2, [pc, #284]	@ (8007950 <HAL_TIM_ConfigClockSource+0x618>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007840:	d013      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a43      	ldr	r2, [pc, #268]	@ (8007954 <HAL_TIM_ConfigClockSource+0x61c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a41      	ldr	r2, [pc, #260]	@ (8007958 <HAL_TIM_ConfigClockSource+0x620>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a40      	ldr	r2, [pc, #256]	@ (800795c <HAL_TIM_ConfigClockSource+0x624>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x532>
 8007860:	f241 511d 	movw	r1, #5405	@ 0x151d
 8007864:	483e      	ldr	r0, [pc, #248]	@ (8007960 <HAL_TIM_ConfigClockSource+0x628>)
 8007866:	f7fa ffd5 	bl	8002814 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007872:	d014      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x566>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x566>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00c      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x566>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d008      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x566>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b0a      	cmp	r3, #10
 8007892:	d004      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x566>
 8007894:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8007898:	4831      	ldr	r0, [pc, #196]	@ (8007960 <HAL_TIM_ConfigClockSource+0x628>)
 800789a:	f7fa ffbb 	bl	8002814 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d904      	bls.n	80078b0 <HAL_TIM_ConfigClockSource+0x578>
 80078a6:	f241 5121 	movw	r1, #5409	@ 0x1521
 80078aa:	482d      	ldr	r0, [pc, #180]	@ (8007960 <HAL_TIM_ConfigClockSource+0x628>)
 80078ac:	f7fa ffb2 	bl	8002814 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078bc:	461a      	mov	r2, r3
 80078be:	f000 fb29 	bl	8007f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2140      	movs	r1, #64	@ 0x40
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fb80 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 80078ce:	e02f      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <HAL_TIM_ConfigClockSource+0x614>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01d      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a1c      	ldr	r2, [pc, #112]	@ (8007950 <HAL_TIM_ConfigClockSource+0x618>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d018      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ec:	d013      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a18      	ldr	r2, [pc, #96]	@ (8007954 <HAL_TIM_ConfigClockSource+0x61c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00e      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <HAL_TIM_ConfigClockSource+0x620>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d009      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a15      	ldr	r2, [pc, #84]	@ (800795c <HAL_TIM_ConfigClockSource+0x624>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x5de>
 800790c:	f241 5130 	movw	r1, #5424	@ 0x1530
 8007910:	4813      	ldr	r0, [pc, #76]	@ (8007960 <HAL_TIM_ConfigClockSource+0x628>)
 8007912:	f7fa ff7f 	bl	8002814 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f000 fb54 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007926:	e003      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e000      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 800792e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40000c00 	.word	0x40000c00
 8007960:	08008628 	.word	0x08008628

08007964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr

08007976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	bc80      	pop	{r7}
 8007998:	4770      	bx	lr

0800799a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a33      	ldr	r2, [pc, #204]	@ (8007a8c <TIM_Base_SetConfig+0xe0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d013      	beq.n	80079ec <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a32      	ldr	r2, [pc, #200]	@ (8007a90 <TIM_Base_SetConfig+0xe4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00f      	beq.n	80079ec <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d2:	d00b      	beq.n	80079ec <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007a94 <TIM_Base_SetConfig+0xe8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d007      	beq.n	80079ec <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2e      	ldr	r2, [pc, #184]	@ (8007a98 <TIM_Base_SetConfig+0xec>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a2d      	ldr	r2, [pc, #180]	@ (8007a9c <TIM_Base_SetConfig+0xf0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d108      	bne.n	80079fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a22      	ldr	r2, [pc, #136]	@ (8007a8c <TIM_Base_SetConfig+0xe0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0x82>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a21      	ldr	r2, [pc, #132]	@ (8007a90 <TIM_Base_SetConfig+0xe4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0x82>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0x82>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <TIM_Base_SetConfig+0xe8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0x82>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1d      	ldr	r2, [pc, #116]	@ (8007a98 <TIM_Base_SetConfig+0xec>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1c      	ldr	r2, [pc, #112]	@ (8007a9c <TIM_Base_SetConfig+0xf0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a09      	ldr	r2, [pc, #36]	@ (8007a8c <TIM_Base_SetConfig+0xe0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0xc8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a08      	ldr	r2, [pc, #32]	@ (8007a90 <TIM_Base_SetConfig+0xe4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40013400 	.word	0x40013400
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00

08007aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f023 0201 	bic.w	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f023 0302 	bic.w	r3, r3, #2
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a34      	ldr	r2, [pc, #208]	@ (8007bc8 <TIM_OC1_SetConfig+0x128>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC1_SetConfig+0x64>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a33      	ldr	r2, [pc, #204]	@ (8007bcc <TIM_OC1_SetConfig+0x12c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d119      	bne.n	8007b38 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <TIM_OC1_SetConfig+0x7e>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d004      	beq.n	8007b1e <TIM_OC1_SetConfig+0x7e>
 8007b14:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8007b18:	482d      	ldr	r0, [pc, #180]	@ (8007bd0 <TIM_OC1_SetConfig+0x130>)
 8007b1a:	f7fa fe7b 	bl	8002814 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 0308 	bic.w	r3, r3, #8
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0304 	bic.w	r3, r3, #4
 8007b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a23      	ldr	r2, [pc, #140]	@ (8007bc8 <TIM_OC1_SetConfig+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d003      	beq.n	8007b48 <TIM_OC1_SetConfig+0xa8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a22      	ldr	r2, [pc, #136]	@ (8007bcc <TIM_OC1_SetConfig+0x12c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d12d      	bne.n	8007ba4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b50:	d008      	beq.n	8007b64 <TIM_OC1_SetConfig+0xc4>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <TIM_OC1_SetConfig+0xc4>
 8007b5a:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 8007b5e:	481c      	ldr	r0, [pc, #112]	@ (8007bd0 <TIM_OC1_SetConfig+0x130>)
 8007b60:	f7fa fe58 	bl	8002814 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6c:	d008      	beq.n	8007b80 <TIM_OC1_SetConfig+0xe0>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <TIM_OC1_SetConfig+0xe0>
 8007b76:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 8007b7a:	4815      	ldr	r0, [pc, #84]	@ (8007bd0 <TIM_OC1_SetConfig+0x130>)
 8007b7c:	f7fa fe4a 	bl	8002814 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40012c00 	.word	0x40012c00
 8007bcc:	40013400 	.word	0x40013400
 8007bd0:	08008628 	.word	0x08008628

08007bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f023 0210 	bic.w	r2, r3, #16
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0320 	bic.w	r3, r3, #32
 8007c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a35      	ldr	r2, [pc, #212]	@ (8007d04 <TIM_OC2_SetConfig+0x130>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC2_SetConfig+0x68>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a34      	ldr	r2, [pc, #208]	@ (8007d08 <TIM_OC2_SetConfig+0x134>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d11a      	bne.n	8007c72 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d008      	beq.n	8007c56 <TIM_OC2_SetConfig+0x82>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d004      	beq.n	8007c56 <TIM_OC2_SetConfig+0x82>
 8007c4c:	f641 3110 	movw	r1, #6928	@ 0x1b10
 8007c50:	482e      	ldr	r0, [pc, #184]	@ (8007d0c <TIM_OC2_SetConfig+0x138>)
 8007c52:	f7fa fddf 	bl	8002814 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c70:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a23      	ldr	r2, [pc, #140]	@ (8007d04 <TIM_OC2_SetConfig+0x130>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC2_SetConfig+0xae>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a22      	ldr	r2, [pc, #136]	@ (8007d08 <TIM_OC2_SetConfig+0x134>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d12f      	bne.n	8007ce2 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c8a:	d008      	beq.n	8007c9e <TIM_OC2_SetConfig+0xca>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <TIM_OC2_SetConfig+0xca>
 8007c94:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 8007c98:	481c      	ldr	r0, [pc, #112]	@ (8007d0c <TIM_OC2_SetConfig+0x138>)
 8007c9a:	f7fa fdbb 	bl	8002814 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca6:	d008      	beq.n	8007cba <TIM_OC2_SetConfig+0xe6>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <TIM_OC2_SetConfig+0xe6>
 8007cb0:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 8007cb4:	4815      	ldr	r0, [pc, #84]	@ (8007d0c <TIM_OC2_SetConfig+0x138>)
 8007cb6:	f7fa fdad 	bl	8002814 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40012c00 	.word	0x40012c00
 8007d08:	40013400 	.word	0x40013400
 8007d0c:	08008628 	.word	0x08008628

08007d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0303 	bic.w	r3, r3, #3
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a35      	ldr	r2, [pc, #212]	@ (8007e40 <TIM_OC3_SetConfig+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_OC3_SetConfig+0x66>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a34      	ldr	r2, [pc, #208]	@ (8007e44 <TIM_OC3_SetConfig+0x134>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d11a      	bne.n	8007dac <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <TIM_OC3_SetConfig+0x80>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d004      	beq.n	8007d90 <TIM_OC3_SetConfig+0x80>
 8007d86:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 8007d8a:	482f      	ldr	r0, [pc, #188]	@ (8007e48 <TIM_OC3_SetConfig+0x138>)
 8007d8c:	f7fa fd42 	bl	8002814 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a24      	ldr	r2, [pc, #144]	@ (8007e40 <TIM_OC3_SetConfig+0x130>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <TIM_OC3_SetConfig+0xac>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a23      	ldr	r2, [pc, #140]	@ (8007e44 <TIM_OC3_SetConfig+0x134>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d12f      	bne.n	8007e1c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc4:	d008      	beq.n	8007dd8 <TIM_OC3_SetConfig+0xc8>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <TIM_OC3_SetConfig+0xc8>
 8007dce:	f641 3169 	movw	r1, #7017	@ 0x1b69
 8007dd2:	481d      	ldr	r0, [pc, #116]	@ (8007e48 <TIM_OC3_SetConfig+0x138>)
 8007dd4:	f7fa fd1e 	bl	8002814 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de0:	d008      	beq.n	8007df4 <TIM_OC3_SetConfig+0xe4>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <TIM_OC3_SetConfig+0xe4>
 8007dea:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 8007dee:	4816      	ldr	r0, [pc, #88]	@ (8007e48 <TIM_OC3_SetConfig+0x138>)
 8007df0:	f7fa fd10 	bl	8002814 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	621a      	str	r2, [r3, #32]
}
 8007e36:	bf00      	nop
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	08008628 	.word	0x08008628

08007e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	031b      	lsls	r3, r3, #12
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	@ (8007f08 <TIM_OC4_SetConfig+0xbc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_OC4_SetConfig+0x68>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a17      	ldr	r2, [pc, #92]	@ (8007f0c <TIM_OC4_SetConfig+0xc0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d117      	bne.n	8007ee4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ebc:	d008      	beq.n	8007ed0 <TIM_OC4_SetConfig+0x84>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <TIM_OC4_SetConfig+0x84>
 8007ec6:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 8007eca:	4811      	ldr	r0, [pc, #68]	@ (8007f10 <TIM_OC4_SetConfig+0xc4>)
 8007ecc:	f7fa fca2 	bl	8002814 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	019b      	lsls	r3, r3, #6
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40012c00 	.word	0x40012c00
 8007f0c:	40013400 	.word	0x40013400
 8007f10:	08008628 	.word	0x08008628

08007f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f023 0201 	bic.w	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 030a 	bic.w	r3, r3, #10
 8007f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f023 0210 	bic.w	r2, r3, #16
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	031b      	lsls	r3, r3, #12
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f043 0307 	orr.w	r3, r3, #7
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	609a      	str	r2, [r3, #8]
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800801c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	021a      	lsls	r2, r3, #8
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	431a      	orrs	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4313      	orrs	r3, r2
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	609a      	str	r2, [r3, #8]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a26      	ldr	r2, [pc, #152]	@ (80080e8 <TIM_CCxChannelCmd+0xa8>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d018      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a25      	ldr	r2, [pc, #148]	@ (80080ec <TIM_CCxChannelCmd+0xac>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d014      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008062:	d010      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a22      	ldr	r2, [pc, #136]	@ (80080f0 <TIM_CCxChannelCmd+0xb0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00c      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4a21      	ldr	r2, [pc, #132]	@ (80080f4 <TIM_CCxChannelCmd+0xb4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d008      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a20      	ldr	r2, [pc, #128]	@ (80080f8 <TIM_CCxChannelCmd+0xb8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d004      	beq.n	8008086 <TIM_CCxChannelCmd+0x46>
 800807c:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8008080:	481e      	ldr	r0, [pc, #120]	@ (80080fc <TIM_CCxChannelCmd+0xbc>)
 8008082:	f7fa fbc7 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d010      	beq.n	80080ae <TIM_CCxChannelCmd+0x6e>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b04      	cmp	r3, #4
 8008090:	d00d      	beq.n	80080ae <TIM_CCxChannelCmd+0x6e>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b08      	cmp	r3, #8
 8008096:	d00a      	beq.n	80080ae <TIM_CCxChannelCmd+0x6e>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b0c      	cmp	r3, #12
 800809c:	d007      	beq.n	80080ae <TIM_CCxChannelCmd+0x6e>
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80080a2:	d004      	beq.n	80080ae <TIM_CCxChannelCmd+0x6e>
 80080a4:	f641 5193 	movw	r1, #7571	@ 0x1d93
 80080a8:	4814      	ldr	r0, [pc, #80]	@ (80080fc <TIM_CCxChannelCmd+0xbc>)
 80080aa:	f7fa fbb3 	bl	8002814 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2201      	movs	r2, #1
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	43db      	mvns	r3, r3
 80080c4:	401a      	ands	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1a      	ldr	r2, [r3, #32]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	fa01 f303 	lsl.w	r3, r1, r3
 80080da:	431a      	orrs	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]
}
 80080e0:	bf00      	nop
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	40013400 	.word	0x40013400
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40000800 	.word	0x40000800
 80080f8:	40000c00 	.word	0x40000c00
 80080fc:	08008628 	.word	0x08008628

08008100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a5c      	ldr	r2, [pc, #368]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d027      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a5a      	ldr	r2, [pc, #360]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d022      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	d01d      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a56      	ldr	r2, [pc, #344]	@ (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d018      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a55      	ldr	r2, [pc, #340]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a53      	ldr	r2, [pc, #332]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00e      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a52      	ldr	r2, [pc, #328]	@ (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a50      	ldr	r2, [pc, #320]	@ (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800815a:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 800815e:	484f      	ldr	r0, [pc, #316]	@ (800829c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008160:	f7fa fb58 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d020      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b10      	cmp	r3, #16
 8008172:	d01c      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b20      	cmp	r3, #32
 800817a:	d018      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b30      	cmp	r3, #48	@ 0x30
 8008182:	d014      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b40      	cmp	r3, #64	@ 0x40
 800818a:	d010      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b50      	cmp	r3, #80	@ 0x50
 8008192:	d00c      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b60      	cmp	r3, #96	@ 0x60
 800819a:	d008      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b70      	cmp	r3, #112	@ 0x70
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081a4:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 80081a8:	483c      	ldr	r0, [pc, #240]	@ (800829c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80081aa:	f7fa fb33 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b80      	cmp	r3, #128	@ 0x80
 80081b4:	d008      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081be:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 80081c2:	4836      	ldr	r0, [pc, #216]	@ (800829c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80081c4:	f7fa fb26 	bl	8002814 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e050      	b.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d018      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d013      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800822c:	d00e      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a15      	ldr	r2, [pc, #84]	@ (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d009      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a13      	ldr	r2, [pc, #76]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a12      	ldr	r2, [pc, #72]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d10c      	bne.n	8008266 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4313      	orrs	r3, r2
 800825c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40001000 	.word	0x40001000
 8008298:	40001400 	.word	0x40001400
 800829c:	08008660 	.word	0x08008660

080082a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a5e      	ldr	r2, [pc, #376]	@ (800842c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008430 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80082c2:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 80082c6:	485b      	ldr	r0, [pc, #364]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80082c8:	f7fa faa4 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082d4:	d008      	beq.n	80082e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80082de:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 80082e2:	4854      	ldr	r0, [pc, #336]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80082e4:	f7fa fa96 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f0:	d008      	beq.n	8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80082fa:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 80082fe:	484d      	ldr	r0, [pc, #308]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008300:	f7fa fa88 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d013      	beq.n	8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008314:	d00e      	beq.n	8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831e:	d009      	beq.n	8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008328:	d004      	beq.n	8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800832a:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 800832e:	4841      	ldr	r0, [pc, #260]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008330:	f7fa fa70 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2bff      	cmp	r3, #255	@ 0xff
 800833a:	d904      	bls.n	8008346 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800833c:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8008340:	483c      	ldr	r0, [pc, #240]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008342:	f7fa fa67 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834e:	d008      	beq.n	8008362 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008358:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800835c:	4835      	ldr	r0, [pc, #212]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800835e:	f7fa fa59 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008372:	d004      	beq.n	800837e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008374:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8008378:	482e      	ldr	r0, [pc, #184]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800837a:	f7fa fa4b 	bl	8002814 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008386:	d008      	beq.n	800839a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008390:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8008394:	4827      	ldr	r0, [pc, #156]	@ (8008434 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008396:	f7fa fa3d 	bl	8002814 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e03d      	b.n	8008424 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40012c00 	.word	0x40012c00
 8008430:	40013400 	.word	0x40013400
 8008434:	08008660 	.word	0x08008660

08008438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr

0800844a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	bc80      	pop	{r7}
 800845a:	4770      	bx	lr

0800845c <memset>:
 800845c:	4603      	mov	r3, r0
 800845e:	4402      	add	r2, r0
 8008460:	4293      	cmp	r3, r2
 8008462:	d100      	bne.n	8008466 <memset+0xa>
 8008464:	4770      	bx	lr
 8008466:	f803 1b01 	strb.w	r1, [r3], #1
 800846a:	e7f9      	b.n	8008460 <memset+0x4>

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	2600      	movs	r6, #0
 8008470:	4d0c      	ldr	r5, [pc, #48]	@ (80084a4 <__libc_init_array+0x38>)
 8008472:	4c0d      	ldr	r4, [pc, #52]	@ (80084a8 <__libc_init_array+0x3c>)
 8008474:	1b64      	subs	r4, r4, r5
 8008476:	10a4      	asrs	r4, r4, #2
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	f000 f81a 	bl	80084b4 <_init>
 8008480:	2600      	movs	r6, #0
 8008482:	4d0a      	ldr	r5, [pc, #40]	@ (80084ac <__libc_init_array+0x40>)
 8008484:	4c0a      	ldr	r4, [pc, #40]	@ (80084b0 <__libc_init_array+0x44>)
 8008486:	1b64      	subs	r4, r4, r5
 8008488:	10a4      	asrs	r4, r4, #2
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f855 3b04 	ldr.w	r3, [r5], #4
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f855 3b04 	ldr.w	r3, [r5], #4
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	080086dc 	.word	0x080086dc
 80084a8:	080086dc 	.word	0x080086dc
 80084ac:	080086dc 	.word	0x080086dc
 80084b0:	080086e0 	.word	0x080086e0

080084b4 <_init>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr

080084c0 <_fini>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

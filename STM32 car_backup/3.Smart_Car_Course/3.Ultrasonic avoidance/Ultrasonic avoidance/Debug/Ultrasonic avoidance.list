
Ultrasonic avoidance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba54  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800bc40  0800bc40  0000cc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f8  0800c1f8  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f8  0800c1f8  0000d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c200  0800c200  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c200  0800c200  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c204  0800c204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c208  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001f0  0800c3f8  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800c3f8  0000e72c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f10e  00000000  00000000  0000e219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003041  00000000  00000000  0001d327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00020368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c18  00000000  00000000  00021328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dae2  00000000  00000000  00021f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dc6  00000000  00000000  0003fa22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be69  00000000  00000000  000597e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  000f5694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  000faa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bc24 	.word	0x0800bc24

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0800bc24 	.word	0x0800bc24

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	2200      	movs	r2, #0
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	f7ff fc09 	bl	8000a94 <__aeabi_dcmplt>
 8001282:	b928      	cbnz	r0, 8001290 <__aeabi_d2lz+0x1c>
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800128c:	f000 b80a 	b.w	80012a4 <__aeabi_d2ulz>
 8001290:	4620      	mov	r0, r4
 8001292:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001296:	f000 f805 	bl	80012a4 <__aeabi_d2ulz>
 800129a:	4240      	negs	r0, r0
 800129c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	bf00      	nop

080012a4 <__aeabi_d2ulz>:
 80012a4:	b5d0      	push	{r4, r6, r7, lr}
 80012a6:	2200      	movs	r2, #0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <__aeabi_d2ulz+0x34>)
 80012aa:	4606      	mov	r6, r0
 80012ac:	460f      	mov	r7, r1
 80012ae:	f7ff f97f 	bl	80005b0 <__aeabi_dmul>
 80012b2:	f7ff fc55 	bl	8000b60 <__aeabi_d2uiz>
 80012b6:	4604      	mov	r4, r0
 80012b8:	f7ff f900 	bl	80004bc <__aeabi_ui2d>
 80012bc:	2200      	movs	r2, #0
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <__aeabi_d2ulz+0x38>)
 80012c0:	f7ff f976 	bl	80005b0 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4630      	mov	r0, r6
 80012ca:	4639      	mov	r1, r7
 80012cc:	f7fe ffb8 	bl	8000240 <__aeabi_dsub>
 80012d0:	f7ff fc46 	bl	8000b60 <__aeabi_d2uiz>
 80012d4:	4621      	mov	r1, r4
 80012d6:	bdd0      	pop	{r4, r6, r7, pc}
 80012d8:	3df00000 	.word	0x3df00000
 80012dc:	41f00000 	.word	0x41f00000

080012e0 <Set_Buzzer>:
/*
 * 开启或者关闭蜂鸣器 Turn on or turn off the buzzer
 * i：0或者1 0：关闭蜂鸣器 1：打开蜂鸣器 i: 0 or 1 0: turn off the buzzer 1: turn on the buzzer
 * */
void Set_Buzzer(uint8_t i)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	if (i == 0)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d106      	bne.n	80012fe <Set_Buzzer+0x1e>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); // 关闭蜂鸣器 turn off the buzzer
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f6:	4807      	ldr	r0, [pc, #28]	@ (8001314 <Set_Buzzer+0x34>)
 80012f8:	f002 ffe8 	bl	80042cc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); // 开启蜂鸣器 turn on the buzzer
	}
}
 80012fc:	e005      	b.n	800130a <Set_Buzzer+0x2a>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); // 开启蜂鸣器 turn on the buzzer
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <Set_Buzzer+0x34>)
 8001306:	f002 ffe1 	bl	80042cc <HAL_GPIO_WritePin>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012000 	.word	0x40012000

08001318 <Set_RGB>:
 *color：选择需要显示的颜色 Choose the color you want to display
 *
 *
 * */
void Set_RGB(car_RGB light, RGB_Color color)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
	uint8_t Light_RGB = light;
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	73fb      	strb	r3, [r7, #15]
	switch (Light_RGB)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d010      	beq.n	8001354 <Set_RGB+0x3c>
 8001332:	2b03      	cmp	r3, #3
 8001334:	dc17      	bgt.n	8001366 <Set_RGB+0x4e>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d002      	beq.n	8001340 <Set_RGB+0x28>
 800133a:	2b02      	cmp	r3, #2
 800133c:	d005      	beq.n	800134a <Set_RGB+0x32>
 800133e:	e012      	b.n	8001366 <Set_RGB+0x4e>
	{
	case RGB_R:
		Set_color_R(color);
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f836 	bl	80013b4 <Set_color_R>
		break;
 8001348:	e02c      	b.n	80013a4 <Set_RGB+0x8c>
	case RGB_L:
		Set_color_L(color);
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8d1 	bl	80014f4 <Set_color_L>
		break;
 8001352:	e027      	b.n	80013a4 <Set_RGB+0x8c>
	case RGB_Max:
		Set_color_R(color);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f82c 	bl	80013b4 <Set_color_R>
		Set_color_L(color);
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f8c8 	bl	80014f4 <Set_color_L>
		break;
 8001364:	e01e      	b.n	80013a4 <Set_RGB+0x8c>
	default:
		RGB_OFF_ALL;
 8001366:	2200      	movs	r2, #0
 8001368:	2104      	movs	r1, #4
 800136a:	4810      	ldr	r0, [pc, #64]	@ (80013ac <Set_RGB+0x94>)
 800136c:	f002 ffae 	bl	80042cc <HAL_GPIO_WritePin>
 8001370:	2200      	movs	r2, #0
 8001372:	2108      	movs	r1, #8
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <Set_RGB+0x94>)
 8001376:	f002 ffa9 	bl	80042cc <HAL_GPIO_WritePin>
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	480b      	ldr	r0, [pc, #44]	@ (80013ac <Set_RGB+0x94>)
 8001380:	f002 ffa4 	bl	80042cc <HAL_GPIO_WritePin>
 8001384:	2200      	movs	r2, #0
 8001386:	2102      	movs	r1, #2
 8001388:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <Set_RGB+0x98>)
 800138a:	f002 ff9f 	bl	80042cc <HAL_GPIO_WritePin>
 800138e:	2200      	movs	r2, #0
 8001390:	2180      	movs	r1, #128	@ 0x80
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <Set_RGB+0x94>)
 8001394:	f002 ff9a 	bl	80042cc <HAL_GPIO_WritePin>
 8001398:	2200      	movs	r2, #0
 800139a:	2104      	movs	r1, #4
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <Set_RGB+0x98>)
 800139e:	f002 ff95 	bl	80042cc <HAL_GPIO_WritePin>
	}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40011800 	.word	0x40011800
 80013b0:	40012000 	.word	0x40012000

080013b4 <Set_color_R>:
/*
 * 打开右边的探照灯并显示颜色 Turn on the searchlight on the right and show the color
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	switch (color)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	f200 8081 	bhi.w	80014c8 <Set_color_R+0x114>
 80013c6:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <Set_color_R+0x18>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013e9 	.word	0x080013e9
 80013d0:	08001409 	.word	0x08001409
 80013d4:	08001429 	.word	0x08001429
 80013d8:	08001449 	.word	0x08001449
 80013dc:	08001469 	.word	0x08001469
 80013e0:	08001489 	.word	0x08001489
 80013e4:	080014a9 	.word	0x080014a9
	{
	case red:
		RRGB_SET(set, reset, reset);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2104      	movs	r1, #4
 80013ec:	4840      	ldr	r0, [pc, #256]	@ (80014f0 <Set_color_R+0x13c>)
 80013ee:	f002 ff6d 	bl	80042cc <HAL_GPIO_WritePin>
 80013f2:	2200      	movs	r2, #0
 80013f4:	2108      	movs	r1, #8
 80013f6:	483e      	ldr	r0, [pc, #248]	@ (80014f0 <Set_color_R+0x13c>)
 80013f8:	f002 ff68 	bl	80042cc <HAL_GPIO_WritePin>
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	483b      	ldr	r0, [pc, #236]	@ (80014f0 <Set_color_R+0x13c>)
 8001402:	f002 ff63 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001406:	e06f      	b.n	80014e8 <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	4838      	ldr	r0, [pc, #224]	@ (80014f0 <Set_color_R+0x13c>)
 800140e:	f002 ff5d 	bl	80042cc <HAL_GPIO_WritePin>
 8001412:	2201      	movs	r2, #1
 8001414:	2108      	movs	r1, #8
 8001416:	4836      	ldr	r0, [pc, #216]	@ (80014f0 <Set_color_R+0x13c>)
 8001418:	f002 ff58 	bl	80042cc <HAL_GPIO_WritePin>
 800141c:	2200      	movs	r2, #0
 800141e:	2110      	movs	r1, #16
 8001420:	4833      	ldr	r0, [pc, #204]	@ (80014f0 <Set_color_R+0x13c>)
 8001422:	f002 ff53 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001426:	e05f      	b.n	80014e8 <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 8001428:	2200      	movs	r2, #0
 800142a:	2104      	movs	r1, #4
 800142c:	4830      	ldr	r0, [pc, #192]	@ (80014f0 <Set_color_R+0x13c>)
 800142e:	f002 ff4d 	bl	80042cc <HAL_GPIO_WritePin>
 8001432:	2200      	movs	r2, #0
 8001434:	2108      	movs	r1, #8
 8001436:	482e      	ldr	r0, [pc, #184]	@ (80014f0 <Set_color_R+0x13c>)
 8001438:	f002 ff48 	bl	80042cc <HAL_GPIO_WritePin>
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	482b      	ldr	r0, [pc, #172]	@ (80014f0 <Set_color_R+0x13c>)
 8001442:	f002 ff43 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001446:	e04f      	b.n	80014e8 <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4828      	ldr	r0, [pc, #160]	@ (80014f0 <Set_color_R+0x13c>)
 800144e:	f002 ff3d 	bl	80042cc <HAL_GPIO_WritePin>
 8001452:	2201      	movs	r2, #1
 8001454:	2108      	movs	r1, #8
 8001456:	4826      	ldr	r0, [pc, #152]	@ (80014f0 <Set_color_R+0x13c>)
 8001458:	f002 ff38 	bl	80042cc <HAL_GPIO_WritePin>
 800145c:	2200      	movs	r2, #0
 800145e:	2110      	movs	r1, #16
 8001460:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <Set_color_R+0x13c>)
 8001462:	f002 ff33 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001466:	e03f      	b.n	80014e8 <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 8001468:	2201      	movs	r2, #1
 800146a:	2104      	movs	r1, #4
 800146c:	4820      	ldr	r0, [pc, #128]	@ (80014f0 <Set_color_R+0x13c>)
 800146e:	f002 ff2d 	bl	80042cc <HAL_GPIO_WritePin>
 8001472:	2200      	movs	r2, #0
 8001474:	2108      	movs	r1, #8
 8001476:	481e      	ldr	r0, [pc, #120]	@ (80014f0 <Set_color_R+0x13c>)
 8001478:	f002 ff28 	bl	80042cc <HAL_GPIO_WritePin>
 800147c:	2201      	movs	r2, #1
 800147e:	2110      	movs	r1, #16
 8001480:	481b      	ldr	r0, [pc, #108]	@ (80014f0 <Set_color_R+0x13c>)
 8001482:	f002 ff23 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001486:	e02f      	b.n	80014e8 <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 8001488:	2200      	movs	r2, #0
 800148a:	2104      	movs	r1, #4
 800148c:	4818      	ldr	r0, [pc, #96]	@ (80014f0 <Set_color_R+0x13c>)
 800148e:	f002 ff1d 	bl	80042cc <HAL_GPIO_WritePin>
 8001492:	2201      	movs	r2, #1
 8001494:	2108      	movs	r1, #8
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <Set_color_R+0x13c>)
 8001498:	f002 ff18 	bl	80042cc <HAL_GPIO_WritePin>
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <Set_color_R+0x13c>)
 80014a2:	f002 ff13 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 80014a6:	e01f      	b.n	80014e8 <Set_color_R+0x134>
	case write:
		RRGB_SET(set, set, set);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2104      	movs	r1, #4
 80014ac:	4810      	ldr	r0, [pc, #64]	@ (80014f0 <Set_color_R+0x13c>)
 80014ae:	f002 ff0d 	bl	80042cc <HAL_GPIO_WritePin>
 80014b2:	2201      	movs	r2, #1
 80014b4:	2108      	movs	r1, #8
 80014b6:	480e      	ldr	r0, [pc, #56]	@ (80014f0 <Set_color_R+0x13c>)
 80014b8:	f002 ff08 	bl	80042cc <HAL_GPIO_WritePin>
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <Set_color_R+0x13c>)
 80014c2:	f002 ff03 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 80014c6:	e00f      	b.n	80014e8 <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <Set_color_R+0x13c>)
 80014ce:	f002 fefd 	bl	80042cc <HAL_GPIO_WritePin>
 80014d2:	2200      	movs	r2, #0
 80014d4:	2108      	movs	r1, #8
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <Set_color_R+0x13c>)
 80014d8:	f002 fef8 	bl	80042cc <HAL_GPIO_WritePin>
 80014dc:	2200      	movs	r2, #0
 80014de:	2110      	movs	r1, #16
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <Set_color_R+0x13c>)
 80014e2:	f002 fef3 	bl	80042cc <HAL_GPIO_WritePin>
	}
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40011800 	.word	0x40011800

080014f4 <Set_color_L>:
/*
 * 打开左边的探照灯并显示颜色 Turn on the left searchlight and show colors
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	switch (color)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b06      	cmp	r3, #6
 8001502:	f200 8081 	bhi.w	8001608 <Set_color_L+0x114>
 8001506:	a201      	add	r2, pc, #4	@ (adr r2, 800150c <Set_color_L+0x18>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	08001529 	.word	0x08001529
 8001510:	08001549 	.word	0x08001549
 8001514:	08001569 	.word	0x08001569
 8001518:	08001589 	.word	0x08001589
 800151c:	080015a9 	.word	0x080015a9
 8001520:	080015c9 	.word	0x080015c9
 8001524:	080015e9 	.word	0x080015e9
	{
	case red:
		LRGB_SET(set, reset, reset);
 8001528:	2201      	movs	r2, #1
 800152a:	2102      	movs	r1, #2
 800152c:	4840      	ldr	r0, [pc, #256]	@ (8001630 <Set_color_L+0x13c>)
 800152e:	f002 fecd 	bl	80042cc <HAL_GPIO_WritePin>
 8001532:	2200      	movs	r2, #0
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	483f      	ldr	r0, [pc, #252]	@ (8001634 <Set_color_L+0x140>)
 8001538:	f002 fec8 	bl	80042cc <HAL_GPIO_WritePin>
 800153c:	2200      	movs	r2, #0
 800153e:	2104      	movs	r1, #4
 8001540:	483b      	ldr	r0, [pc, #236]	@ (8001630 <Set_color_L+0x13c>)
 8001542:	f002 fec3 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001546:	e06f      	b.n	8001628 <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 8001548:	2200      	movs	r2, #0
 800154a:	2102      	movs	r1, #2
 800154c:	4838      	ldr	r0, [pc, #224]	@ (8001630 <Set_color_L+0x13c>)
 800154e:	f002 febd 	bl	80042cc <HAL_GPIO_WritePin>
 8001552:	2201      	movs	r2, #1
 8001554:	2180      	movs	r1, #128	@ 0x80
 8001556:	4837      	ldr	r0, [pc, #220]	@ (8001634 <Set_color_L+0x140>)
 8001558:	f002 feb8 	bl	80042cc <HAL_GPIO_WritePin>
 800155c:	2200      	movs	r2, #0
 800155e:	2104      	movs	r1, #4
 8001560:	4833      	ldr	r0, [pc, #204]	@ (8001630 <Set_color_L+0x13c>)
 8001562:	f002 feb3 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001566:	e05f      	b.n	8001628 <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	4830      	ldr	r0, [pc, #192]	@ (8001630 <Set_color_L+0x13c>)
 800156e:	f002 fead 	bl	80042cc <HAL_GPIO_WritePin>
 8001572:	2200      	movs	r2, #0
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	482f      	ldr	r0, [pc, #188]	@ (8001634 <Set_color_L+0x140>)
 8001578:	f002 fea8 	bl	80042cc <HAL_GPIO_WritePin>
 800157c:	2201      	movs	r2, #1
 800157e:	2104      	movs	r1, #4
 8001580:	482b      	ldr	r0, [pc, #172]	@ (8001630 <Set_color_L+0x13c>)
 8001582:	f002 fea3 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001586:	e04f      	b.n	8001628 <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 8001588:	2201      	movs	r2, #1
 800158a:	2102      	movs	r1, #2
 800158c:	4828      	ldr	r0, [pc, #160]	@ (8001630 <Set_color_L+0x13c>)
 800158e:	f002 fe9d 	bl	80042cc <HAL_GPIO_WritePin>
 8001592:	2201      	movs	r2, #1
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	4827      	ldr	r0, [pc, #156]	@ (8001634 <Set_color_L+0x140>)
 8001598:	f002 fe98 	bl	80042cc <HAL_GPIO_WritePin>
 800159c:	2200      	movs	r2, #0
 800159e:	2104      	movs	r1, #4
 80015a0:	4823      	ldr	r0, [pc, #140]	@ (8001630 <Set_color_L+0x13c>)
 80015a2:	f002 fe93 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 80015a6:	e03f      	b.n	8001628 <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2102      	movs	r1, #2
 80015ac:	4820      	ldr	r0, [pc, #128]	@ (8001630 <Set_color_L+0x13c>)
 80015ae:	f002 fe8d 	bl	80042cc <HAL_GPIO_WritePin>
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	481f      	ldr	r0, [pc, #124]	@ (8001634 <Set_color_L+0x140>)
 80015b8:	f002 fe88 	bl	80042cc <HAL_GPIO_WritePin>
 80015bc:	2201      	movs	r2, #1
 80015be:	2104      	movs	r1, #4
 80015c0:	481b      	ldr	r0, [pc, #108]	@ (8001630 <Set_color_L+0x13c>)
 80015c2:	f002 fe83 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 80015c6:	e02f      	b.n	8001628 <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2102      	movs	r1, #2
 80015cc:	4818      	ldr	r0, [pc, #96]	@ (8001630 <Set_color_L+0x13c>)
 80015ce:	f002 fe7d 	bl	80042cc <HAL_GPIO_WritePin>
 80015d2:	2201      	movs	r2, #1
 80015d4:	2180      	movs	r1, #128	@ 0x80
 80015d6:	4817      	ldr	r0, [pc, #92]	@ (8001634 <Set_color_L+0x140>)
 80015d8:	f002 fe78 	bl	80042cc <HAL_GPIO_WritePin>
 80015dc:	2201      	movs	r2, #1
 80015de:	2104      	movs	r1, #4
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <Set_color_L+0x13c>)
 80015e2:	f002 fe73 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 80015e6:	e01f      	b.n	8001628 <Set_color_L+0x134>
	case write:
		LRGB_SET(set, set, set);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2102      	movs	r1, #2
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <Set_color_L+0x13c>)
 80015ee:	f002 fe6d 	bl	80042cc <HAL_GPIO_WritePin>
 80015f2:	2201      	movs	r2, #1
 80015f4:	2180      	movs	r1, #128	@ 0x80
 80015f6:	480f      	ldr	r0, [pc, #60]	@ (8001634 <Set_color_L+0x140>)
 80015f8:	f002 fe68 	bl	80042cc <HAL_GPIO_WritePin>
 80015fc:	2201      	movs	r2, #1
 80015fe:	2104      	movs	r1, #4
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <Set_color_L+0x13c>)
 8001602:	f002 fe63 	bl	80042cc <HAL_GPIO_WritePin>
		break;
 8001606:	e00f      	b.n	8001628 <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <Set_color_L+0x13c>)
 800160e:	f002 fe5d 	bl	80042cc <HAL_GPIO_WritePin>
 8001612:	2200      	movs	r2, #0
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	4807      	ldr	r0, [pc, #28]	@ (8001634 <Set_color_L+0x140>)
 8001618:	f002 fe58 	bl	80042cc <HAL_GPIO_WritePin>
 800161c:	2200      	movs	r2, #0
 800161e:	2104      	movs	r1, #4
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <Set_color_L+0x13c>)
 8001622:	f002 fe53 	bl	80042cc <HAL_GPIO_WritePin>
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40012000 	.word	0x40012000
 8001634:	40011800 	.word	0x40011800

08001638 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&USART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF); // 阻塞方式打印,串口x
 8001640:	1d39      	adds	r1, r7, #4
 8001642:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001646:	2201      	movs	r2, #1
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <__io_putchar+0x20>)
 800164a:	f005 fdd1 	bl	80071f0 <HAL_UART_Transmit>
  return ch;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000594 	.word	0x20000594

0800165c <BSP_Init>:

//Hardware Initialization
//Parameter:None

void BSP_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	Bsp_Tim_Init();
 8001660:	f000 ffd2 	bl	8002608 <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化 Motor PID initialization
 8001664:	f000 fcdc 	bl	8002020 <PID_Param_Init>
	Delay_Init();
 8001668:	f000 f830 	bl	80016cc <Delay_Init>
	Set_Buzzer(0);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fe37 	bl	80012e0 <Set_Buzzer>
	RGB_OFF_ALL;
 8001672:	2200      	movs	r2, #0
 8001674:	2104      	movs	r1, #4
 8001676:	480f      	ldr	r0, [pc, #60]	@ (80016b4 <BSP_Init+0x58>)
 8001678:	f002 fe28 	bl	80042cc <HAL_GPIO_WritePin>
 800167c:	2200      	movs	r2, #0
 800167e:	2108      	movs	r1, #8
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <BSP_Init+0x58>)
 8001682:	f002 fe23 	bl	80042cc <HAL_GPIO_WritePin>
 8001686:	2200      	movs	r2, #0
 8001688:	2110      	movs	r1, #16
 800168a:	480a      	ldr	r0, [pc, #40]	@ (80016b4 <BSP_Init+0x58>)
 800168c:	f002 fe1e 	bl	80042cc <HAL_GPIO_WritePin>
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	4808      	ldr	r0, [pc, #32]	@ (80016b8 <BSP_Init+0x5c>)
 8001696:	f002 fe19 	bl	80042cc <HAL_GPIO_WritePin>
 800169a:	2200      	movs	r2, #0
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <BSP_Init+0x58>)
 80016a0:	f002 fe14 	bl	80042cc <HAL_GPIO_WritePin>
 80016a4:	2200      	movs	r2, #0
 80016a6:	2104      	movs	r1, #4
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <BSP_Init+0x5c>)
 80016aa:	f002 fe0f 	bl	80042cc <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40011800 	.word	0x40011800
 80016b8:	40012000 	.word	0x40012000

080016bc <BSP_Loop>:

//Loop Run Function
//Parameter:None

void BSP_Loop(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	Ultrasonic_avoidance(20);//设置超声波避障距离为20cm Set the ultrasonic obstacle avoidance distance to 20cm
 80016c0:	2014      	movs	r0, #20
 80016c2:	f001 f82b 	bl	800271c <Ultrasonic_avoidance>
	// Ultrasonic_follow(30);
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <Delay_Init>:


static uint32_t g_fac_us = 0;       /* us延时倍乘数 */

void Delay_Init(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	//一般是72
    g_fac_us = 72;                      /* 由于在HAL_Init中已对systick做了配置，所以这里无需重新配置 */
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <Delay_Init+0x14>)
 80016d2:	2248      	movs	r2, #72	@ 0x48
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2000020c 	.word	0x2000020c

080016e4 <Delay_us>:
** 功能描述: 延时nus，nus为要延时的us数(用时钟摘取法来做us延时).
** 输入参数: nus
** 输出参数: 无
***********************************************************/
void Delay_us(uint32_t nus)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	uint32_t told, tnow, tcnt = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
	uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <Delay_us+0x74>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	617b      	str	r3, [r7, #20]
	ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <Delay_us+0x78>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	613b      	str	r3, [r7, #16]
	 told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <Delay_us+0x74>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61fb      	str	r3, [r7, #28]
	    while (1)
	    {
	        tnow = SysTick->VAL;
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <Delay_us+0x74>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	60fb      	str	r3, [r7, #12]
	        if (tnow != told)
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	429a      	cmp	r2, r3
 8001714:	d0f8      	beq.n	8001708 <Delay_us+0x24>
	        {
	            if (tnow < told)
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	429a      	cmp	r2, r3
 800171c:	d206      	bcs.n	800172c <Delay_us+0x48>
	            {
	                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	e007      	b.n	800173c <Delay_us+0x58>
	            }
	            else
	            {
	                tcnt += reload - tnow + told;
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad2      	subs	r2, r2, r3
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4413      	add	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
	            }
	            told = tnow;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	61fb      	str	r3, [r7, #28]
	            if (tcnt >= ticks)
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d200      	bcs.n	800174a <Delay_us+0x66>
	        tnow = SysTick->VAL;
 8001748:	e7de      	b.n	8001708 <Delay_us+0x24>
	            {
	                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 800174a:	bf00      	nop
	            }
	        }
	    }
}
 800174c:	bf00      	nop
 800174e:	3724      	adds	r7, #36	@ 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010
 800175c:	2000020c 	.word	0x2000020c

08001760 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d841      	bhi.n	80017f8 <Encoder_Read_CNT+0x98>
 8001774:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <Encoder_Read_CNT+0x1c>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017a7 	.word	0x080017a7
 8001784:	080017c5 	.word	0x080017c5
 8001788:	080017df 	.word	0x080017df
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <Encoder_Read_CNT+0xa8>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	b29b      	uxth	r3, r3
 8001792:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001796:	337f      	adds	r3, #127	@ 0x7f
 8001798:	b29b      	uxth	r3, r3
 800179a:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <Encoder_Read_CNT+0xa8>)
 800179e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 80017a4:	e029      	b.n	80017fa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 80017b2:	337f      	adds	r3, #127	@ 0x7f
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 80017b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017bc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 80017c2:	e01a      	b.n	80017fa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <Encoder_Read_CNT+0xac>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 80017ce:	337f      	adds	r3, #127	@ 0x7f
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <Encoder_Read_CNT+0xac>)
 80017d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 80017dc:	e00d      	b.n	80017fa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <Encoder_Read_CNT+0xb0>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 80017e8:	337f      	adds	r3, #127	@ 0x7f
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <Encoder_Read_CNT+0xb0>)
 80017f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 80017f6:	e000      	b.n	80017fa <Encoder_Read_CNT+0x9a>
	default:
		break;
 80017f8:	bf00      	nop
	}
	return Encoder_TIM;
 80017fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40000800 	.word	0x40000800
 800180c:	40000c00 	.word	0x40000c00
 8001810:	40000400 	.word	0x40000400

08001814 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <Encoder_Get_ALL+0x38>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <Encoder_Get_ALL+0x3c>)
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3308      	adds	r3, #8
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <Encoder_Get_ALL+0x40>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <Encoder_Get_ALL+0x44>)
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000210 	.word	0x20000210
 8001850:	20000214 	.word	0x20000214
 8001854:	20000218 	.word	0x20000218
 8001858:	2000021c 	.word	0x2000021c

0800185c <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff ff7d 	bl	8001760 <Encoder_Read_CNT>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <Encoder_Update_Count+0x58>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <Encoder_Update_Count+0x58>)
 8001872:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff ff73 	bl	8001760 <Encoder_Read_CNT>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <Encoder_Update_Count+0x5c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <Encoder_Update_Count+0x5c>)
 8001886:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff ff69 	bl	8001760 <Encoder_Read_CNT>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <Encoder_Update_Count+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <Encoder_Update_Count+0x60>)
 800189a:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 800189c:	2003      	movs	r0, #3
 800189e:	f7ff ff5f 	bl	8001760 <Encoder_Read_CNT>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <Encoder_Update_Count+0x64>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <Encoder_Update_Count+0x64>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000210 	.word	0x20000210
 80018b8:	20000214 	.word	0x20000214
 80018bc:	20000218 	.word	0x20000218
 80018c0:	2000021c 	.word	0x2000021c

080018c4 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <Motion_Get_Circle_Pulse+0x10>)
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	44820000 	.word	0x44820000

080018d8 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d103      	bne.n	80018f0 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <Motion_Set_Yaw_Adjust+0x28>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e002      	b.n	80018f6 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <Motion_Set_Yaw_Adjust+0x28>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	200002a4 	.word	0x200002a4

08001904 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4623      	mov	r3, r4
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4603      	mov	r3, r0
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 8001922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001926:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800192a:	db0a      	blt.n	8001942 <Motion_Set_Pwm+0x3e>
 800192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001930:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001934:	dc05      	bgt.n	8001942 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	4619      	mov	r1, r3
 800193c:	2000      	movs	r0, #0
 800193e:	f000 fdcf 	bl	80024e0 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 8001942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001946:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800194a:	db0a      	blt.n	8001962 <Motion_Set_Pwm+0x5e>
 800194c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001950:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001954:	dc05      	bgt.n	8001962 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8001956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800195a:	4619      	mov	r1, r3
 800195c:	2001      	movs	r0, #1
 800195e:	f000 fdbf 	bl	80024e0 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8001962:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001966:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800196a:	db0a      	blt.n	8001982 <Motion_Set_Pwm+0x7e>
 800196c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001970:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001974:	dc05      	bgt.n	8001982 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8001976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197a:	4619      	mov	r1, r3
 800197c:	2002      	movs	r0, #2
 800197e:	f000 fdaf 	bl	80024e0 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8001982:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001986:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800198a:	db0a      	blt.n	80019a2 <Motion_Set_Pwm+0x9e>
 800198c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001990:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001994:	dc05      	bgt.n	80019a2 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8001996:	f9b7 3000 	ldrsh.w	r3, [r7]
 800199a:	4619      	mov	r1, r3
 800199c:	2003      	movs	r0, #3
 800199e:	f000 fd9f 	bl	80024e0 <Motor_Set_Pwm>
    }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
	...

080019ac <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f815 	bl	80019ec <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 80019c2:	2004      	movs	r0, #4
 80019c4:	f000 fc64 	bl	8002290 <PID_Clear_Motor>
    g_start_ctrl = 0;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <Motion_Stop+0x38>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <Motion_Stop+0x3c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd36 	bl	8002448 <Motor_Stop>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000270 	.word	0x20000270
 80019e8:	200002a4 	.word	0x200002a4

080019ec <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	4603      	mov	r3, r0
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	807b      	strh	r3, [r7, #2]
 8001a06:	4613      	mov	r3, r2
 8001a08:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <Motion_Set_Speed+0x80>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8001a10:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <Motion_Set_Speed+0x84>)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <Motion_Set_Speed+0x84>)
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <Motion_Set_Speed+0x84>)
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <Motion_Set_Speed+0x84>)
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e016      	b.n	8001a5c <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <Motion_Set_Speed+0x84>)
 8001a32:	3310      	adds	r3, #16
 8001a34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd4f 	bl	80004dc <__aeabi_i2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f8ab 	bl	8000ba0 <__aeabi_d2f>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fca9 	bl	80023a8 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d9e5      	bls.n	8001a2e <Motion_Set_Speed+0x42>
    }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	20000270 	.word	0x20000270
 8001a70:	2000027c 	.word	0x2000027c

08001a74 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 8001a8e:	f000 f8d3 	bl	8001c38 <Motion_Get_Circle_MM>
 8001a92:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8001a94:	f7ff ff16 	bl	80018c4 <Motion_Get_Circle_Pulse>
 8001a98:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 8001a9a:	f000 f8c3 	bl	8001c24 <Motion_Get_APB>
 8001a9e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8001aa0:	f000 f8d4 	bl	8001c4c <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e01e      	b.n	8001ae8 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 8001aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8001c14 <Motion_Get_Speed+0x1a0>)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	2264      	movs	r2, #100	@ 0x64
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f97b 	bl	8000db4 <__aeabi_i2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f9ca 	bl	8000e5c <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	69f9      	ldr	r1, [r7, #28]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fa79 	bl	8000fc4 <__aeabi_fdiv>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3328      	adds	r3, #40	@ 0x28
 8001adc:	443b      	add	r3, r7
 8001ade:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	dddd      	ble.n	8001aaa <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f8a9 	bl	8000c4c <__addsf3>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f7ff f8a2 	bl	8000c4c <__addsf3>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f7ff f89b 	bl	8000c4c <__addsf3>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fa51 	bl	8000fc4 <__aeabi_fdiv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fb5f 	bl	80011e8 <__aeabi_f2iz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f885 	bl	8000c48 <__aeabi_fsub>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff f87e 	bl	8000c48 <__aeabi_fsub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff f879 	bl	8000c4c <__addsf3>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b60:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa2d 	bl	8000fc4 <__aeabi_fdiv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb3b 	bl	80011e8 <__aeabi_f2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f863 	bl	8000c4c <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f85a 	bl	8000c48 <__aeabi_fsub>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff f853 	bl	8000c48 <__aeabi_fsub>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ba8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa09 	bl	8000fc4 <__aeabi_fdiv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	69b9      	ldr	r1, [r7, #24]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fa04 	bl	8000fc4 <__aeabi_fdiv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4916      	ldr	r1, [pc, #88]	@ (8001c18 <Motion_Get_Speed+0x1a4>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f94b 	bl	8000e5c <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fb0d 	bl	80011e8 <__aeabi_f2iz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <Motion_Get_Speed+0x1a8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	e00c      	b.n	8001bfe <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3328      	adds	r3, #40	@ 0x28
 8001bea:	443b      	add	r3, r7
 8001bec:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001bf0:	490b      	ldr	r1, [pc, #44]	@ (8001c20 <Motion_Get_Speed+0x1ac>)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	ddef      	ble.n	8001be4 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 8001c04:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <Motion_Get_Speed+0x1ac>)
 8001c06:	f000 fb1b 	bl	8002240 <PID_Calc_Motor>
    }
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000260 	.word	0x20000260
 8001c18:	447a0000 	.word	0x447a0000
 8001c1c:	20000270 	.word	0x20000270
 8001c20:	2000027c 	.word	0x2000027c

08001c24 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8001c28:	4b02      	ldr	r3, [pc, #8]	@ (8001c34 <Motion_Get_APB+0x10>)
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	431f0000 	.word	0x431f0000

08001c38 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8001c3c:	4b02      	ldr	r3, [pc, #8]	@ (8001c48 <Motion_Get_Circle_MM+0x10>)
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	434c33f8 	.word	0x434c33f8

08001c4c <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8001c52:	4813      	ldr	r0, [pc, #76]	@ (8001ca0 <Motion_Get_Encoder+0x54>)
 8001c54:	f7ff fdde 	bl	8001814 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	e017      	b.n	8001c8e <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca0 <Motion_Get_Encoder+0x54>)
 8001c62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <Motion_Get_Encoder+0x58>)
 8001c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	1a8a      	subs	r2, r1, r2
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <Motion_Get_Encoder+0x5c>)
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <Motion_Get_Encoder+0x54>)
 8001c7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <Motion_Get_Encoder+0x58>)
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d9e4      	bls.n	8001c5e <Motion_Get_Encoder+0x12>
    }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000240 	.word	0x20000240
 8001ca4:	20000250 	.word	0x20000250
 8001ca8:	20000260 	.word	0x20000260

08001cac <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 8001cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8001dbc <wheel_State+0x110>)
 8001cbe:	88bb      	ldrh	r3, [r7, #4]
 8001cc0:	8013      	strh	r3, [r2, #0]
    switch (state)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b07      	cmp	r3, #7
 8001cc6:	d873      	bhi.n	8001db0 <wheel_State+0x104>
 8001cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd0 <wheel_State+0x24>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001cf1 	.word	0x08001cf1
 8001cd4:	08001d0b 	.word	0x08001d0b
 8001cd8:	08001d1b 	.word	0x08001d1b
 8001cdc:	08001d2f 	.word	0x08001d2f
 8001ce0:	08001d4f 	.word	0x08001d4f
 8001ce4:	08001d69 	.word	0x08001d69
 8001ce8:	08001d8b 	.word	0x08001d8b
 8001cec:	08001da9 	.word	0x08001da9
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <wheel_State+0x110>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fe52 	bl	80019ac <Motion_Stop>
        break;
 8001d08:	e053      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8001d0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f854 	bl	8001dc0 <wheel_Ctrl>
        break;
 8001d18:	e04b      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	425b      	negs	r3, r3
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f84a 	bl	8001dc0 <wheel_Ctrl>
        break;
 8001d2c:	e041      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b218      	sxth	r0, r3
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	03d2      	lsls	r2, r2, #15
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	2100      	movs	r1, #0
 8001d48:	f000 f83a 	bl	8001dc0 <wheel_Ctrl>
        break;
 8001d4c:	e031      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b218      	sxth	r0, r3
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2100      	movs	r1, #0
 8001d62:	f000 f82d 	bl	8001dc0 <wheel_Ctrl>

        break;
 8001d66:	e024      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fdb5 	bl	80018d8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	461a      	mov	r2, r3
 8001d72:	0392      	lsls	r2, r2, #14
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2100      	movs	r1, #0
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f81c 	bl	8001dc0 <wheel_Ctrl>
        break;
 8001d88:	e013      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fda4 	bl	80018d8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8001d90:	88bb      	ldrh	r3, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2000      	movs	r0, #0
 8001da2:	f000 f80d 	bl	8001dc0 <wheel_Ctrl>
        break;
 8001da6:	e004      	b.n	8001db2 <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff fdff 	bl	80019ac <Motion_Stop>
        break;
 8001dae:	e000      	b.n	8001db2 <wheel_State+0x106>
    default:
        break;
 8001db0:	bf00      	nop
    }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000023c 	.word	0x2000023c

08001dc0 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	80bb      	strh	r3, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8001dd2:	f7ff ff27 	bl	8001c24 <Motion_Get_APB>
 8001dd6:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f98 <wheel_Ctrl+0x1d8>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8001de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe ffe5 	bl	8000db4 <__aeabi_i2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a6b      	ldr	r2, [pc, #428]	@ (8001f9c <wheel_Ctrl+0x1dc>)
 8001dee:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8001df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ffdd 	bl	8000db4 <__aeabi_i2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4968      	ldr	r1, [pc, #416]	@ (8001fa0 <wheel_Ctrl+0x1e0>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f8e0 	bl	8000fc4 <__aeabi_fdiv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f827 	bl	8000e5c <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b64      	ldr	r3, [pc, #400]	@ (8001fa4 <wheel_Ctrl+0x1e4>)
 8001e14:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10b      	bne.n	8001e36 <wheel_Ctrl+0x76>
 8001e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <wheel_Ctrl+0x76>
 8001e26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff fdbc 	bl	80019ac <Motion_Stop>
        return;
 8001e34:	e0ad      	b.n	8001f92 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001e36:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <wheel_Ctrl+0x1dc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a57      	ldr	r2, [pc, #348]	@ (8001f98 <wheel_Ctrl+0x1d8>)
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff03 	bl	8000c4c <__addsf3>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <wheel_Ctrl+0x1e4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe fefb 	bl	8000c4c <__addsf3>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f9c5 	bl	80011e8 <__aeabi_f2iz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a51      	ldr	r2, [pc, #324]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001e62:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001e64:	4b4d      	ldr	r3, [pc, #308]	@ (8001f9c <wheel_Ctrl+0x1dc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	@ (8001f98 <wheel_Ctrl+0x1d8>)
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe feea 	bl	8000c48 <__aeabi_fsub>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <wheel_Ctrl+0x1e4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe fee4 	bl	8000c4c <__addsf3>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9ae 	bl	80011e8 <__aeabi_f2iz>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a47      	ldr	r2, [pc, #284]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001e90:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001e92:	4b42      	ldr	r3, [pc, #264]	@ (8001f9c <wheel_Ctrl+0x1dc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a40      	ldr	r2, [pc, #256]	@ (8001f98 <wheel_Ctrl+0x1d8>)
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fed3 	bl	8000c48 <__aeabi_fsub>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <wheel_Ctrl+0x1e4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7fe fecb 	bl	8000c48 <__aeabi_fsub>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f997 	bl	80011e8 <__aeabi_f2iz>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001ebe:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001ec0:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <wheel_Ctrl+0x1dc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a34      	ldr	r2, [pc, #208]	@ (8001f98 <wheel_Ctrl+0x1d8>)
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe febe 	bl	8000c4c <__addsf3>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <wheel_Ctrl+0x1e4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe feb4 	bl	8000c48 <__aeabi_fsub>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f980 	bl	80011e8 <__aeabi_f2iz>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a32      	ldr	r2, [pc, #200]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001eec:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8001eee:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ef6:	dd03      	ble.n	8001f00 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001efa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001efe:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f08:	da02      	bge.n	8001f10 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8001f0a:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb8 <wheel_Ctrl+0x1f8>)
 8001f0e:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8001f10:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f18:	dd03      	ble.n	8001f22 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001f1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f20:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8001f22:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f2a:	da02      	bge.n	8001f32 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001f2e:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <wheel_Ctrl+0x1f8>)
 8001f30:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 8001f32:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f3a:	dd03      	ble.n	8001f44 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001f3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f42:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f4c:	da02      	bge.n	8001f54 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <wheel_Ctrl+0x1f8>)
 8001f52:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f5c:	dd03      	ble.n	8001f66 <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001f60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f64:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f6e:	da02      	bge.n	8001f76 <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 8001f70:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001f72:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <wheel_Ctrl+0x1f8>)
 8001f74:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <wheel_Ctrl+0x1e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b218      	sxth	r0, r3
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <wheel_Ctrl+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b219      	sxth	r1, r3
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <wheel_Ctrl+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <wheel_Ctrl+0x1f4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	f7ff fd2d 	bl	80019ec <Motion_Set_Speed>
}
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000220 	.word	0x20000220
 8001f9c:	20000224 	.word	0x20000224
 8001fa0:	447a0000 	.word	0x447a0000
 8001fa4:	20000228 	.word	0x20000228
 8001fa8:	2000022c 	.word	0x2000022c
 8001fac:	20000230 	.word	0x20000230
 8001fb0:	20000234 	.word	0x20000234
 8001fb4:	20000238 	.word	0x20000238
 8001fb8:	fffffc18 	.word	0xfffffc18

08001fbc <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001fc0:	4814      	ldr	r0, [pc, #80]	@ (8002014 <Motion_Handle+0x58>)
 8001fc2:	f7ff fd57 	bl	8001a74 <Motion_Get_Speed>

    if (g_start_ctrl)
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <Motion_Handle+0x5c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d020      	beq.n	8002010 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Motion_Handle+0x60>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f908 	bl	80011e8 <__aeabi_f2iz>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b21c      	sxth	r4, r3
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <Motion_Handle+0x60>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f901 	bl	80011e8 <__aeabi_f2iz>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b21d      	sxth	r5, r3
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Motion_Handle+0x60>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f8fa 	bl	80011e8 <__aeabi_f2iz>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b21e      	sxth	r6, r3
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Motion_Handle+0x60>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f8f3 	bl	80011e8 <__aeabi_f2iz>
 8002002:	4603      	mov	r3, r0
 8002004:	b21b      	sxth	r3, r3
 8002006:	4632      	mov	r2, r6
 8002008:	4629      	mov	r1, r5
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff fc7a 	bl	8001904 <Motion_Set_Pwm>
    }
}
 8002010:	bf00      	nop
 8002012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002014:	20000274 	.word	0x20000274
 8002018:	20000270 	.word	0x20000270
 800201c:	2000027c 	.word	0x2000027c

08002020 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	e062      	b.n	80020f2 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 800202c:	493a      	ldr	r1, [pc, #232]	@ (8002118 <PID_Param_Init+0xf8>)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8002040:	4935      	ldr	r1, [pc, #212]	@ (8002118 <PID_Param_Init+0xf8>)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	3308      	adds	r3, #8
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8002056:	4930      	ldr	r1, [pc, #192]	@ (8002118 <PID_Param_Init+0xf8>)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3318      	adds	r3, #24
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 800206c:	492a      	ldr	r1, [pc, #168]	@ (8002118 <PID_Param_Init+0xf8>)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	331c      	adds	r3, #28
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8002082:	4925      	ldr	r1, [pc, #148]	@ (8002118 <PID_Param_Init+0xf8>)
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3320      	adds	r3, #32
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8002098:	491f      	ldr	r1, [pc, #124]	@ (8002118 <PID_Param_Init+0xf8>)
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3324      	adds	r3, #36	@ 0x24
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 80020ae:	491a      	ldr	r1, [pc, #104]	@ (8002118 <PID_Param_Init+0xf8>)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	330c      	adds	r3, #12
 80020be:	4a17      	ldr	r2, [pc, #92]	@ (800211c <PID_Param_Init+0xfc>)
 80020c0:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 80020c2:	4915      	ldr	r1, [pc, #84]	@ (8002118 <PID_Param_Init+0xf8>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3310      	adds	r3, #16
 80020d2:	4a13      	ldr	r2, [pc, #76]	@ (8002120 <PID_Param_Init+0x100>)
 80020d4:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 80020d6:	4910      	ldr	r1, [pc, #64]	@ (8002118 <PID_Param_Init+0xf8>)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3314      	adds	r3, #20
 80020e6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80020ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	dd99      	ble.n	800202c <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <PID_Param_Init+0x104>)
 80020fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <PID_Param_Init+0x108>)
 80020fc:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <PID_Param_Init+0x104>)
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <PID_Param_Init+0x104>)
 8002108:	4a08      	ldr	r2, [pc, #32]	@ (800212c <PID_Param_Init+0x10c>)
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200002a8 	.word	0x200002a8
 800211c:	3f4ccccd 	.word	0x3f4ccccd
 8002120:	3d75c28f 	.word	0x3d75c28f
 8002124:	20000000 	.word	0x20000000
 8002128:	3ecccccd 	.word	0x3ecccccd
 800212c:	3dcccccd 	.word	0x3dcccccd

08002130 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8002130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fd80 	bl	8000c48 <__aeabi_fsub>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689c      	ldr	r4, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68dd      	ldr	r5, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f7fe fd70 	bl	8000c48 <__aeabi_fsub>
 8002168:	4603      	mov	r3, r0
 800216a:	4619      	mov	r1, r3
 800216c:	4628      	mov	r0, r5
 800216e:	f7fe fe75 	bl	8000e5c <__aeabi_fmul>
 8002172:	4603      	mov	r3, r0
 8002174:	461d      	mov	r5, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7fe fe6b 	bl	8000e5c <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	4628      	mov	r0, r5
 800218c:	f7fe fd5e 	bl	8000c4c <__addsf3>
 8002190:	4603      	mov	r3, r0
 8002192:	4698      	mov	r8, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695d      	ldr	r5, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699e      	ldr	r6, [r3, #24]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4619      	mov	r1, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fd52 	bl	8000c4c <__addsf3>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4619      	mov	r1, r3
 80021ac:	4630      	mov	r0, r6
 80021ae:	f7fe fd4b 	bl	8000c48 <__aeabi_fsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7fe fd45 	bl	8000c4c <__addsf3>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7fe fe48 	bl	8000e5c <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4640      	mov	r0, r8
 80021d2:	f7fe fd3b 	bl	8000c4c <__addsf3>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4619      	mov	r1, r3
 80021da:	4620      	mov	r0, r4
 80021dc:	f7fe fd36 	bl	8000c4c <__addsf3>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	490e      	ldr	r1, [pc, #56]	@ (8002238 <PID_Incre_Calc+0x108>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe ffe8 	bl	80011d4 <__aeabi_fcmpgt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <PID_Incre_Calc+0x108>)
 800220e:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4909      	ldr	r1, [pc, #36]	@ (800223c <PID_Incre_Calc+0x10c>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ffbe 	bl	8001198 <__aeabi_fcmplt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a05      	ldr	r2, [pc, #20]	@ (800223c <PID_Incre_Calc+0x10c>)
 8002226:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002236:	bf00      	nop
 8002238:	44c80000 	.word	0x44c80000
 800223c:	c4c80000 	.word	0xc4c80000

08002240 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e016      	b.n	800227c <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4a0c      	ldr	r2, [pc, #48]	@ (800228c <PID_Calc_Motor+0x4c>)
 800225a:	1898      	adds	r0, r3, r2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	4619      	mov	r1, r3
 8002266:	f7ff ff63 	bl	8002130 <PID_Incre_Calc>
 800226a:	4601      	mov	r1, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	3204      	adds	r2, #4
 8002272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	dde5      	ble.n	800224e <PID_Calc_Motor+0xe>
    }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200002a8 	.word	0x200002a8

08002290 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d87b      	bhi.n	8002398 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d140      	bne.n	8002328 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e039      	b.n	8002320 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 80022ac:	493d      	ldr	r1, [pc, #244]	@ (80023a4 <PID_Clear_Motor+0x114>)
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3308      	adds	r3, #8
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 80022c2:	4938      	ldr	r1, [pc, #224]	@ (80023a4 <PID_Clear_Motor+0x114>)
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3318      	adds	r3, #24
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 80022d8:	4932      	ldr	r1, [pc, #200]	@ (80023a4 <PID_Clear_Motor+0x114>)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	331c      	adds	r3, #28
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 80022ee:	492d      	ldr	r1, [pc, #180]	@ (80023a4 <PID_Clear_Motor+0x114>)
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3320      	adds	r3, #32
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8002304:	4927      	ldr	r1, [pc, #156]	@ (80023a4 <PID_Clear_Motor+0x114>)
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3324      	adds	r3, #36	@ 0x24
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	ddc2      	ble.n	80022ac <PID_Clear_Motor+0x1c>
 8002326:	e038      	b.n	800239a <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	491e      	ldr	r1, [pc, #120]	@ (80023a4 <PID_Clear_Motor+0x114>)
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3308      	adds	r3, #8
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	4918      	ldr	r1, [pc, #96]	@ (80023a4 <PID_Clear_Motor+0x114>)
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3318      	adds	r3, #24
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	4913      	ldr	r1, [pc, #76]	@ (80023a4 <PID_Clear_Motor+0x114>)
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	331c      	adds	r3, #28
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <PID_Clear_Motor+0x114>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3320      	adds	r3, #32
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8002380:	79fa      	ldrb	r2, [r7, #7]
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <PID_Clear_Motor+0x114>)
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3324      	adds	r3, #36	@ 0x24
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e000      	b.n	800239a <PID_Clear_Motor+0x10a>
        return;
 8002398:	bf00      	nop
    }
}
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200002a8 	.word	0x200002a8

080023a8 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d81f      	bhi.n	80023fa <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d112      	bne.n	80023e6 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e00b      	b.n	80023de <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 80023c6:	490f      	ldr	r1, [pc, #60]	@ (8002404 <PID_Set_Motor_Target+0x5c>)
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	ddf0      	ble.n	80023c6 <PID_Set_Motor_Target+0x1e>
 80023e4:	e00a      	b.n	80023fc <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	4906      	ldr	r1, [pc, #24]	@ (8002404 <PID_Set_Motor_Target+0x5c>)
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e000      	b.n	80023fc <PID_Set_Motor_Target+0x54>
        return;
 80023fa:	bf00      	nop
    }
}
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	200002a8 	.word	0x200002a8

08002408 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8002412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	dd05      	ble.n	8002426 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	e00a      	b.n	800243c <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 8002426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da05      	bge.n	800243a <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002434:	b29b      	uxth	r3, r3
 8002436:	b21b      	sxth	r3, r3
 8002438:	e000      	b.n	800243c <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <Motor_Stop+0x14>
        brake = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002462:	fb03 f202 	mul.w	r2, r3, r2
 8002466:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <Motor_Stop+0x90>)
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002470:	fb03 f202 	mul.w	r2, r3, r2
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <Motor_Stop+0x90>)
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <Motor_Stop+0x90>)
 8002484:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800248c:	fb03 f202 	mul.w	r2, r3, r2
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <Motor_Stop+0x90>)
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800249a:	fb03 f202 	mul.w	r2, r3, r2
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <Motor_Stop+0x94>)
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024a8:	fb03 f202 	mul.w	r2, r3, r2
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <Motor_Stop+0x94>)
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024b6:	fb03 f202 	mul.w	r2, r3, r2
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <Motor_Stop+0x94>)
 80024bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024c4:	fb03 f202 	mul.w	r2, r3, r2
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <Motor_Stop+0x94>)
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40013400 	.word	0x40013400
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	460a      	mov	r2, r1
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 80024f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff87 	bl	8002408 <Motor_Ignore_Dead_Zone>
 80024fa:	4603      	mov	r3, r0
 80024fc:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 80024fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002502:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002506:	db02      	blt.n	800250e <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8002508:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800250c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800250e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002512:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002516:	dc02      	bgt.n	800251e <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8002518:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 800251c:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d867      	bhi.n	80025f4 <Motor_Set_Pwm+0x114>
 8002524:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <Motor_Set_Pwm+0x4c>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	0800256f 	.word	0x0800256f
 8002534:	080025a1 	.word	0x080025a1
 8002538:	080025cb 	.word	0x080025cb
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	425b      	negs	r3, r3
 8002540:	b29b      	uxth	r3, r3
 8002542:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db07      	blt.n	800255c <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 800254c:	4a2c      	ldr	r2, [pc, #176]	@ (8002600 <Motor_Set_Pwm+0x120>)
 800254e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002552:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8002554:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <Motor_Set_Pwm+0x120>)
 8002556:	2200      	movs	r2, #0
 8002558:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800255a:	e04c      	b.n	80025f6 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 800255c:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <Motor_Set_Pwm+0x120>)
 800255e:	2200      	movs	r2, #0
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002566:	425a      	negs	r2, r3
 8002568:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <Motor_Set_Pwm+0x120>)
 800256a:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800256c:	e043      	b.n	80025f6 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	425b      	negs	r3, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db07      	blt.n	800258e <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800257e:	4a20      	ldr	r2, [pc, #128]	@ (8002600 <Motor_Set_Pwm+0x120>)
 8002580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002584:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <Motor_Set_Pwm+0x120>)
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 800258c:	e033      	b.n	80025f6 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <Motor_Set_Pwm+0x120>)
 8002590:	2200      	movs	r2, #0
 8002592:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8002594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002598:	425a      	negs	r2, r3
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <Motor_Set_Pwm+0x120>)
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800259e:	e02a      	b.n	80025f6 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 80025a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db07      	blt.n	80025b8 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80025a8:	4a16      	ldr	r2, [pc, #88]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ae:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80025b6:	e01e      	b.n	80025f6 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80025b8:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 80025be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c2:	425a      	negs	r2, r3
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80025c8:	e015      	b.n	80025f6 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 80025ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db07      	blt.n	80025e2 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 80025d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 80025e0:	e009      	b.n	80025f6 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 80025e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ec:	425a      	negs	r2, r3
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <Motor_Set_Pwm+0x124>)
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80025f2:	e000      	b.n	80025f6 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 80025f4:	bf00      	nop
    }
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013400 	.word	0x40013400
 8002604:	40012c00 	.word	0x40012c00

08002608 <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800260c:	2100      	movs	r1, #0
 800260e:	4824      	ldr	r0, [pc, #144]	@ (80026a0 <Bsp_Tim_Init+0x98>)
 8002610:	f002 fe6e 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002614:	2104      	movs	r1, #4
 8002616:	4822      	ldr	r0, [pc, #136]	@ (80026a0 <Bsp_Tim_Init+0x98>)
 8002618:	f002 fe6a 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800261c:	2108      	movs	r1, #8
 800261e:	4820      	ldr	r0, [pc, #128]	@ (80026a0 <Bsp_Tim_Init+0x98>)
 8002620:	f002 fe66 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002624:	210c      	movs	r1, #12
 8002626:	481e      	ldr	r0, [pc, #120]	@ (80026a0 <Bsp_Tim_Init+0x98>)
 8002628:	f002 fe62 	bl	80052f0 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800262c:	2100      	movs	r1, #0
 800262e:	481d      	ldr	r0, [pc, #116]	@ (80026a4 <Bsp_Tim_Init+0x9c>)
 8002630:	f002 fe5e 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002634:	2104      	movs	r1, #4
 8002636:	481b      	ldr	r0, [pc, #108]	@ (80026a4 <Bsp_Tim_Init+0x9c>)
 8002638:	f002 fe5a 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800263c:	2108      	movs	r1, #8
 800263e:	4819      	ldr	r0, [pc, #100]	@ (80026a4 <Bsp_Tim_Init+0x9c>)
 8002640:	f002 fe56 	bl	80052f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002644:	210c      	movs	r1, #12
 8002646:	4817      	ldr	r0, [pc, #92]	@ (80026a4 <Bsp_Tim_Init+0x9c>)
 8002648:	f002 fe52 	bl	80052f0 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 800264c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002650:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002656:	2104      	movs	r1, #4
 8002658:	4813      	ldr	r0, [pc, #76]	@ (80026a8 <Bsp_Tim_Init+0xa0>)
 800265a:	f003 f915 	bl	8005888 <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 800265e:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <Bsp_Tim_Init+0xa4>)
 8002660:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002666:	2104      	movs	r1, #4
 8002668:	4811      	ldr	r0, [pc, #68]	@ (80026b0 <Bsp_Tim_Init+0xa8>)
 800266a:	f003 f90d 	bl	8005888 <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <Bsp_Tim_Init+0xac>)
 8002670:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002676:	2104      	movs	r1, #4
 8002678:	480f      	ldr	r0, [pc, #60]	@ (80026b8 <Bsp_Tim_Init+0xb0>)
 800267a:	f003 f905 	bl	8005888 <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <Bsp_Tim_Init+0xb4>)
 8002680:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002686:	2104      	movs	r1, #4
 8002688:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <Bsp_Tim_Init+0xb8>)
 800268a:	f003 f8fd 	bl	8005888 <HAL_TIM_Encoder_Start>


	//启动定时6中断 Start timer 6 interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 800268e:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <Bsp_Tim_Init+0xbc>)
 8002690:	f002 fcbe 	bl	8005010 <HAL_TIM_Base_Start_IT>
	//启动定时7中断 Start timer 7 interrupt
	HAL_TIM_Base_Start_IT(&htim7);
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <Bsp_Tim_Init+0xc0>)
 8002696:	f002 fcbb 	bl	8005010 <HAL_TIM_Base_Start_IT>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000354 	.word	0x20000354
 80026a4:	2000054c 	.word	0x2000054c
 80026a8:	2000039c 	.word	0x2000039c
 80026ac:	40000400 	.word	0x40000400
 80026b0:	200003e4 	.word	0x200003e4
 80026b4:	40000800 	.word	0x40000800
 80026b8:	2000042c 	.word	0x2000042c
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	20000474 	.word	0x20000474
 80026c4:	200004bc 	.word	0x200004bc
 80026c8:	20000504 	.word	0x20000504

080026cc <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数 Basic timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0c      	ldr	r2, [pc, #48]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d103      	bne.n	80026e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速 10ms speed test
 80026de:	f7ff f8bd 	bl	800185c <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度 Call PID to control speed
 80026e2:	f7ff fc6b 	bl	8001fbc <Motion_Handle>

	}


	if (htim->Instance == TIM7)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d108      	bne.n	8002702 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		 if(ultrasonic_flag) //开始测距--超声波 Start ranging--ultrasound
 80026f0:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_TIM_PeriodElapsedCallback+0x36>
			{
				ultrasonic_num++;
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002700:	6013      	str	r3, [r2, #0]
			}
	}
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40001000 	.word	0x40001000
 8002710:	40001400 	.word	0x40001400
 8002714:	2000034c 	.word	0x2000034c
 8002718:	20000348 	.word	0x20000348

0800271c <Ultrasonic_avoidance>:
        }
        }
}
*/
void Ultrasonic_avoidance(uint16_t distance)     // 避障函数
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
    uint16_t dis;
    uint16_t delay_time;
    while (1) {
        dis = Get_distance(); // 获取当前测距
 8002726:	f000 f895 	bl	8002854 <Get_distance>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fd81 	bl	8001234 <__aeabi_f2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	81bb      	strh	r3, [r7, #12]
        if (dis < 15) {
 8002736:	89bb      	ldrh	r3, [r7, #12]
 8002738:	2b0e      	cmp	r3, #14
 800273a:	d806      	bhi.n	800274a <Ultrasonic_avoidance+0x2e>
            delay_time = 10;
 800273c:	230a      	movs	r3, #10
 800273e:	81fb      	strh	r3, [r7, #14]
            Set_RGB(RGB_Max, red); } // 红色，距离非常近
 8002740:	2100      	movs	r1, #0
 8002742:	2003      	movs	r0, #3
 8002744:	f7fe fde8 	bl	8001318 <Set_RGB>
 8002748:	e030      	b.n	80027ac <Ultrasonic_avoidance+0x90>
        else if (dis < 30) {
 800274a:	89bb      	ldrh	r3, [r7, #12]
 800274c:	2b1d      	cmp	r3, #29
 800274e:	d806      	bhi.n	800275e <Ultrasonic_avoidance+0x42>
            delay_time = 30;
 8002750:	231e      	movs	r3, #30
 8002752:	81fb      	strh	r3, [r7, #14]
            Set_RGB(RGB_Max, red); } // 红色，距离较近
 8002754:	2100      	movs	r1, #0
 8002756:	2003      	movs	r0, #3
 8002758:	f7fe fdde 	bl	8001318 <Set_RGB>
 800275c:	e026      	b.n	80027ac <Ultrasonic_avoidance+0x90>
        else if (dis < 50) {
 800275e:	89bb      	ldrh	r3, [r7, #12]
 8002760:	2b31      	cmp	r3, #49	@ 0x31
 8002762:	d806      	bhi.n	8002772 <Ultrasonic_avoidance+0x56>
            delay_time = 150;
 8002764:	2396      	movs	r3, #150	@ 0x96
 8002766:	81fb      	strh	r3, [r7, #14]
            Set_RGB(RGB_Max, blue);} // 紫色，距离中等
 8002768:	2102      	movs	r1, #2
 800276a:	2003      	movs	r0, #3
 800276c:	f7fe fdd4 	bl	8001318 <Set_RGB>
 8002770:	e01c      	b.n	80027ac <Ultrasonic_avoidance+0x90>
        else if (dis < 75) {
 8002772:	89bb      	ldrh	r3, [r7, #12]
 8002774:	2b4a      	cmp	r3, #74	@ 0x4a
 8002776:	d807      	bhi.n	8002788 <Ultrasonic_avoidance+0x6c>
            delay_time = 500;
 8002778:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800277c:	81fb      	strh	r3, [r7, #14]
            Set_RGB(RGB_Max, purple);} // 紫色，距离远
 800277e:	2104      	movs	r1, #4
 8002780:	2003      	movs	r0, #3
 8002782:	f7fe fdc9 	bl	8001318 <Set_RGB>
 8002786:	e011      	b.n	80027ac <Ultrasonic_avoidance+0x90>
        else if (dis < 100) {
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	2b63      	cmp	r3, #99	@ 0x63
 800278c:	d807      	bhi.n	800279e <Ultrasonic_avoidance+0x82>
                delay_time = 1000;
 800278e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002792:	81fb      	strh	r3, [r7, #14]
                Set_RGB(RGB_Max, blue);} // 紫色，距离远
 8002794:	2102      	movs	r1, #2
 8002796:	2003      	movs	r0, #3
 8002798:	f7fe fdbe 	bl	8001318 <Set_RGB>
 800279c:	e006      	b.n	80027ac <Ultrasonic_avoidance+0x90>
        else {
            delay_time = 1000;
 800279e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a2:	81fb      	strh	r3, [r7, #14]
            Set_RGB(RGB_Max, green);} // 绿色，距离最远
 80027a4:	2101      	movs	r1, #1
 80027a6:	2003      	movs	r0, #3
 80027a8:	f7fe fdb6 	bl	8001318 <Set_RGB>
        Set_Buzzer(1);  // 开启蜂鸣器
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7fe fd97 	bl	80012e0 <Set_Buzzer>
        HAL_Delay(delay_time);  // 延迟以控制蜂鸣器频率
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f975 	bl	8003aa4 <HAL_Delay>
        Set_Buzzer(0);  // 关闭蜂鸣器
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe fd90 	bl	80012e0 <Set_Buzzer>
        HAL_Delay(delay_time);  // 延迟再次控制频率
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f96e 	bl	8003aa4 <HAL_Delay>
        if (dis < 10) {
 80027c8:	89bb      	ldrh	r3, [r7, #12]
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	d83c      	bhi.n	8002848 <Ultrasonic_avoidance+0x12c>
    	    wheel_State(MOTION_STOP, 0);
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff fa6b 	bl	8001cac <wheel_State>
    		HAL_Delay(1000);  // 停止500ms
 80027d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027da:	f001 f963 	bl	8003aa4 <HAL_Delay>
    		wheel_State(MOTION_BACK, 200);
 80027de:	21c8      	movs	r1, #200	@ 0xc8
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7ff fa63 	bl	8001cac <wheel_State>
    		HAL_Delay(2000);
 80027e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027ea:	f001 f95b 	bl	8003aa4 <HAL_Delay>

    		    Motion_Set_Speed(400, 400, -100, -100);
 80027ee:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80027f2:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80027f6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80027fa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80027fe:	f7ff f8f5 	bl	80019ec <Motion_Set_Speed>
    		    HAL_Delay(800);
 8002802:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002806:	f001 f94d 	bl	8003aa4 <HAL_Delay>
    		    wheel_State(MOTION_RUN, 250);
 800280a:	21fa      	movs	r1, #250	@ 0xfa
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff fa4d 	bl	8001cac <wheel_State>
    		    HAL_Delay(1500);
 8002812:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002816:	f001 f945 	bl	8003aa4 <HAL_Delay>
    			Motion_Set_Speed(-100, -100, 400, 400);
 800281a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800281e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002822:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8002826:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800282a:	f7ff f8df 	bl	80019ec <Motion_Set_Speed>
    			HAL_Delay(850);
 800282e:	f240 3052 	movw	r0, #850	@ 0x352
 8002832:	f001 f937 	bl	8003aa4 <HAL_Delay>
    			wheel_State(MOTION_STOP, 0);
 8002836:	2100      	movs	r1, #0
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff fa37 	bl	8001cac <wheel_State>
    			HAL_Delay(1000);
 800283e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002842:	f001 f92f 	bl	8003aa4 <HAL_Delay>
 8002846:	e76e      	b.n	8002726 <Ultrasonic_avoidance+0xa>
        } else {
            wheel_State(MOTION_RUN, 200);  // 调整速度，小车前进
 8002848:	21c8      	movs	r1, #200	@ 0xc8
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff fa2e 	bl	8001cac <wheel_State>
        dis = Get_distance(); // 获取当前测距
 8002850:	e769      	b.n	8002726 <Ultrasonic_avoidance+0xa>
	...

08002854 <Get_distance>:
 * 得到测5次平均值
 *
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
	float distance = 0,aveg = 0;
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
	uint16_t tim,count;
	uint8_t i = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	72fb      	strb	r3, [r7, #11]

	while(i != 5)
 800286a:	e061      	b.n	8002930 <Get_distance+0xdc>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_SET);
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002872:	4836      	ldr	r0, [pc, #216]	@ (800294c <Get_distance+0xf8>)
 8002874:	f001 fd2a 	bl	80042cc <HAL_GPIO_WritePin>
		Delay_us(20);
 8002878:	2014      	movs	r0, #20
 800287a:	f7fe ff33 	bl	80016e4 <Delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_RESET);
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002884:	4831      	ldr	r0, [pc, #196]	@ (800294c <Get_distance+0xf8>)
 8002886:	f001 fd21 	bl	80042cc <HAL_GPIO_WritePin>


		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 800288a:	bf00      	nop
 800288c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002890:	482e      	ldr	r0, [pc, #184]	@ (800294c <Get_distance+0xf8>)
 8002892:	f001 fcfb 	bl	800428c <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f7      	beq.n	800288c <Get_distance+0x38>
		ultrasonic_flag = 1;
 800289c:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <Get_distance+0xfc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]

		i+=1;
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	3301      	adds	r3, #1
 80028a6:	72fb      	strb	r3, [r7, #11]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80028a8:	e010      	b.n	80028cc <Get_distance+0x78>
	{
			count = ultrasonic_num;
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <Get_distance+0x100>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	803b      	strh	r3, [r7, #0]
		if(count >= 10000)
 80028b0:	883b      	ldrh	r3, [r7, #0]
 80028b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d908      	bls.n	80028cc <Get_distance+0x78>
		{
			ultrasonic_flag = 0;
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <Get_distance+0xfc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
			ultrasonic_num = 0;
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <Get_distance+0x100>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
			return 0;
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e03b      	b.n	8002944 <Get_distance+0xf0>
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80028cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028d0:	481e      	ldr	r0, [pc, #120]	@ (800294c <Get_distance+0xf8>)
 80028d2:	f001 fcdb 	bl	800428c <HAL_GPIO_ReadPin>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0e6      	beq.n	80028aa <Get_distance+0x56>
		}

	}

		ultrasonic_flag = 0;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <Get_distance+0xfc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 80028e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <Get_distance+0x104>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	807b      	strh	r3, [r7, #2]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 80028e8:	8879      	ldrh	r1, [r7, #2]
 80028ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <Get_distance+0x100>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fddf 	bl	80004bc <__aeabi_ui2d>
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <Get_distance+0x108>)
 8002904:	f7fd ff7e 	bl	8000804 <__aeabi_ddiv>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f7fe f946 	bl	8000ba0 <__aeabi_d2f>
 8002914:	4603      	mov	r3, r0
 8002916:	607b      	str	r3, [r7, #4]
		aveg = distance + aveg;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7fe f996 	bl	8000c4c <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]
		ultrasonic_num = 0;
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <Get_distance+0x100>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 800292a:	200a      	movs	r0, #10
 800292c:	f001 f8ba 	bl	8003aa4 <HAL_Delay>
	while(i != 5)
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d19a      	bne.n	800286c <Get_distance+0x18>

	}
	distance = aveg / 5;
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <Get_distance+0x10c>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7fe fb43 	bl	8000fc4 <__aeabi_fdiv>
 800293e:	4603      	mov	r3, r0
 8002940:	607b      	str	r3, [r7, #4]
	return distance;
 8002942:	687b      	ldr	r3, [r7, #4]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40011c00 	.word	0x40011c00
 8002950:	2000034c 	.word	0x2000034c
 8002954:	20000348 	.word	0x20000348
 8002958:	40001400 	.word	0x40001400
 800295c:	404d4000 	.word	0x404d4000
 8002960:	40a00000 	.word	0x40a00000

08002964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	@ 0x30
 8002968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296a:	f107 0320 	add.w	r3, r7, #32
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002978:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a59      	ldr	r2, [pc, #356]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 800297e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b57      	ldr	r3, [pc, #348]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	4b54      	ldr	r3, [pc, #336]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a53      	ldr	r2, [pc, #332]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b51      	ldr	r3, [pc, #324]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029a8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029c0:	4b48      	ldr	r3, [pc, #288]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a47      	ldr	r2, [pc, #284]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d8:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a41      	ldr	r2, [pc, #260]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029de:	f043 0320 	orr.w	r3, r3, #32
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a35      	ldr	r2, [pc, #212]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <MX_GPIO_Init+0x180>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 8002a20:	2200      	movs	r2, #0
 8002a22:	219c      	movs	r1, #156	@ 0x9c
 8002a24:	4830      	ldr	r0, [pc, #192]	@ (8002ae8 <MX_GPIO_Init+0x184>)
 8002a26:	f001 fc51 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a30:	482e      	ldr	r0, [pc, #184]	@ (8002aec <MX_GPIO_Init+0x188>)
 8002a32:	f001 fc4b 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f241 0106 	movw	r1, #4102	@ 0x1006
 8002a3c:	482c      	ldr	r0, [pc, #176]	@ (8002af0 <MX_GPIO_Init+0x18c>)
 8002a3e:	f001 fc45 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_SCL_Pin|OLED_SDA_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	21c0      	movs	r1, #192	@ 0xc0
 8002a46:	482b      	ldr	r0, [pc, #172]	@ (8002af4 <MX_GPIO_Init+0x190>)
 8002a48:	f001 fc40 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin;
 8002a4c:	239c      	movs	r3, #156	@ 0x9c
 8002a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	4619      	mov	r1, r3
 8002a62:	4821      	ldr	r0, [pc, #132]	@ (8002ae8 <MX_GPIO_Init+0x184>)
 8002a64:	f001 f97e 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002a68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0320 	add.w	r3, r7, #32
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481a      	ldr	r0, [pc, #104]	@ (8002aec <MX_GPIO_Init+0x188>)
 8002a82:	f001 f96f 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8002a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4814      	ldr	r0, [pc, #80]	@ (8002aec <MX_GPIO_Init+0x188>)
 8002a9c:	f001 f962 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin|Buzzer_Pin;
 8002aa0:	f241 0306 	movw	r3, #4102	@ 0x1006
 8002aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480d      	ldr	r0, [pc, #52]	@ (8002af0 <MX_GPIO_Init+0x18c>)
 8002aba:	f001 f953 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002abe:	23c0      	movs	r3, #192	@ 0xc0
 8002ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2302      	movs	r3, #2
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4807      	ldr	r0, [pc, #28]	@ (8002af4 <MX_GPIO_Init+0x190>)
 8002ad6:	f001 f945 	bl	8003d64 <HAL_GPIO_Init>

}
 8002ada:	bf00      	nop
 8002adc:	3730      	adds	r7, #48	@ 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40011800 	.word	0x40011800
 8002aec:	40011c00 	.word	0x40011c00
 8002af0:	40012000 	.word	0x40012000
 8002af4:	40010c00 	.word	0x40010c00

08002af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002afc:	f000 ff70 	bl	80039e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b00:	f000 f819 	bl	8002b36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b04:	f7ff ff2e 	bl	8002964 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002b08:	f000 f9a6 	bl	8002e58 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b0c:	f000 fa68 	bl	8002fe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b10:	f000 faba 	bl	8003088 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b14:	f000 fb0c 	bl	8003130 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002b18:	f000 fb5e 	bl	80031d8 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002b1c:	f000 fbb0 	bl	8003280 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002b20:	f000 fc18 	bl	8003354 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002b24:	f000 fec0 	bl	80038a8 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002b28:	f000 fbe0 	bl	80032ec <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 8002b2c:	f7fe fd96 	bl	800165c <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8002b30:	f7fe fdc4 	bl	80016bc <BSP_Loop>
 8002b34:	e7fc      	b.n	8002b30 <main+0x38>

08002b36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b090      	sub	sp, #64	@ 0x40
 8002b3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3c:	f107 0318 	add.w	r3, r7, #24
 8002b40:	2228      	movs	r2, #40	@ 0x28
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 fca4 	bl	8008492 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b60:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b66:	2301      	movs	r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b74:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7a:	f107 0318 	add.w	r3, r7, #24
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 fbd0 	bl	8004324 <HAL_RCC_OscConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b8a:	f000 f819 	bl	8002bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8e:	230f      	movs	r3, #15
 8002b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b92:	2302      	movs	r3, #2
 8002b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 ff29 	bl	8004a00 <HAL_RCC_ClockConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002bb4:	f000 f804 	bl	8002bc0 <Error_Handler>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3740      	adds	r7, #64	@ 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
}
 8002bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <Error_Handler+0x8>

08002bcc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_MspInit+0x60>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <HAL_MspInit+0x60>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6193      	str	r3, [r2, #24]
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_MspInit+0x60>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_MspInit+0x60>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_MspInit+0x60>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_MspInit+0x60>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002c16:	2005      	movs	r0, #5
 8002c18:	f001 f834 	bl	8003c84 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_MspInit+0x64>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_MspInit+0x64>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010000 	.word	0x40010000

08002c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <NMI_Handler+0x4>

08002c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <HardFault_Handler+0x4>

08002c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <MemManage_Handler+0x4>

08002c60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c98:	f000 fee8 	bl	8003a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <TIM6_IRQHandler+0x10>)
 8002ca6:	f002 fead 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200004bc 	.word	0x200004bc

08002cb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <TIM7_IRQHandler+0x10>)
 8002cba:	f002 fea3 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000504 	.word	0x20000504

08002cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
	return 1;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <_kill>:

int _kill(int pid, int sig)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ce0:	f005 fc2a 	bl	8008538 <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2216      	movs	r2, #22
 8002ce8:	601a      	str	r2, [r3, #0]
	return -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_exit>:

void _exit (int status)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffe7 	bl	8002cd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <_exit+0x12>

08002d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e00a      	b.n	8002d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d1e:	f3af 8000 	nop.w
 8002d22:	4601      	mov	r1, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	60ba      	str	r2, [r7, #8]
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dbf0      	blt.n	8002d1e <_read+0x12>
	}

return len;
 8002d3c:	687b      	ldr	r3, [r7, #4]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e009      	b.n	8002d6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	60ba      	str	r2, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fc69 	bl	8001638 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dbf1      	blt.n	8002d58 <_write+0x12>
	}
	return len;
 8002d74:	687b      	ldr	r3, [r7, #4]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_close>:

int _close(int file)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
	return -1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da4:	605a      	str	r2, [r3, #4]
	return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <_isatty>:

int _isatty(int file)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
	return 0;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <_sbrk+0x5c>)
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <_sbrk+0x60>)
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <_sbrk+0x64>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <_sbrk+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e10:	f005 fb92 	bl	8008538 <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	220c      	movs	r2, #12
 8002e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e009      	b.n	8002e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <_sbrk+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20010000 	.word	0x20010000
 8002e40:	00000400 	.word	0x00000400
 8002e44:	20000350 	.word	0x20000350
 8002e48:	20000730 	.word	0x20000730

08002e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b096      	sub	sp, #88	@ 0x58
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	615a      	str	r2, [r3, #20]
 8002e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fafe 	bl	8008492 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e96:	4b50      	ldr	r3, [pc, #320]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002e98:	4a50      	ldr	r2, [pc, #320]	@ (8002fdc <MX_TIM1_Init+0x184>)
 8002e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002eaa:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b49      	ldr	r3, [pc, #292]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eb6:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ebc:	4b46      	ldr	r3, [pc, #280]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ec2:	4845      	ldr	r0, [pc, #276]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002ec4:	f001 ffd0 	bl	8004e68 <HAL_TIM_Base_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002ece:	f7ff fe77 	bl	8002bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ed8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002edc:	4619      	mov	r1, r3
 8002ede:	483e      	ldr	r0, [pc, #248]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002ee0:	f003 f83a 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002eea:	f7ff fe69 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002eee:	483a      	ldr	r0, [pc, #232]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002ef0:	f002 f920 	bl	8005134 <HAL_TIM_PWM_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002efa:	f7ff fe61 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4832      	ldr	r0, [pc, #200]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002f0e:	f003 ff07 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f18:	f7ff fe52 	bl	8002bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f1c:	2360      	movs	r3, #96	@ 0x60
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4825      	ldr	r0, [pc, #148]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002f42:	f002 fe67 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f4c:	f7ff fe38 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f54:	2204      	movs	r2, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	481f      	ldr	r0, [pc, #124]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002f5a:	f002 fe5b 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002f64:	f7ff fe2c 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4819      	ldr	r0, [pc, #100]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002f72:	f002 fe4f 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002f7c:	f7ff fe20 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f84:	220c      	movs	r2, #12
 8002f86:	4619      	mov	r1, r3
 8002f88:	4813      	ldr	r0, [pc, #76]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002f8a:	f002 fe43 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002f94:	f7ff fe14 	bl	8002bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4807      	ldr	r0, [pc, #28]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002fbc:	f003 ff80 	bl	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002fc6:	f7ff fdfb 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fca:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <MX_TIM1_Init+0x180>)
 8002fcc:	f000 fc02 	bl	80037d4 <HAL_TIM_MspPostInit>

}
 8002fd0:	bf00      	nop
 8002fd2:	3758      	adds	r7, #88	@ 0x58
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000354 	.word	0x20000354
 8002fdc:	40012c00 	.word	0x40012c00

08002fe0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	@ 0x30
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 fa4f 	bl	8008492 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ffc:	4b21      	ldr	r3, [pc, #132]	@ (8003084 <MX_TIM2_Init+0xa4>)
 8002ffe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <MX_TIM2_Init+0xa4>)
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <MX_TIM2_Init+0xa4>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003010:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <MX_TIM2_Init+0xa4>)
 8003012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <MX_TIM2_Init+0xa4>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <MX_TIM2_Init+0xa4>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003024:	2303      	movs	r3, #3
 8003026:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800302c:	2301      	movs	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800303c:	2301      	movs	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003040:	2300      	movs	r3, #0
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	4619      	mov	r1, r3
 800304e:	480d      	ldr	r0, [pc, #52]	@ (8003084 <MX_TIM2_Init+0xa4>)
 8003050:	f002 fa76 	bl	8005540 <HAL_TIM_Encoder_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800305a:	f7ff fdb1 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4806      	ldr	r0, [pc, #24]	@ (8003084 <MX_TIM2_Init+0xa4>)
 800306c:	f003 fe58 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003076:	f7ff fda3 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	3730      	adds	r7, #48	@ 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000039c 	.word	0x2000039c

08003088 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	@ 0x30
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f005 f9fb 	bl	8008492 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030a4:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030a6:	4a21      	ldr	r2, [pc, #132]	@ (800312c <MX_TIM3_Init+0xa4>)
 80030a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030be:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030ca:	2303      	movs	r3, #3
 80030cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030d2:	2301      	movs	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030e2:	2301      	movs	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80030ee:	f107 030c 	add.w	r3, r7, #12
 80030f2:	4619      	mov	r1, r3
 80030f4:	480c      	ldr	r0, [pc, #48]	@ (8003128 <MX_TIM3_Init+0xa0>)
 80030f6:	f002 fa23 	bl	8005540 <HAL_TIM_Encoder_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003100:	f7ff fd5e 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4805      	ldr	r0, [pc, #20]	@ (8003128 <MX_TIM3_Init+0xa0>)
 8003112:	f003 fe05 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800311c:	f7ff fd50 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003120:	bf00      	nop
 8003122:	3730      	adds	r7, #48	@ 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200003e4 	.word	0x200003e4
 800312c:	40000400 	.word	0x40000400

08003130 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	@ 0x30
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f9a7 	bl	8008492 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800314c:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 800314e:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <MX_TIM4_Init+0xa4>)
 8003150:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800315e:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 8003160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003164:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003172:	2303      	movs	r3, #3
 8003174:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800317a:	2301      	movs	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800318a:	2301      	movs	r3, #1
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800318e:	2300      	movs	r3, #0
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4619      	mov	r1, r3
 800319c:	480c      	ldr	r0, [pc, #48]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 800319e:	f002 f9cf 	bl	8005540 <HAL_TIM_Encoder_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80031a8:	f7ff fd0a 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	@ (80031d0 <MX_TIM4_Init+0xa0>)
 80031ba:	f003 fdb1 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80031c4:	f7ff fcfc 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031c8:	bf00      	nop
 80031ca:	3730      	adds	r7, #48	@ 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000042c 	.word	0x2000042c
 80031d4:	40000800 	.word	0x40000800

080031d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	@ 0x30
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 f953 	bl	8008492 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031f4:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <MX_TIM5_Init+0xa0>)
 80031f6:	4a21      	ldr	r2, [pc, #132]	@ (800327c <MX_TIM5_Init+0xa4>)
 80031f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <MX_TIM5_Init+0xa0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003206:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003208:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800320c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320e:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800321a:	2303      	movs	r3, #3
 800321c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003236:	2300      	movs	r3, #0
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4619      	mov	r1, r3
 8003244:	480c      	ldr	r0, [pc, #48]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003246:	f002 f97b 	bl	8005540 <HAL_TIM_Encoder_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003250:	f7ff fcb6 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	@ (8003278 <MX_TIM5_Init+0xa0>)
 8003262:	f003 fd5d 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800326c:	f7ff fca8 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	3730      	adds	r7, #48	@ 0x30
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000474 	.word	0x20000474
 800327c:	40000c00 	.word	0x40000c00

08003280 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003286:	463b      	mov	r3, r7
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <MX_TIM6_Init+0x64>)
 8003290:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <MX_TIM6_Init+0x68>)
 8003292:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <MX_TIM6_Init+0x64>)
 8003296:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800329a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <MX_TIM6_Init+0x64>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80032a2:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <MX_TIM6_Init+0x64>)
 80032a4:	2263      	movs	r2, #99	@ 0x63
 80032a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <MX_TIM6_Init+0x64>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032ae:	480d      	ldr	r0, [pc, #52]	@ (80032e4 <MX_TIM6_Init+0x64>)
 80032b0:	f001 fdda 	bl	8004e68 <HAL_TIM_Base_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80032ba:	f7ff fc81 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032c6:	463b      	mov	r3, r7
 80032c8:	4619      	mov	r1, r3
 80032ca:	4806      	ldr	r0, [pc, #24]	@ (80032e4 <MX_TIM6_Init+0x64>)
 80032cc:	f003 fd28 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80032d6:	f7ff fc73 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200004bc 	.word	0x200004bc
 80032e8:	40001000 	.word	0x40001000

080032ec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f2:	463b      	mov	r3, r7
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <MX_TIM7_Init+0x60>)
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <MX_TIM7_Init+0x64>)
 80032fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8003300:	4b12      	ldr	r3, [pc, #72]	@ (800334c <MX_TIM7_Init+0x60>)
 8003302:	2247      	movs	r2, #71	@ 0x47
 8003304:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <MX_TIM7_Init+0x60>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800330c:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <MX_TIM7_Init+0x60>)
 800330e:	2209      	movs	r2, #9
 8003310:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <MX_TIM7_Init+0x60>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003318:	480c      	ldr	r0, [pc, #48]	@ (800334c <MX_TIM7_Init+0x60>)
 800331a:	f001 fda5 	bl	8004e68 <HAL_TIM_Base_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003324:	f7ff fc4c 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003330:	463b      	mov	r3, r7
 8003332:	4619      	mov	r1, r3
 8003334:	4805      	ldr	r0, [pc, #20]	@ (800334c <MX_TIM7_Init+0x60>)
 8003336:	f003 fcf3 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8003340:	f7ff fc3e 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000504 	.word	0x20000504
 8003350:	40001400 	.word	0x40001400

08003354 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b096      	sub	sp, #88	@ 0x58
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	2220      	movs	r2, #32
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f005 f880 	bl	8008492 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003392:	4b50      	ldr	r3, [pc, #320]	@ (80034d4 <MX_TIM8_Init+0x180>)
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <MX_TIM8_Init+0x184>)
 8003396:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003398:	4b4e      	ldr	r3, [pc, #312]	@ (80034d4 <MX_TIM8_Init+0x180>)
 800339a:	2200      	movs	r2, #0
 800339c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339e:	4b4d      	ldr	r3, [pc, #308]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 80033a4:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033a6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80033aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ac:	4b49      	ldr	r3, [pc, #292]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033b2:	4b48      	ldr	r3, [pc, #288]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033b8:	4b46      	ldr	r3, [pc, #280]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80033be:	4845      	ldr	r0, [pc, #276]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033c0:	f001 fd52 	bl	8004e68 <HAL_TIM_Base_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80033ca:	f7ff fbf9 	bl	8002bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80033d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033d8:	4619      	mov	r1, r3
 80033da:	483e      	ldr	r0, [pc, #248]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033dc:	f002 fdbc 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80033e6:	f7ff fbeb 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80033ea:	483a      	ldr	r0, [pc, #232]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80033ec:	f001 fea2 	bl	8005134 <HAL_TIM_PWM_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80033f6:	f7ff fbe3 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003402:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003406:	4619      	mov	r1, r3
 8003408:	4832      	ldr	r0, [pc, #200]	@ (80034d4 <MX_TIM8_Init+0x180>)
 800340a:	f003 fc89 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003414:	f7ff fbd4 	bl	8002bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003418:	2360      	movs	r3, #96	@ 0x60
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003424:	2300      	movs	r3, #0
 8003426:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800342c:	2300      	movs	r3, #0
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003438:	2200      	movs	r2, #0
 800343a:	4619      	mov	r1, r3
 800343c:	4825      	ldr	r0, [pc, #148]	@ (80034d4 <MX_TIM8_Init+0x180>)
 800343e:	f002 fbe9 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003448:	f7ff fbba 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800344c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003450:	2204      	movs	r2, #4
 8003452:	4619      	mov	r1, r3
 8003454:	481f      	ldr	r0, [pc, #124]	@ (80034d4 <MX_TIM8_Init+0x180>)
 8003456:	f002 fbdd 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003460:	f7ff fbae 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003468:	2208      	movs	r2, #8
 800346a:	4619      	mov	r1, r3
 800346c:	4819      	ldr	r0, [pc, #100]	@ (80034d4 <MX_TIM8_Init+0x180>)
 800346e:	f002 fbd1 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003478:	f7ff fba2 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800347c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003480:	220c      	movs	r2, #12
 8003482:	4619      	mov	r1, r3
 8003484:	4813      	ldr	r0, [pc, #76]	@ (80034d4 <MX_TIM8_Init+0x180>)
 8003486:	f002 fbc5 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003490:	f7ff fb96 	bl	8002bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4807      	ldr	r0, [pc, #28]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80034b8:	f003 fd02 	bl	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80034c2:	f7ff fb7d 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80034c6:	4803      	ldr	r0, [pc, #12]	@ (80034d4 <MX_TIM8_Init+0x180>)
 80034c8:	f000 f984 	bl	80037d4 <HAL_TIM_MspPostInit>

}
 80034cc:	bf00      	nop
 80034ce:	3758      	adds	r7, #88	@ 0x58
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000054c 	.word	0x2000054c
 80034d8:	40013400 	.word	0x40013400

080034dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2c      	ldr	r2, [pc, #176]	@ (800359c <HAL_TIM_Base_MspInit+0xc0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10c      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ee:	4b2c      	ldr	r3, [pc, #176]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 80034f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034f8:	6193      	str	r3, [r2, #24]
 80034fa:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003506:	e044      	b.n	8003592 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_TIM_Base_MspInit+0xc8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d114      	bne.n	800353c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003512:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003518:	f043 0310 	orr.w	r3, r3, #16
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b20      	ldr	r3, [pc, #128]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	2036      	movs	r0, #54	@ 0x36
 8003530:	f000 fbc8 	bl	8003cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003534:	2036      	movs	r0, #54	@ 0x36
 8003536:	f000 fbf1 	bl	8003d1c <HAL_NVIC_EnableIRQ>
}
 800353a:	e02a      	b.n	8003592 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	@ (80035a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d114      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003546:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a15      	ldr	r2, [pc, #84]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 800354c:	f043 0320 	orr.w	r3, r3, #32
 8003550:	61d3      	str	r3, [r2, #28]
 8003552:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	2037      	movs	r0, #55	@ 0x37
 8003564:	f000 fbae 	bl	8003cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003568:	2037      	movs	r0, #55	@ 0x37
 800356a:	f000 fbd7 	bl	8003d1c <HAL_NVIC_EnableIRQ>
}
 800356e:	e010      	b.n	8003592 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <HAL_TIM_Base_MspInit+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10b      	bne.n	8003592 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4a08      	ldr	r2, [pc, #32]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003580:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003584:	6193      	str	r3, [r2, #24]
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc4>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40001000 	.word	0x40001000
 80035a8:	40001400 	.word	0x40001400
 80035ac:	40013400 	.word	0x40013400

080035b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b092      	sub	sp, #72	@ 0x48
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d14f      	bne.n	8003670 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d0:	4b78      	ldr	r3, [pc, #480]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	4a77      	ldr	r2, [pc, #476]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	61d3      	str	r3, [r2, #28]
 80035dc:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	4b72      	ldr	r3, [pc, #456]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4a71      	ldr	r2, [pc, #452]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6193      	str	r3, [r2, #24]
 80035f4:	4b6f      	ldr	r3, [pc, #444]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003600:	4b6c      	ldr	r3, [pc, #432]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a6b      	ldr	r2, [pc, #428]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b69      	ldr	r3, [pc, #420]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 8003618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361e:	2300      	movs	r3, #0
 8003620:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800362a:	4619      	mov	r1, r3
 800362c:	4862      	ldr	r0, [pc, #392]	@ (80037b8 <HAL_TIM_Encoder_MspInit+0x208>)
 800362e:	f000 fb99 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 8003632:	2308      	movs	r3, #8
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003636:	2300      	movs	r3, #0
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003642:	4619      	mov	r1, r3
 8003644:	485d      	ldr	r0, [pc, #372]	@ (80037bc <HAL_TIM_Encoder_MspInit+0x20c>)
 8003646:	f000 fb8d 	bl	8003d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800364a:	4b5d      	ldr	r3, [pc, #372]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003668:	4a55      	ldr	r2, [pc, #340]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800366e:	e09d      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a53      	ldr	r2, [pc, #332]	@ (80037c4 <HAL_TIM_Encoder_MspInit+0x214>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d136      	bne.n	80036e8 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800367a:	4b4e      	ldr	r3, [pc, #312]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a4d      	ldr	r2, [pc, #308]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	61d3      	str	r3, [r2, #28]
 8003686:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	4b48      	ldr	r3, [pc, #288]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4a47      	ldr	r2, [pc, #284]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	6193      	str	r3, [r2, #24]
 800369e:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80036aa:	2330      	movs	r3, #48	@ 0x30
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ae:	2300      	movs	r3, #0
 80036b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	483f      	ldr	r0, [pc, #252]	@ (80037bc <HAL_TIM_Encoder_MspInit+0x20c>)
 80036be:	f000 fb51 	bl	8003d64 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80036ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80036d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036de:	643b      	str	r3, [r7, #64]	@ 0x40
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	6053      	str	r3, [r2, #4]
}
 80036e6:	e061      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a36      	ldr	r2, [pc, #216]	@ (80037c8 <HAL_TIM_Encoder_MspInit+0x218>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d133      	bne.n	800375a <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036f2:	4b30      	ldr	r3, [pc, #192]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a2f      	ldr	r2, [pc, #188]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	4b2d      	ldr	r3, [pc, #180]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800370a:	4b2a      	ldr	r3, [pc, #168]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	4a29      	ldr	r2, [pc, #164]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	6193      	str	r3, [r2, #24]
 8003716:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 8003722:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	4825      	ldr	r0, [pc, #148]	@ (80037cc <HAL_TIM_Encoder_MspInit+0x21c>)
 8003738:	f000 fb14 	bl	8003d64 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800373c:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003750:	647b      	str	r3, [r7, #68]	@ 0x44
 8003752:	4a1b      	ldr	r2, [pc, #108]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0x210>)
 8003754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003756:	6053      	str	r3, [r2, #4]
}
 8003758:	e028      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <HAL_TIM_Encoder_MspInit+0x220>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d123      	bne.n	80037ac <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003764:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	61d3      	str	r3, [r2, #28]
 8003770:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6193      	str	r3, [r2, #24]
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 8003794:	2303      	movs	r3, #3
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003798:	2300      	movs	r3, #0
 800379a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037a4:	4619      	mov	r1, r3
 80037a6:	4804      	ldr	r0, [pc, #16]	@ (80037b8 <HAL_TIM_Encoder_MspInit+0x208>)
 80037a8:	f000 fadc 	bl	8003d64 <HAL_GPIO_Init>
}
 80037ac:	bf00      	nop
 80037ae:	3748      	adds	r7, #72	@ 0x48
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40010800 	.word	0x40010800
 80037bc:	40010c00 	.word	0x40010c00
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40011400 	.word	0x40011400
 80037d0:	40000c00 	.word	0x40000c00

080037d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_TIM_MspPostInit+0xbc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d12b      	bne.n	800384c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f4:	4b27      	ldr	r3, [pc, #156]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	4a26      	ldr	r2, [pc, #152]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 80037fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fe:	6193      	str	r3, [r2, #24]
 8003800:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 800380c:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003812:	2302      	movs	r3, #2
 8003814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	2302      	movs	r3, #2
 8003818:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	481d      	ldr	r0, [pc, #116]	@ (8003898 <HAL_TIM_MspPostInit+0xc4>)
 8003822:	f000 fa9f 	bl	8003d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003826:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <HAL_TIM_MspPostInit+0xc8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_TIM_MspPostInit+0xc8>)
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800384a:	e01d      	b.n	8003888 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <HAL_TIM_MspPostInit+0xcc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d118      	bne.n	8003888 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4a0e      	ldr	r2, [pc, #56]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 800385c:	f043 0310 	orr.w	r3, r3, #16
 8003860:	6193      	str	r3, [r2, #24]
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <HAL_TIM_MspPostInit+0xc0>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 800386e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2302      	movs	r3, #2
 800387a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	4808      	ldr	r0, [pc, #32]	@ (80038a4 <HAL_TIM_MspPostInit+0xd0>)
 8003884:	f000 fa6e 	bl	8003d64 <HAL_GPIO_Init>
}
 8003888:	bf00      	nop
 800388a:	3728      	adds	r7, #40	@ 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40021000 	.word	0x40021000
 8003898:	40011800 	.word	0x40011800
 800389c:	40010000 	.word	0x40010000
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40011000 	.word	0x40011000

080038a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038ae:	4a12      	ldr	r2, [pc, #72]	@ (80038f8 <MX_USART1_UART_Init+0x50>)
 80038b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038cc:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038de:	4805      	ldr	r0, [pc, #20]	@ (80038f4 <MX_USART1_UART_Init+0x4c>)
 80038e0:	f003 fbcc 	bl	800707c <HAL_UART_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038ea:	f7ff f969 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000594 	.word	0x20000594
 80038f8:	40013800 	.word	0x40013800

080038fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_UART_MspInit+0x8c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d131      	bne.n	8003980 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_UART_MspInit+0x90>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_UART_MspInit+0x90>)
 8003922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003926:	6193      	str	r3, [r2, #24]
 8003928:	4b18      	ldr	r3, [pc, #96]	@ (800398c <HAL_UART_MspInit+0x90>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	4b15      	ldr	r3, [pc, #84]	@ (800398c <HAL_UART_MspInit+0x90>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <HAL_UART_MspInit+0x90>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6193      	str	r3, [r2, #24]
 8003940:	4b12      	ldr	r3, [pc, #72]	@ (800398c <HAL_UART_MspInit+0x90>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800394c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	4619      	mov	r1, r3
 8003960:	480b      	ldr	r0, [pc, #44]	@ (8003990 <HAL_UART_MspInit+0x94>)
 8003962:	f000 f9ff 	bl	8003d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800396a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	4619      	mov	r1, r3
 800397a:	4805      	ldr	r0, [pc, #20]	@ (8003990 <HAL_UART_MspInit+0x94>)
 800397c:	f000 f9f2 	bl	8003d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013800 	.word	0x40013800
 800398c:	40021000 	.word	0x40021000
 8003990:	40010800 	.word	0x40010800

08003994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003994:	f7ff fa5a 	bl	8002e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003998:	480b      	ldr	r0, [pc, #44]	@ (80039c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800399a:	490c      	ldr	r1, [pc, #48]	@ (80039cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800399c:	4a0c      	ldr	r2, [pc, #48]	@ (80039d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a0:	e002      	b.n	80039a8 <LoopCopyDataInit>

080039a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a6:	3304      	adds	r3, #4

080039a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039ac:	d3f9      	bcc.n	80039a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ae:	4a09      	ldr	r2, [pc, #36]	@ (80039d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80039b0:	4c09      	ldr	r4, [pc, #36]	@ (80039d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b4:	e001      	b.n	80039ba <LoopFillZerobss>

080039b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b8:	3204      	adds	r2, #4

080039ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039bc:	d3fb      	bcc.n	80039b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039be:	f004 fdc1 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039c2:	f7ff f899 	bl	8002af8 <main>
  bx lr
 80039c6:	4770      	bx	lr
  ldr r0, =_sdata
 80039c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039cc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80039d0:	0800c208 	.word	0x0800c208
  ldr r2, =_sbss
 80039d4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80039d8:	2000072c 	.word	0x2000072c

080039dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039dc:	e7fe      	b.n	80039dc <ADC1_2_IRQHandler>
	...

080039e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e4:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <HAL_Init+0x28>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a07      	ldr	r2, [pc, #28]	@ (8003a08 <HAL_Init+0x28>)
 80039ea:	f043 0310 	orr.w	r3, r3, #16
 80039ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f0:	2003      	movs	r0, #3
 80039f2:	f000 f947 	bl	8003c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f6:	2003      	movs	r0, #3
 80039f8:	f000 f808 	bl	8003a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039fc:	f7ff f8f0 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40022000 	.word	0x40022000

08003a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a14:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <HAL_InitTick+0x54>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <HAL_InitTick+0x58>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f98e 	bl	8003d4c <HAL_SYSTICK_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00e      	b.n	8003a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d80a      	bhi.n	8003a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a40:	2200      	movs	r2, #0
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f000 f93c 	bl	8003cc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a4c:	4a06      	ldr	r2, [pc, #24]	@ (8003a68 <HAL_InitTick+0x5c>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2000001c 	.word	0x2000001c
 8003a64:	20000024 	.word	0x20000024
 8003a68:	20000020 	.word	0x20000020

08003a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_IncTick+0x1c>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_IncTick+0x20>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a03      	ldr	r2, [pc, #12]	@ (8003a8c <HAL_IncTick+0x20>)
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000024 	.word	0x20000024
 8003a8c:	200005dc 	.word	0x200005dc

08003a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return uwTick;
 8003a94:	4b02      	ldr	r3, [pc, #8]	@ (8003aa0 <HAL_GetTick+0x10>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	200005dc 	.word	0x200005dc

08003aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d005      	beq.n	8003aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <HAL_Delay+0x44>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aca:	bf00      	nop
 8003acc:	f7ff ffe0 	bl	8003a90 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d8f7      	bhi.n	8003acc <HAL_Delay+0x28>
  {
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000024 	.word	0x20000024

08003aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1e:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	60d3      	str	r3, [r2, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b38:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <__NVIC_GetPriorityGrouping+0x18>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 0307 	and.w	r3, r3, #7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	db0b      	blt.n	8003b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	4906      	ldr	r1, [pc, #24]	@ (8003b84 <__NVIC_EnableIRQ+0x34>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2001      	movs	r0, #1
 8003b72:	fa00 f202 	lsl.w	r2, r0, r2
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db0a      	blt.n	8003bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	490c      	ldr	r1, [pc, #48]	@ (8003bd4 <__NVIC_SetPriority+0x4c>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	0112      	lsls	r2, r2, #4
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	440b      	add	r3, r1
 8003bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb0:	e00a      	b.n	8003bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4908      	ldr	r1, [pc, #32]	@ (8003bd8 <__NVIC_SetPriority+0x50>)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	0112      	lsls	r2, r2, #4
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	761a      	strb	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	@ 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f1c3 0307 	rsb	r3, r3, #7
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	bf28      	it	cs
 8003bfa:	2304      	movcs	r3, #4
 8003bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d902      	bls.n	8003c0c <NVIC_EncodePriority+0x30>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3b03      	subs	r3, #3
 8003c0a:	e000      	b.n	8003c0e <NVIC_EncodePriority+0x32>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	401a      	ands	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43d9      	mvns	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	4313      	orrs	r3, r2
         );
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	@ 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c50:	d301      	bcc.n	8003c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00f      	b.n	8003c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <SysTick_Config+0x40>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5e:	210f      	movs	r1, #15
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	f7ff ff90 	bl	8003b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <SysTick_Config+0x40>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6e:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <SysTick_Config+0x40>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010

08003c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d00f      	beq.n	8003cb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d00c      	beq.n	8003cb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d009      	beq.n	8003cb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d006      	beq.n	8003cb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d003      	beq.n	8003cb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003caa:	2191      	movs	r1, #145	@ 0x91
 8003cac:	4804      	ldr	r0, [pc, #16]	@ (8003cc0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003cae:	f7fe ff8d 	bl	8002bcc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff1a 	bl	8003aec <__NVIC_SetPriorityGrouping>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	0800bc40 	.word	0x0800bc40

08003cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d903      	bls.n	8003ce4 <HAL_NVIC_SetPriority+0x20>
 8003cdc:	21a9      	movs	r1, #169	@ 0xa9
 8003cde:	480e      	ldr	r0, [pc, #56]	@ (8003d18 <HAL_NVIC_SetPriority+0x54>)
 8003ce0:	f7fe ff74 	bl	8002bcc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d903      	bls.n	8003cf2 <HAL_NVIC_SetPriority+0x2e>
 8003cea:	21aa      	movs	r1, #170	@ 0xaa
 8003cec:	480a      	ldr	r0, [pc, #40]	@ (8003d18 <HAL_NVIC_SetPriority+0x54>)
 8003cee:	f7fe ff6d 	bl	8002bcc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf2:	f7ff ff1f 	bl	8003b34 <__NVIC_GetPriorityGrouping>
 8003cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f7ff ff6d 	bl	8003bdc <NVIC_EncodePriority>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff3c 	bl	8003b88 <__NVIC_SetPriority>
}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	0800bc40 	.word	0x0800bc40

08003d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da03      	bge.n	8003d36 <HAL_NVIC_EnableIRQ+0x1a>
 8003d2e:	21bd      	movs	r1, #189	@ 0xbd
 8003d30:	4805      	ldr	r0, [pc, #20]	@ (8003d48 <HAL_NVIC_EnableIRQ+0x2c>)
 8003d32:	f7fe ff4b 	bl	8002bcc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff08 	bl	8003b50 <__NVIC_EnableIRQ>
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	0800bc40 	.word	0x0800bc40

08003d4c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff73 	bl	8003c40 <SysTick_Config>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a94      	ldr	r2, [pc, #592]	@ (8003fcc <HAL_GPIO_Init+0x268>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01b      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a93      	ldr	r2, [pc, #588]	@ (8003fd0 <HAL_GPIO_Init+0x26c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d017      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a92      	ldr	r2, [pc, #584]	@ (8003fd4 <HAL_GPIO_Init+0x270>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a91      	ldr	r2, [pc, #580]	@ (8003fd8 <HAL_GPIO_Init+0x274>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00f      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a90      	ldr	r2, [pc, #576]	@ (8003fdc <HAL_GPIO_Init+0x278>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a8f      	ldr	r2, [pc, #572]	@ (8003fe0 <HAL_GPIO_Init+0x27c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe4 <HAL_GPIO_Init+0x280>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
 8003dae:	21bd      	movs	r1, #189	@ 0xbd
 8003db0:	488d      	ldr	r0, [pc, #564]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003db2:	f7fe ff0b 	bl	8002bcc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_GPIO_Init+0x66>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc8:	d303      	bcc.n	8003dd2 <HAL_GPIO_Init+0x6e>
 8003dca:	21be      	movs	r1, #190	@ 0xbe
 8003dcc:	4886      	ldr	r0, [pc, #536]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003dce:	f7fe fefd 	bl	8002bcc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8236 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f000 8231 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b11      	cmp	r3, #17
 8003dec:	f000 822c 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	f000 8227 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b12      	cmp	r3, #18
 8003e00:	f000 8222 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a78      	ldr	r2, [pc, #480]	@ (8003fec <HAL_GPIO_Init+0x288>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 821c 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_GPIO_Init+0x28c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f000 8216 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_GPIO_Init+0x290>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f000 8210 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a72      	ldr	r2, [pc, #456]	@ (8003ff8 <HAL_GPIO_Init+0x294>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f000 820a 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a70      	ldr	r2, [pc, #448]	@ (8003ffc <HAL_GPIO_Init+0x298>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f000 8204 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	@ (8004000 <HAL_GPIO_Init+0x29c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f000 81fe 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	f000 81f9 	beq.w	8004248 <HAL_GPIO_Init+0x4e4>
 8003e56:	21bf      	movs	r1, #191	@ 0xbf
 8003e58:	4863      	ldr	r0, [pc, #396]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003e5a:	f7fe feb7 	bl	8002bcc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5e:	e1f3      	b.n	8004248 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e60:	2201      	movs	r2, #1
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 81e2 	bne.w	8004242 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a52      	ldr	r2, [pc, #328]	@ (8003fcc <HAL_GPIO_Init+0x268>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a51      	ldr	r2, [pc, #324]	@ (8003fd0 <HAL_GPIO_Init+0x26c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a50      	ldr	r2, [pc, #320]	@ (8003fd4 <HAL_GPIO_Init+0x270>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd8 <HAL_GPIO_Init+0x274>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8003fdc <HAL_GPIO_Init+0x278>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe0 <HAL_GPIO_Init+0x27c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <HAL_GPIO_Init+0x280>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x15a>
 8003eb6:	21cd      	movs	r1, #205	@ 0xcd
 8003eb8:	484b      	ldr	r0, [pc, #300]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003eba:	f7fe fe87 	bl	8002bcc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8004000 <HAL_GPIO_Init+0x29c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f000 80c7 	beq.w	8004058 <HAL_GPIO_Init+0x2f4>
 8003eca:	4a4d      	ldr	r2, [pc, #308]	@ (8004000 <HAL_GPIO_Init+0x29c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	f200 80ed 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003ed2:	4a48      	ldr	r2, [pc, #288]	@ (8003ff4 <HAL_GPIO_Init+0x290>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f000 80bf 	beq.w	8004058 <HAL_GPIO_Init+0x2f4>
 8003eda:	4a46      	ldr	r2, [pc, #280]	@ (8003ff4 <HAL_GPIO_Init+0x290>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	f200 80e5 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003ee2:	4a46      	ldr	r2, [pc, #280]	@ (8003ffc <HAL_GPIO_Init+0x298>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f000 80b7 	beq.w	8004058 <HAL_GPIO_Init+0x2f4>
 8003eea:	4a44      	ldr	r2, [pc, #272]	@ (8003ffc <HAL_GPIO_Init+0x298>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f200 80dd 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff0 <HAL_GPIO_Init+0x28c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	f000 80af 	beq.w	8004058 <HAL_GPIO_Init+0x2f4>
 8003efa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_GPIO_Init+0x28c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	f200 80d5 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003f02:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff8 <HAL_GPIO_Init+0x294>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f000 80a7 	beq.w	8004058 <HAL_GPIO_Init+0x2f4>
 8003f0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff8 <HAL_GPIO_Init+0x294>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f200 80cd 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003f12:	2b12      	cmp	r3, #18
 8003f14:	d82c      	bhi.n	8003f70 <HAL_GPIO_Init+0x20c>
 8003f16:	2b12      	cmp	r3, #18
 8003f18:	f200 80c8 	bhi.w	80040ac <HAL_GPIO_Init+0x348>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <HAL_GPIO_Init+0x1c0>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08004059 	.word	0x08004059
 8003f28:	08003f79 	.word	0x08003f79
 8003f2c:	08004005 	.word	0x08004005
 8003f30:	080040a7 	.word	0x080040a7
 8003f34:	080040ad 	.word	0x080040ad
 8003f38:	080040ad 	.word	0x080040ad
 8003f3c:	080040ad 	.word	0x080040ad
 8003f40:	080040ad 	.word	0x080040ad
 8003f44:	080040ad 	.word	0x080040ad
 8003f48:	080040ad 	.word	0x080040ad
 8003f4c:	080040ad 	.word	0x080040ad
 8003f50:	080040ad 	.word	0x080040ad
 8003f54:	080040ad 	.word	0x080040ad
 8003f58:	080040ad 	.word	0x080040ad
 8003f5c:	080040ad 	.word	0x080040ad
 8003f60:	080040ad 	.word	0x080040ad
 8003f64:	080040ad 	.word	0x080040ad
 8003f68:	08003fa1 	.word	0x08003fa1
 8003f6c:	0800402f 	.word	0x0800402f
 8003f70:	4a1e      	ldr	r2, [pc, #120]	@ (8003fec <HAL_GPIO_Init+0x288>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d070      	beq.n	8004058 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f76:	e099      	b.n	80040ac <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d00b      	beq.n	8003f98 <HAL_GPIO_Init+0x234>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_GPIO_Init+0x234>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x234>
 8003f90:	21d5      	movs	r1, #213	@ 0xd5
 8003f92:	4815      	ldr	r0, [pc, #84]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003f94:	f7fe fe1a 	bl	8002bcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	623b      	str	r3, [r7, #32]
          break;
 8003f9e:	e086      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_GPIO_Init+0x25c>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d007      	beq.n	8003fc0 <HAL_GPIO_Init+0x25c>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x25c>
 8003fb8:	21dc      	movs	r1, #220	@ 0xdc
 8003fba:	480b      	ldr	r0, [pc, #44]	@ (8003fe8 <HAL_GPIO_Init+0x284>)
 8003fbc:	f7fe fe06 	bl	8002bcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	623b      	str	r3, [r7, #32]
          break;
 8003fc8:	e071      	b.n	80040ae <HAL_GPIO_Init+0x34a>
 8003fca:	bf00      	nop
 8003fcc:	40010800 	.word	0x40010800
 8003fd0:	40010c00 	.word	0x40010c00
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	40011800 	.word	0x40011800
 8003fe0:	40011c00 	.word	0x40011c00
 8003fe4:	40012000 	.word	0x40012000
 8003fe8:	0800bc7c 	.word	0x0800bc7c
 8003fec:	10110000 	.word	0x10110000
 8003ff0:	10210000 	.word	0x10210000
 8003ff4:	10310000 	.word	0x10310000
 8003ff8:	10120000 	.word	0x10120000
 8003ffc:	10220000 	.word	0x10220000
 8004000:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d00b      	beq.n	8004024 <HAL_GPIO_Init+0x2c0>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_GPIO_Init+0x2c0>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x2c0>
 800401c:	21e3      	movs	r1, #227	@ 0xe3
 800401e:	4891      	ldr	r0, [pc, #580]	@ (8004264 <HAL_GPIO_Init+0x500>)
 8004020:	f7fe fdd4 	bl	8002bcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	3308      	adds	r3, #8
 800402a:	623b      	str	r3, [r7, #32]
          break;
 800402c:	e03f      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d00b      	beq.n	800404e <HAL_GPIO_Init+0x2ea>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d007      	beq.n	800404e <HAL_GPIO_Init+0x2ea>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2ea>
 8004046:	21ea      	movs	r1, #234	@ 0xea
 8004048:	4886      	ldr	r0, [pc, #536]	@ (8004264 <HAL_GPIO_Init+0x500>)
 800404a:	f7fe fdbf 	bl	8002bcc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	330c      	adds	r3, #12
 8004054:	623b      	str	r3, [r7, #32]
          break;
 8004056:	e02a      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_GPIO_Init+0x314>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d007      	beq.n	8004078 <HAL_GPIO_Init+0x314>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x314>
 8004070:	21f7      	movs	r1, #247	@ 0xf7
 8004072:	487c      	ldr	r0, [pc, #496]	@ (8004264 <HAL_GPIO_Init+0x500>)
 8004074:	f7fe fdaa 	bl	8002bcc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004080:	2304      	movs	r3, #4
 8004082:	623b      	str	r3, [r7, #32]
          break;
 8004084:	e013      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800408e:	2308      	movs	r3, #8
 8004090:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	611a      	str	r2, [r3, #16]
          break;
 8004098:	e009      	b.n	80040ae <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800409a:	2308      	movs	r3, #8
 800409c:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	615a      	str	r2, [r3, #20]
          break;
 80040a4:	e003      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
          break;
 80040aa:	e000      	b.n	80040ae <HAL_GPIO_Init+0x34a>
          break;
 80040ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2bff      	cmp	r3, #255	@ 0xff
 80040b2:	d801      	bhi.n	80040b8 <HAL_GPIO_Init+0x354>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	e001      	b.n	80040bc <HAL_GPIO_Init+0x358>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2bff      	cmp	r3, #255	@ 0xff
 80040c2:	d802      	bhi.n	80040ca <HAL_GPIO_Init+0x366>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_Init+0x36c>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	3b08      	subs	r3, #8
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	210f      	movs	r1, #15
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	401a      	ands	r2, r3
 80040e2:	6a39      	ldr	r1, [r7, #32]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	431a      	orrs	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a2 	beq.w	8004242 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004268 <HAL_GPIO_Init+0x504>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	4a59      	ldr	r2, [pc, #356]	@ (8004268 <HAL_GPIO_Init+0x504>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6193      	str	r3, [r2, #24]
 800410a:	4b57      	ldr	r3, [pc, #348]	@ (8004268 <HAL_GPIO_Init+0x504>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004116:	4a55      	ldr	r2, [pc, #340]	@ (800426c <HAL_GPIO_Init+0x508>)
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	089b      	lsrs	r3, r3, #2
 800411c:	3302      	adds	r3, #2
 800411e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004122:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	220f      	movs	r2, #15
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4013      	ands	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4c      	ldr	r2, [pc, #304]	@ (8004270 <HAL_GPIO_Init+0x50c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <HAL_GPIO_Init+0x41e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4b      	ldr	r2, [pc, #300]	@ (8004274 <HAL_GPIO_Init+0x510>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d019      	beq.n	800417e <HAL_GPIO_Init+0x41a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4a      	ldr	r2, [pc, #296]	@ (8004278 <HAL_GPIO_Init+0x514>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0x416>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a49      	ldr	r2, [pc, #292]	@ (800427c <HAL_GPIO_Init+0x518>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00d      	beq.n	8004176 <HAL_GPIO_Init+0x412>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a48      	ldr	r2, [pc, #288]	@ (8004280 <HAL_GPIO_Init+0x51c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <HAL_GPIO_Init+0x40e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_GPIO_Init+0x520>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_GPIO_Init+0x40a>
 800416a:	2305      	movs	r3, #5
 800416c:	e00a      	b.n	8004184 <HAL_GPIO_Init+0x420>
 800416e:	2306      	movs	r3, #6
 8004170:	e008      	b.n	8004184 <HAL_GPIO_Init+0x420>
 8004172:	2304      	movs	r3, #4
 8004174:	e006      	b.n	8004184 <HAL_GPIO_Init+0x420>
 8004176:	2303      	movs	r3, #3
 8004178:	e004      	b.n	8004184 <HAL_GPIO_Init+0x420>
 800417a:	2302      	movs	r3, #2
 800417c:	e002      	b.n	8004184 <HAL_GPIO_Init+0x420>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_GPIO_Init+0x420>
 8004182:	2300      	movs	r3, #0
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	f002 0203 	and.w	r2, r2, #3
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	4093      	lsls	r3, r2
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004194:	4935      	ldr	r1, [pc, #212]	@ (800426c <HAL_GPIO_Init+0x508>)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3302      	adds	r3, #2
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041ae:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	4935      	ldr	r1, [pc, #212]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
 80041ba:	e006      	b.n	80041ca <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041bc:	4b32      	ldr	r3, [pc, #200]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	4930      	ldr	r1, [pc, #192]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	492b      	ldr	r1, [pc, #172]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
 80041e2:	e006      	b.n	80041f2 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041e4:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	4926      	ldr	r1, [pc, #152]	@ (8004288 <HAL_GPIO_Init+0x524>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041fe:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <HAL_GPIO_Init+0x524>)
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4921      	ldr	r1, [pc, #132]	@ (8004288 <HAL_GPIO_Init+0x524>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
 800420a:	e006      	b.n	800421a <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800420c:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <HAL_GPIO_Init+0x524>)
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	43db      	mvns	r3, r3
 8004214:	491c      	ldr	r1, [pc, #112]	@ (8004288 <HAL_GPIO_Init+0x524>)
 8004216:	4013      	ands	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d006      	beq.n	8004234 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004226:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <HAL_GPIO_Init+0x524>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4917      	ldr	r1, [pc, #92]	@ (8004288 <HAL_GPIO_Init+0x524>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
 8004232:	e006      	b.n	8004242 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004234:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <HAL_GPIO_Init+0x524>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	43db      	mvns	r3, r3
 800423c:	4912      	ldr	r1, [pc, #72]	@ (8004288 <HAL_GPIO_Init+0x524>)
 800423e:	4013      	ands	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	3301      	adds	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	f47f ae04 	bne.w	8003e60 <HAL_GPIO_Init+0xfc>
  }
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	3728      	adds	r7, #40	@ 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	0800bc7c 	.word	0x0800bc7c
 8004268:	40021000 	.word	0x40021000
 800426c:	40010000 	.word	0x40010000
 8004270:	40010800 	.word	0x40010800
 8004274:	40010c00 	.word	0x40010c00
 8004278:	40011000 	.word	0x40011000
 800427c:	40011400 	.word	0x40011400
 8004280:	40011800 	.word	0x40011800
 8004284:	40011c00 	.word	0x40011c00
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_GPIO_ReadPin+0x1c>
 800429e:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80042a2:	4809      	ldr	r0, [pc, #36]	@ (80042c8 <HAL_GPIO_ReadPin+0x3c>)
 80042a4:	f7fe fc92 	bl	8002bcc <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e001      	b.n	80042be <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	0800bc7c 	.word	0x0800bc7c

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_GPIO_WritePin+0x20>
 80042e2:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80042e6:	480e      	ldr	r0, [pc, #56]	@ (8004320 <HAL_GPIO_WritePin+0x54>)
 80042e8:	f7fe fc70 	bl	8002bcc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_GPIO_WritePin+0x36>
 80042f2:	787b      	ldrb	r3, [r7, #1]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d004      	beq.n	8004302 <HAL_GPIO_WritePin+0x36>
 80042f8:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80042fc:	4808      	ldr	r0, [pc, #32]	@ (8004320 <HAL_GPIO_WritePin+0x54>)
 80042fe:	f7fe fc65 	bl	8002bcc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004302:	787b      	ldrb	r3, [r7, #1]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004308:	887a      	ldrh	r2, [r7, #2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800430e:	e003      	b.n	8004318 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	041a      	lsls	r2, r3, #16
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	611a      	str	r2, [r3, #16]
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	0800bc7c 	.word	0x0800bc7c

08004324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e35a      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01c      	beq.n	8004378 <HAL_RCC_OscConfig+0x54>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d116      	bne.n	8004378 <HAL_RCC_OscConfig+0x54>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <HAL_RCC_OscConfig+0x54>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCC_OscConfig+0x54>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_RCC_OscConfig+0x54>
 800436e:	f240 1165 	movw	r1, #357	@ 0x165
 8004372:	488f      	ldr	r0, [pc, #572]	@ (80045b0 <HAL_RCC_OscConfig+0x28c>)
 8004374:	f7fe fc2a 	bl	8002bcc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 809a 	beq.w	80044ba <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <HAL_RCC_OscConfig+0x88>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004396:	d009      	beq.n	80043ac <HAL_RCC_OscConfig+0x88>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a0:	d004      	beq.n	80043ac <HAL_RCC_OscConfig+0x88>
 80043a2:	f240 116b 	movw	r1, #363	@ 0x16b
 80043a6:	4882      	ldr	r0, [pc, #520]	@ (80045b0 <HAL_RCC_OscConfig+0x28c>)
 80043a8:	f7fe fc10 	bl	8002bcc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ac:	4b81      	ldr	r3, [pc, #516]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b8:	4b7e      	ldr	r3, [pc, #504]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d112      	bne.n	80043ea <HAL_RCC_OscConfig+0xc6>
 80043c4:	4b7b      	ldr	r3, [pc, #492]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d10b      	bne.n	80043ea <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	4b78      	ldr	r3, [pc, #480]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x194>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d168      	bne.n	80044b8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e300      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0xde>
 80043f4:	4b6f      	ldr	r3, [pc, #444]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6e      	ldr	r2, [pc, #440]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e02e      	b.n	8004460 <HAL_RCC_OscConfig+0x13c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x100>
 800440a:	4b6a      	ldr	r3, [pc, #424]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a69      	ldr	r2, [pc, #420]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b67      	ldr	r3, [pc, #412]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a66      	ldr	r2, [pc, #408]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800441c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0x13c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x124>
 800442e:	4b61      	ldr	r3, [pc, #388]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a60      	ldr	r2, [pc, #384]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b5e      	ldr	r3, [pc, #376]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5d      	ldr	r2, [pc, #372]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x13c>
 8004448:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a59      	ldr	r2, [pc, #356]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b57      	ldr	r3, [pc, #348]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a56      	ldr	r2, [pc, #344]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7ff fb12 	bl	8003a90 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7ff fb0e 	bl	8003a90 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e2b4      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b4c      	ldr	r3, [pc, #304]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x14c>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7ff fafe 	bl	8003a90 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7ff fafa 	bl	8003a90 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	@ 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e2a0      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b42      	ldr	r3, [pc, #264]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x174>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8080 	beq.w	80045c8 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1be>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d004      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1be>
 80044d8:	f240 119f 	movw	r1, #415	@ 0x19f
 80044dc:	4834      	ldr	r0, [pc, #208]	@ (80045b0 <HAL_RCC_OscConfig+0x28c>)
 80044de:	f7fe fb75 	bl	8002bcc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	2b1f      	cmp	r3, #31
 80044e8:	d904      	bls.n	80044f4 <HAL_RCC_OscConfig+0x1d0>
 80044ea:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80044ee:	4830      	ldr	r0, [pc, #192]	@ (80045b0 <HAL_RCC_OscConfig+0x28c>)
 80044f0:	f7fe fb6c 	bl	8002bcc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004500:	4b2c      	ldr	r3, [pc, #176]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11c      	bne.n	8004546 <HAL_RCC_OscConfig+0x222>
 800450c:	4b29      	ldr	r3, [pc, #164]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004518:	4b26      	ldr	r3, [pc, #152]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_OscConfig+0x20c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e25d      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	491d      	ldr	r1, [pc, #116]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004544:	e040      	b.n	80045c8 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454e:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <HAL_RCC_OscConfig+0x294>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7ff fa9c 	bl	8003a90 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455c:	f7ff fa98 	bl	8003a90 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e23e      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490a      	ldr	r1, [pc, #40]	@ (80045b4 <HAL_RCC_OscConfig+0x290>)
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x294>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7ff fa7b 	bl	8003a90 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459c:	e00e      	b.n	80045bc <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459e:	f7ff fa77 	bl	8003a90 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d907      	bls.n	80045bc <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e21d      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
 80045b0:	0800bcb8 	.word	0x0800bcb8
 80045b4:	40021000 	.word	0x40021000
 80045b8:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045bc:	4b7d      	ldr	r3, [pc, #500]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ea      	bne.n	800459e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d040      	beq.n	8004656 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_RCC_OscConfig+0x2ca>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d004      	beq.n	80045ee <HAL_RCC_OscConfig+0x2ca>
 80045e4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80045e8:	4873      	ldr	r0, [pc, #460]	@ (80047b8 <HAL_RCC_OscConfig+0x494>)
 80045ea:	f7fe faef 	bl	8002bcc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d019      	beq.n	800462a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b71      	ldr	r3, [pc, #452]	@ (80047bc <HAL_RCC_OscConfig+0x498>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7ff fa48 	bl	8003a90 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7ff fa44 	bl	8003a90 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e1ea      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b67      	ldr	r3, [pc, #412]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004622:	2001      	movs	r0, #1
 8004624:	f000 fc02 	bl	8004e2c <RCC_Delay>
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462a:	4b64      	ldr	r3, [pc, #400]	@ (80047bc <HAL_RCC_OscConfig+0x498>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004630:	f7ff fa2e 	bl	8003a90 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004638:	f7ff fa2a 	bl	8003a90 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1d0      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464a:	4b5a      	ldr	r3, [pc, #360]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80bf 	beq.w	80047e2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004664:	2300      	movs	r3, #0
 8004666:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_RCC_OscConfig+0x366>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d008      	beq.n	800468a <HAL_RCC_OscConfig+0x366>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b05      	cmp	r3, #5
 800467e:	d004      	beq.n	800468a <HAL_RCC_OscConfig+0x366>
 8004680:	f240 210f 	movw	r1, #527	@ 0x20f
 8004684:	484c      	ldr	r0, [pc, #304]	@ (80047b8 <HAL_RCC_OscConfig+0x494>)
 8004686:	f7fe faa1 	bl	8002bcc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4a46      	ldr	r2, [pc, #280]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	61d3      	str	r3, [r2, #28]
 80046a2:	4b44      	ldr	r3, [pc, #272]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b43      	ldr	r3, [pc, #268]	@ (80047c0 <HAL_RCC_OscConfig+0x49c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046be:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <HAL_RCC_OscConfig+0x49c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3f      	ldr	r2, [pc, #252]	@ (80047c0 <HAL_RCC_OscConfig+0x49c>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7ff f9e1 	bl	8003a90 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7ff f9dd 	bl	8003a90 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	@ 0x64
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e183      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <HAL_RCC_OscConfig+0x49c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x3e2>
 80046f8:	4b2e      	ldr	r3, [pc, #184]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6213      	str	r3, [r2, #32]
 8004704:	e02d      	b.n	8004762 <HAL_RCC_OscConfig+0x43e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x404>
 800470e:	4b29      	ldr	r3, [pc, #164]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4a28      	ldr	r2, [pc, #160]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6213      	str	r3, [r2, #32]
 800471a:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6213      	str	r3, [r2, #32]
 8004726:	e01c      	b.n	8004762 <HAL_RCC_OscConfig+0x43e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d10c      	bne.n	800474a <HAL_RCC_OscConfig+0x426>
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4a1f      	ldr	r2, [pc, #124]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	6213      	str	r3, [r2, #32]
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6213      	str	r3, [r2, #32]
 8004748:	e00b      	b.n	8004762 <HAL_RCC_OscConfig+0x43e>
 800474a:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6213      	str	r3, [r2, #32]
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7ff f991 	bl	8003a90 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7ff f98d 	bl	8003a90 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e131      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <HAL_RCC_OscConfig+0x490>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ee      	beq.n	8004772 <HAL_RCC_OscConfig+0x44e>
 8004794:	e01c      	b.n	80047d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004796:	f7ff f97b 	bl	8003a90 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479c:	e012      	b.n	80047c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7ff f977 	bl	8003a90 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d909      	bls.n	80047c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e11b      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	0800bcb8 	.word	0x0800bcb8
 80047bc:	42420480 	.word	0x42420480
 80047c0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c4:	4b8b      	ldr	r3, [pc, #556]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d6:	4b87      	ldr	r3, [pc, #540]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4a86      	ldr	r2, [pc, #536]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d008      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d004      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
 80047fa:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80047fe:	487e      	ldr	r0, [pc, #504]	@ (80049f8 <HAL_RCC_OscConfig+0x6d4>)
 8004800:	f7fe f9e4 	bl	8002bcc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80ee 	beq.w	80049ea <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480e:	4b79      	ldr	r3, [pc, #484]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b08      	cmp	r3, #8
 8004818:	f000 80ce 	beq.w	80049b8 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f040 80b2 	bne.w	800498a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_OscConfig+0x51e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004836:	d004      	beq.n	8004842 <HAL_RCC_OscConfig+0x51e>
 8004838:	f240 21b6 	movw	r1, #694	@ 0x2b6
 800483c:	486e      	ldr	r0, [pc, #440]	@ (80049f8 <HAL_RCC_OscConfig+0x6d4>)
 800483e:	f7fe f9c5 	bl	8002bcc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04a      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004852:	d045      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800485c:	d040      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004866:	d03b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004870:	d036      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800487a:	d031      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004884:	d02c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800488e:	d027      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004898:	d022      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80048a2:	d01d      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80048ac:	d018      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80048b6:	d013      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048c0:	d00e      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80048ca:	d009      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80048d4:	d004      	beq.n	80048e0 <HAL_RCC_OscConfig+0x5bc>
 80048d6:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80048da:	4847      	ldr	r0, [pc, #284]	@ (80049f8 <HAL_RCC_OscConfig+0x6d4>)
 80048dc:	f7fe f976 	bl	8002bcc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e0:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <HAL_RCC_OscConfig+0x6d8>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7ff f8d3 	bl	8003a90 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7ff f8cf 	bl	8003a90 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e075      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004900:	4b3c      	ldr	r3, [pc, #240]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004914:	d116      	bne.n	8004944 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_OscConfig+0x60e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004926:	d004      	beq.n	8004932 <HAL_RCC_OscConfig+0x60e>
 8004928:	f240 21cd 	movw	r1, #717	@ 0x2cd
 800492c:	4832      	ldr	r0, [pc, #200]	@ (80049f8 <HAL_RCC_OscConfig+0x6d4>)
 800492e:	f7fe f94d 	bl	8002bcc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004932:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	492d      	ldr	r1, [pc, #180]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a19      	ldr	r1, [r3, #32]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	430b      	orrs	r3, r1
 8004956:	4927      	ldr	r1, [pc, #156]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_OscConfig+0x6d8>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7ff f895 	bl	8003a90 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496a:	f7ff f891 	bl	8003a90 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e037      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x646>
 8004988:	e02f      	b.n	80049ea <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b1c      	ldr	r3, [pc, #112]	@ (80049fc <HAL_RCC_OscConfig+0x6d8>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7ff f87e 	bl	8003a90 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7ff f87a 	bl	8003a90 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e020      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049aa:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x674>
 80049b6:	e018      	b.n	80049ea <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e013      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_RCC_OscConfig+0x6d0>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800bcb8 	.word	0x0800bcb8
 80049fc:	42420060 	.word	0x42420060

08004a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e176      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x4e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x4e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x4e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x4e>
 8004a44:	f240 3136 	movw	r1, #822	@ 0x336
 8004a48:	4874      	ldr	r0, [pc, #464]	@ (8004c1c <HAL_RCC_ClockConfig+0x21c>)
 8004a4a:	f7fe f8bf 	bl	8002bcc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x6a>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d007      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x6a>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x6a>
 8004a60:	f240 3137 	movw	r1, #823	@ 0x337
 8004a64:	486d      	ldr	r0, [pc, #436]	@ (8004c1c <HAL_RCC_ClockConfig+0x21c>)
 8004a66:	f7fe f8b1 	bl	8002bcc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d910      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	4b69      	ldr	r3, [pc, #420]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 0207 	bic.w	r2, r3, #7
 8004a80:	4967      	ldr	r1, [pc, #412]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a88:	4b65      	ldr	r3, [pc, #404]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e133      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d049      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004ab8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004abc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aca:	4b56      	ldr	r3, [pc, #344]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a55      	ldr	r2, [pc, #340]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004ad0:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ad4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d024      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b80      	cmp	r3, #128	@ 0x80
 8004ae4:	d020      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b90      	cmp	r3, #144	@ 0x90
 8004aec:	d01c      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004af4:	d018      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2bb0      	cmp	r3, #176	@ 0xb0
 8004afc:	d014      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b04:	d010      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2bd0      	cmp	r3, #208	@ 0xd0
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2be0      	cmp	r3, #224	@ 0xe0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2bf0      	cmp	r3, #240	@ 0xf0
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x128>
 8004b1e:	f240 315d 	movw	r1, #861	@ 0x35d
 8004b22:	483e      	ldr	r0, [pc, #248]	@ (8004c1c <HAL_RCC_ClockConfig+0x21c>)
 8004b24:	f7fe f852 	bl	8002bcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	493b      	ldr	r1, [pc, #236]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d051      	beq.n	8004bea <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x168>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d008      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x168>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x168>
 8004b5e:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8004b62:	482e      	ldr	r0, [pc, #184]	@ (8004c1c <HAL_RCC_ClockConfig+0x21c>)
 8004b64:	f7fe f832 	bl	8002bcc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b70:	4b2c      	ldr	r3, [pc, #176]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d115      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0c0      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b88:	4b26      	ldr	r3, [pc, #152]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b4      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b98:	4b22      	ldr	r3, [pc, #136]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0ac      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 0203 	bic.w	r2, r3, #3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	491b      	ldr	r1, [pc, #108]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fe ff69 	bl	8003a90 <HAL_GetTick>
 8004bbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc2:	f7fe ff65 	bl	8003a90 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e094      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd8:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <HAL_RCC_ClockConfig+0x224>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 020c 	and.w	r2, r3, #12
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d1eb      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bea:	4b0d      	ldr	r3, [pc, #52]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d217      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 0207 	bic.w	r2, r3, #7
 8004c00:	4907      	ldr	r1, [pc, #28]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_ClockConfig+0x220>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d008      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e073      	b.n	8004d02 <HAL_RCC_ClockConfig+0x302>
 8004c1a:	bf00      	nop
 8004c1c:	0800bcb8 	.word	0x0800bcb8
 8004c20:	40022000 	.word	0x40022000
 8004c24:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d025      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d018      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x26e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c44:	d013      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x26e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c4e:	d00e      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x26e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x26e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c62:	d004      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x26e>
 8004c64:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8004c68:	4828      	ldr	r0, [pc, #160]	@ (8004d0c <HAL_RCC_ClockConfig+0x30c>)
 8004c6a:	f7fd ffaf 	bl	8002bcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6e:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <HAL_RCC_ClockConfig+0x310>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4925      	ldr	r1, [pc, #148]	@ (8004d10 <HAL_RCC_ClockConfig+0x310>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d026      	beq.n	8004cda <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2c6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9c:	d013      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2c6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2c6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2c6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cba:	d004      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2c6>
 8004cbc:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8004cc0:	4812      	ldr	r0, [pc, #72]	@ (8004d0c <HAL_RCC_ClockConfig+0x30c>)
 8004cc2:	f7fd ff83 	bl	8002bcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cc6:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <HAL_RCC_ClockConfig+0x310>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	490e      	ldr	r1, [pc, #56]	@ (8004d10 <HAL_RCC_ClockConfig+0x310>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cda:	f000 f821 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <HAL_RCC_ClockConfig+0x310>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490a      	ldr	r1, [pc, #40]	@ (8004d14 <HAL_RCC_ClockConfig+0x314>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a09      	ldr	r2, [pc, #36]	@ (8004d18 <HAL_RCC_ClockConfig+0x318>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_ClockConfig+0x31c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fe86 	bl	8003a0c <HAL_InitTick>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	0800bcb8 	.word	0x0800bcb8
 8004d10:	40021000 	.word	0x40021000
 8004d14:	0800bda0 	.word	0x0800bda0
 8004d18:	2000001c 	.word	0x2000001c
 8004d1c:	20000020 	.word	0x20000020

08004d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d002      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0x30>
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0x36>
 8004d4e:	e027      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d50:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d52:	613b      	str	r3, [r7, #16]
      break;
 8004d54:	e027      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	0c9b      	lsrs	r3, r3, #18
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	4a17      	ldr	r2, [pc, #92]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d60:	5cd3      	ldrb	r3, [r2, r3]
 8004d62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d6e:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	0c5b      	lsrs	r3, r3, #17
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d82:	fb03 f202 	mul.w	r2, r3, r2
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e004      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	613b      	str	r3, [r7, #16]
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004da2:	613b      	str	r3, [r7, #16]
      break;
 8004da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da6:	693b      	ldr	r3, [r7, #16]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	007a1200 	.word	0x007a1200
 8004dbc:	0800bdb8 	.word	0x0800bdb8
 8004dc0:	0800bdc8 	.word	0x0800bdc8
 8004dc4:	003d0900 	.word	0x003d0900

08004dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dcc:	4b02      	ldr	r3, [pc, #8]	@ (8004dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr
 8004dd8:	2000001c 	.word	0x2000001c

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004de0:	f7ff fff2 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	@ (8004e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	0800bdb0 	.word	0x0800bdb0

08004e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e08:	f7ff ffde 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0adb      	lsrs	r3, r3, #11
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	@ (8004e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800bdb0 	.word	0x0800bdb0

08004e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e34:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <RCC_Delay+0x34>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <RCC_Delay+0x38>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0a5b      	lsrs	r3, r3, #9
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e48:	bf00      	nop
  }
  while (Delay --);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	60fa      	str	r2, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f9      	bne.n	8004e48 <RCC_Delay+0x1c>
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	2000001c 	.word	0x2000001c
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0b5      	b.n	8004fe6 <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff0 <HAL_TIM_Base_Init+0x188>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d027      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff4 <HAL_TIM_Base_Init+0x18c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d022      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d01d      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a56      	ldr	r2, [pc, #344]	@ (8004ff8 <HAL_TIM_Base_Init+0x190>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d018      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a55      	ldr	r2, [pc, #340]	@ (8004ffc <HAL_TIM_Base_Init+0x194>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a53      	ldr	r2, [pc, #332]	@ (8005000 <HAL_TIM_Base_Init+0x198>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a52      	ldr	r2, [pc, #328]	@ (8005004 <HAL_TIM_Base_Init+0x19c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a50      	ldr	r2, [pc, #320]	@ (8005008 <HAL_TIM_Base_Init+0x1a0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIM_Base_Init+0x6c>
 8004eca:	f240 1113 	movw	r1, #275	@ 0x113
 8004ece:	484f      	ldr	r0, [pc, #316]	@ (800500c <HAL_TIM_Base_Init+0x1a4>)
 8004ed0:	f7fd fe7c 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d014      	beq.n	8004f06 <HAL_TIM_Base_Init+0x9e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d010      	beq.n	8004f06 <HAL_TIM_Base_Init+0x9e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d00c      	beq.n	8004f06 <HAL_TIM_Base_Init+0x9e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d008      	beq.n	8004f06 <HAL_TIM_Base_Init+0x9e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b60      	cmp	r3, #96	@ 0x60
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_Base_Init+0x9e>
 8004efc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004f00:	4842      	ldr	r0, [pc, #264]	@ (800500c <HAL_TIM_Base_Init+0x1a4>)
 8004f02:	f7fd fe63 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <HAL_TIM_Base_Init+0xc4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f16:	d009      	beq.n	8004f2c <HAL_TIM_Base_Init+0xc4>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Init+0xc4>
 8004f22:	f240 1115 	movw	r1, #277	@ 0x115
 8004f26:	4839      	ldr	r0, [pc, #228]	@ (800500c <HAL_TIM_Base_Init+0x1a4>)
 8004f28:	f7fd fe50 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_TIM_Base_Init+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3c:	d304      	bcc.n	8004f48 <HAL_TIM_Base_Init+0xe0>
 8004f3e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004f42:	4832      	ldr	r0, [pc, #200]	@ (800500c <HAL_TIM_Base_Init+0x1a4>)
 8004f44:	f7fd fe42 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_TIM_Base_Init+0xfa>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b80      	cmp	r3, #128	@ 0x80
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_Base_Init+0xfa>
 8004f58:	f240 1117 	movw	r1, #279	@ 0x117
 8004f5c:	482b      	ldr	r0, [pc, #172]	@ (800500c <HAL_TIM_Base_Init+0x1a4>)
 8004f5e:	f7fd fe35 	bl	8002bcc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fab0 	bl	80034dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f001 fb1c 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40013400 	.word	0x40013400
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40001000 	.word	0x40001000
 8005008:	40001400 	.word	0x40001400
 800500c:	0800bcf0 	.word	0x0800bcf0

08005010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3d      	ldr	r2, [pc, #244]	@ (8005114 <HAL_TIM_Base_Start_IT+0x104>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3c      	ldr	r2, [pc, #240]	@ (8005118 <HAL_TIM_Base_Start_IT+0x108>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005034:	d01d      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a38      	ldr	r2, [pc, #224]	@ (800511c <HAL_TIM_Base_Start_IT+0x10c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a36      	ldr	r2, [pc, #216]	@ (8005120 <HAL_TIM_Base_Start_IT+0x110>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a35      	ldr	r2, [pc, #212]	@ (8005124 <HAL_TIM_Base_Start_IT+0x114>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a33      	ldr	r2, [pc, #204]	@ (8005128 <HAL_TIM_Base_Start_IT+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a32      	ldr	r2, [pc, #200]	@ (800512c <HAL_TIM_Base_Start_IT+0x11c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x62>
 8005068:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 800506c:	4830      	ldr	r0, [pc, #192]	@ (8005130 <HAL_TIM_Base_Start_IT+0x120>)
 800506e:	f7fd fdad 	bl	8002bcc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e044      	b.n	800510c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <HAL_TIM_Base_Start_IT+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xc6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_TIM_Base_Start_IT+0x108>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xc6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xc6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a17      	ldr	r2, [pc, #92]	@ (800511c <HAL_TIM_Base_Start_IT+0x10c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xc6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a16      	ldr	r2, [pc, #88]	@ (8005120 <HAL_TIM_Base_Start_IT+0x110>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xc6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a14      	ldr	r2, [pc, #80]	@ (8005124 <HAL_TIM_Base_Start_IT+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d010      	beq.n	800510a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	e007      	b.n	800510a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40013400 	.word	0x40013400
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40001000 	.word	0x40001000
 800512c:	40001400 	.word	0x40001400
 8005130:	0800bcf0 	.word	0x0800bcf0

08005134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0b5      	b.n	80052b2 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a5c      	ldr	r2, [pc, #368]	@ (80052bc <HAL_TIM_PWM_Init+0x188>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a5a      	ldr	r2, [pc, #360]	@ (80052c0 <HAL_TIM_PWM_Init+0x18c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d01d      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a56      	ldr	r2, [pc, #344]	@ (80052c4 <HAL_TIM_PWM_Init+0x190>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a55      	ldr	r2, [pc, #340]	@ (80052c8 <HAL_TIM_PWM_Init+0x194>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a53      	ldr	r2, [pc, #332]	@ (80052cc <HAL_TIM_PWM_Init+0x198>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a52      	ldr	r2, [pc, #328]	@ (80052d0 <HAL_TIM_PWM_Init+0x19c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a50      	ldr	r2, [pc, #320]	@ (80052d4 <HAL_TIM_PWM_Init+0x1a0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_PWM_Init+0x6c>
 8005196:	f240 512c 	movw	r1, #1324	@ 0x52c
 800519a:	484f      	ldr	r0, [pc, #316]	@ (80052d8 <HAL_TIM_PWM_Init+0x1a4>)
 800519c:	f7fd fd16 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d014      	beq.n	80051d2 <HAL_TIM_PWM_Init+0x9e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d010      	beq.n	80051d2 <HAL_TIM_PWM_Init+0x9e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d00c      	beq.n	80051d2 <HAL_TIM_PWM_Init+0x9e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d008      	beq.n	80051d2 <HAL_TIM_PWM_Init+0x9e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b60      	cmp	r3, #96	@ 0x60
 80051c6:	d004      	beq.n	80051d2 <HAL_TIM_PWM_Init+0x9e>
 80051c8:	f240 512d 	movw	r1, #1325	@ 0x52d
 80051cc:	4842      	ldr	r0, [pc, #264]	@ (80052d8 <HAL_TIM_PWM_Init+0x1a4>)
 80051ce:	f7fd fcfd 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00e      	beq.n	80051f8 <HAL_TIM_PWM_Init+0xc4>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e2:	d009      	beq.n	80051f8 <HAL_TIM_PWM_Init+0xc4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_PWM_Init+0xc4>
 80051ee:	f240 512e 	movw	r1, #1326	@ 0x52e
 80051f2:	4839      	ldr	r0, [pc, #228]	@ (80052d8 <HAL_TIM_PWM_Init+0x1a4>)
 80051f4:	f7fd fcea 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <HAL_TIM_PWM_Init+0xd6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005208:	d304      	bcc.n	8005214 <HAL_TIM_PWM_Init+0xe0>
 800520a:	f240 512f 	movw	r1, #1327	@ 0x52f
 800520e:	4832      	ldr	r0, [pc, #200]	@ (80052d8 <HAL_TIM_PWM_Init+0x1a4>)
 8005210:	f7fd fcdc 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_TIM_PWM_Init+0xfa>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b80      	cmp	r3, #128	@ 0x80
 8005222:	d004      	beq.n	800522e <HAL_TIM_PWM_Init+0xfa>
 8005224:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8005228:	482b      	ldr	r0, [pc, #172]	@ (80052d8 <HAL_TIM_PWM_Init+0x1a4>)
 800522a:	f7fd fccf 	bl	8002bcc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f84a 	bl	80052dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f001 f9b6 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40013400 	.word	0x40013400
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40001000 	.word	0x40001000
 80052d4:	40001400 	.word	0x40001400
 80052d8:	0800bcf0 	.word	0x0800bcf0

080052dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a8a      	ldr	r2, [pc, #552]	@ (8005528 <HAL_TIM_PWM_Start+0x238>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10b      	bne.n	800531c <HAL_TIM_PWM_Start+0x2c>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d062      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d05f      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d05c      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d059      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a82      	ldr	r2, [pc, #520]	@ (800552c <HAL_TIM_PWM_Start+0x23c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10b      	bne.n	800533e <HAL_TIM_PWM_Start+0x4e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d051      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b04      	cmp	r3, #4
 8005330:	d04e      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d04b      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d048      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d10b      	bne.n	8005360 <HAL_TIM_PWM_Start+0x70>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d040      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d03d      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d03a      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d037      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a72      	ldr	r2, [pc, #456]	@ (8005530 <HAL_TIM_PWM_Start+0x240>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10b      	bne.n	8005382 <HAL_TIM_PWM_Start+0x92>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02f      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d02c      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d029      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d026      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6b      	ldr	r2, [pc, #428]	@ (8005534 <HAL_TIM_PWM_Start+0x244>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10b      	bne.n	80053a4 <HAL_TIM_PWM_Start+0xb4>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01e      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d018      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d015      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a63      	ldr	r2, [pc, #396]	@ (8005538 <HAL_TIM_PWM_Start+0x248>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10b      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xd6>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d00a      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d007      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xe0>
 80053c6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 80053ca:	485c      	ldr	r0, [pc, #368]	@ (800553c <HAL_TIM_PWM_Start+0x24c>)
 80053cc:	f7fd fbfe 	bl	8002bcc <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <HAL_TIM_PWM_Start+0xfa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e022      	b.n	8005430 <HAL_TIM_PWM_Start+0x140>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d109      	bne.n	8005404 <HAL_TIM_PWM_Start+0x114>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e015      	b.n	8005430 <HAL_TIM_PWM_Start+0x140>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b08      	cmp	r3, #8
 8005408:	d109      	bne.n	800541e <HAL_TIM_PWM_Start+0x12e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e008      	b.n	8005430 <HAL_TIM_PWM_Start+0x140>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e072      	b.n	800551e <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_TIM_PWM_Start+0x158>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005446:	e013      	b.n	8005470 <HAL_TIM_PWM_Start+0x180>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d104      	bne.n	8005458 <HAL_TIM_PWM_Start+0x168>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005456:	e00b      	b.n	8005470 <HAL_TIM_PWM_Start+0x180>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d104      	bne.n	8005468 <HAL_TIM_PWM_Start+0x178>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005466:	e003      	b.n	8005470 <HAL_TIM_PWM_Start+0x180>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fbf1 	bl	8006c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a29      	ldr	r2, [pc, #164]	@ (8005528 <HAL_TIM_PWM_Start+0x238>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1a2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <HAL_TIM_PWM_Start+0x23c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_TIM_PWM_Start+0x1a6>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_TIM_PWM_Start+0x1a8>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <HAL_TIM_PWM_Start+0x238>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <HAL_TIM_PWM_Start+0x23c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c8:	d00e      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <HAL_TIM_PWM_Start+0x240>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a16      	ldr	r2, [pc, #88]	@ (8005534 <HAL_TIM_PWM_Start+0x244>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a15      	ldr	r2, [pc, #84]	@ (8005538 <HAL_TIM_PWM_Start+0x248>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d010      	beq.n	800551c <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	e007      	b.n	800551c <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	0800bcf0 	.word	0x0800bcf0

08005540 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e194      	b.n	800587e <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a7f      	ldr	r2, [pc, #508]	@ (8005758 <HAL_TIM_Encoder_Init+0x218>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a7e      	ldr	r2, [pc, #504]	@ (800575c <HAL_TIM_Encoder_Init+0x21c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005570:	d013      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7a      	ldr	r2, [pc, #488]	@ (8005760 <HAL_TIM_Encoder_Init+0x220>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a78      	ldr	r2, [pc, #480]	@ (8005764 <HAL_TIM_Encoder_Init+0x224>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a77      	ldr	r2, [pc, #476]	@ (8005768 <HAL_TIM_Encoder_Init+0x228>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIM_Encoder_Init+0x5a>
 8005590:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8005594:	4875      	ldr	r0, [pc, #468]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 8005596:	f7fd fb19 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d014      	beq.n	80055cc <HAL_TIM_Encoder_Init+0x8c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d010      	beq.n	80055cc <HAL_TIM_Encoder_Init+0x8c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d00c      	beq.n	80055cc <HAL_TIM_Encoder_Init+0x8c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b40      	cmp	r3, #64	@ 0x40
 80055b8:	d008      	beq.n	80055cc <HAL_TIM_Encoder_Init+0x8c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b60      	cmp	r3, #96	@ 0x60
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_Encoder_Init+0x8c>
 80055c2:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 80055c6:	4869      	ldr	r0, [pc, #420]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 80055c8:	f7fd fb00 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIM_Encoder_Init+0xb2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055dc:	d009      	beq.n	80055f2 <HAL_TIM_Encoder_Init+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_Encoder_Init+0xb2>
 80055e8:	f640 31da 	movw	r1, #3034	@ 0xbda
 80055ec:	485f      	ldr	r0, [pc, #380]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 80055ee:	f7fd faed 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_TIM_Encoder_Init+0xcc>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d004      	beq.n	800560c <HAL_TIM_Encoder_Init+0xcc>
 8005602:	f640 31db 	movw	r1, #3035	@ 0xbdb
 8005606:	4859      	ldr	r0, [pc, #356]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 8005608:	f7fd fae0 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d00c      	beq.n	800562e <HAL_TIM_Encoder_Init+0xee>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d008      	beq.n	800562e <HAL_TIM_Encoder_Init+0xee>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d004      	beq.n	800562e <HAL_TIM_Encoder_Init+0xee>
 8005624:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8005628:	4850      	ldr	r0, [pc, #320]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 800562a:	f7fd facf 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d00c      	beq.n	8005650 <HAL_TIM_Encoder_Init+0x110>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d008      	beq.n	8005650 <HAL_TIM_Encoder_Init+0x110>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d004      	beq.n	8005650 <HAL_TIM_Encoder_Init+0x110>
 8005646:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 800564a:	4848      	ldr	r0, [pc, #288]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 800564c:	f7fd fabe 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d00c      	beq.n	8005672 <HAL_TIM_Encoder_Init+0x132>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d008      	beq.n	8005672 <HAL_TIM_Encoder_Init+0x132>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d004      	beq.n	8005672 <HAL_TIM_Encoder_Init+0x132>
 8005668:	f640 31de 	movw	r1, #3038	@ 0xbde
 800566c:	483f      	ldr	r0, [pc, #252]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 800566e:	f7fd faad 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_TIM_Encoder_Init+0x14c>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d004      	beq.n	800568c <HAL_TIM_Encoder_Init+0x14c>
 8005682:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8005686:	4839      	ldr	r0, [pc, #228]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 8005688:	f7fd faa0 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_TIM_Encoder_Init+0x166>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_Encoder_Init+0x166>
 800569c:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 80056a0:	4832      	ldr	r0, [pc, #200]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 80056a2:	f7fd fa93 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_TIM_Encoder_Init+0x190>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d00c      	beq.n	80056d0 <HAL_TIM_Encoder_Init+0x190>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d008      	beq.n	80056d0 <HAL_TIM_Encoder_Init+0x190>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_Encoder_Init+0x190>
 80056c6:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 80056ca:	4828      	ldr	r0, [pc, #160]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 80056cc:	f7fd fa7e 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_TIM_Encoder_Init+0x1ba>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d00c      	beq.n	80056fa <HAL_TIM_Encoder_Init+0x1ba>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d008      	beq.n	80056fa <HAL_TIM_Encoder_Init+0x1ba>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_Encoder_Init+0x1ba>
 80056f0:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 80056f4:	481d      	ldr	r0, [pc, #116]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 80056f6:	f7fd fa69 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d904      	bls.n	800570c <HAL_TIM_Encoder_Init+0x1cc>
 8005702:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8005706:	4819      	ldr	r0, [pc, #100]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 8005708:	f7fd fa60 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	2b0f      	cmp	r3, #15
 8005712:	d904      	bls.n	800571e <HAL_TIM_Encoder_Init+0x1de>
 8005714:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8005718:	4814      	ldr	r0, [pc, #80]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 800571a:	f7fd fa57 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Encoder_Init+0x1f0>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572e:	d304      	bcc.n	800573a <HAL_TIM_Encoder_Init+0x1fa>
 8005730:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8005734:	480d      	ldr	r0, [pc, #52]	@ (800576c <HAL_TIM_Encoder_Init+0x22c>)
 8005736:	f7fd fa49 	bl	8002bcc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d114      	bne.n	8005770 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fd ff2e 	bl	80035b0 <HAL_TIM_Encoder_MspInit>
 8005754:	e00c      	b.n	8005770 <HAL_TIM_Encoder_Init+0x230>
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	0800bcf0 	.word	0x0800bcf0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005786:	f023 0307 	bic.w	r3, r3, #7
 800578a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 ff18 	bl	80065cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c4:	f023 0303 	bic.w	r3, r3, #3
 80057c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	4313      	orrs	r3, r2
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057e2:	f023 030c 	bic.w	r3, r3, #12
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4313      	orrs	r3, r2
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	011a      	lsls	r2, r3, #4
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	031b      	lsls	r3, r3, #12
 8005812:	4313      	orrs	r3, r2
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005820:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	4313      	orrs	r3, r2
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop

08005888 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005898:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a4d      	ldr	r2, [pc, #308]	@ (80059ec <HAL_TIM_Encoder_Start+0x164>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d01d      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a4b      	ldr	r2, [pc, #300]	@ (80059f0 <HAL_TIM_Encoder_Start+0x168>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d013      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a47      	ldr	r2, [pc, #284]	@ (80059f4 <HAL_TIM_Encoder_Start+0x16c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a46      	ldr	r2, [pc, #280]	@ (80059f8 <HAL_TIM_Encoder_Start+0x170>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a44      	ldr	r2, [pc, #272]	@ (80059fc <HAL_TIM_Encoder_Start+0x174>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x70>
 80058ee:	f640 4195 	movw	r1, #3221	@ 0xc95
 80058f2:	4843      	ldr	r0, [pc, #268]	@ (8005a00 <HAL_TIM_Encoder_Start+0x178>)
 80058f4:	f7fd f96a 	bl	8002bcc <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d102      	bne.n	800590a <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005904:	7b7b      	ldrb	r3, [r7, #13]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e069      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800591e:	e031      	b.n	8005984 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d110      	bne.n	8005948 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d102      	bne.n	8005932 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800592c:	7b3b      	ldrb	r3, [r7, #12]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d001      	beq.n	8005936 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e055      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005946:	e01d      	b.n	8005984 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	7bbb      	ldrb	r3, [r7, #14]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005954:	7b7b      	ldrb	r3, [r7, #13]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d102      	bne.n	8005960 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800595a:	7b3b      	ldrb	r3, [r7, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d001      	beq.n	8005964 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e03e      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_Encoder_Start+0x10a>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d008      	beq.n	80059a2 <HAL_TIM_Encoder_Start+0x11a>
 8005990:	e00f      	b.n	80059b2 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2201      	movs	r2, #1
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f001 f960 	bl	8006c60 <TIM_CCxChannelCmd>
      break;
 80059a0:	e016      	b.n	80059d0 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	2104      	movs	r1, #4
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f958 	bl	8006c60 <TIM_CCxChannelCmd>
      break;
 80059b0:	e00e      	b.n	80059d0 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2201      	movs	r2, #1
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f950 	bl	8006c60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2201      	movs	r2, #1
 80059c6:	2104      	movs	r1, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f949 	bl	8006c60 <TIM_CCxChannelCmd>
      break;
 80059ce:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	0800bcf0 	.word	0x0800bcf0

08005a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d122      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d11b      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0202 	mvn.w	r2, #2
 8005a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fda5 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fd98 	bl	8006584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fda7 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0204 	mvn.w	r2, #4
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fd7b 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fd6e 	bl	8006584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fd7d 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d122      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d11b      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0208 	mvn.w	r2, #8
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fd51 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fd44 	bl	8006584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fd53 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2208      	movs	r2, #8
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fd27 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fd1a 	bl	8006584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fd29 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0201 	mvn.w	r2, #1
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc fda2 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b80      	cmp	r3, #128	@ 0x80
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fa5b 	bl	800706a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fced 	bl	80065ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d10e      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d107      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0220 	mvn.w	r2, #32
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fa26 	bl	8007058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d010      	beq.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d00d      	beq.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d00a      	beq.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d007      	beq.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005c40:	d004      	beq.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c42:	f241 017e 	movw	r1, #4222	@ 0x107e
 8005c46:	4890      	ldr	r0, [pc, #576]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005c48:	f7fc ffc0 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b60      	cmp	r3, #96	@ 0x60
 8005c52:	d008      	beq.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b70      	cmp	r3, #112	@ 0x70
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005c5c:	f241 017f 	movw	r1, #4223	@ 0x107f
 8005c60:	4889      	ldr	r0, [pc, #548]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005c62:	f7fc ffb3 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005c76:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8005c7a:	4883      	ldr	r0, [pc, #524]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005c7c:	f7fc ffa6 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_TIM_PWM_ConfigChannel+0x86>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d004      	beq.n	8005c9a <HAL_TIM_PWM_ConfigChannel+0x86>
 8005c90:	f241 0181 	movw	r1, #4225	@ 0x1081
 8005c94:	487c      	ldr	r0, [pc, #496]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005c96:	f7fc ff99 	bl	8002bcc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_PWM_ConfigChannel+0x94>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e147      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x324>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	f200 8138 	bhi.w	8005f28 <HAL_TIM_PWM_ConfigChannel+0x314>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005f29 	.word	0x08005f29
 8005cc8:	08005f29 	.word	0x08005f29
 8005ccc:	08005f29 	.word	0x08005f29
 8005cd0:	08005d7b 	.word	0x08005d7b
 8005cd4:	08005f29 	.word	0x08005f29
 8005cd8:	08005f29 	.word	0x08005f29
 8005cdc:	08005f29 	.word	0x08005f29
 8005ce0:	08005e03 	.word	0x08005e03
 8005ce4:	08005f29 	.word	0x08005f29
 8005ce8:	08005f29 	.word	0x08005f29
 8005cec:	08005f29 	.word	0x08005f29
 8005cf0:	08005ea1 	.word	0x08005ea1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a64      	ldr	r2, [pc, #400]	@ (8005e8c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a63      	ldr	r2, [pc, #396]	@ (8005e90 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d10:	d013      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a5f      	ldr	r2, [pc, #380]	@ (8005e94 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5d      	ldr	r2, [pc, #372]	@ (8005e98 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8005e9c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005d30:	f241 018b 	movw	r1, #4235	@ 0x108b
 8005d34:	4854      	ldr	r0, [pc, #336]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005d36:	f7fc ff49 	bl	8002bcc <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fcbd 	bl	80066c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0208 	orr.w	r2, r2, #8
 8005d54:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0204 	bic.w	r2, r2, #4
 8005d64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6999      	ldr	r1, [r3, #24]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
      break;
 8005d78:	e0d9      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a43      	ldr	r2, [pc, #268]	@ (8005e8c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d01d      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a41      	ldr	r2, [pc, #260]	@ (8005e90 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d96:	d013      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e94 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3c      	ldr	r2, [pc, #240]	@ (8005e98 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	@ (8005e9c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005db6:	f241 019c 	movw	r1, #4252	@ 0x109c
 8005dba:	4833      	ldr	r0, [pc, #204]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005dbc:	f7fc ff06 	bl	8002bcc <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fd14 	bl	80067f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	619a      	str	r2, [r3, #24]
      break;
 8005e00:	e095      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	@ (8005e8c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d01d      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d018      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1e:	d013      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e98 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d009      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005e3e:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 8005e42:	4811      	ldr	r0, [pc, #68]	@ (8005e88 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005e44:	f7fc fec2 	bl	8002bcc <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fd6e 	bl	8006930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0208 	orr.w	r2, r2, #8
 8005e62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69da      	ldr	r2, [r3, #28]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0204 	bic.w	r2, r2, #4
 8005e72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69d9      	ldr	r1, [r3, #28]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	61da      	str	r2, [r3, #28]
      break;
 8005e86:	e052      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005e88:	0800bcf0 	.word	0x0800bcf0
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a26      	ldr	r2, [pc, #152]	@ (8005f40 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a25      	ldr	r2, [pc, #148]	@ (8005f44 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ebc:	d013      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a21      	ldr	r2, [pc, #132]	@ (8005f48 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f4c <HAL_TIM_PWM_ConfigChannel+0x338>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f50 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005edc:	f241 01be 	movw	r1, #4286	@ 0x10be
 8005ee0:	481c      	ldr	r0, [pc, #112]	@ (8005f54 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005ee2:	f7fc fe73 	bl	8002bcc <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fdbd 	bl	8006a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	021a      	lsls	r2, r3, #8
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	61da      	str	r2, [r3, #28]
      break;
 8005f26:	e002      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	0800bcf0 	.word	0x0800bcf0

08005f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIM_ConfigClockSource+0x1c>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e2f6      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x60a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d029      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b70      	cmp	r3, #112	@ 0x70
 8005f94:	d025      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9e:	d020      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d01c      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b50      	cmp	r3, #80	@ 0x50
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b60      	cmp	r3, #96	@ 0x60
 8005fb6:	d014      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d00c      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d008      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b30      	cmp	r3, #48	@ 0x30
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8005fd8:	f241 41be 	movw	r1, #5310	@ 0x14be
 8005fdc:	487c      	ldr	r0, [pc, #496]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 8005fde:	f7fc fdf5 	bl	8002bcc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ff0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ff8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600a:	f000 80f1 	beq.w	80061f0 <HAL_TIM_ConfigClockSource+0x298>
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006012:	f200 8299 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601a:	d02d      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x120>
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006020:	f200 8292 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 8006024:	2b70      	cmp	r3, #112	@ 0x70
 8006026:	d05d      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0x18c>
 8006028:	2b70      	cmp	r3, #112	@ 0x70
 800602a:	f200 828d 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 800602e:	2b60      	cmp	r3, #96	@ 0x60
 8006030:	f000 81a5 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x426>
 8006034:	2b60      	cmp	r3, #96	@ 0x60
 8006036:	f200 8287 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 800603a:	2b50      	cmp	r3, #80	@ 0x50
 800603c:	f000 8149 	beq.w	80062d2 <HAL_TIM_ConfigClockSource+0x37a>
 8006040:	2b50      	cmp	r3, #80	@ 0x50
 8006042:	f200 8281 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	f000 81fc 	beq.w	8006444 <HAL_TIM_ConfigClockSource+0x4ec>
 800604c:	2b40      	cmp	r3, #64	@ 0x40
 800604e:	f200 827b 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 8006052:	2b30      	cmp	r3, #48	@ 0x30
 8006054:	f000 824c 	beq.w	80064f0 <HAL_TIM_ConfigClockSource+0x598>
 8006058:	2b30      	cmp	r3, #48	@ 0x30
 800605a:	f200 8275 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 800605e:	2b20      	cmp	r3, #32
 8006060:	f000 8246 	beq.w	80064f0 <HAL_TIM_ConfigClockSource+0x598>
 8006064:	2b20      	cmp	r3, #32
 8006066:	f200 826f 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8240 	beq.w	80064f0 <HAL_TIM_ConfigClockSource+0x598>
 8006070:	2b10      	cmp	r3, #16
 8006072:	f000 823d 	beq.w	80064f0 <HAL_TIM_ConfigClockSource+0x598>
 8006076:	e267      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a55      	ldr	r2, [pc, #340]	@ (80061d4 <HAL_TIM_ConfigClockSource+0x27c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	f000 8265 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a53      	ldr	r2, [pc, #332]	@ (80061d8 <HAL_TIM_ConfigClockSource+0x280>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f000 825f 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006098:	f000 8259 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a4e      	ldr	r2, [pc, #312]	@ (80061dc <HAL_TIM_ConfigClockSource+0x284>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f000 8253 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4c      	ldr	r2, [pc, #304]	@ (80061e0 <HAL_TIM_ConfigClockSource+0x288>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f000 824d 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a4a      	ldr	r2, [pc, #296]	@ (80061e4 <HAL_TIM_ConfigClockSource+0x28c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f000 8247 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a48      	ldr	r2, [pc, #288]	@ (80061e8 <HAL_TIM_ConfigClockSource+0x290>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f000 8241 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a46      	ldr	r2, [pc, #280]	@ (80061ec <HAL_TIM_ConfigClockSource+0x294>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f000 823b 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x5f6>
 80060d8:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 80060dc:	483c      	ldr	r0, [pc, #240]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 80060de:	f7fc fd75 	bl	8002bcc <assert_failed>
      break;
 80060e2:	e234      	b.n	800654e <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3a      	ldr	r2, [pc, #232]	@ (80061d4 <HAL_TIM_ConfigClockSource+0x27c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a39      	ldr	r2, [pc, #228]	@ (80061d8 <HAL_TIM_ConfigClockSource+0x280>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d013      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a35      	ldr	r2, [pc, #212]	@ (80061dc <HAL_TIM_ConfigClockSource+0x284>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a33      	ldr	r2, [pc, #204]	@ (80061e0 <HAL_TIM_ConfigClockSource+0x288>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a32      	ldr	r2, [pc, #200]	@ (80061e4 <HAL_TIM_ConfigClockSource+0x28c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x1d2>
 8006120:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8006124:	482a      	ldr	r0, [pc, #168]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 8006126:	f7fc fd51 	bl	8002bcc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d013      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x202>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d00e      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x202>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006144:	d009      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x202>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800614e:	d004      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x202>
 8006150:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8006154:	481e      	ldr	r0, [pc, #120]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 8006156:	f7fc fd39 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006162:	d014      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x236>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d010      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x236>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x236>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d008      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x236>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b0a      	cmp	r3, #10
 8006182:	d004      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x236>
 8006184:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8006188:	4811      	ldr	r0, [pc, #68]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 800618a:	f7fc fd1f 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d904      	bls.n	80061a0 <HAL_TIM_ConfigClockSource+0x248>
 8006196:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 800619a:	480d      	ldr	r0, [pc, #52]	@ (80061d0 <HAL_TIM_ConfigClockSource+0x278>)
 800619c:	f7fc fd16 	bl	8002bcc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b0:	f000 fd37 	bl	8006c22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
      break;
 80061cc:	e1c0      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
 80061ce:	bf00      	nop
 80061d0:	0800bcf0 	.word	0x0800bcf0
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40013400 	.word	0x40013400
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40001000 	.word	0x40001000
 80061ec:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a8d      	ldr	r2, [pc, #564]	@ (800642c <HAL_TIM_ConfigClockSource+0x4d4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01d      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a8c      	ldr	r2, [pc, #560]	@ (8006430 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d013      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a88      	ldr	r2, [pc, #544]	@ (8006434 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a86      	ldr	r2, [pc, #536]	@ (8006438 <HAL_TIM_ConfigClockSource+0x4e0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a85      	ldr	r2, [pc, #532]	@ (800643c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x2de>
 800622c:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8006230:	4883      	ldr	r0, [pc, #524]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006232:	f7fc fccb 	bl	8002bcc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x30e>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006246:	d00e      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x30e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d009      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x30e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800625a:	d004      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x30e>
 800625c:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8006260:	4877      	ldr	r0, [pc, #476]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006262:	f7fc fcb3 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800626e:	d014      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x342>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x342>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x342>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d008      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x342>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b0a      	cmp	r3, #10
 800628e:	d004      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x342>
 8006290:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8006294:	486a      	ldr	r0, [pc, #424]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006296:	f7fc fc99 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d904      	bls.n	80062ac <HAL_TIM_ConfigClockSource+0x354>
 80062a2:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 80062a6:	4866      	ldr	r0, [pc, #408]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 80062a8:	f7fc fc90 	bl	8002bcc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	f000 fcb1 	bl	8006c22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ce:	609a      	str	r2, [r3, #8]
      break;
 80062d0:	e13e      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a55      	ldr	r2, [pc, #340]	@ (800642c <HAL_TIM_ConfigClockSource+0x4d4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01d      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a53      	ldr	r2, [pc, #332]	@ (8006430 <HAL_TIM_ConfigClockSource+0x4d8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ee:	d013      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006434 <HAL_TIM_ConfigClockSource+0x4dc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4e      	ldr	r2, [pc, #312]	@ (8006438 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4c      	ldr	r2, [pc, #304]	@ (800643c <HAL_TIM_ConfigClockSource+0x4e4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x3c0>
 800630e:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8006312:	484b      	ldr	r0, [pc, #300]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006314:	f7fc fc5a 	bl	8002bcc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006320:	d014      	beq.n	800634c <HAL_TIM_ConfigClockSource+0x3f4>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <HAL_TIM_ConfigClockSource+0x3f4>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_ConfigClockSource+0x3f4>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d008      	beq.n	800634c <HAL_TIM_ConfigClockSource+0x3f4>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b0a      	cmp	r3, #10
 8006340:	d004      	beq.n	800634c <HAL_TIM_ConfigClockSource+0x3f4>
 8006342:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8006346:	483e      	ldr	r0, [pc, #248]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006348:	f7fc fc40 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d904      	bls.n	800635e <HAL_TIM_ConfigClockSource+0x406>
 8006354:	f241 5101 	movw	r1, #5377	@ 0x1501
 8006358:	4839      	ldr	r0, [pc, #228]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 800635a:	f7fc fc37 	bl	8002bcc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fbe2 	bl	8006b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2150      	movs	r1, #80	@ 0x50
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fc39 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 800637c:	e0e8      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2a      	ldr	r2, [pc, #168]	@ (800642c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01d      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <HAL_TIM_ConfigClockSource+0x4d8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d018      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d013      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a24      	ldr	r2, [pc, #144]	@ (8006434 <HAL_TIM_ConfigClockSource+0x4dc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a23      	ldr	r2, [pc, #140]	@ (8006438 <HAL_TIM_ConfigClockSource+0x4e0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a21      	ldr	r2, [pc, #132]	@ (800643c <HAL_TIM_ConfigClockSource+0x4e4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x46c>
 80063ba:	f241 510d 	movw	r1, #5389	@ 0x150d
 80063be:	4820      	ldr	r0, [pc, #128]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 80063c0:	f7fc fc04 	bl	8002bcc <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	d014      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x4a0>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x4a0>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x4a0>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d008      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x4a0>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b0a      	cmp	r3, #10
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x4a0>
 80063ee:	f241 5110 	movw	r1, #5392	@ 0x1510
 80063f2:	4813      	ldr	r0, [pc, #76]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 80063f4:	f7fc fbea 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b0f      	cmp	r3, #15
 80063fe:	d904      	bls.n	800640a <HAL_TIM_ConfigClockSource+0x4b2>
 8006400:	f241 5111 	movw	r1, #5393	@ 0x1511
 8006404:	480e      	ldr	r0, [pc, #56]	@ (8006440 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006406:	f7fc fbe1 	bl	8002bcc <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fbba 	bl	8006b90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	@ 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fbe3 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 8006428:	e092      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	0800bcf0 	.word	0x0800bcf0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a48      	ldr	r2, [pc, #288]	@ (800656c <HAL_TIM_ConfigClockSource+0x614>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a47      	ldr	r2, [pc, #284]	@ (8006570 <HAL_TIM_ConfigClockSource+0x618>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006460:	d013      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a43      	ldr	r2, [pc, #268]	@ (8006574 <HAL_TIM_ConfigClockSource+0x61c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a41      	ldr	r2, [pc, #260]	@ (8006578 <HAL_TIM_ConfigClockSource+0x620>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a40      	ldr	r2, [pc, #256]	@ (800657c <HAL_TIM_ConfigClockSource+0x624>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x532>
 8006480:	f241 511d 	movw	r1, #5405	@ 0x151d
 8006484:	483e      	ldr	r0, [pc, #248]	@ (8006580 <HAL_TIM_ConfigClockSource+0x628>)
 8006486:	f7fc fba1 	bl	8002bcc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006492:	d014      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x566>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x566>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x566>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d008      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x566>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b0a      	cmp	r3, #10
 80064b2:	d004      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x566>
 80064b4:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 80064b8:	4831      	ldr	r0, [pc, #196]	@ (8006580 <HAL_TIM_ConfigClockSource+0x628>)
 80064ba:	f7fc fb87 	bl	8002bcc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d904      	bls.n	80064d0 <HAL_TIM_ConfigClockSource+0x578>
 80064c6:	f241 5121 	movw	r1, #5409	@ 0x1521
 80064ca:	482d      	ldr	r0, [pc, #180]	@ (8006580 <HAL_TIM_ConfigClockSource+0x628>)
 80064cc:	f7fc fb7e 	bl	8002bcc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064dc:	461a      	mov	r2, r3
 80064de:	f000 fb29 	bl	8006b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2140      	movs	r1, #64	@ 0x40
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fb80 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 80064ee:	e02f      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <HAL_TIM_ConfigClockSource+0x614>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <HAL_TIM_ConfigClockSource+0x618>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650c:	d013      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <HAL_TIM_ConfigClockSource+0x61c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a16      	ldr	r2, [pc, #88]	@ (8006578 <HAL_TIM_ConfigClockSource+0x620>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a15      	ldr	r2, [pc, #84]	@ (800657c <HAL_TIM_ConfigClockSource+0x624>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x5de>
 800652c:	f241 5130 	movw	r1, #5424	@ 0x1530
 8006530:	4813      	ldr	r0, [pc, #76]	@ (8006580 <HAL_TIM_ConfigClockSource+0x628>)
 8006532:	f7fc fb4b 	bl	8002bcc <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f000 fb54 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 8006546:	e003      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	e000      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 800654e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	0800bcf0 	.word	0x0800bcf0

08006584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr

080065cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a33      	ldr	r2, [pc, #204]	@ (80066ac <TIM_Base_SetConfig+0xe0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a32      	ldr	r2, [pc, #200]	@ (80066b0 <TIM_Base_SetConfig+0xe4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f2:	d00b      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a2f      	ldr	r2, [pc, #188]	@ (80066b4 <TIM_Base_SetConfig+0xe8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a2e      	ldr	r2, [pc, #184]	@ (80066b8 <TIM_Base_SetConfig+0xec>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a2d      	ldr	r2, [pc, #180]	@ (80066bc <TIM_Base_SetConfig+0xf0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a22      	ldr	r2, [pc, #136]	@ (80066ac <TIM_Base_SetConfig+0xe0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <TIM_Base_SetConfig+0x82>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a21      	ldr	r2, [pc, #132]	@ (80066b0 <TIM_Base_SetConfig+0xe4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_Base_SetConfig+0x82>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d00b      	beq.n	800664e <TIM_Base_SetConfig+0x82>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a1e      	ldr	r2, [pc, #120]	@ (80066b4 <TIM_Base_SetConfig+0xe8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_Base_SetConfig+0x82>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a1d      	ldr	r2, [pc, #116]	@ (80066b8 <TIM_Base_SetConfig+0xec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_Base_SetConfig+0x82>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a1c      	ldr	r2, [pc, #112]	@ (80066bc <TIM_Base_SetConfig+0xf0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d108      	bne.n	8006660 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <TIM_Base_SetConfig+0xe0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_Base_SetConfig+0xc8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a08      	ldr	r2, [pc, #32]	@ (80066b0 <TIM_Base_SetConfig+0xe4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d103      	bne.n	800669c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	615a      	str	r2, [r3, #20]
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00

080066c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f023 0201 	bic.w	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 0302 	bic.w	r3, r3, #2
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a34      	ldr	r2, [pc, #208]	@ (80067e8 <TIM_OC1_SetConfig+0x128>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC1_SetConfig+0x64>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a33      	ldr	r2, [pc, #204]	@ (80067ec <TIM_OC1_SetConfig+0x12c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d119      	bne.n	8006758 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <TIM_OC1_SetConfig+0x7e>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d004      	beq.n	800673e <TIM_OC1_SetConfig+0x7e>
 8006734:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8006738:	482d      	ldr	r0, [pc, #180]	@ (80067f0 <TIM_OC1_SetConfig+0x130>)
 800673a:	f7fc fa47 	bl	8002bcc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f023 0308 	bic.w	r3, r3, #8
 8006744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0304 	bic.w	r3, r3, #4
 8006756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a23      	ldr	r2, [pc, #140]	@ (80067e8 <TIM_OC1_SetConfig+0x128>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_OC1_SetConfig+0xa8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <TIM_OC1_SetConfig+0x12c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d12d      	bne.n	80067c4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006770:	d008      	beq.n	8006784 <TIM_OC1_SetConfig+0xc4>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <TIM_OC1_SetConfig+0xc4>
 800677a:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 800677e:	481c      	ldr	r0, [pc, #112]	@ (80067f0 <TIM_OC1_SetConfig+0x130>)
 8006780:	f7fc fa24 	bl	8002bcc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678c:	d008      	beq.n	80067a0 <TIM_OC1_SetConfig+0xe0>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <TIM_OC1_SetConfig+0xe0>
 8006796:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800679a:	4815      	ldr	r0, [pc, #84]	@ (80067f0 <TIM_OC1_SetConfig+0x130>)
 800679c:	f7fc fa16 	bl	8002bcc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	0800bcf0 	.word	0x0800bcf0

080067f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0210 	bic.w	r2, r3, #16
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0320 	bic.w	r3, r3, #32
 800683e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a35      	ldr	r2, [pc, #212]	@ (8006924 <TIM_OC2_SetConfig+0x130>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC2_SetConfig+0x68>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a34      	ldr	r2, [pc, #208]	@ (8006928 <TIM_OC2_SetConfig+0x134>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d11a      	bne.n	8006892 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <TIM_OC2_SetConfig+0x82>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d004      	beq.n	8006876 <TIM_OC2_SetConfig+0x82>
 800686c:	f641 3110 	movw	r1, #6928	@ 0x1b10
 8006870:	482e      	ldr	r0, [pc, #184]	@ (800692c <TIM_OC2_SetConfig+0x138>)
 8006872:	f7fc f9ab 	bl	8002bcc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006890:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a23      	ldr	r2, [pc, #140]	@ (8006924 <TIM_OC2_SetConfig+0x130>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_OC2_SetConfig+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a22      	ldr	r2, [pc, #136]	@ (8006928 <TIM_OC2_SetConfig+0x134>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d12f      	bne.n	8006902 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068aa:	d008      	beq.n	80068be <TIM_OC2_SetConfig+0xca>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <TIM_OC2_SetConfig+0xca>
 80068b4:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 80068b8:	481c      	ldr	r0, [pc, #112]	@ (800692c <TIM_OC2_SetConfig+0x138>)
 80068ba:	f7fc f987 	bl	8002bcc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d008      	beq.n	80068da <TIM_OC2_SetConfig+0xe6>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <TIM_OC2_SetConfig+0xe6>
 80068d0:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 80068d4:	4815      	ldr	r0, [pc, #84]	@ (800692c <TIM_OC2_SetConfig+0x138>)
 80068d6:	f7fc f979 	bl	8002bcc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40013400 	.word	0x40013400
 800692c:	0800bcf0 	.word	0x0800bcf0

08006930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a35      	ldr	r2, [pc, #212]	@ (8006a60 <TIM_OC3_SetConfig+0x130>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC3_SetConfig+0x66>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a34      	ldr	r2, [pc, #208]	@ (8006a64 <TIM_OC3_SetConfig+0x134>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d11a      	bne.n	80069cc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <TIM_OC3_SetConfig+0x80>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d004      	beq.n	80069b0 <TIM_OC3_SetConfig+0x80>
 80069a6:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 80069aa:	482f      	ldr	r0, [pc, #188]	@ (8006a68 <TIM_OC3_SetConfig+0x138>)
 80069ac:	f7fc f90e 	bl	8002bcc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a24      	ldr	r2, [pc, #144]	@ (8006a60 <TIM_OC3_SetConfig+0x130>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC3_SetConfig+0xac>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a23      	ldr	r2, [pc, #140]	@ (8006a64 <TIM_OC3_SetConfig+0x134>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d12f      	bne.n	8006a3c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e4:	d008      	beq.n	80069f8 <TIM_OC3_SetConfig+0xc8>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <TIM_OC3_SetConfig+0xc8>
 80069ee:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80069f2:	481d      	ldr	r0, [pc, #116]	@ (8006a68 <TIM_OC3_SetConfig+0x138>)
 80069f4:	f7fc f8ea 	bl	8002bcc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a00:	d008      	beq.n	8006a14 <TIM_OC3_SetConfig+0xe4>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <TIM_OC3_SetConfig+0xe4>
 8006a0a:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 8006a0e:	4816      	ldr	r0, [pc, #88]	@ (8006a68 <TIM_OC3_SetConfig+0x138>)
 8006a10:	f7fc f8dc 	bl	8002bcc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	0800bcf0 	.word	0x0800bcf0

08006a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	@ (8006b28 <TIM_OC4_SetConfig+0xbc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC4_SetConfig+0x68>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a17      	ldr	r2, [pc, #92]	@ (8006b2c <TIM_OC4_SetConfig+0xc0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d117      	bne.n	8006b04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006adc:	d008      	beq.n	8006af0 <TIM_OC4_SetConfig+0x84>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <TIM_OC4_SetConfig+0x84>
 8006ae6:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 8006aea:	4811      	ldr	r0, [pc, #68]	@ (8006b30 <TIM_OC4_SetConfig+0xc4>)
 8006aec:	f7fc f86e 	bl	8002bcc <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	019b      	lsls	r3, r3, #6
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	0800bcf0 	.word	0x0800bcf0

08006b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 030a 	bic.w	r3, r3, #10
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0210 	bic.w	r2, r3, #16
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f043 0307 	orr.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	021a      	lsls	r2, r3, #8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	609a      	str	r2, [r3, #8]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a26      	ldr	r2, [pc, #152]	@ (8006d08 <TIM_CCxChannelCmd+0xa8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a25      	ldr	r2, [pc, #148]	@ (8006d0c <TIM_CCxChannelCmd+0xac>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d014      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d010      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <TIM_CCxChannelCmd+0xb0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00c      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	@ (8006d14 <TIM_CCxChannelCmd+0xb4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d008      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a20      	ldr	r2, [pc, #128]	@ (8006d18 <TIM_CCxChannelCmd+0xb8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <TIM_CCxChannelCmd+0x46>
 8006c9c:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8006ca0:	481e      	ldr	r0, [pc, #120]	@ (8006d1c <TIM_CCxChannelCmd+0xbc>)
 8006ca2:	f7fb ff93 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d010      	beq.n	8006cce <TIM_CCxChannelCmd+0x6e>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d00d      	beq.n	8006cce <TIM_CCxChannelCmd+0x6e>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d00a      	beq.n	8006cce <TIM_CCxChannelCmd+0x6e>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b0c      	cmp	r3, #12
 8006cbc:	d007      	beq.n	8006cce <TIM_CCxChannelCmd+0x6e>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b3c      	cmp	r3, #60	@ 0x3c
 8006cc2:	d004      	beq.n	8006cce <TIM_CCxChannelCmd+0x6e>
 8006cc4:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8006cc8:	4814      	ldr	r0, [pc, #80]	@ (8006d1c <TIM_CCxChannelCmd+0xbc>)
 8006cca:	f7fb ff7f 	bl	8002bcc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a1a      	ldr	r2, [r3, #32]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1a      	ldr	r2, [r3, #32]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	621a      	str	r2, [r3, #32]
}
 8006d00:	bf00      	nop
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	0800bcf0 	.word	0x0800bcf0

08006d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d027      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5a      	ldr	r2, [pc, #360]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d022      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d46:	d01d      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a56      	ldr	r2, [pc, #344]	@ (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a55      	ldr	r2, [pc, #340]	@ (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a53      	ldr	r2, [pc, #332]	@ (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a52      	ldr	r2, [pc, #328]	@ (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a50      	ldr	r2, [pc, #320]	@ (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006d7a:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8006d7e:	484f      	ldr	r0, [pc, #316]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006d80:	f7fb ff24 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d01c      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d018      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b30      	cmp	r3, #48	@ 0x30
 8006da2:	d014      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	d010      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b50      	cmp	r3, #80	@ 0x50
 8006db2:	d00c      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b60      	cmp	r3, #96	@ 0x60
 8006dba:	d008      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b70      	cmp	r3, #112	@ 0x70
 8006dc2:	d004      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006dc4:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8006dc8:	483c      	ldr	r0, [pc, #240]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006dca:	f7fb feff 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	d008      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dde:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8006de2:	4836      	ldr	r0, [pc, #216]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006de4:	f7fb fef2 	bl	8002bcc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e050      	b.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d018      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4c:	d00e      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	@ (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a12      	ldr	r2, [pc, #72]	@ (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10c      	bne.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40013400 	.word	0x40013400
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800
 8006eb0:	40000c00 	.word	0x40000c00
 8006eb4:	40001000 	.word	0x40001000
 8006eb8:	40001400 	.word	0x40001400
 8006ebc:	0800bd28 	.word	0x0800bd28

08006ec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800704c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d009      	beq.n	8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5c      	ldr	r2, [pc, #368]	@ (8007050 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006ee2:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8006ee6:	485b      	ldr	r0, [pc, #364]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006ee8:	f7fb fe70 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef4:	d008      	beq.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006efe:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 8006f02:	4854      	ldr	r0, [pc, #336]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f04:	f7fb fe62 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f10:	d008      	beq.n	8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006f1a:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8006f1e:	484d      	ldr	r0, [pc, #308]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f20:	f7fb fe54 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f34:	d00e      	beq.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f3e:	d009      	beq.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f48:	d004      	beq.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006f4a:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 8006f4e:	4841      	ldr	r0, [pc, #260]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f50:	f7fb fe3c 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2bff      	cmp	r3, #255	@ 0xff
 8006f5a:	d904      	bls.n	8006f66 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8006f5c:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8006f60:	483c      	ldr	r0, [pc, #240]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f62:	f7fb fe33 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	d008      	beq.n	8006f82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006f78:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8006f7c:	4835      	ldr	r0, [pc, #212]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f7e:	f7fb fe25 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f92:	d004      	beq.n	8006f9e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f94:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8006f98:	482e      	ldr	r0, [pc, #184]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006f9a:	f7fb fe17 	bl	8002bcc <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fa6:	d008      	beq.n	8006fba <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006fb0:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8006fb4:	4827      	ldr	r0, [pc, #156]	@ (8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006fb6:	f7fb fe09 	bl	8002bcc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e03d      	b.n	8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	0800bd28 	.word	0x0800bd28

08007058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr

0800706a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr

0800707c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e09f      	b.n	80071ce <HAL_UART_Init+0x152>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d02c      	beq.n	80070f0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a4f      	ldr	r2, [pc, #316]	@ (80071d8 <HAL_UART_Init+0x15c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00e      	beq.n	80070be <HAL_UART_Init+0x42>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a4d      	ldr	r2, [pc, #308]	@ (80071dc <HAL_UART_Init+0x160>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d009      	beq.n	80070be <HAL_UART_Init+0x42>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4c      	ldr	r2, [pc, #304]	@ (80071e0 <HAL_UART_Init+0x164>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d004      	beq.n	80070be <HAL_UART_Init+0x42>
 80070b4:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80070b8:	484a      	ldr	r0, [pc, #296]	@ (80071e4 <HAL_UART_Init+0x168>)
 80070ba:	f7fb fd87 	bl	8002bcc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d032      	beq.n	800712c <HAL_UART_Init+0xb0>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ce:	d02d      	beq.n	800712c <HAL_UART_Init+0xb0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d8:	d028      	beq.n	800712c <HAL_UART_Init+0xb0>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070e2:	d023      	beq.n	800712c <HAL_UART_Init+0xb0>
 80070e4:	f240 116f 	movw	r1, #367	@ 0x16f
 80070e8:	483e      	ldr	r0, [pc, #248]	@ (80071e4 <HAL_UART_Init+0x168>)
 80070ea:	f7fb fd6f 	bl	8002bcc <assert_failed>
 80070ee:	e01d      	b.n	800712c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a38      	ldr	r2, [pc, #224]	@ (80071d8 <HAL_UART_Init+0x15c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d018      	beq.n	800712c <HAL_UART_Init+0xb0>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a37      	ldr	r2, [pc, #220]	@ (80071dc <HAL_UART_Init+0x160>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <HAL_UART_Init+0xb0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a35      	ldr	r2, [pc, #212]	@ (80071e0 <HAL_UART_Init+0x164>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00e      	beq.n	800712c <HAL_UART_Init+0xb0>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a35      	ldr	r2, [pc, #212]	@ (80071e8 <HAL_UART_Init+0x16c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d009      	beq.n	800712c <HAL_UART_Init+0xb0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a33      	ldr	r2, [pc, #204]	@ (80071ec <HAL_UART_Init+0x170>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d004      	beq.n	800712c <HAL_UART_Init+0xb0>
 8007122:	f240 1173 	movw	r1, #371	@ 0x173
 8007126:	482f      	ldr	r0, [pc, #188]	@ (80071e4 <HAL_UART_Init+0x168>)
 8007128:	f7fb fd50 	bl	8002bcc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <HAL_UART_Init+0xcc>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713c:	d004      	beq.n	8007148 <HAL_UART_Init+0xcc>
 800713e:	f240 1175 	movw	r1, #373	@ 0x175
 8007142:	4828      	ldr	r0, [pc, #160]	@ (80071e4 <HAL_UART_Init+0x168>)
 8007144:	f7fb fd42 	bl	8002bcc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d106      	bne.n	8007162 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7fc fbcd 	bl	80038fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2224      	movs	r2, #36	@ 0x24
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007178:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f92a 	bl	80073d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800718e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800719e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40013800 	.word	0x40013800
 80071dc:	40004400 	.word	0x40004400
 80071e0:	40004800 	.word	0x40004800
 80071e4:	0800bd64 	.word	0x0800bd64
 80071e8:	40004c00 	.word	0x40004c00
 80071ec:	40005000 	.word	0x40005000

080071f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b20      	cmp	r3, #32
 800720e:	d16d      	bne.n	80072ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Transmit+0x2c>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e066      	b.n	80072ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2221      	movs	r2, #33	@ 0x21
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fc fc2f 	bl	8003a90 <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007248:	d108      	bne.n	800725c <HAL_UART_Transmit+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e003      	b.n	8007264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007264:	e02a      	b.n	80072bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	2180      	movs	r1, #128	@ 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f840 	bl	80072f6 <UART_WaitOnFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e036      	b.n	80072ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	3302      	adds	r3, #2
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e007      	b.n	80072ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1cf      	bne.n	8007266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2140      	movs	r1, #64	@ 0x40
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f810 	bl	80072f6 <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e006      	b.n	80072ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b090      	sub	sp, #64	@ 0x40
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007306:	e050      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d04c      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x30>
 8007316:	f7fc fbbb 	bl	8003a90 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007322:	429a      	cmp	r2, r3
 8007324:	d241      	bcs.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	330c      	adds	r3, #12
 8007344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007346:	637a      	str	r2, [r7, #52]	@ 0x34
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800734c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e5      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3314      	adds	r3, #20
 8007360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800737a:	623a      	str	r2, [r7, #32]
 800737c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	69f9      	ldr	r1, [r7, #28]
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	61bb      	str	r3, [r7, #24]
   return(result);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e00f      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d09f      	beq.n	8007308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3740      	adds	r7, #64	@ 0x40
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a5f      	ldr	r2, [pc, #380]	@ (8007560 <UART_SetConfig+0x18c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d904      	bls.n	80073f0 <UART_SetConfig+0x1c>
 80073e6:	f640 6166 	movw	r1, #3686	@ 0xe66
 80073ea:	485e      	ldr	r0, [pc, #376]	@ (8007564 <UART_SetConfig+0x190>)
 80073ec:	f7fb fbee 	bl	8002bcc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <UART_SetConfig+0x38>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007400:	d004      	beq.n	800740c <UART_SetConfig+0x38>
 8007402:	f640 6167 	movw	r1, #3687	@ 0xe67
 8007406:	4857      	ldr	r0, [pc, #348]	@ (8007564 <UART_SetConfig+0x190>)
 8007408:	f7fb fbe0 	bl	8002bcc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <UART_SetConfig+0x5e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741c:	d009      	beq.n	8007432 <UART_SetConfig+0x5e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007426:	d004      	beq.n	8007432 <UART_SetConfig+0x5e>
 8007428:	f640 6168 	movw	r1, #3688	@ 0xe68
 800742c:	484d      	ldr	r0, [pc, #308]	@ (8007564 <UART_SetConfig+0x190>)
 800742e:	f7fb fbcd 	bl	8002bcc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <UART_SetConfig+0x74>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <UART_SetConfig+0x7e>
 8007448:	f640 6169 	movw	r1, #3689	@ 0xe69
 800744c:	4845      	ldr	r0, [pc, #276]	@ (8007564 <UART_SetConfig+0x190>)
 800744e:	f7fb fbbd 	bl	8002bcc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007484:	f023 030c 	bic.w	r3, r3, #12
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	430b      	orrs	r3, r1
 8007490:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699a      	ldr	r2, [r3, #24]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007568 <UART_SetConfig+0x194>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d103      	bne.n	80074ba <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074b2:	f7fd fca7 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	e002      	b.n	80074c0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074ba:	f7fd fc8f 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 80074be:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009a      	lsls	r2, r3, #2
 80074ca:	441a      	add	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	4a25      	ldr	r2, [pc, #148]	@ (800756c <UART_SetConfig+0x198>)
 80074d8:	fba2 2303 	umull	r2, r3, r2, r3
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	0119      	lsls	r1, r3, #4
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009a      	lsls	r2, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80074f6:	4b1d      	ldr	r3, [pc, #116]	@ (800756c <UART_SetConfig+0x198>)
 80074f8:	fba3 0302 	umull	r0, r3, r3, r2
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	2064      	movs	r0, #100	@ 0x64
 8007500:	fb00 f303 	mul.w	r3, r0, r3
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	3332      	adds	r3, #50	@ 0x32
 800750a:	4a18      	ldr	r2, [pc, #96]	@ (800756c <UART_SetConfig+0x198>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007516:	4419      	add	r1, r3
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009a      	lsls	r2, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	fbb2 f2f3 	udiv	r2, r2, r3
 800752e:	4b0f      	ldr	r3, [pc, #60]	@ (800756c <UART_SetConfig+0x198>)
 8007530:	fba3 0302 	umull	r0, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2064      	movs	r0, #100	@ 0x64
 8007538:	fb00 f303 	mul.w	r3, r0, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	3332      	adds	r3, #50	@ 0x32
 8007542:	4a0a      	ldr	r2, [pc, #40]	@ (800756c <UART_SetConfig+0x198>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	440a      	add	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	0044aa20 	.word	0x0044aa20
 8007564:	0800bd64 	.word	0x0800bd64
 8007568:	40013800 	.word	0x40013800
 800756c:	51eb851f 	.word	0x51eb851f

08007570 <__cvt>:
 8007570:	2b00      	cmp	r3, #0
 8007572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007576:	461d      	mov	r5, r3
 8007578:	bfbb      	ittet	lt
 800757a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800757e:	461d      	movlt	r5, r3
 8007580:	2300      	movge	r3, #0
 8007582:	232d      	movlt	r3, #45	@ 0x2d
 8007584:	b088      	sub	sp, #32
 8007586:	4614      	mov	r4, r2
 8007588:	bfb8      	it	lt
 800758a:	4614      	movlt	r4, r2
 800758c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800758e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007590:	7013      	strb	r3, [r2, #0]
 8007592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007594:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007598:	f023 0820 	bic.w	r8, r3, #32
 800759c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075a0:	d005      	beq.n	80075ae <__cvt+0x3e>
 80075a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075a6:	d100      	bne.n	80075aa <__cvt+0x3a>
 80075a8:	3601      	adds	r6, #1
 80075aa:	2302      	movs	r3, #2
 80075ac:	e000      	b.n	80075b0 <__cvt+0x40>
 80075ae:	2303      	movs	r3, #3
 80075b0:	aa07      	add	r2, sp, #28
 80075b2:	9204      	str	r2, [sp, #16]
 80075b4:	aa06      	add	r2, sp, #24
 80075b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80075ba:	e9cd 3600 	strd	r3, r6, [sp]
 80075be:	4622      	mov	r2, r4
 80075c0:	462b      	mov	r3, r5
 80075c2:	f001 f881 	bl	80086c8 <_dtoa_r>
 80075c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075ca:	4607      	mov	r7, r0
 80075cc:	d119      	bne.n	8007602 <__cvt+0x92>
 80075ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075d0:	07db      	lsls	r3, r3, #31
 80075d2:	d50e      	bpl.n	80075f2 <__cvt+0x82>
 80075d4:	eb00 0906 	add.w	r9, r0, r6
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f9 fa4e 	bl	8000a80 <__aeabi_dcmpeq>
 80075e4:	b108      	cbz	r0, 80075ea <__cvt+0x7a>
 80075e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80075ea:	2230      	movs	r2, #48	@ 0x30
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	454b      	cmp	r3, r9
 80075f0:	d31e      	bcc.n	8007630 <__cvt+0xc0>
 80075f2:	4638      	mov	r0, r7
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80075f8:	1bdb      	subs	r3, r3, r7
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	b008      	add	sp, #32
 80075fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007602:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007606:	eb00 0906 	add.w	r9, r0, r6
 800760a:	d1e5      	bne.n	80075d8 <__cvt+0x68>
 800760c:	7803      	ldrb	r3, [r0, #0]
 800760e:	2b30      	cmp	r3, #48	@ 0x30
 8007610:	d10a      	bne.n	8007628 <__cvt+0xb8>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 fa31 	bl	8000a80 <__aeabi_dcmpeq>
 800761e:	b918      	cbnz	r0, 8007628 <__cvt+0xb8>
 8007620:	f1c6 0601 	rsb	r6, r6, #1
 8007624:	f8ca 6000 	str.w	r6, [sl]
 8007628:	f8da 3000 	ldr.w	r3, [sl]
 800762c:	4499      	add	r9, r3
 800762e:	e7d3      	b.n	80075d8 <__cvt+0x68>
 8007630:	1c59      	adds	r1, r3, #1
 8007632:	9107      	str	r1, [sp, #28]
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e7d9      	b.n	80075ec <__cvt+0x7c>

08007638 <__exponent>:
 8007638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763a:	2900      	cmp	r1, #0
 800763c:	bfb6      	itet	lt
 800763e:	232d      	movlt	r3, #45	@ 0x2d
 8007640:	232b      	movge	r3, #43	@ 0x2b
 8007642:	4249      	neglt	r1, r1
 8007644:	2909      	cmp	r1, #9
 8007646:	7002      	strb	r2, [r0, #0]
 8007648:	7043      	strb	r3, [r0, #1]
 800764a:	dd29      	ble.n	80076a0 <__exponent+0x68>
 800764c:	f10d 0307 	add.w	r3, sp, #7
 8007650:	461d      	mov	r5, r3
 8007652:	270a      	movs	r7, #10
 8007654:	fbb1 f6f7 	udiv	r6, r1, r7
 8007658:	461a      	mov	r2, r3
 800765a:	fb07 1416 	mls	r4, r7, r6, r1
 800765e:	3430      	adds	r4, #48	@ 0x30
 8007660:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007664:	460c      	mov	r4, r1
 8007666:	2c63      	cmp	r4, #99	@ 0x63
 8007668:	4631      	mov	r1, r6
 800766a:	f103 33ff 	add.w	r3, r3, #4294967295
 800766e:	dcf1      	bgt.n	8007654 <__exponent+0x1c>
 8007670:	3130      	adds	r1, #48	@ 0x30
 8007672:	1e94      	subs	r4, r2, #2
 8007674:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007678:	4623      	mov	r3, r4
 800767a:	1c41      	adds	r1, r0, #1
 800767c:	42ab      	cmp	r3, r5
 800767e:	d30a      	bcc.n	8007696 <__exponent+0x5e>
 8007680:	f10d 0309 	add.w	r3, sp, #9
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	42ac      	cmp	r4, r5
 8007688:	bf88      	it	hi
 800768a:	2300      	movhi	r3, #0
 800768c:	3302      	adds	r3, #2
 800768e:	4403      	add	r3, r0
 8007690:	1a18      	subs	r0, r3, r0
 8007692:	b003      	add	sp, #12
 8007694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007696:	f813 6b01 	ldrb.w	r6, [r3], #1
 800769a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800769e:	e7ed      	b.n	800767c <__exponent+0x44>
 80076a0:	2330      	movs	r3, #48	@ 0x30
 80076a2:	3130      	adds	r1, #48	@ 0x30
 80076a4:	7083      	strb	r3, [r0, #2]
 80076a6:	70c1      	strb	r1, [r0, #3]
 80076a8:	1d03      	adds	r3, r0, #4
 80076aa:	e7f1      	b.n	8007690 <__exponent+0x58>

080076ac <_printf_float>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	b091      	sub	sp, #68	@ 0x44
 80076b2:	460c      	mov	r4, r1
 80076b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80076b8:	4616      	mov	r6, r2
 80076ba:	461f      	mov	r7, r3
 80076bc:	4605      	mov	r5, r0
 80076be:	f000 fef1 	bl	80084a4 <_localeconv_r>
 80076c2:	6803      	ldr	r3, [r0, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	9308      	str	r3, [sp, #32]
 80076c8:	f7f8 fdae 	bl	8000228 <strlen>
 80076cc:	2300      	movs	r3, #0
 80076ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80076d0:	f8d8 3000 	ldr.w	r3, [r8]
 80076d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80076d6:	3307      	adds	r3, #7
 80076d8:	f023 0307 	bic.w	r3, r3, #7
 80076dc:	f103 0208 	add.w	r2, r3, #8
 80076e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076e4:	f8d4 b000 	ldr.w	fp, [r4]
 80076e8:	f8c8 2000 	str.w	r2, [r8]
 80076ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076f6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007702:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007706:	4b9c      	ldr	r3, [pc, #624]	@ (8007978 <_printf_float+0x2cc>)
 8007708:	f7f9 f9ec 	bl	8000ae4 <__aeabi_dcmpun>
 800770c:	bb70      	cbnz	r0, 800776c <_printf_float+0xc0>
 800770e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007712:	f04f 32ff 	mov.w	r2, #4294967295
 8007716:	4b98      	ldr	r3, [pc, #608]	@ (8007978 <_printf_float+0x2cc>)
 8007718:	f7f9 f9c6 	bl	8000aa8 <__aeabi_dcmple>
 800771c:	bb30      	cbnz	r0, 800776c <_printf_float+0xc0>
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	f7f9 f9b5 	bl	8000a94 <__aeabi_dcmplt>
 800772a:	b110      	cbz	r0, 8007732 <_printf_float+0x86>
 800772c:	232d      	movs	r3, #45	@ 0x2d
 800772e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007732:	4a92      	ldr	r2, [pc, #584]	@ (800797c <_printf_float+0x2d0>)
 8007734:	4b92      	ldr	r3, [pc, #584]	@ (8007980 <_printf_float+0x2d4>)
 8007736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800773a:	bf94      	ite	ls
 800773c:	4690      	movls	r8, r2
 800773e:	4698      	movhi	r8, r3
 8007740:	2303      	movs	r3, #3
 8007742:	f04f 0900 	mov.w	r9, #0
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	f02b 0304 	bic.w	r3, fp, #4
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	4633      	mov	r3, r6
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	9700      	str	r7, [sp, #0]
 8007756:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007758:	f000 f9d4 	bl	8007b04 <_printf_common>
 800775c:	3001      	adds	r0, #1
 800775e:	f040 8090 	bne.w	8007882 <_printf_float+0x1d6>
 8007762:	f04f 30ff 	mov.w	r0, #4294967295
 8007766:	b011      	add	sp, #68	@ 0x44
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	4642      	mov	r2, r8
 800776e:	464b      	mov	r3, r9
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f9 f9b6 	bl	8000ae4 <__aeabi_dcmpun>
 8007778:	b148      	cbz	r0, 800778e <_printf_float+0xe2>
 800777a:	464b      	mov	r3, r9
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfb8      	it	lt
 8007780:	232d      	movlt	r3, #45	@ 0x2d
 8007782:	4a80      	ldr	r2, [pc, #512]	@ (8007984 <_printf_float+0x2d8>)
 8007784:	bfb8      	it	lt
 8007786:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800778a:	4b7f      	ldr	r3, [pc, #508]	@ (8007988 <_printf_float+0x2dc>)
 800778c:	e7d3      	b.n	8007736 <_printf_float+0x8a>
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	d13f      	bne.n	8007818 <_printf_float+0x16c>
 8007798:	2306      	movs	r3, #6
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	9206      	str	r2, [sp, #24]
 80077a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80077a8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80077ac:	aa0d      	add	r2, sp, #52	@ 0x34
 80077ae:	9203      	str	r2, [sp, #12]
 80077b0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80077b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	4642      	mov	r2, r8
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4628      	mov	r0, r5
 80077c0:	464b      	mov	r3, r9
 80077c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80077c4:	f7ff fed4 	bl	8007570 <__cvt>
 80077c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ca:	4680      	mov	r8, r0
 80077cc:	2947      	cmp	r1, #71	@ 0x47
 80077ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80077d0:	d128      	bne.n	8007824 <_printf_float+0x178>
 80077d2:	1cc8      	adds	r0, r1, #3
 80077d4:	db02      	blt.n	80077dc <_printf_float+0x130>
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	4299      	cmp	r1, r3
 80077da:	dd40      	ble.n	800785e <_printf_float+0x1b2>
 80077dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80077e0:	fa5f fa8a 	uxtb.w	sl, sl
 80077e4:	4652      	mov	r2, sl
 80077e6:	3901      	subs	r1, #1
 80077e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80077ee:	f7ff ff23 	bl	8007638 <__exponent>
 80077f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077f4:	4681      	mov	r9, r0
 80077f6:	1813      	adds	r3, r2, r0
 80077f8:	2a01      	cmp	r2, #1
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	dc02      	bgt.n	8007804 <_printf_float+0x158>
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	07d2      	lsls	r2, r2, #31
 8007802:	d501      	bpl.n	8007808 <_printf_float+0x15c>
 8007804:	3301      	adds	r3, #1
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800780c:	2b00      	cmp	r3, #0
 800780e:	d09e      	beq.n	800774e <_printf_float+0xa2>
 8007810:	232d      	movs	r3, #45	@ 0x2d
 8007812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007816:	e79a      	b.n	800774e <_printf_float+0xa2>
 8007818:	2947      	cmp	r1, #71	@ 0x47
 800781a:	d1bf      	bne.n	800779c <_printf_float+0xf0>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1bd      	bne.n	800779c <_printf_float+0xf0>
 8007820:	2301      	movs	r3, #1
 8007822:	e7ba      	b.n	800779a <_printf_float+0xee>
 8007824:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007828:	d9dc      	bls.n	80077e4 <_printf_float+0x138>
 800782a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800782e:	d118      	bne.n	8007862 <_printf_float+0x1b6>
 8007830:	2900      	cmp	r1, #0
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	dd0b      	ble.n	800784e <_printf_float+0x1a2>
 8007836:	6121      	str	r1, [r4, #16]
 8007838:	b913      	cbnz	r3, 8007840 <_printf_float+0x194>
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	07d0      	lsls	r0, r2, #31
 800783e:	d502      	bpl.n	8007846 <_printf_float+0x19a>
 8007840:	3301      	adds	r3, #1
 8007842:	440b      	add	r3, r1
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	f04f 0900 	mov.w	r9, #0
 800784a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800784c:	e7dc      	b.n	8007808 <_printf_float+0x15c>
 800784e:	b913      	cbnz	r3, 8007856 <_printf_float+0x1aa>
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	07d2      	lsls	r2, r2, #31
 8007854:	d501      	bpl.n	800785a <_printf_float+0x1ae>
 8007856:	3302      	adds	r3, #2
 8007858:	e7f4      	b.n	8007844 <_printf_float+0x198>
 800785a:	2301      	movs	r3, #1
 800785c:	e7f2      	b.n	8007844 <_printf_float+0x198>
 800785e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007864:	4299      	cmp	r1, r3
 8007866:	db05      	blt.n	8007874 <_printf_float+0x1c8>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	6121      	str	r1, [r4, #16]
 800786c:	07d8      	lsls	r0, r3, #31
 800786e:	d5ea      	bpl.n	8007846 <_printf_float+0x19a>
 8007870:	1c4b      	adds	r3, r1, #1
 8007872:	e7e7      	b.n	8007844 <_printf_float+0x198>
 8007874:	2900      	cmp	r1, #0
 8007876:	bfcc      	ite	gt
 8007878:	2201      	movgt	r2, #1
 800787a:	f1c1 0202 	rsble	r2, r1, #2
 800787e:	4413      	add	r3, r2
 8007880:	e7e0      	b.n	8007844 <_printf_float+0x198>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	055a      	lsls	r2, r3, #21
 8007886:	d407      	bmi.n	8007898 <_printf_float+0x1ec>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	4642      	mov	r2, r8
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	d12b      	bne.n	80078ee <_printf_float+0x242>
 8007896:	e764      	b.n	8007762 <_printf_float+0xb6>
 8007898:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800789c:	f240 80dc 	bls.w	8007a58 <_printf_float+0x3ac>
 80078a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	f7f9 f8ea 	bl	8000a80 <__aeabi_dcmpeq>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d033      	beq.n	8007918 <_printf_float+0x26c>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	4a35      	ldr	r2, [pc, #212]	@ (800798c <_printf_float+0x2e0>)
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f af51 	beq.w	8007762 <_printf_float+0xb6>
 80078c0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80078c4:	4543      	cmp	r3, r8
 80078c6:	db02      	blt.n	80078ce <_printf_float+0x222>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	07d8      	lsls	r0, r3, #31
 80078cc:	d50f      	bpl.n	80078ee <_printf_float+0x242>
 80078ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f af42 	beq.w	8007762 <_printf_float+0xb6>
 80078de:	f04f 0900 	mov.w	r9, #0
 80078e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80078e6:	f104 0a1a 	add.w	sl, r4, #26
 80078ea:	45c8      	cmp	r8, r9
 80078ec:	dc09      	bgt.n	8007902 <_printf_float+0x256>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	079b      	lsls	r3, r3, #30
 80078f2:	f100 8102 	bmi.w	8007afa <_printf_float+0x44e>
 80078f6:	68e0      	ldr	r0, [r4, #12]
 80078f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078fa:	4298      	cmp	r0, r3
 80078fc:	bfb8      	it	lt
 80078fe:	4618      	movlt	r0, r3
 8007900:	e731      	b.n	8007766 <_printf_float+0xba>
 8007902:	2301      	movs	r3, #1
 8007904:	4652      	mov	r2, sl
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f af28 	beq.w	8007762 <_printf_float+0xb6>
 8007912:	f109 0901 	add.w	r9, r9, #1
 8007916:	e7e8      	b.n	80078ea <_printf_float+0x23e>
 8007918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800791a:	2b00      	cmp	r3, #0
 800791c:	dc38      	bgt.n	8007990 <_printf_float+0x2e4>
 800791e:	2301      	movs	r3, #1
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	4a19      	ldr	r2, [pc, #100]	@ (800798c <_printf_float+0x2e0>)
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f af1a 	beq.w	8007762 <_printf_float+0xb6>
 800792e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007932:	ea59 0303 	orrs.w	r3, r9, r3
 8007936:	d102      	bne.n	800793e <_printf_float+0x292>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	07d9      	lsls	r1, r3, #31
 800793c:	d5d7      	bpl.n	80078ee <_printf_float+0x242>
 800793e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	f43f af0a 	beq.w	8007762 <_printf_float+0xb6>
 800794e:	f04f 0a00 	mov.w	sl, #0
 8007952:	f104 0b1a 	add.w	fp, r4, #26
 8007956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007958:	425b      	negs	r3, r3
 800795a:	4553      	cmp	r3, sl
 800795c:	dc01      	bgt.n	8007962 <_printf_float+0x2b6>
 800795e:	464b      	mov	r3, r9
 8007960:	e793      	b.n	800788a <_printf_float+0x1de>
 8007962:	2301      	movs	r3, #1
 8007964:	465a      	mov	r2, fp
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	f43f aef8 	beq.w	8007762 <_printf_float+0xb6>
 8007972:	f10a 0a01 	add.w	sl, sl, #1
 8007976:	e7ee      	b.n	8007956 <_printf_float+0x2aa>
 8007978:	7fefffff 	.word	0x7fefffff
 800797c:	0800bdca 	.word	0x0800bdca
 8007980:	0800bdce 	.word	0x0800bdce
 8007984:	0800bdd2 	.word	0x0800bdd2
 8007988:	0800bdd6 	.word	0x0800bdd6
 800798c:	0800bdda 	.word	0x0800bdda
 8007990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007992:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007996:	4553      	cmp	r3, sl
 8007998:	bfa8      	it	ge
 800799a:	4653      	movge	r3, sl
 800799c:	2b00      	cmp	r3, #0
 800799e:	4699      	mov	r9, r3
 80079a0:	dc36      	bgt.n	8007a10 <_printf_float+0x364>
 80079a2:	f04f 0b00 	mov.w	fp, #0
 80079a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079aa:	f104 021a 	add.w	r2, r4, #26
 80079ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b2:	eba3 0309 	sub.w	r3, r3, r9
 80079b6:	455b      	cmp	r3, fp
 80079b8:	dc31      	bgt.n	8007a1e <_printf_float+0x372>
 80079ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079bc:	459a      	cmp	sl, r3
 80079be:	dc3a      	bgt.n	8007a36 <_printf_float+0x38a>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	07da      	lsls	r2, r3, #31
 80079c4:	d437      	bmi.n	8007a36 <_printf_float+0x38a>
 80079c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c8:	ebaa 0903 	sub.w	r9, sl, r3
 80079cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ce:	ebaa 0303 	sub.w	r3, sl, r3
 80079d2:	4599      	cmp	r9, r3
 80079d4:	bfa8      	it	ge
 80079d6:	4699      	movge	r9, r3
 80079d8:	f1b9 0f00 	cmp.w	r9, #0
 80079dc:	dc33      	bgt.n	8007a46 <_printf_float+0x39a>
 80079de:	f04f 0800 	mov.w	r8, #0
 80079e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079e6:	f104 0b1a 	add.w	fp, r4, #26
 80079ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079ec:	ebaa 0303 	sub.w	r3, sl, r3
 80079f0:	eba3 0309 	sub.w	r3, r3, r9
 80079f4:	4543      	cmp	r3, r8
 80079f6:	f77f af7a 	ble.w	80078ee <_printf_float+0x242>
 80079fa:	2301      	movs	r3, #1
 80079fc:	465a      	mov	r2, fp
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f aeac 	beq.w	8007762 <_printf_float+0xb6>
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	e7ec      	b.n	80079ea <_printf_float+0x33e>
 8007a10:	4642      	mov	r2, r8
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d1c2      	bne.n	80079a2 <_printf_float+0x2f6>
 8007a1c:	e6a1      	b.n	8007762 <_printf_float+0xb6>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f ae9a 	beq.w	8007762 <_printf_float+0xb6>
 8007a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a30:	f10b 0b01 	add.w	fp, fp, #1
 8007a34:	e7bb      	b.n	80079ae <_printf_float+0x302>
 8007a36:	4631      	mov	r1, r6
 8007a38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d1c0      	bne.n	80079c6 <_printf_float+0x31a>
 8007a44:	e68d      	b.n	8007762 <_printf_float+0xb6>
 8007a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	4442      	add	r2, r8
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	d1c3      	bne.n	80079de <_printf_float+0x332>
 8007a56:	e684      	b.n	8007762 <_printf_float+0xb6>
 8007a58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007a5c:	f1ba 0f01 	cmp.w	sl, #1
 8007a60:	dc01      	bgt.n	8007a66 <_printf_float+0x3ba>
 8007a62:	07db      	lsls	r3, r3, #31
 8007a64:	d536      	bpl.n	8007ad4 <_printf_float+0x428>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f ae76 	beq.w	8007762 <_printf_float+0xb6>
 8007a76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	f43f ae6e 	beq.w	8007762 <_printf_float+0xb6>
 8007a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a92:	f7f8 fff5 	bl	8000a80 <__aeabi_dcmpeq>
 8007a96:	b9c0      	cbnz	r0, 8007aca <_printf_float+0x41e>
 8007a98:	4653      	mov	r3, sl
 8007a9a:	f108 0201 	add.w	r2, r8, #1
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d10c      	bne.n	8007ac2 <_printf_float+0x416>
 8007aa8:	e65b      	b.n	8007762 <_printf_float+0xb6>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	465a      	mov	r2, fp
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	f43f ae54 	beq.w	8007762 <_printf_float+0xb6>
 8007aba:	f108 0801 	add.w	r8, r8, #1
 8007abe:	45d0      	cmp	r8, sl
 8007ac0:	dbf3      	blt.n	8007aaa <_printf_float+0x3fe>
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ac8:	e6e0      	b.n	800788c <_printf_float+0x1e0>
 8007aca:	f04f 0800 	mov.w	r8, #0
 8007ace:	f104 0b1a 	add.w	fp, r4, #26
 8007ad2:	e7f4      	b.n	8007abe <_printf_float+0x412>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	e7e1      	b.n	8007a9e <_printf_float+0x3f2>
 8007ada:	2301      	movs	r3, #1
 8007adc:	464a      	mov	r2, r9
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f ae3c 	beq.w	8007762 <_printf_float+0xb6>
 8007aea:	f108 0801 	add.w	r8, r8, #1
 8007aee:	68e3      	ldr	r3, [r4, #12]
 8007af0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007af2:	1a5b      	subs	r3, r3, r1
 8007af4:	4543      	cmp	r3, r8
 8007af6:	dcf0      	bgt.n	8007ada <_printf_float+0x42e>
 8007af8:	e6fd      	b.n	80078f6 <_printf_float+0x24a>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	f104 0919 	add.w	r9, r4, #25
 8007b02:	e7f4      	b.n	8007aee <_printf_float+0x442>

08007b04 <_printf_common>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	4616      	mov	r6, r2
 8007b0a:	4698      	mov	r8, r3
 8007b0c:	688a      	ldr	r2, [r1, #8]
 8007b0e:	690b      	ldr	r3, [r1, #16]
 8007b10:	4607      	mov	r7, r0
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bfb8      	it	lt
 8007b16:	4613      	movlt	r3, r2
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b24:	b10a      	cbz	r2, 8007b2a <_printf_common+0x26>
 8007b26:	3301      	adds	r3, #1
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	0699      	lsls	r1, r3, #26
 8007b2e:	bf42      	ittt	mi
 8007b30:	6833      	ldrmi	r3, [r6, #0]
 8007b32:	3302      	addmi	r3, #2
 8007b34:	6033      	strmi	r3, [r6, #0]
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	f015 0506 	ands.w	r5, r5, #6
 8007b3c:	d106      	bne.n	8007b4c <_printf_common+0x48>
 8007b3e:	f104 0a19 	add.w	sl, r4, #25
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	6832      	ldr	r2, [r6, #0]
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc2b      	bgt.n	8007ba4 <_printf_common+0xa0>
 8007b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	3b00      	subs	r3, #0
 8007b54:	bf18      	it	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	0692      	lsls	r2, r2, #26
 8007b5a:	d430      	bmi.n	8007bbe <_printf_common+0xba>
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b64:	47c8      	blx	r9
 8007b66:	3001      	adds	r0, #1
 8007b68:	d023      	beq.n	8007bb2 <_printf_common+0xae>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	f003 0306 	and.w	r3, r3, #6
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	bf14      	ite	ne
 8007b76:	2500      	movne	r5, #0
 8007b78:	6833      	ldreq	r3, [r6, #0]
 8007b7a:	f04f 0600 	mov.w	r6, #0
 8007b7e:	bf08      	it	eq
 8007b80:	68e5      	ldreq	r5, [r4, #12]
 8007b82:	f104 041a 	add.w	r4, r4, #26
 8007b86:	bf08      	it	eq
 8007b88:	1aed      	subeq	r5, r5, r3
 8007b8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b8e:	bf08      	it	eq
 8007b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfc4      	itt	gt
 8007b98:	1a9b      	subgt	r3, r3, r2
 8007b9a:	18ed      	addgt	r5, r5, r3
 8007b9c:	42b5      	cmp	r5, r6
 8007b9e:	d11a      	bne.n	8007bd6 <_printf_common+0xd2>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e008      	b.n	8007bb6 <_printf_common+0xb2>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c8      	blx	r9
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d103      	bne.n	8007bba <_printf_common+0xb6>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	3501      	adds	r5, #1
 8007bbc:	e7c1      	b.n	8007b42 <_printf_common+0x3e>
 8007bbe:	2030      	movs	r0, #48	@ 0x30
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bcc:	4422      	add	r2, r4
 8007bce:	3302      	adds	r3, #2
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bd4:	e7c2      	b.n	8007b5c <_printf_common+0x58>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4641      	mov	r1, r8
 8007bdc:	4638      	mov	r0, r7
 8007bde:	47c8      	blx	r9
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0e6      	beq.n	8007bb2 <_printf_common+0xae>
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7d9      	b.n	8007b9c <_printf_common+0x98>

08007be8 <_printf_i>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	7e0f      	ldrb	r7, [r1, #24]
 8007bee:	4691      	mov	r9, r2
 8007bf0:	2f78      	cmp	r7, #120	@ 0x78
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	469a      	mov	sl, r3
 8007bf8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bfe:	d807      	bhi.n	8007c10 <_printf_i+0x28>
 8007c00:	2f62      	cmp	r7, #98	@ 0x62
 8007c02:	d80a      	bhi.n	8007c1a <_printf_i+0x32>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	f000 80d3 	beq.w	8007db0 <_printf_i+0x1c8>
 8007c0a:	2f58      	cmp	r7, #88	@ 0x58
 8007c0c:	f000 80ba 	beq.w	8007d84 <_printf_i+0x19c>
 8007c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c18:	e03a      	b.n	8007c90 <_printf_i+0xa8>
 8007c1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c1e:	2b15      	cmp	r3, #21
 8007c20:	d8f6      	bhi.n	8007c10 <_printf_i+0x28>
 8007c22:	a101      	add	r1, pc, #4	@ (adr r1, 8007c28 <_printf_i+0x40>)
 8007c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c11 	.word	0x08007c11
 8007c34:	08007c11 	.word	0x08007c11
 8007c38:	08007c11 	.word	0x08007c11
 8007c3c:	08007c11 	.word	0x08007c11
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c11 	.word	0x08007c11
 8007c48:	08007c11 	.word	0x08007c11
 8007c4c:	08007c11 	.word	0x08007c11
 8007c50:	08007c11 	.word	0x08007c11
 8007c54:	08007d97 	.word	0x08007d97
 8007c58:	08007cbf 	.word	0x08007cbf
 8007c5c:	08007d51 	.word	0x08007d51
 8007c60:	08007c11 	.word	0x08007c11
 8007c64:	08007c11 	.word	0x08007c11
 8007c68:	08007db9 	.word	0x08007db9
 8007c6c:	08007c11 	.word	0x08007c11
 8007c70:	08007cbf 	.word	0x08007cbf
 8007c74:	08007c11 	.word	0x08007c11
 8007c78:	08007c11 	.word	0x08007c11
 8007c7c:	08007d59 	.word	0x08007d59
 8007c80:	6833      	ldr	r3, [r6, #0]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6032      	str	r2, [r6, #0]
 8007c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c90:	2301      	movs	r3, #1
 8007c92:	e09e      	b.n	8007dd2 <_printf_i+0x1ea>
 8007c94:	6833      	ldr	r3, [r6, #0]
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	1d19      	adds	r1, r3, #4
 8007c9a:	6031      	str	r1, [r6, #0]
 8007c9c:	0606      	lsls	r6, r0, #24
 8007c9e:	d501      	bpl.n	8007ca4 <_printf_i+0xbc>
 8007ca0:	681d      	ldr	r5, [r3, #0]
 8007ca2:	e003      	b.n	8007cac <_printf_i+0xc4>
 8007ca4:	0645      	lsls	r5, r0, #25
 8007ca6:	d5fb      	bpl.n	8007ca0 <_printf_i+0xb8>
 8007ca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	da03      	bge.n	8007cb8 <_printf_i+0xd0>
 8007cb0:	232d      	movs	r3, #45	@ 0x2d
 8007cb2:	426d      	negs	r5, r5
 8007cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cb8:	230a      	movs	r3, #10
 8007cba:	4859      	ldr	r0, [pc, #356]	@ (8007e20 <_printf_i+0x238>)
 8007cbc:	e011      	b.n	8007ce2 <_printf_i+0xfa>
 8007cbe:	6821      	ldr	r1, [r4, #0]
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	0608      	lsls	r0, r1, #24
 8007cc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cc8:	d402      	bmi.n	8007cd0 <_printf_i+0xe8>
 8007cca:	0649      	lsls	r1, r1, #25
 8007ccc:	bf48      	it	mi
 8007cce:	b2ad      	uxthmi	r5, r5
 8007cd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	bf14      	ite	ne
 8007cd6:	230a      	movne	r3, #10
 8007cd8:	2308      	moveq	r3, #8
 8007cda:	4851      	ldr	r0, [pc, #324]	@ (8007e20 <_printf_i+0x238>)
 8007cdc:	2100      	movs	r1, #0
 8007cde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ce2:	6866      	ldr	r6, [r4, #4]
 8007ce4:	2e00      	cmp	r6, #0
 8007ce6:	bfa8      	it	ge
 8007ce8:	6821      	ldrge	r1, [r4, #0]
 8007cea:	60a6      	str	r6, [r4, #8]
 8007cec:	bfa4      	itt	ge
 8007cee:	f021 0104 	bicge.w	r1, r1, #4
 8007cf2:	6021      	strge	r1, [r4, #0]
 8007cf4:	b90d      	cbnz	r5, 8007cfa <_printf_i+0x112>
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d04b      	beq.n	8007d92 <_printf_i+0x1aa>
 8007cfa:	4616      	mov	r6, r2
 8007cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d00:	fb03 5711 	mls	r7, r3, r1, r5
 8007d04:	5dc7      	ldrb	r7, [r0, r7]
 8007d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d0a:	462f      	mov	r7, r5
 8007d0c:	42bb      	cmp	r3, r7
 8007d0e:	460d      	mov	r5, r1
 8007d10:	d9f4      	bls.n	8007cfc <_printf_i+0x114>
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d10b      	bne.n	8007d2e <_printf_i+0x146>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	07df      	lsls	r7, r3, #31
 8007d1a:	d508      	bpl.n	8007d2e <_printf_i+0x146>
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	6861      	ldr	r1, [r4, #4]
 8007d20:	4299      	cmp	r1, r3
 8007d22:	bfde      	ittt	le
 8007d24:	2330      	movle	r3, #48	@ 0x30
 8007d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d2e:	1b92      	subs	r2, r2, r6
 8007d30:	6122      	str	r2, [r4, #16]
 8007d32:	464b      	mov	r3, r9
 8007d34:	4621      	mov	r1, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	f8cd a000 	str.w	sl, [sp]
 8007d3c:	aa03      	add	r2, sp, #12
 8007d3e:	f7ff fee1 	bl	8007b04 <_printf_common>
 8007d42:	3001      	adds	r0, #1
 8007d44:	d14a      	bne.n	8007ddc <_printf_i+0x1f4>
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	b004      	add	sp, #16
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	f043 0320 	orr.w	r3, r3, #32
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	2778      	movs	r7, #120	@ 0x78
 8007d5a:	4832      	ldr	r0, [pc, #200]	@ (8007e24 <_printf_i+0x23c>)
 8007d5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	061f      	lsls	r7, r3, #24
 8007d66:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d6a:	d402      	bmi.n	8007d72 <_printf_i+0x18a>
 8007d6c:	065f      	lsls	r7, r3, #25
 8007d6e:	bf48      	it	mi
 8007d70:	b2ad      	uxthmi	r5, r5
 8007d72:	6031      	str	r1, [r6, #0]
 8007d74:	07d9      	lsls	r1, r3, #31
 8007d76:	bf44      	itt	mi
 8007d78:	f043 0320 	orrmi.w	r3, r3, #32
 8007d7c:	6023      	strmi	r3, [r4, #0]
 8007d7e:	b11d      	cbz	r5, 8007d88 <_printf_i+0x1a0>
 8007d80:	2310      	movs	r3, #16
 8007d82:	e7ab      	b.n	8007cdc <_printf_i+0xf4>
 8007d84:	4826      	ldr	r0, [pc, #152]	@ (8007e20 <_printf_i+0x238>)
 8007d86:	e7e9      	b.n	8007d5c <_printf_i+0x174>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	f023 0320 	bic.w	r3, r3, #32
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	e7f6      	b.n	8007d80 <_printf_i+0x198>
 8007d92:	4616      	mov	r6, r2
 8007d94:	e7bd      	b.n	8007d12 <_printf_i+0x12a>
 8007d96:	6833      	ldr	r3, [r6, #0]
 8007d98:	6825      	ldr	r5, [r4, #0]
 8007d9a:	1d18      	adds	r0, r3, #4
 8007d9c:	6961      	ldr	r1, [r4, #20]
 8007d9e:	6030      	str	r0, [r6, #0]
 8007da0:	062e      	lsls	r6, r5, #24
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	d501      	bpl.n	8007daa <_printf_i+0x1c2>
 8007da6:	6019      	str	r1, [r3, #0]
 8007da8:	e002      	b.n	8007db0 <_printf_i+0x1c8>
 8007daa:	0668      	lsls	r0, r5, #25
 8007dac:	d5fb      	bpl.n	8007da6 <_printf_i+0x1be>
 8007dae:	8019      	strh	r1, [r3, #0]
 8007db0:	2300      	movs	r3, #0
 8007db2:	4616      	mov	r6, r2
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	e7bc      	b.n	8007d32 <_printf_i+0x14a>
 8007db8:	6833      	ldr	r3, [r6, #0]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	1d1a      	adds	r2, r3, #4
 8007dbe:	6032      	str	r2, [r6, #0]
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	6862      	ldr	r2, [r4, #4]
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 fbe4 	bl	8008592 <memchr>
 8007dca:	b108      	cbz	r0, 8007dd0 <_printf_i+0x1e8>
 8007dcc:	1b80      	subs	r0, r0, r6
 8007dce:	6060      	str	r0, [r4, #4]
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dda:	e7aa      	b.n	8007d32 <_printf_i+0x14a>
 8007ddc:	4632      	mov	r2, r6
 8007dde:	4649      	mov	r1, r9
 8007de0:	4640      	mov	r0, r8
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	47d0      	blx	sl
 8007de6:	3001      	adds	r0, #1
 8007de8:	d0ad      	beq.n	8007d46 <_printf_i+0x15e>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	079b      	lsls	r3, r3, #30
 8007dee:	d413      	bmi.n	8007e18 <_printf_i+0x230>
 8007df0:	68e0      	ldr	r0, [r4, #12]
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	4298      	cmp	r0, r3
 8007df6:	bfb8      	it	lt
 8007df8:	4618      	movlt	r0, r3
 8007dfa:	e7a6      	b.n	8007d4a <_printf_i+0x162>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4649      	mov	r1, r9
 8007e02:	4640      	mov	r0, r8
 8007e04:	47d0      	blx	sl
 8007e06:	3001      	adds	r0, #1
 8007e08:	d09d      	beq.n	8007d46 <_printf_i+0x15e>
 8007e0a:	3501      	adds	r5, #1
 8007e0c:	68e3      	ldr	r3, [r4, #12]
 8007e0e:	9903      	ldr	r1, [sp, #12]
 8007e10:	1a5b      	subs	r3, r3, r1
 8007e12:	42ab      	cmp	r3, r5
 8007e14:	dcf2      	bgt.n	8007dfc <_printf_i+0x214>
 8007e16:	e7eb      	b.n	8007df0 <_printf_i+0x208>
 8007e18:	2500      	movs	r5, #0
 8007e1a:	f104 0619 	add.w	r6, r4, #25
 8007e1e:	e7f5      	b.n	8007e0c <_printf_i+0x224>
 8007e20:	0800bddc 	.word	0x0800bddc
 8007e24:	0800bded 	.word	0x0800bded

08007e28 <_scanf_float>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	9303      	str	r3, [sp, #12]
 8007e30:	688b      	ldr	r3, [r1, #8]
 8007e32:	4617      	mov	r7, r2
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007e3a:	bf82      	ittt	hi
 8007e3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007e40:	eb03 0b05 	addhi.w	fp, r3, r5
 8007e44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007e48:	460a      	mov	r2, r1
 8007e4a:	f04f 0500 	mov.w	r5, #0
 8007e4e:	bf88      	it	hi
 8007e50:	608b      	strhi	r3, [r1, #8]
 8007e52:	680b      	ldr	r3, [r1, #0]
 8007e54:	4680      	mov	r8, r0
 8007e56:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007e5a:	f842 3b1c 	str.w	r3, [r2], #28
 8007e5e:	460c      	mov	r4, r1
 8007e60:	bf98      	it	ls
 8007e62:	f04f 0b00 	movls.w	fp, #0
 8007e66:	4616      	mov	r6, r2
 8007e68:	46aa      	mov	sl, r5
 8007e6a:	46a9      	mov	r9, r5
 8007e6c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e70:	9201      	str	r2, [sp, #4]
 8007e72:	9502      	str	r5, [sp, #8]
 8007e74:	68a2      	ldr	r2, [r4, #8]
 8007e76:	b152      	cbz	r2, 8007e8e <_scanf_float+0x66>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8007e7e:	d865      	bhi.n	8007f4c <_scanf_float+0x124>
 8007e80:	2b40      	cmp	r3, #64	@ 0x40
 8007e82:	d83d      	bhi.n	8007f00 <_scanf_float+0xd8>
 8007e84:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007e88:	b2c8      	uxtb	r0, r1
 8007e8a:	280e      	cmp	r0, #14
 8007e8c:	d93b      	bls.n	8007f06 <_scanf_float+0xde>
 8007e8e:	f1b9 0f00 	cmp.w	r9, #0
 8007e92:	d003      	beq.n	8007e9c <_scanf_float+0x74>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ea0:	f1ba 0f01 	cmp.w	sl, #1
 8007ea4:	f200 8118 	bhi.w	80080d8 <_scanf_float+0x2b0>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	429e      	cmp	r6, r3
 8007eac:	f200 8109 	bhi.w	80080c2 <_scanf_float+0x29a>
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	b007      	add	sp, #28
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ebc:	2a0d      	cmp	r2, #13
 8007ebe:	d8e6      	bhi.n	8007e8e <_scanf_float+0x66>
 8007ec0:	a101      	add	r1, pc, #4	@ (adr r1, 8007ec8 <_scanf_float+0xa0>)
 8007ec2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	0800800f 	.word	0x0800800f
 8007ecc:	08007e8f 	.word	0x08007e8f
 8007ed0:	08007e8f 	.word	0x08007e8f
 8007ed4:	08007e8f 	.word	0x08007e8f
 8007ed8:	0800806f 	.word	0x0800806f
 8007edc:	08008047 	.word	0x08008047
 8007ee0:	08007e8f 	.word	0x08007e8f
 8007ee4:	08007e8f 	.word	0x08007e8f
 8007ee8:	0800801d 	.word	0x0800801d
 8007eec:	08007e8f 	.word	0x08007e8f
 8007ef0:	08007e8f 	.word	0x08007e8f
 8007ef4:	08007e8f 	.word	0x08007e8f
 8007ef8:	08007e8f 	.word	0x08007e8f
 8007efc:	08007fd5 	.word	0x08007fd5
 8007f00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007f04:	e7da      	b.n	8007ebc <_scanf_float+0x94>
 8007f06:	290e      	cmp	r1, #14
 8007f08:	d8c1      	bhi.n	8007e8e <_scanf_float+0x66>
 8007f0a:	a001      	add	r0, pc, #4	@ (adr r0, 8007f10 <_scanf_float+0xe8>)
 8007f0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f10:	08007fc5 	.word	0x08007fc5
 8007f14:	08007e8f 	.word	0x08007e8f
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	0800805b 	.word	0x0800805b
 8007f20:	08007e8f 	.word	0x08007e8f
 8007f24:	08007f6d 	.word	0x08007f6d
 8007f28:	08007fab 	.word	0x08007fab
 8007f2c:	08007fab 	.word	0x08007fab
 8007f30:	08007fab 	.word	0x08007fab
 8007f34:	08007fab 	.word	0x08007fab
 8007f38:	08007fab 	.word	0x08007fab
 8007f3c:	08007fab 	.word	0x08007fab
 8007f40:	08007fab 	.word	0x08007fab
 8007f44:	08007fab 	.word	0x08007fab
 8007f48:	08007fab 	.word	0x08007fab
 8007f4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f4e:	d809      	bhi.n	8007f64 <_scanf_float+0x13c>
 8007f50:	2b60      	cmp	r3, #96	@ 0x60
 8007f52:	d8b1      	bhi.n	8007eb8 <_scanf_float+0x90>
 8007f54:	2b54      	cmp	r3, #84	@ 0x54
 8007f56:	d07b      	beq.n	8008050 <_scanf_float+0x228>
 8007f58:	2b59      	cmp	r3, #89	@ 0x59
 8007f5a:	d198      	bne.n	8007e8e <_scanf_float+0x66>
 8007f5c:	2d07      	cmp	r5, #7
 8007f5e:	d196      	bne.n	8007e8e <_scanf_float+0x66>
 8007f60:	2508      	movs	r5, #8
 8007f62:	e02c      	b.n	8007fbe <_scanf_float+0x196>
 8007f64:	2b74      	cmp	r3, #116	@ 0x74
 8007f66:	d073      	beq.n	8008050 <_scanf_float+0x228>
 8007f68:	2b79      	cmp	r3, #121	@ 0x79
 8007f6a:	e7f6      	b.n	8007f5a <_scanf_float+0x132>
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	05c8      	lsls	r0, r1, #23
 8007f70:	d51b      	bpl.n	8007faa <_scanf_float+0x182>
 8007f72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007f76:	6021      	str	r1, [r4, #0]
 8007f78:	f109 0901 	add.w	r9, r9, #1
 8007f7c:	f1bb 0f00 	cmp.w	fp, #0
 8007f80:	d003      	beq.n	8007f8a <_scanf_float+0x162>
 8007f82:	3201      	adds	r2, #1
 8007f84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f88:	60a2      	str	r2, [r4, #8]
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	3301      	adds	r3, #1
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	f340 8087 	ble.w	80080b0 <_scanf_float+0x288>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	e764      	b.n	8007e74 <_scanf_float+0x4c>
 8007faa:	eb1a 0105 	adds.w	r1, sl, r5
 8007fae:	f47f af6e 	bne.w	8007e8e <_scanf_float+0x66>
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	468a      	mov	sl, r1
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	f806 3b01 	strb.w	r3, [r6], #1
 8007fc2:	e7e2      	b.n	8007f8a <_scanf_float+0x162>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	0610      	lsls	r0, r2, #24
 8007fc8:	f57f af61 	bpl.w	8007e8e <_scanf_float+0x66>
 8007fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fd0:	6022      	str	r2, [r4, #0]
 8007fd2:	e7f4      	b.n	8007fbe <_scanf_float+0x196>
 8007fd4:	f1ba 0f00 	cmp.w	sl, #0
 8007fd8:	d10e      	bne.n	8007ff8 <_scanf_float+0x1d0>
 8007fda:	f1b9 0f00 	cmp.w	r9, #0
 8007fde:	d10e      	bne.n	8007ffe <_scanf_float+0x1d6>
 8007fe0:	6822      	ldr	r2, [r4, #0]
 8007fe2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007fe6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007fea:	d108      	bne.n	8007ffe <_scanf_float+0x1d6>
 8007fec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ff0:	f04f 0a01 	mov.w	sl, #1
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	e7e2      	b.n	8007fbe <_scanf_float+0x196>
 8007ff8:	f1ba 0f02 	cmp.w	sl, #2
 8007ffc:	d055      	beq.n	80080aa <_scanf_float+0x282>
 8007ffe:	2d01      	cmp	r5, #1
 8008000:	d002      	beq.n	8008008 <_scanf_float+0x1e0>
 8008002:	2d04      	cmp	r5, #4
 8008004:	f47f af43 	bne.w	8007e8e <_scanf_float+0x66>
 8008008:	3501      	adds	r5, #1
 800800a:	b2ed      	uxtb	r5, r5
 800800c:	e7d7      	b.n	8007fbe <_scanf_float+0x196>
 800800e:	f1ba 0f01 	cmp.w	sl, #1
 8008012:	f47f af3c 	bne.w	8007e8e <_scanf_float+0x66>
 8008016:	f04f 0a02 	mov.w	sl, #2
 800801a:	e7d0      	b.n	8007fbe <_scanf_float+0x196>
 800801c:	b97d      	cbnz	r5, 800803e <_scanf_float+0x216>
 800801e:	f1b9 0f00 	cmp.w	r9, #0
 8008022:	f47f af37 	bne.w	8007e94 <_scanf_float+0x6c>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800802c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008030:	f040 8103 	bne.w	800823a <_scanf_float+0x412>
 8008034:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008038:	2501      	movs	r5, #1
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	e7bf      	b.n	8007fbe <_scanf_float+0x196>
 800803e:	2d03      	cmp	r5, #3
 8008040:	d0e2      	beq.n	8008008 <_scanf_float+0x1e0>
 8008042:	2d05      	cmp	r5, #5
 8008044:	e7de      	b.n	8008004 <_scanf_float+0x1dc>
 8008046:	2d02      	cmp	r5, #2
 8008048:	f47f af21 	bne.w	8007e8e <_scanf_float+0x66>
 800804c:	2503      	movs	r5, #3
 800804e:	e7b6      	b.n	8007fbe <_scanf_float+0x196>
 8008050:	2d06      	cmp	r5, #6
 8008052:	f47f af1c 	bne.w	8007e8e <_scanf_float+0x66>
 8008056:	2507      	movs	r5, #7
 8008058:	e7b1      	b.n	8007fbe <_scanf_float+0x196>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	0591      	lsls	r1, r2, #22
 800805e:	f57f af16 	bpl.w	8007e8e <_scanf_float+0x66>
 8008062:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	f8cd 9008 	str.w	r9, [sp, #8]
 800806c:	e7a7      	b.n	8007fbe <_scanf_float+0x196>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008074:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008078:	d006      	beq.n	8008088 <_scanf_float+0x260>
 800807a:	0550      	lsls	r0, r2, #21
 800807c:	f57f af07 	bpl.w	8007e8e <_scanf_float+0x66>
 8008080:	f1b9 0f00 	cmp.w	r9, #0
 8008084:	f000 80d9 	beq.w	800823a <_scanf_float+0x412>
 8008088:	0591      	lsls	r1, r2, #22
 800808a:	bf58      	it	pl
 800808c:	9902      	ldrpl	r1, [sp, #8]
 800808e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008092:	bf58      	it	pl
 8008094:	eba9 0101 	subpl.w	r1, r9, r1
 8008098:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800809c:	f04f 0900 	mov.w	r9, #0
 80080a0:	bf58      	it	pl
 80080a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080a6:	6022      	str	r2, [r4, #0]
 80080a8:	e789      	b.n	8007fbe <_scanf_float+0x196>
 80080aa:	f04f 0a03 	mov.w	sl, #3
 80080ae:	e786      	b.n	8007fbe <_scanf_float+0x196>
 80080b0:	4639      	mov	r1, r7
 80080b2:	4640      	mov	r0, r8
 80080b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80080b8:	4798      	blx	r3
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f43f aeda 	beq.w	8007e74 <_scanf_float+0x4c>
 80080c0:	e6e5      	b.n	8007e8e <_scanf_float+0x66>
 80080c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080c6:	463a      	mov	r2, r7
 80080c8:	4640      	mov	r0, r8
 80080ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ce:	4798      	blx	r3
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	e6e7      	b.n	8007ea8 <_scanf_float+0x80>
 80080d8:	1e6b      	subs	r3, r5, #1
 80080da:	2b06      	cmp	r3, #6
 80080dc:	d824      	bhi.n	8008128 <_scanf_float+0x300>
 80080de:	2d02      	cmp	r5, #2
 80080e0:	d836      	bhi.n	8008150 <_scanf_float+0x328>
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	429e      	cmp	r6, r3
 80080e6:	f67f aee3 	bls.w	8007eb0 <_scanf_float+0x88>
 80080ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080ee:	463a      	mov	r2, r7
 80080f0:	4640      	mov	r0, r8
 80080f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080f6:	4798      	blx	r3
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	6123      	str	r3, [r4, #16]
 80080fe:	e7f0      	b.n	80080e2 <_scanf_float+0x2ba>
 8008100:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008104:	463a      	mov	r2, r7
 8008106:	4640      	mov	r0, r8
 8008108:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800810c:	4798      	blx	r3
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	3b01      	subs	r3, #1
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008118:	fa5f fa8a 	uxtb.w	sl, sl
 800811c:	f1ba 0f02 	cmp.w	sl, #2
 8008120:	d1ee      	bne.n	8008100 <_scanf_float+0x2d8>
 8008122:	3d03      	subs	r5, #3
 8008124:	b2ed      	uxtb	r5, r5
 8008126:	1b76      	subs	r6, r6, r5
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	05da      	lsls	r2, r3, #23
 800812c:	d530      	bpl.n	8008190 <_scanf_float+0x368>
 800812e:	055b      	lsls	r3, r3, #21
 8008130:	d511      	bpl.n	8008156 <_scanf_float+0x32e>
 8008132:	9b01      	ldr	r3, [sp, #4]
 8008134:	429e      	cmp	r6, r3
 8008136:	f67f aebb 	bls.w	8007eb0 <_scanf_float+0x88>
 800813a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800813e:	463a      	mov	r2, r7
 8008140:	4640      	mov	r0, r8
 8008142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008146:	4798      	blx	r3
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	3b01      	subs	r3, #1
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	e7f0      	b.n	8008132 <_scanf_float+0x30a>
 8008150:	46aa      	mov	sl, r5
 8008152:	46b3      	mov	fp, r6
 8008154:	e7de      	b.n	8008114 <_scanf_float+0x2ec>
 8008156:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	2965      	cmp	r1, #101	@ 0x65
 800815e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008162:	f106 35ff 	add.w	r5, r6, #4294967295
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	d00c      	beq.n	8008184 <_scanf_float+0x35c>
 800816a:	2945      	cmp	r1, #69	@ 0x45
 800816c:	d00a      	beq.n	8008184 <_scanf_float+0x35c>
 800816e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008172:	463a      	mov	r2, r7
 8008174:	4640      	mov	r0, r8
 8008176:	4798      	blx	r3
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800817e:	3b01      	subs	r3, #1
 8008180:	1eb5      	subs	r5, r6, #2
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	463a      	mov	r2, r7
 8008186:	4640      	mov	r0, r8
 8008188:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800818c:	4798      	blx	r3
 800818e:	462e      	mov	r6, r5
 8008190:	6822      	ldr	r2, [r4, #0]
 8008192:	f012 0210 	ands.w	r2, r2, #16
 8008196:	d001      	beq.n	800819c <_scanf_float+0x374>
 8008198:	2000      	movs	r0, #0
 800819a:	e68a      	b.n	8007eb2 <_scanf_float+0x8a>
 800819c:	7032      	strb	r2, [r6, #0]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d11c      	bne.n	80081e4 <_scanf_float+0x3bc>
 80081aa:	9b02      	ldr	r3, [sp, #8]
 80081ac:	454b      	cmp	r3, r9
 80081ae:	eba3 0209 	sub.w	r2, r3, r9
 80081b2:	d123      	bne.n	80081fc <_scanf_float+0x3d4>
 80081b4:	2200      	movs	r2, #0
 80081b6:	4640      	mov	r0, r8
 80081b8:	9901      	ldr	r1, [sp, #4]
 80081ba:	f002 fbed 	bl	800a998 <_strtod_r>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f015 0f02 	tst.w	r5, #2
 80081c8:	4606      	mov	r6, r0
 80081ca:	460f      	mov	r7, r1
 80081cc:	f103 0204 	add.w	r2, r3, #4
 80081d0:	d01f      	beq.n	8008212 <_scanf_float+0x3ea>
 80081d2:	9903      	ldr	r1, [sp, #12]
 80081d4:	600a      	str	r2, [r1, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	e9c3 6700 	strd	r6, r7, [r3]
 80081dc:	68e3      	ldr	r3, [r4, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60e3      	str	r3, [r4, #12]
 80081e2:	e7d9      	b.n	8008198 <_scanf_float+0x370>
 80081e4:	9b04      	ldr	r3, [sp, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0e4      	beq.n	80081b4 <_scanf_float+0x38c>
 80081ea:	9905      	ldr	r1, [sp, #20]
 80081ec:	230a      	movs	r3, #10
 80081ee:	4640      	mov	r0, r8
 80081f0:	3101      	adds	r1, #1
 80081f2:	f002 fc51 	bl	800aa98 <_strtol_r>
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	9e05      	ldr	r6, [sp, #20]
 80081fa:	1ac2      	subs	r2, r0, r3
 80081fc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008200:	429e      	cmp	r6, r3
 8008202:	bf28      	it	cs
 8008204:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008208:	4630      	mov	r0, r6
 800820a:	490d      	ldr	r1, [pc, #52]	@ (8008240 <_scanf_float+0x418>)
 800820c:	f000 f8de 	bl	80083cc <siprintf>
 8008210:	e7d0      	b.n	80081b4 <_scanf_float+0x38c>
 8008212:	076d      	lsls	r5, r5, #29
 8008214:	d4dd      	bmi.n	80081d2 <_scanf_float+0x3aa>
 8008216:	9d03      	ldr	r5, [sp, #12]
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	681d      	ldr	r5, [r3, #0]
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	f7f8 fc60 	bl	8000ae4 <__aeabi_dcmpun>
 8008224:	b120      	cbz	r0, 8008230 <_scanf_float+0x408>
 8008226:	4807      	ldr	r0, [pc, #28]	@ (8008244 <_scanf_float+0x41c>)
 8008228:	f000 f9c2 	bl	80085b0 <nanf>
 800822c:	6028      	str	r0, [r5, #0]
 800822e:	e7d5      	b.n	80081dc <_scanf_float+0x3b4>
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 fcb4 	bl	8000ba0 <__aeabi_d2f>
 8008238:	e7f8      	b.n	800822c <_scanf_float+0x404>
 800823a:	f04f 0900 	mov.w	r9, #0
 800823e:	e62d      	b.n	8007e9c <_scanf_float+0x74>
 8008240:	0800bdfe 	.word	0x0800bdfe
 8008244:	0800c195 	.word	0x0800c195

08008248 <std>:
 8008248:	2300      	movs	r3, #0
 800824a:	b510      	push	{r4, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	e9c0 3300 	strd	r3, r3, [r0]
 8008252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008256:	6083      	str	r3, [r0, #8]
 8008258:	8181      	strh	r1, [r0, #12]
 800825a:	6643      	str	r3, [r0, #100]	@ 0x64
 800825c:	81c2      	strh	r2, [r0, #14]
 800825e:	6183      	str	r3, [r0, #24]
 8008260:	4619      	mov	r1, r3
 8008262:	2208      	movs	r2, #8
 8008264:	305c      	adds	r0, #92	@ 0x5c
 8008266:	f000 f914 	bl	8008492 <memset>
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <std+0x58>)
 800826c:	6224      	str	r4, [r4, #32]
 800826e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008270:	4b0c      	ldr	r3, [pc, #48]	@ (80082a4 <std+0x5c>)
 8008272:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <std+0x60>)
 8008276:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008278:	4b0c      	ldr	r3, [pc, #48]	@ (80082ac <std+0x64>)
 800827a:	6323      	str	r3, [r4, #48]	@ 0x30
 800827c:	4b0c      	ldr	r3, [pc, #48]	@ (80082b0 <std+0x68>)
 800827e:	429c      	cmp	r4, r3
 8008280:	d006      	beq.n	8008290 <std+0x48>
 8008282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008286:	4294      	cmp	r4, r2
 8008288:	d002      	beq.n	8008290 <std+0x48>
 800828a:	33d0      	adds	r3, #208	@ 0xd0
 800828c:	429c      	cmp	r4, r3
 800828e:	d105      	bne.n	800829c <std+0x54>
 8008290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008298:	f000 b978 	b.w	800858c <__retarget_lock_init_recursive>
 800829c:	bd10      	pop	{r4, pc}
 800829e:	bf00      	nop
 80082a0:	0800840d 	.word	0x0800840d
 80082a4:	0800842f 	.word	0x0800842f
 80082a8:	08008467 	.word	0x08008467
 80082ac:	0800848b 	.word	0x0800848b
 80082b0:	200005e0 	.word	0x200005e0

080082b4 <stdio_exit_handler>:
 80082b4:	4a02      	ldr	r2, [pc, #8]	@ (80082c0 <stdio_exit_handler+0xc>)
 80082b6:	4903      	ldr	r1, [pc, #12]	@ (80082c4 <stdio_exit_handler+0x10>)
 80082b8:	4803      	ldr	r0, [pc, #12]	@ (80082c8 <stdio_exit_handler+0x14>)
 80082ba:	f000 b869 	b.w	8008390 <_fwalk_sglue>
 80082be:	bf00      	nop
 80082c0:	20000028 	.word	0x20000028
 80082c4:	0800ae4d 	.word	0x0800ae4d
 80082c8:	20000038 	.word	0x20000038

080082cc <cleanup_stdio>:
 80082cc:	6841      	ldr	r1, [r0, #4]
 80082ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008300 <cleanup_stdio+0x34>)
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4299      	cmp	r1, r3
 80082d4:	4604      	mov	r4, r0
 80082d6:	d001      	beq.n	80082dc <cleanup_stdio+0x10>
 80082d8:	f002 fdb8 	bl	800ae4c <_fflush_r>
 80082dc:	68a1      	ldr	r1, [r4, #8]
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <cleanup_stdio+0x38>)
 80082e0:	4299      	cmp	r1, r3
 80082e2:	d002      	beq.n	80082ea <cleanup_stdio+0x1e>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f002 fdb1 	bl	800ae4c <_fflush_r>
 80082ea:	68e1      	ldr	r1, [r4, #12]
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <cleanup_stdio+0x3c>)
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d004      	beq.n	80082fc <cleanup_stdio+0x30>
 80082f2:	4620      	mov	r0, r4
 80082f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f8:	f002 bda8 	b.w	800ae4c <_fflush_r>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	bf00      	nop
 8008300:	200005e0 	.word	0x200005e0
 8008304:	20000648 	.word	0x20000648
 8008308:	200006b0 	.word	0x200006b0

0800830c <global_stdio_init.part.0>:
 800830c:	b510      	push	{r4, lr}
 800830e:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <global_stdio_init.part.0+0x30>)
 8008310:	4c0b      	ldr	r4, [pc, #44]	@ (8008340 <global_stdio_init.part.0+0x34>)
 8008312:	4a0c      	ldr	r2, [pc, #48]	@ (8008344 <global_stdio_init.part.0+0x38>)
 8008314:	4620      	mov	r0, r4
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	2104      	movs	r1, #4
 800831a:	2200      	movs	r2, #0
 800831c:	f7ff ff94 	bl	8008248 <std>
 8008320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008324:	2201      	movs	r2, #1
 8008326:	2109      	movs	r1, #9
 8008328:	f7ff ff8e 	bl	8008248 <std>
 800832c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008330:	2202      	movs	r2, #2
 8008332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008336:	2112      	movs	r1, #18
 8008338:	f7ff bf86 	b.w	8008248 <std>
 800833c:	20000718 	.word	0x20000718
 8008340:	200005e0 	.word	0x200005e0
 8008344:	080082b5 	.word	0x080082b5

08008348 <__sfp_lock_acquire>:
 8008348:	4801      	ldr	r0, [pc, #4]	@ (8008350 <__sfp_lock_acquire+0x8>)
 800834a:	f000 b920 	b.w	800858e <__retarget_lock_acquire_recursive>
 800834e:	bf00      	nop
 8008350:	20000721 	.word	0x20000721

08008354 <__sfp_lock_release>:
 8008354:	4801      	ldr	r0, [pc, #4]	@ (800835c <__sfp_lock_release+0x8>)
 8008356:	f000 b91b 	b.w	8008590 <__retarget_lock_release_recursive>
 800835a:	bf00      	nop
 800835c:	20000721 	.word	0x20000721

08008360 <__sinit>:
 8008360:	b510      	push	{r4, lr}
 8008362:	4604      	mov	r4, r0
 8008364:	f7ff fff0 	bl	8008348 <__sfp_lock_acquire>
 8008368:	6a23      	ldr	r3, [r4, #32]
 800836a:	b11b      	cbz	r3, 8008374 <__sinit+0x14>
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f7ff bff0 	b.w	8008354 <__sfp_lock_release>
 8008374:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <__sinit+0x28>)
 8008376:	6223      	str	r3, [r4, #32]
 8008378:	4b04      	ldr	r3, [pc, #16]	@ (800838c <__sinit+0x2c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f5      	bne.n	800836c <__sinit+0xc>
 8008380:	f7ff ffc4 	bl	800830c <global_stdio_init.part.0>
 8008384:	e7f2      	b.n	800836c <__sinit+0xc>
 8008386:	bf00      	nop
 8008388:	080082cd 	.word	0x080082cd
 800838c:	20000718 	.word	0x20000718

08008390 <_fwalk_sglue>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4607      	mov	r7, r0
 8008396:	4688      	mov	r8, r1
 8008398:	4614      	mov	r4, r2
 800839a:	2600      	movs	r6, #0
 800839c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083a0:	f1b9 0901 	subs.w	r9, r9, #1
 80083a4:	d505      	bpl.n	80083b2 <_fwalk_sglue+0x22>
 80083a6:	6824      	ldr	r4, [r4, #0]
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	d1f7      	bne.n	800839c <_fwalk_sglue+0xc>
 80083ac:	4630      	mov	r0, r6
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d907      	bls.n	80083c8 <_fwalk_sglue+0x38>
 80083b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083bc:	3301      	adds	r3, #1
 80083be:	d003      	beq.n	80083c8 <_fwalk_sglue+0x38>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c0      	blx	r8
 80083c6:	4306      	orrs	r6, r0
 80083c8:	3568      	adds	r5, #104	@ 0x68
 80083ca:	e7e9      	b.n	80083a0 <_fwalk_sglue+0x10>

080083cc <siprintf>:
 80083cc:	b40e      	push	{r1, r2, r3}
 80083ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083d2:	b500      	push	{lr}
 80083d4:	b09c      	sub	sp, #112	@ 0x70
 80083d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	9107      	str	r1, [sp, #28]
 80083de:	9104      	str	r1, [sp, #16]
 80083e0:	4808      	ldr	r0, [pc, #32]	@ (8008404 <siprintf+0x38>)
 80083e2:	4909      	ldr	r1, [pc, #36]	@ (8008408 <siprintf+0x3c>)
 80083e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	a902      	add	r1, sp, #8
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	f002 fbb0 	bl	800ab54 <_svfiprintf_r>
 80083f4:	2200      	movs	r2, #0
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	b01c      	add	sp, #112	@ 0x70
 80083fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008400:	b003      	add	sp, #12
 8008402:	4770      	bx	lr
 8008404:	20000034 	.word	0x20000034
 8008408:	ffff0208 	.word	0xffff0208

0800840c <__sread>:
 800840c:	b510      	push	{r4, lr}
 800840e:	460c      	mov	r4, r1
 8008410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008414:	f000 f86c 	bl	80084f0 <_read_r>
 8008418:	2800      	cmp	r0, #0
 800841a:	bfab      	itete	ge
 800841c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800841e:	89a3      	ldrhlt	r3, [r4, #12]
 8008420:	181b      	addge	r3, r3, r0
 8008422:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008426:	bfac      	ite	ge
 8008428:	6563      	strge	r3, [r4, #84]	@ 0x54
 800842a:	81a3      	strhlt	r3, [r4, #12]
 800842c:	bd10      	pop	{r4, pc}

0800842e <__swrite>:
 800842e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008432:	461f      	mov	r7, r3
 8008434:	898b      	ldrh	r3, [r1, #12]
 8008436:	4605      	mov	r5, r0
 8008438:	05db      	lsls	r3, r3, #23
 800843a:	460c      	mov	r4, r1
 800843c:	4616      	mov	r6, r2
 800843e:	d505      	bpl.n	800844c <__swrite+0x1e>
 8008440:	2302      	movs	r3, #2
 8008442:	2200      	movs	r2, #0
 8008444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008448:	f000 f840 	bl	80084cc <_lseek_r>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	4632      	mov	r2, r6
 8008450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	4628      	mov	r0, r5
 8008458:	463b      	mov	r3, r7
 800845a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800845e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	f000 b857 	b.w	8008514 <_write_r>

08008466 <__sseek>:
 8008466:	b510      	push	{r4, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846e:	f000 f82d 	bl	80084cc <_lseek_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	bf15      	itete	ne
 8008478:	6560      	strne	r0, [r4, #84]	@ 0x54
 800847a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800847e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008482:	81a3      	strheq	r3, [r4, #12]
 8008484:	bf18      	it	ne
 8008486:	81a3      	strhne	r3, [r4, #12]
 8008488:	bd10      	pop	{r4, pc}

0800848a <__sclose>:
 800848a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848e:	f000 b80d 	b.w	80084ac <_close_r>

08008492 <memset>:
 8008492:	4603      	mov	r3, r0
 8008494:	4402      	add	r2, r0
 8008496:	4293      	cmp	r3, r2
 8008498:	d100      	bne.n	800849c <memset+0xa>
 800849a:	4770      	bx	lr
 800849c:	f803 1b01 	strb.w	r1, [r3], #1
 80084a0:	e7f9      	b.n	8008496 <memset+0x4>
	...

080084a4 <_localeconv_r>:
 80084a4:	4800      	ldr	r0, [pc, #0]	@ (80084a8 <_localeconv_r+0x4>)
 80084a6:	4770      	bx	lr
 80084a8:	20000174 	.word	0x20000174

080084ac <_close_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	2300      	movs	r3, #0
 80084b0:	4d05      	ldr	r5, [pc, #20]	@ (80084c8 <_close_r+0x1c>)
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7fa fc61 	bl	8002d7e <_close>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_close_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_close_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	2000071c 	.word	0x2000071c

080084cc <_lseek_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	4611      	mov	r1, r2
 80084d4:	2200      	movs	r2, #0
 80084d6:	4d05      	ldr	r5, [pc, #20]	@ (80084ec <_lseek_r+0x20>)
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	f7fa fc73 	bl	8002dc6 <_lseek>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_lseek_r+0x1e>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_lseek_r+0x1e>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	2000071c 	.word	0x2000071c

080084f0 <_read_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	2200      	movs	r2, #0
 80084fa:	4d05      	ldr	r5, [pc, #20]	@ (8008510 <_read_r+0x20>)
 80084fc:	602a      	str	r2, [r5, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7fa fc04 	bl	8002d0c <_read>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_read_r+0x1e>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_read_r+0x1e>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	2000071c 	.word	0x2000071c

08008514 <_write_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	2200      	movs	r2, #0
 800851e:	4d05      	ldr	r5, [pc, #20]	@ (8008534 <_write_r+0x20>)
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7fa fc0f 	bl	8002d46 <_write>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_write_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_write_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	2000071c 	.word	0x2000071c

08008538 <__errno>:
 8008538:	4b01      	ldr	r3, [pc, #4]	@ (8008540 <__errno+0x8>)
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000034 	.word	0x20000034

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	2600      	movs	r6, #0
 8008548:	4d0c      	ldr	r5, [pc, #48]	@ (800857c <__libc_init_array+0x38>)
 800854a:	4c0d      	ldr	r4, [pc, #52]	@ (8008580 <__libc_init_array+0x3c>)
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	42a6      	cmp	r6, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	f003 fb66 	bl	800bc24 <_init>
 8008558:	2600      	movs	r6, #0
 800855a:	4d0a      	ldr	r5, [pc, #40]	@ (8008584 <__libc_init_array+0x40>)
 800855c:	4c0a      	ldr	r4, [pc, #40]	@ (8008588 <__libc_init_array+0x44>)
 800855e:	1b64      	subs	r4, r4, r5
 8008560:	10a4      	asrs	r4, r4, #2
 8008562:	42a6      	cmp	r6, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f855 3b04 	ldr.w	r3, [r5], #4
 800856c:	4798      	blx	r3
 800856e:	3601      	adds	r6, #1
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f855 3b04 	ldr.w	r3, [r5], #4
 8008576:	4798      	blx	r3
 8008578:	3601      	adds	r6, #1
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	0800c200 	.word	0x0800c200
 8008580:	0800c200 	.word	0x0800c200
 8008584:	0800c200 	.word	0x0800c200
 8008588:	0800c204 	.word	0x0800c204

0800858c <__retarget_lock_init_recursive>:
 800858c:	4770      	bx	lr

0800858e <__retarget_lock_acquire_recursive>:
 800858e:	4770      	bx	lr

08008590 <__retarget_lock_release_recursive>:
 8008590:	4770      	bx	lr

08008592 <memchr>:
 8008592:	4603      	mov	r3, r0
 8008594:	b510      	push	{r4, lr}
 8008596:	b2c9      	uxtb	r1, r1
 8008598:	4402      	add	r2, r0
 800859a:	4293      	cmp	r3, r2
 800859c:	4618      	mov	r0, r3
 800859e:	d101      	bne.n	80085a4 <memchr+0x12>
 80085a0:	2000      	movs	r0, #0
 80085a2:	e003      	b.n	80085ac <memchr+0x1a>
 80085a4:	7804      	ldrb	r4, [r0, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	428c      	cmp	r4, r1
 80085aa:	d1f6      	bne.n	800859a <memchr+0x8>
 80085ac:	bd10      	pop	{r4, pc}
	...

080085b0 <nanf>:
 80085b0:	4800      	ldr	r0, [pc, #0]	@ (80085b4 <nanf+0x4>)
 80085b2:	4770      	bx	lr
 80085b4:	7fc00000 	.word	0x7fc00000

080085b8 <quorem>:
 80085b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	6903      	ldr	r3, [r0, #16]
 80085be:	690c      	ldr	r4, [r1, #16]
 80085c0:	4607      	mov	r7, r0
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	db7e      	blt.n	80086c4 <quorem+0x10c>
 80085c6:	3c01      	subs	r4, #1
 80085c8:	00a3      	lsls	r3, r4, #2
 80085ca:	f100 0514 	add.w	r5, r0, #20
 80085ce:	f101 0814 	add.w	r8, r1, #20
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e2:	3301      	adds	r3, #1
 80085e4:	429a      	cmp	r2, r3
 80085e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80085ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ee:	d32e      	bcc.n	800864e <quorem+0x96>
 80085f0:	f04f 0a00 	mov.w	sl, #0
 80085f4:	46c4      	mov	ip, r8
 80085f6:	46ae      	mov	lr, r5
 80085f8:	46d3      	mov	fp, sl
 80085fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085fe:	b298      	uxth	r0, r3
 8008600:	fb06 a000 	mla	r0, r6, r0, sl
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	0c02      	lsrs	r2, r0, #16
 8008608:	fb06 2303 	mla	r3, r6, r3, r2
 800860c:	f8de 2000 	ldr.w	r2, [lr]
 8008610:	b280      	uxth	r0, r0
 8008612:	b292      	uxth	r2, r2
 8008614:	1a12      	subs	r2, r2, r0
 8008616:	445a      	add	r2, fp
 8008618:	f8de 0000 	ldr.w	r0, [lr]
 800861c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008620:	b29b      	uxth	r3, r3
 8008622:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008626:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800862a:	b292      	uxth	r2, r2
 800862c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008630:	45e1      	cmp	r9, ip
 8008632:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008636:	f84e 2b04 	str.w	r2, [lr], #4
 800863a:	d2de      	bcs.n	80085fa <quorem+0x42>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	58eb      	ldr	r3, [r5, r3]
 8008640:	b92b      	cbnz	r3, 800864e <quorem+0x96>
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	3b04      	subs	r3, #4
 8008646:	429d      	cmp	r5, r3
 8008648:	461a      	mov	r2, r3
 800864a:	d32f      	bcc.n	80086ac <quorem+0xf4>
 800864c:	613c      	str	r4, [r7, #16]
 800864e:	4638      	mov	r0, r7
 8008650:	f001 f9c2 	bl	80099d8 <__mcmp>
 8008654:	2800      	cmp	r0, #0
 8008656:	db25      	blt.n	80086a4 <quorem+0xec>
 8008658:	4629      	mov	r1, r5
 800865a:	2000      	movs	r0, #0
 800865c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008660:	f8d1 c000 	ldr.w	ip, [r1]
 8008664:	fa1f fe82 	uxth.w	lr, r2
 8008668:	fa1f f38c 	uxth.w	r3, ip
 800866c:	eba3 030e 	sub.w	r3, r3, lr
 8008670:	4403      	add	r3, r0
 8008672:	0c12      	lsrs	r2, r2, #16
 8008674:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008678:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800867c:	b29b      	uxth	r3, r3
 800867e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008682:	45c1      	cmp	r9, r8
 8008684:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008688:	f841 3b04 	str.w	r3, [r1], #4
 800868c:	d2e6      	bcs.n	800865c <quorem+0xa4>
 800868e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008696:	b922      	cbnz	r2, 80086a2 <quorem+0xea>
 8008698:	3b04      	subs	r3, #4
 800869a:	429d      	cmp	r5, r3
 800869c:	461a      	mov	r2, r3
 800869e:	d30b      	bcc.n	80086b8 <quorem+0x100>
 80086a0:	613c      	str	r4, [r7, #16]
 80086a2:	3601      	adds	r6, #1
 80086a4:	4630      	mov	r0, r6
 80086a6:	b003      	add	sp, #12
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	3b04      	subs	r3, #4
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	d1cb      	bne.n	800864c <quorem+0x94>
 80086b4:	3c01      	subs	r4, #1
 80086b6:	e7c6      	b.n	8008646 <quorem+0x8e>
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	3b04      	subs	r3, #4
 80086bc:	2a00      	cmp	r2, #0
 80086be:	d1ef      	bne.n	80086a0 <quorem+0xe8>
 80086c0:	3c01      	subs	r4, #1
 80086c2:	e7ea      	b.n	800869a <quorem+0xe2>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7ee      	b.n	80086a6 <quorem+0xee>

080086c8 <_dtoa_r>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	4614      	mov	r4, r2
 80086ce:	461d      	mov	r5, r3
 80086d0:	69c7      	ldr	r7, [r0, #28]
 80086d2:	b097      	sub	sp, #92	@ 0x5c
 80086d4:	4683      	mov	fp, r0
 80086d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80086da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80086dc:	b97f      	cbnz	r7, 80086fe <_dtoa_r+0x36>
 80086de:	2010      	movs	r0, #16
 80086e0:	f000 fe02 	bl	80092e8 <malloc>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80086ea:	b920      	cbnz	r0, 80086f6 <_dtoa_r+0x2e>
 80086ec:	21ef      	movs	r1, #239	@ 0xef
 80086ee:	4ba8      	ldr	r3, [pc, #672]	@ (8008990 <_dtoa_r+0x2c8>)
 80086f0:	48a8      	ldr	r0, [pc, #672]	@ (8008994 <_dtoa_r+0x2cc>)
 80086f2:	f002 fc23 	bl	800af3c <__assert_func>
 80086f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086fa:	6007      	str	r7, [r0, #0]
 80086fc:	60c7      	str	r7, [r0, #12]
 80086fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	b159      	cbz	r1, 800871e <_dtoa_r+0x56>
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	2301      	movs	r3, #1
 800870a:	4093      	lsls	r3, r2
 800870c:	604a      	str	r2, [r1, #4]
 800870e:	608b      	str	r3, [r1, #8]
 8008710:	4658      	mov	r0, fp
 8008712:	f000 fedf 	bl	80094d4 <_Bfree>
 8008716:	2200      	movs	r2, #0
 8008718:	f8db 301c 	ldr.w	r3, [fp, #28]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	1e2b      	subs	r3, r5, #0
 8008720:	bfaf      	iteee	ge
 8008722:	2300      	movge	r3, #0
 8008724:	2201      	movlt	r2, #1
 8008726:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800872a:	9303      	strlt	r3, [sp, #12]
 800872c:	bfa8      	it	ge
 800872e:	6033      	strge	r3, [r6, #0]
 8008730:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008734:	4b98      	ldr	r3, [pc, #608]	@ (8008998 <_dtoa_r+0x2d0>)
 8008736:	bfb8      	it	lt
 8008738:	6032      	strlt	r2, [r6, #0]
 800873a:	ea33 0308 	bics.w	r3, r3, r8
 800873e:	d112      	bne.n	8008766 <_dtoa_r+0x9e>
 8008740:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008744:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800874c:	4323      	orrs	r3, r4
 800874e:	f000 8550 	beq.w	80091f2 <_dtoa_r+0xb2a>
 8008752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008754:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800899c <_dtoa_r+0x2d4>
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8552 	beq.w	8009202 <_dtoa_r+0xb3a>
 800875e:	f10a 0303 	add.w	r3, sl, #3
 8008762:	f000 bd4c 	b.w	80091fe <_dtoa_r+0xb36>
 8008766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800876e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008772:	2200      	movs	r2, #0
 8008774:	2300      	movs	r3, #0
 8008776:	f7f8 f983 	bl	8000a80 <__aeabi_dcmpeq>
 800877a:	4607      	mov	r7, r0
 800877c:	b158      	cbz	r0, 8008796 <_dtoa_r+0xce>
 800877e:	2301      	movs	r3, #1
 8008780:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008786:	b113      	cbz	r3, 800878e <_dtoa_r+0xc6>
 8008788:	4b85      	ldr	r3, [pc, #532]	@ (80089a0 <_dtoa_r+0x2d8>)
 800878a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80089a4 <_dtoa_r+0x2dc>
 8008792:	f000 bd36 	b.w	8009202 <_dtoa_r+0xb3a>
 8008796:	ab14      	add	r3, sp, #80	@ 0x50
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	ab15      	add	r3, sp, #84	@ 0x54
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4658      	mov	r0, fp
 80087a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80087a4:	f001 fa30 	bl	8009c08 <__d2b>
 80087a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80087ac:	4681      	mov	r9, r0
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d077      	beq.n	80088a2 <_dtoa_r+0x1da>
 80087b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80087ca:	4619      	mov	r1, r3
 80087cc:	2200      	movs	r2, #0
 80087ce:	4b76      	ldr	r3, [pc, #472]	@ (80089a8 <_dtoa_r+0x2e0>)
 80087d0:	f7f7 fd36 	bl	8000240 <__aeabi_dsub>
 80087d4:	a368      	add	r3, pc, #416	@ (adr r3, 8008978 <_dtoa_r+0x2b0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fee9 	bl	80005b0 <__aeabi_dmul>
 80087de:	a368      	add	r3, pc, #416	@ (adr r3, 8008980 <_dtoa_r+0x2b8>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f7 fd2e 	bl	8000244 <__adddf3>
 80087e8:	4604      	mov	r4, r0
 80087ea:	4630      	mov	r0, r6
 80087ec:	460d      	mov	r5, r1
 80087ee:	f7f7 fe75 	bl	80004dc <__aeabi_i2d>
 80087f2:	a365      	add	r3, pc, #404	@ (adr r3, 8008988 <_dtoa_r+0x2c0>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f7 feda 	bl	80005b0 <__aeabi_dmul>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4620      	mov	r0, r4
 8008802:	4629      	mov	r1, r5
 8008804:	f7f7 fd1e 	bl	8000244 <__adddf3>
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	f7f8 f980 	bl	8000b10 <__aeabi_d2iz>
 8008810:	2200      	movs	r2, #0
 8008812:	4607      	mov	r7, r0
 8008814:	2300      	movs	r3, #0
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f8 f93b 	bl	8000a94 <__aeabi_dcmplt>
 800881e:	b140      	cbz	r0, 8008832 <_dtoa_r+0x16a>
 8008820:	4638      	mov	r0, r7
 8008822:	f7f7 fe5b 	bl	80004dc <__aeabi_i2d>
 8008826:	4622      	mov	r2, r4
 8008828:	462b      	mov	r3, r5
 800882a:	f7f8 f929 	bl	8000a80 <__aeabi_dcmpeq>
 800882e:	b900      	cbnz	r0, 8008832 <_dtoa_r+0x16a>
 8008830:	3f01      	subs	r7, #1
 8008832:	2f16      	cmp	r7, #22
 8008834:	d853      	bhi.n	80088de <_dtoa_r+0x216>
 8008836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800883a:	4b5c      	ldr	r3, [pc, #368]	@ (80089ac <_dtoa_r+0x2e4>)
 800883c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f8 f926 	bl	8000a94 <__aeabi_dcmplt>
 8008848:	2800      	cmp	r0, #0
 800884a:	d04a      	beq.n	80088e2 <_dtoa_r+0x21a>
 800884c:	2300      	movs	r3, #0
 800884e:	3f01      	subs	r7, #1
 8008850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008852:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	1e5a      	subs	r2, r3, #1
 8008858:	bf46      	itte	mi
 800885a:	f1c3 0801 	rsbmi	r8, r3, #1
 800885e:	2300      	movmi	r3, #0
 8008860:	f04f 0800 	movpl.w	r8, #0
 8008864:	9209      	str	r2, [sp, #36]	@ 0x24
 8008866:	bf48      	it	mi
 8008868:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800886a:	2f00      	cmp	r7, #0
 800886c:	db3b      	blt.n	80088e6 <_dtoa_r+0x21e>
 800886e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008870:	970e      	str	r7, [sp, #56]	@ 0x38
 8008872:	443b      	add	r3, r7
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	2300      	movs	r3, #0
 8008878:	930a      	str	r3, [sp, #40]	@ 0x28
 800887a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800887c:	2b09      	cmp	r3, #9
 800887e:	d866      	bhi.n	800894e <_dtoa_r+0x286>
 8008880:	2b05      	cmp	r3, #5
 8008882:	bfc4      	itt	gt
 8008884:	3b04      	subgt	r3, #4
 8008886:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008888:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800888a:	bfc8      	it	gt
 800888c:	2400      	movgt	r4, #0
 800888e:	f1a3 0302 	sub.w	r3, r3, #2
 8008892:	bfd8      	it	le
 8008894:	2401      	movle	r4, #1
 8008896:	2b03      	cmp	r3, #3
 8008898:	d864      	bhi.n	8008964 <_dtoa_r+0x29c>
 800889a:	e8df f003 	tbb	[pc, r3]
 800889e:	382b      	.short	0x382b
 80088a0:	5636      	.short	0x5636
 80088a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80088a6:	441e      	add	r6, r3
 80088a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	bfc1      	itttt	gt
 80088b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80088b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088c0:	bfd6      	itet	le
 80088c2:	f1c3 0320 	rsble	r3, r3, #32
 80088c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80088ca:	fa04 f003 	lslle.w	r0, r4, r3
 80088ce:	f7f7 fdf5 	bl	80004bc <__aeabi_ui2d>
 80088d2:	2201      	movs	r2, #1
 80088d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088d8:	3e01      	subs	r6, #1
 80088da:	9212      	str	r2, [sp, #72]	@ 0x48
 80088dc:	e775      	b.n	80087ca <_dtoa_r+0x102>
 80088de:	2301      	movs	r3, #1
 80088e0:	e7b6      	b.n	8008850 <_dtoa_r+0x188>
 80088e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80088e4:	e7b5      	b.n	8008852 <_dtoa_r+0x18a>
 80088e6:	427b      	negs	r3, r7
 80088e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ea:	2300      	movs	r3, #0
 80088ec:	eba8 0807 	sub.w	r8, r8, r7
 80088f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80088f2:	e7c2      	b.n	800887a <_dtoa_r+0x1b2>
 80088f4:	2300      	movs	r3, #0
 80088f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dc35      	bgt.n	800896a <_dtoa_r+0x2a2>
 80088fe:	2301      	movs	r3, #1
 8008900:	461a      	mov	r2, r3
 8008902:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008906:	9221      	str	r2, [sp, #132]	@ 0x84
 8008908:	e00b      	b.n	8008922 <_dtoa_r+0x25a>
 800890a:	2301      	movs	r3, #1
 800890c:	e7f3      	b.n	80088f6 <_dtoa_r+0x22e>
 800890e:	2300      	movs	r3, #0
 8008910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	9308      	str	r3, [sp, #32]
 8008918:	3301      	adds	r3, #1
 800891a:	2b01      	cmp	r3, #1
 800891c:	9307      	str	r3, [sp, #28]
 800891e:	bfb8      	it	lt
 8008920:	2301      	movlt	r3, #1
 8008922:	2100      	movs	r1, #0
 8008924:	2204      	movs	r2, #4
 8008926:	f8db 001c 	ldr.w	r0, [fp, #28]
 800892a:	f102 0514 	add.w	r5, r2, #20
 800892e:	429d      	cmp	r5, r3
 8008930:	d91f      	bls.n	8008972 <_dtoa_r+0x2aa>
 8008932:	6041      	str	r1, [r0, #4]
 8008934:	4658      	mov	r0, fp
 8008936:	f000 fd8d 	bl	8009454 <_Balloc>
 800893a:	4682      	mov	sl, r0
 800893c:	2800      	cmp	r0, #0
 800893e:	d139      	bne.n	80089b4 <_dtoa_r+0x2ec>
 8008940:	4602      	mov	r2, r0
 8008942:	f240 11af 	movw	r1, #431	@ 0x1af
 8008946:	4b1a      	ldr	r3, [pc, #104]	@ (80089b0 <_dtoa_r+0x2e8>)
 8008948:	e6d2      	b.n	80086f0 <_dtoa_r+0x28>
 800894a:	2301      	movs	r3, #1
 800894c:	e7e0      	b.n	8008910 <_dtoa_r+0x248>
 800894e:	2401      	movs	r4, #1
 8008950:	2300      	movs	r3, #0
 8008952:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008954:	9320      	str	r3, [sp, #128]	@ 0x80
 8008956:	f04f 33ff 	mov.w	r3, #4294967295
 800895a:	2200      	movs	r2, #0
 800895c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008960:	2312      	movs	r3, #18
 8008962:	e7d0      	b.n	8008906 <_dtoa_r+0x23e>
 8008964:	2301      	movs	r3, #1
 8008966:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008968:	e7f5      	b.n	8008956 <_dtoa_r+0x28e>
 800896a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800896c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008970:	e7d7      	b.n	8008922 <_dtoa_r+0x25a>
 8008972:	3101      	adds	r1, #1
 8008974:	0052      	lsls	r2, r2, #1
 8008976:	e7d8      	b.n	800892a <_dtoa_r+0x262>
 8008978:	636f4361 	.word	0x636f4361
 800897c:	3fd287a7 	.word	0x3fd287a7
 8008980:	8b60c8b3 	.word	0x8b60c8b3
 8008984:	3fc68a28 	.word	0x3fc68a28
 8008988:	509f79fb 	.word	0x509f79fb
 800898c:	3fd34413 	.word	0x3fd34413
 8008990:	0800be10 	.word	0x0800be10
 8008994:	0800be27 	.word	0x0800be27
 8008998:	7ff00000 	.word	0x7ff00000
 800899c:	0800be0c 	.word	0x0800be0c
 80089a0:	0800bddb 	.word	0x0800bddb
 80089a4:	0800bdda 	.word	0x0800bdda
 80089a8:	3ff80000 	.word	0x3ff80000
 80089ac:	0800bf20 	.word	0x0800bf20
 80089b0:	0800be7f 	.word	0x0800be7f
 80089b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b8:	6018      	str	r0, [r3, #0]
 80089ba:	9b07      	ldr	r3, [sp, #28]
 80089bc:	2b0e      	cmp	r3, #14
 80089be:	f200 80a4 	bhi.w	8008b0a <_dtoa_r+0x442>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	f000 80a1 	beq.w	8008b0a <_dtoa_r+0x442>
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	dd33      	ble.n	8008a34 <_dtoa_r+0x36c>
 80089cc:	4b86      	ldr	r3, [pc, #536]	@ (8008be8 <_dtoa_r+0x520>)
 80089ce:	f007 020f 	and.w	r2, r7, #15
 80089d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d6:	05f8      	lsls	r0, r7, #23
 80089d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089e4:	d516      	bpl.n	8008a14 <_dtoa_r+0x34c>
 80089e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ea:	4b80      	ldr	r3, [pc, #512]	@ (8008bec <_dtoa_r+0x524>)
 80089ec:	2603      	movs	r6, #3
 80089ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089f2:	f7f7 ff07 	bl	8000804 <__aeabi_ddiv>
 80089f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089fa:	f004 040f 	and.w	r4, r4, #15
 80089fe:	4d7b      	ldr	r5, [pc, #492]	@ (8008bec <_dtoa_r+0x524>)
 8008a00:	b954      	cbnz	r4, 8008a18 <_dtoa_r+0x350>
 8008a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0a:	f7f7 fefb 	bl	8000804 <__aeabi_ddiv>
 8008a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a12:	e028      	b.n	8008a66 <_dtoa_r+0x39e>
 8008a14:	2602      	movs	r6, #2
 8008a16:	e7f2      	b.n	80089fe <_dtoa_r+0x336>
 8008a18:	07e1      	lsls	r1, r4, #31
 8008a1a:	d508      	bpl.n	8008a2e <_dtoa_r+0x366>
 8008a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a24:	f7f7 fdc4 	bl	80005b0 <__aeabi_dmul>
 8008a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	1064      	asrs	r4, r4, #1
 8008a30:	3508      	adds	r5, #8
 8008a32:	e7e5      	b.n	8008a00 <_dtoa_r+0x338>
 8008a34:	f000 80d2 	beq.w	8008bdc <_dtoa_r+0x514>
 8008a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a3c:	427c      	negs	r4, r7
 8008a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8008be8 <_dtoa_r+0x520>)
 8008a40:	f004 020f 	and.w	r2, r4, #15
 8008a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fdb0 	bl	80005b0 <__aeabi_dmul>
 8008a50:	2602      	movs	r6, #2
 8008a52:	2300      	movs	r3, #0
 8008a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a58:	4d64      	ldr	r5, [pc, #400]	@ (8008bec <_dtoa_r+0x524>)
 8008a5a:	1124      	asrs	r4, r4, #4
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	f040 80b2 	bne.w	8008bc6 <_dtoa_r+0x4fe>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1d3      	bne.n	8008a0e <_dtoa_r+0x346>
 8008a66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 80b7 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a72:	2200      	movs	r2, #0
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	4b5d      	ldr	r3, [pc, #372]	@ (8008bf0 <_dtoa_r+0x528>)
 8008a7a:	f7f8 f80b 	bl	8000a94 <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f000 80ae 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80aa 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd37      	ble.n	8008b02 <_dtoa_r+0x43a>
 8008a92:	1e7b      	subs	r3, r7, #1
 8008a94:	4620      	mov	r0, r4
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4b55      	ldr	r3, [pc, #340]	@ (8008bf4 <_dtoa_r+0x52c>)
 8008a9e:	f7f7 fd87 	bl	80005b0 <__aeabi_dmul>
 8008aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aa6:	9c08      	ldr	r4, [sp, #32]
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7f7 fd16 	bl	80004dc <__aeabi_i2d>
 8008ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ab4:	f7f7 fd7c 	bl	80005b0 <__aeabi_dmul>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4b4f      	ldr	r3, [pc, #316]	@ (8008bf8 <_dtoa_r+0x530>)
 8008abc:	f7f7 fbc2 	bl	8000244 <__adddf3>
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ac6:	2c00      	cmp	r4, #0
 8008ac8:	f040 809a 	bne.w	8008c00 <_dtoa_r+0x538>
 8008acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8008bfc <_dtoa_r+0x534>)
 8008ad4:	f7f7 fbb4 	bl	8000240 <__aeabi_dsub>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	4633      	mov	r3, r6
 8008ae4:	f7f7 fff4 	bl	8000ad0 <__aeabi_dcmpgt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f040 828e 	bne.w	800900a <_dtoa_r+0x942>
 8008aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af2:	462a      	mov	r2, r5
 8008af4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008af8:	f7f7 ffcc 	bl	8000a94 <__aeabi_dcmplt>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f040 8127 	bne.w	8008d50 <_dtoa_r+0x688>
 8008b02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f2c0 8163 	blt.w	8008dd8 <_dtoa_r+0x710>
 8008b12:	2f0e      	cmp	r7, #14
 8008b14:	f300 8160 	bgt.w	8008dd8 <_dtoa_r+0x710>
 8008b18:	4b33      	ldr	r3, [pc, #204]	@ (8008be8 <_dtoa_r+0x520>)
 8008b1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	da03      	bge.n	8008b34 <_dtoa_r+0x46c>
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f340 8100 	ble.w	8008d34 <_dtoa_r+0x66c>
 8008b34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b38:	4656      	mov	r6, sl
 8008b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fe5f 	bl	8000804 <__aeabi_ddiv>
 8008b46:	f7f7 ffe3 	bl	8000b10 <__aeabi_d2iz>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	f7f7 fcc6 	bl	80004dc <__aeabi_i2d>
 8008b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b54:	f7f7 fd2c 	bl	80005b0 <__aeabi_dmul>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fb6e 	bl	8000240 <__aeabi_dsub>
 8008b64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b68:	9d07      	ldr	r5, [sp, #28]
 8008b6a:	f806 4b01 	strb.w	r4, [r6], #1
 8008b6e:	eba6 040a 	sub.w	r4, r6, sl
 8008b72:	42a5      	cmp	r5, r4
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	f040 8116 	bne.w	8008da8 <_dtoa_r+0x6e0>
 8008b7c:	f7f7 fb62 	bl	8000244 <__adddf3>
 8008b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	f7f7 ffa2 	bl	8000ad0 <__aeabi_dcmpgt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f040 80f8 	bne.w	8008d82 <_dtoa_r+0x6ba>
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ff71 	bl	8000a80 <__aeabi_dcmpeq>
 8008b9e:	b118      	cbz	r0, 8008ba8 <_dtoa_r+0x4e0>
 8008ba0:	f018 0f01 	tst.w	r8, #1
 8008ba4:	f040 80ed 	bne.w	8008d82 <_dtoa_r+0x6ba>
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fc92 	bl	80094d4 <_Bfree>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	7033      	strb	r3, [r6, #0]
 8008bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008bb6:	3701      	adds	r7, #1
 8008bb8:	601f      	str	r7, [r3, #0]
 8008bba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8320 	beq.w	8009202 <_dtoa_r+0xb3a>
 8008bc2:	601e      	str	r6, [r3, #0]
 8008bc4:	e31d      	b.n	8009202 <_dtoa_r+0xb3a>
 8008bc6:	07e2      	lsls	r2, r4, #31
 8008bc8:	d505      	bpl.n	8008bd6 <_dtoa_r+0x50e>
 8008bca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bce:	f7f7 fcef 	bl	80005b0 <__aeabi_dmul>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	1064      	asrs	r4, r4, #1
 8008bd8:	3508      	adds	r5, #8
 8008bda:	e73f      	b.n	8008a5c <_dtoa_r+0x394>
 8008bdc:	2602      	movs	r6, #2
 8008bde:	e742      	b.n	8008a66 <_dtoa_r+0x39e>
 8008be0:	9c07      	ldr	r4, [sp, #28]
 8008be2:	9704      	str	r7, [sp, #16]
 8008be4:	e761      	b.n	8008aaa <_dtoa_r+0x3e2>
 8008be6:	bf00      	nop
 8008be8:	0800bf20 	.word	0x0800bf20
 8008bec:	0800bef8 	.word	0x0800bef8
 8008bf0:	3ff00000 	.word	0x3ff00000
 8008bf4:	40240000 	.word	0x40240000
 8008bf8:	401c0000 	.word	0x401c0000
 8008bfc:	40140000 	.word	0x40140000
 8008c00:	4b70      	ldr	r3, [pc, #448]	@ (8008dc4 <_dtoa_r+0x6fc>)
 8008c02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c0c:	4454      	add	r4, sl
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	d045      	beq.n	8008c9e <_dtoa_r+0x5d6>
 8008c12:	2000      	movs	r0, #0
 8008c14:	496c      	ldr	r1, [pc, #432]	@ (8008dc8 <_dtoa_r+0x700>)
 8008c16:	f7f7 fdf5 	bl	8000804 <__aeabi_ddiv>
 8008c1a:	4633      	mov	r3, r6
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	f7f7 fb0f 	bl	8000240 <__aeabi_dsub>
 8008c22:	4656      	mov	r6, sl
 8008c24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2c:	f7f7 ff70 	bl	8000b10 <__aeabi_d2iz>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f7f7 fc53 	bl	80004dc <__aeabi_i2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3e:	f7f7 faff 	bl	8000240 <__aeabi_dsub>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	3530      	adds	r5, #48	@ 0x30
 8008c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c50:	f806 5b01 	strb.w	r5, [r6], #1
 8008c54:	f7f7 ff1e 	bl	8000a94 <__aeabi_dcmplt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d163      	bne.n	8008d24 <_dtoa_r+0x65c>
 8008c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c60:	2000      	movs	r0, #0
 8008c62:	495a      	ldr	r1, [pc, #360]	@ (8008dcc <_dtoa_r+0x704>)
 8008c64:	f7f7 faec 	bl	8000240 <__aeabi_dsub>
 8008c68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c6c:	f7f7 ff12 	bl	8000a94 <__aeabi_dcmplt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f040 8087 	bne.w	8008d84 <_dtoa_r+0x6bc>
 8008c76:	42a6      	cmp	r6, r4
 8008c78:	f43f af43 	beq.w	8008b02 <_dtoa_r+0x43a>
 8008c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c80:	2200      	movs	r2, #0
 8008c82:	4b53      	ldr	r3, [pc, #332]	@ (8008dd0 <_dtoa_r+0x708>)
 8008c84:	f7f7 fc94 	bl	80005b0 <__aeabi_dmul>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c92:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd0 <_dtoa_r+0x708>)
 8008c94:	f7f7 fc8c 	bl	80005b0 <__aeabi_dmul>
 8008c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c9c:	e7c4      	b.n	8008c28 <_dtoa_r+0x560>
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f7f7 fc85 	bl	80005b0 <__aeabi_dmul>
 8008ca6:	4656      	mov	r6, sl
 8008ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb2:	f7f7 ff2d 	bl	8000b10 <__aeabi_d2iz>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	f7f7 fc10 	bl	80004dc <__aeabi_i2d>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc4:	f7f7 fabc 	bl	8000240 <__aeabi_dsub>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	3530      	adds	r5, #48	@ 0x30
 8008cce:	f806 5b01 	strb.w	r5, [r6], #1
 8008cd2:	42a6      	cmp	r6, r4
 8008cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	d124      	bne.n	8008d28 <_dtoa_r+0x660>
 8008cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ce2:	4b39      	ldr	r3, [pc, #228]	@ (8008dc8 <_dtoa_r+0x700>)
 8008ce4:	f7f7 faae 	bl	8000244 <__adddf3>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf0:	f7f7 feee 	bl	8000ad0 <__aeabi_dcmpgt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d145      	bne.n	8008d84 <_dtoa_r+0x6bc>
 8008cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4932      	ldr	r1, [pc, #200]	@ (8008dc8 <_dtoa_r+0x700>)
 8008d00:	f7f7 fa9e 	bl	8000240 <__aeabi_dsub>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d0c:	f7f7 fec2 	bl	8000a94 <__aeabi_dcmplt>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	f43f aef6 	beq.w	8008b02 <_dtoa_r+0x43a>
 8008d16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d18:	1e73      	subs	r3, r6, #1
 8008d1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d20:	2b30      	cmp	r3, #48	@ 0x30
 8008d22:	d0f8      	beq.n	8008d16 <_dtoa_r+0x64e>
 8008d24:	9f04      	ldr	r7, [sp, #16]
 8008d26:	e73f      	b.n	8008ba8 <_dtoa_r+0x4e0>
 8008d28:	4b29      	ldr	r3, [pc, #164]	@ (8008dd0 <_dtoa_r+0x708>)
 8008d2a:	f7f7 fc41 	bl	80005b0 <__aeabi_dmul>
 8008d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d32:	e7bc      	b.n	8008cae <_dtoa_r+0x5e6>
 8008d34:	d10c      	bne.n	8008d50 <_dtoa_r+0x688>
 8008d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4b25      	ldr	r3, [pc, #148]	@ (8008dd4 <_dtoa_r+0x70c>)
 8008d3e:	f7f7 fc37 	bl	80005b0 <__aeabi_dmul>
 8008d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d46:	f7f7 feb9 	bl	8000abc <__aeabi_dcmpge>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f000 815b 	beq.w	8009006 <_dtoa_r+0x93e>
 8008d50:	2400      	movs	r4, #0
 8008d52:	4625      	mov	r5, r4
 8008d54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d56:	4656      	mov	r6, sl
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	2700      	movs	r7, #0
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4658      	mov	r0, fp
 8008d62:	f000 fbb7 	bl	80094d4 <_Bfree>
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	d0dc      	beq.n	8008d24 <_dtoa_r+0x65c>
 8008d6a:	b12f      	cbz	r7, 8008d78 <_dtoa_r+0x6b0>
 8008d6c:	42af      	cmp	r7, r5
 8008d6e:	d003      	beq.n	8008d78 <_dtoa_r+0x6b0>
 8008d70:	4639      	mov	r1, r7
 8008d72:	4658      	mov	r0, fp
 8008d74:	f000 fbae 	bl	80094d4 <_Bfree>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4658      	mov	r0, fp
 8008d7c:	f000 fbaa 	bl	80094d4 <_Bfree>
 8008d80:	e7d0      	b.n	8008d24 <_dtoa_r+0x65c>
 8008d82:	9704      	str	r7, [sp, #16]
 8008d84:	4633      	mov	r3, r6
 8008d86:	461e      	mov	r6, r3
 8008d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d8c:	2a39      	cmp	r2, #57	@ 0x39
 8008d8e:	d107      	bne.n	8008da0 <_dtoa_r+0x6d8>
 8008d90:	459a      	cmp	sl, r3
 8008d92:	d1f8      	bne.n	8008d86 <_dtoa_r+0x6be>
 8008d94:	9a04      	ldr	r2, [sp, #16]
 8008d96:	3201      	adds	r2, #1
 8008d98:	9204      	str	r2, [sp, #16]
 8008d9a:	2230      	movs	r2, #48	@ 0x30
 8008d9c:	f88a 2000 	strb.w	r2, [sl]
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	3201      	adds	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e7bd      	b.n	8008d24 <_dtoa_r+0x65c>
 8008da8:	2200      	movs	r2, #0
 8008daa:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <_dtoa_r+0x708>)
 8008dac:	f7f7 fc00 	bl	80005b0 <__aeabi_dmul>
 8008db0:	2200      	movs	r2, #0
 8008db2:	2300      	movs	r3, #0
 8008db4:	4604      	mov	r4, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	f7f7 fe62 	bl	8000a80 <__aeabi_dcmpeq>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f43f aebc 	beq.w	8008b3a <_dtoa_r+0x472>
 8008dc2:	e6f1      	b.n	8008ba8 <_dtoa_r+0x4e0>
 8008dc4:	0800bf20 	.word	0x0800bf20
 8008dc8:	3fe00000 	.word	0x3fe00000
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	40140000 	.word	0x40140000
 8008dd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	f000 80db 	beq.w	8008f96 <_dtoa_r+0x8ce>
 8008de0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008de2:	2a01      	cmp	r2, #1
 8008de4:	f300 80bf 	bgt.w	8008f66 <_dtoa_r+0x89e>
 8008de8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	f000 80b7 	beq.w	8008f5e <_dtoa_r+0x896>
 8008df0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008df4:	4646      	mov	r6, r8
 8008df6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	441a      	add	r2, r3
 8008dfe:	4658      	mov	r0, fp
 8008e00:	4498      	add	r8, r3
 8008e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e04:	f000 fc64 	bl	80096d0 <__i2b>
 8008e08:	4605      	mov	r5, r0
 8008e0a:	b15e      	cbz	r6, 8008e24 <_dtoa_r+0x75c>
 8008e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dd08      	ble.n	8008e24 <_dtoa_r+0x75c>
 8008e12:	42b3      	cmp	r3, r6
 8008e14:	bfa8      	it	ge
 8008e16:	4633      	movge	r3, r6
 8008e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1a:	eba8 0803 	sub.w	r8, r8, r3
 8008e1e:	1af6      	subs	r6, r6, r3
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e26:	b1f3      	cbz	r3, 8008e66 <_dtoa_r+0x79e>
 8008e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80b7 	beq.w	8008f9e <_dtoa_r+0x8d6>
 8008e30:	b18c      	cbz	r4, 8008e56 <_dtoa_r+0x78e>
 8008e32:	4629      	mov	r1, r5
 8008e34:	4622      	mov	r2, r4
 8008e36:	4658      	mov	r0, fp
 8008e38:	f000 fd08 	bl	800984c <__pow5mult>
 8008e3c:	464a      	mov	r2, r9
 8008e3e:	4601      	mov	r1, r0
 8008e40:	4605      	mov	r5, r0
 8008e42:	4658      	mov	r0, fp
 8008e44:	f000 fc5a 	bl	80096fc <__multiply>
 8008e48:	4649      	mov	r1, r9
 8008e4a:	9004      	str	r0, [sp, #16]
 8008e4c:	4658      	mov	r0, fp
 8008e4e:	f000 fb41 	bl	80094d4 <_Bfree>
 8008e52:	9b04      	ldr	r3, [sp, #16]
 8008e54:	4699      	mov	r9, r3
 8008e56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e58:	1b1a      	subs	r2, r3, r4
 8008e5a:	d004      	beq.n	8008e66 <_dtoa_r+0x79e>
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	4658      	mov	r0, fp
 8008e60:	f000 fcf4 	bl	800984c <__pow5mult>
 8008e64:	4681      	mov	r9, r0
 8008e66:	2101      	movs	r1, #1
 8008e68:	4658      	mov	r0, fp
 8008e6a:	f000 fc31 	bl	80096d0 <__i2b>
 8008e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e70:	4604      	mov	r4, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 81c9 	beq.w	800920a <_dtoa_r+0xb42>
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	4658      	mov	r0, fp
 8008e7e:	f000 fce5 	bl	800984c <__pow5mult>
 8008e82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e84:	4604      	mov	r4, r0
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	f300 808f 	bgt.w	8008faa <_dtoa_r+0x8e2>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 8087 	bne.w	8008fa2 <_dtoa_r+0x8da>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 8083 	bne.w	8008fa6 <_dtoa_r+0x8de>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ea6:	0d1b      	lsrs	r3, r3, #20
 8008ea8:	051b      	lsls	r3, r3, #20
 8008eaa:	b12b      	cbz	r3, 8008eb8 <_dtoa_r+0x7f0>
 8008eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eae:	f108 0801 	add.w	r8, r8, #1
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 81aa 	beq.w	8009216 <_dtoa_r+0xb4e>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ec8:	6918      	ldr	r0, [r3, #16]
 8008eca:	f000 fbb5 	bl	8009638 <__hi0bits>
 8008ece:	f1c0 0020 	rsb	r0, r0, #32
 8008ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed4:	4418      	add	r0, r3
 8008ed6:	f010 001f 	ands.w	r0, r0, #31
 8008eda:	d071      	beq.n	8008fc0 <_dtoa_r+0x8f8>
 8008edc:	f1c0 0320 	rsb	r3, r0, #32
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	dd65      	ble.n	8008fb0 <_dtoa_r+0x8e8>
 8008ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee6:	f1c0 001c 	rsb	r0, r0, #28
 8008eea:	4403      	add	r3, r0
 8008eec:	4480      	add	r8, r0
 8008eee:	4406      	add	r6, r0
 8008ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef2:	f1b8 0f00 	cmp.w	r8, #0
 8008ef6:	dd05      	ble.n	8008f04 <_dtoa_r+0x83c>
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4642      	mov	r2, r8
 8008efc:	4658      	mov	r0, fp
 8008efe:	f000 fcff 	bl	8009900 <__lshift>
 8008f02:	4681      	mov	r9, r0
 8008f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd05      	ble.n	8008f16 <_dtoa_r+0x84e>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f000 fcf6 	bl	8009900 <__lshift>
 8008f14:	4604      	mov	r4, r0
 8008f16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d053      	beq.n	8008fc4 <_dtoa_r+0x8fc>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4648      	mov	r0, r9
 8008f20:	f000 fd5a 	bl	80099d8 <__mcmp>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	da4d      	bge.n	8008fc4 <_dtoa_r+0x8fc>
 8008f28:	1e7b      	subs	r3, r7, #1
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	220a      	movs	r2, #10
 8008f30:	2300      	movs	r3, #0
 8008f32:	4658      	mov	r0, fp
 8008f34:	f000 faf0 	bl	8009518 <__multadd>
 8008f38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 816c 	beq.w	800921a <_dtoa_r+0xb52>
 8008f42:	2300      	movs	r3, #0
 8008f44:	4629      	mov	r1, r5
 8008f46:	220a      	movs	r2, #10
 8008f48:	4658      	mov	r0, fp
 8008f4a:	f000 fae5 	bl	8009518 <__multadd>
 8008f4e:	9b08      	ldr	r3, [sp, #32]
 8008f50:	4605      	mov	r5, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dc61      	bgt.n	800901a <_dtoa_r+0x952>
 8008f56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	dc3b      	bgt.n	8008fd4 <_dtoa_r+0x90c>
 8008f5c:	e05d      	b.n	800901a <_dtoa_r+0x952>
 8008f5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f60:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f64:	e746      	b.n	8008df4 <_dtoa_r+0x72c>
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	1e5c      	subs	r4, r3, #1
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6c:	42a3      	cmp	r3, r4
 8008f6e:	bfbf      	itttt	lt
 8008f70:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f72:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008f74:	1ae3      	sublt	r3, r4, r3
 8008f76:	18d2      	addlt	r2, r2, r3
 8008f78:	bfa8      	it	ge
 8008f7a:	1b1c      	subge	r4, r3, r4
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	bfbe      	ittt	lt
 8008f80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f82:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008f84:	2400      	movlt	r4, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfb5      	itete	lt
 8008f8a:	eba8 0603 	sublt.w	r6, r8, r3
 8008f8e:	4646      	movge	r6, r8
 8008f90:	2300      	movlt	r3, #0
 8008f92:	9b07      	ldrge	r3, [sp, #28]
 8008f94:	e730      	b.n	8008df8 <_dtoa_r+0x730>
 8008f96:	4646      	mov	r6, r8
 8008f98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f9c:	e735      	b.n	8008e0a <_dtoa_r+0x742>
 8008f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fa0:	e75c      	b.n	8008e5c <_dtoa_r+0x794>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e788      	b.n	8008eb8 <_dtoa_r+0x7f0>
 8008fa6:	9b02      	ldr	r3, [sp, #8]
 8008fa8:	e786      	b.n	8008eb8 <_dtoa_r+0x7f0>
 8008faa:	2300      	movs	r3, #0
 8008fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fae:	e788      	b.n	8008ec2 <_dtoa_r+0x7fa>
 8008fb0:	d09f      	beq.n	8008ef2 <_dtoa_r+0x82a>
 8008fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb4:	331c      	adds	r3, #28
 8008fb6:	441a      	add	r2, r3
 8008fb8:	4498      	add	r8, r3
 8008fba:	441e      	add	r6, r3
 8008fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fbe:	e798      	b.n	8008ef2 <_dtoa_r+0x82a>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	e7f6      	b.n	8008fb2 <_dtoa_r+0x8ea>
 8008fc4:	9b07      	ldr	r3, [sp, #28]
 8008fc6:	9704      	str	r7, [sp, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc20      	bgt.n	800900e <_dtoa_r+0x946>
 8008fcc:	9308      	str	r3, [sp, #32]
 8008fce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	dd1e      	ble.n	8009012 <_dtoa_r+0x94a>
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f47f aebc 	bne.w	8008d54 <_dtoa_r+0x68c>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	2205      	movs	r2, #5
 8008fe0:	4658      	mov	r0, fp
 8008fe2:	f000 fa99 	bl	8009518 <__multadd>
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4648      	mov	r0, r9
 8008fec:	f000 fcf4 	bl	80099d8 <__mcmp>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f77f aeaf 	ble.w	8008d54 <_dtoa_r+0x68c>
 8008ff6:	2331      	movs	r3, #49	@ 0x31
 8008ff8:	4656      	mov	r6, sl
 8008ffa:	f806 3b01 	strb.w	r3, [r6], #1
 8008ffe:	9b04      	ldr	r3, [sp, #16]
 8009000:	3301      	adds	r3, #1
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	e6aa      	b.n	8008d5c <_dtoa_r+0x694>
 8009006:	9c07      	ldr	r4, [sp, #28]
 8009008:	9704      	str	r7, [sp, #16]
 800900a:	4625      	mov	r5, r4
 800900c:	e7f3      	b.n	8008ff6 <_dtoa_r+0x92e>
 800900e:	9b07      	ldr	r3, [sp, #28]
 8009010:	9308      	str	r3, [sp, #32]
 8009012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8104 	beq.w	8009222 <_dtoa_r+0xb5a>
 800901a:	2e00      	cmp	r6, #0
 800901c:	dd05      	ble.n	800902a <_dtoa_r+0x962>
 800901e:	4629      	mov	r1, r5
 8009020:	4632      	mov	r2, r6
 8009022:	4658      	mov	r0, fp
 8009024:	f000 fc6c 	bl	8009900 <__lshift>
 8009028:	4605      	mov	r5, r0
 800902a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800902c:	2b00      	cmp	r3, #0
 800902e:	d05a      	beq.n	80090e6 <_dtoa_r+0xa1e>
 8009030:	4658      	mov	r0, fp
 8009032:	6869      	ldr	r1, [r5, #4]
 8009034:	f000 fa0e 	bl	8009454 <_Balloc>
 8009038:	4606      	mov	r6, r0
 800903a:	b928      	cbnz	r0, 8009048 <_dtoa_r+0x980>
 800903c:	4602      	mov	r2, r0
 800903e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009042:	4b83      	ldr	r3, [pc, #524]	@ (8009250 <_dtoa_r+0xb88>)
 8009044:	f7ff bb54 	b.w	80086f0 <_dtoa_r+0x28>
 8009048:	692a      	ldr	r2, [r5, #16]
 800904a:	f105 010c 	add.w	r1, r5, #12
 800904e:	3202      	adds	r2, #2
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	300c      	adds	r0, #12
 8009054:	f001 ff5e 	bl	800af14 <memcpy>
 8009058:	2201      	movs	r2, #1
 800905a:	4631      	mov	r1, r6
 800905c:	4658      	mov	r0, fp
 800905e:	f000 fc4f 	bl	8009900 <__lshift>
 8009062:	462f      	mov	r7, r5
 8009064:	4605      	mov	r5, r0
 8009066:	f10a 0301 	add.w	r3, sl, #1
 800906a:	9307      	str	r3, [sp, #28]
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	4453      	add	r3, sl
 8009070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	930a      	str	r3, [sp, #40]	@ 0x28
 800907a:	9b07      	ldr	r3, [sp, #28]
 800907c:	4621      	mov	r1, r4
 800907e:	3b01      	subs	r3, #1
 8009080:	4648      	mov	r0, r9
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	f7ff fa98 	bl	80085b8 <quorem>
 8009088:	4639      	mov	r1, r7
 800908a:	9008      	str	r0, [sp, #32]
 800908c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009090:	4648      	mov	r0, r9
 8009092:	f000 fca1 	bl	80099d8 <__mcmp>
 8009096:	462a      	mov	r2, r5
 8009098:	9009      	str	r0, [sp, #36]	@ 0x24
 800909a:	4621      	mov	r1, r4
 800909c:	4658      	mov	r0, fp
 800909e:	f000 fcb7 	bl	8009a10 <__mdiff>
 80090a2:	68c2      	ldr	r2, [r0, #12]
 80090a4:	4606      	mov	r6, r0
 80090a6:	bb02      	cbnz	r2, 80090ea <_dtoa_r+0xa22>
 80090a8:	4601      	mov	r1, r0
 80090aa:	4648      	mov	r0, r9
 80090ac:	f000 fc94 	bl	80099d8 <__mcmp>
 80090b0:	4602      	mov	r2, r0
 80090b2:	4631      	mov	r1, r6
 80090b4:	4658      	mov	r0, fp
 80090b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80090b8:	f000 fa0c 	bl	80094d4 <_Bfree>
 80090bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090c0:	9e07      	ldr	r6, [sp, #28]
 80090c2:	ea43 0102 	orr.w	r1, r3, r2
 80090c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c8:	4319      	orrs	r1, r3
 80090ca:	d110      	bne.n	80090ee <_dtoa_r+0xa26>
 80090cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090d0:	d029      	beq.n	8009126 <_dtoa_r+0xa5e>
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd02      	ble.n	80090de <_dtoa_r+0xa16>
 80090d8:	9b08      	ldr	r3, [sp, #32]
 80090da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	f883 8000 	strb.w	r8, [r3]
 80090e4:	e63b      	b.n	8008d5e <_dtoa_r+0x696>
 80090e6:	4628      	mov	r0, r5
 80090e8:	e7bb      	b.n	8009062 <_dtoa_r+0x99a>
 80090ea:	2201      	movs	r2, #1
 80090ec:	e7e1      	b.n	80090b2 <_dtoa_r+0x9ea>
 80090ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	db04      	blt.n	80090fe <_dtoa_r+0xa36>
 80090f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80090f6:	430b      	orrs	r3, r1
 80090f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090fa:	430b      	orrs	r3, r1
 80090fc:	d120      	bne.n	8009140 <_dtoa_r+0xa78>
 80090fe:	2a00      	cmp	r2, #0
 8009100:	dded      	ble.n	80090de <_dtoa_r+0xa16>
 8009102:	4649      	mov	r1, r9
 8009104:	2201      	movs	r2, #1
 8009106:	4658      	mov	r0, fp
 8009108:	f000 fbfa 	bl	8009900 <__lshift>
 800910c:	4621      	mov	r1, r4
 800910e:	4681      	mov	r9, r0
 8009110:	f000 fc62 	bl	80099d8 <__mcmp>
 8009114:	2800      	cmp	r0, #0
 8009116:	dc03      	bgt.n	8009120 <_dtoa_r+0xa58>
 8009118:	d1e1      	bne.n	80090de <_dtoa_r+0xa16>
 800911a:	f018 0f01 	tst.w	r8, #1
 800911e:	d0de      	beq.n	80090de <_dtoa_r+0xa16>
 8009120:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009124:	d1d8      	bne.n	80090d8 <_dtoa_r+0xa10>
 8009126:	2339      	movs	r3, #57	@ 0x39
 8009128:	9a02      	ldr	r2, [sp, #8]
 800912a:	7013      	strb	r3, [r2, #0]
 800912c:	4633      	mov	r3, r6
 800912e:	461e      	mov	r6, r3
 8009130:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009134:	3b01      	subs	r3, #1
 8009136:	2a39      	cmp	r2, #57	@ 0x39
 8009138:	d052      	beq.n	80091e0 <_dtoa_r+0xb18>
 800913a:	3201      	adds	r2, #1
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e60e      	b.n	8008d5e <_dtoa_r+0x696>
 8009140:	2a00      	cmp	r2, #0
 8009142:	dd07      	ble.n	8009154 <_dtoa_r+0xa8c>
 8009144:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009148:	d0ed      	beq.n	8009126 <_dtoa_r+0xa5e>
 800914a:	9a02      	ldr	r2, [sp, #8]
 800914c:	f108 0301 	add.w	r3, r8, #1
 8009150:	7013      	strb	r3, [r2, #0]
 8009152:	e604      	b.n	8008d5e <_dtoa_r+0x696>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	9a07      	ldr	r2, [sp, #28]
 8009158:	f803 8c01 	strb.w	r8, [r3, #-1]
 800915c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800915e:	4293      	cmp	r3, r2
 8009160:	d028      	beq.n	80091b4 <_dtoa_r+0xaec>
 8009162:	4649      	mov	r1, r9
 8009164:	2300      	movs	r3, #0
 8009166:	220a      	movs	r2, #10
 8009168:	4658      	mov	r0, fp
 800916a:	f000 f9d5 	bl	8009518 <__multadd>
 800916e:	42af      	cmp	r7, r5
 8009170:	4681      	mov	r9, r0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	f04f 020a 	mov.w	r2, #10
 800917a:	4639      	mov	r1, r7
 800917c:	4658      	mov	r0, fp
 800917e:	d107      	bne.n	8009190 <_dtoa_r+0xac8>
 8009180:	f000 f9ca 	bl	8009518 <__multadd>
 8009184:	4607      	mov	r7, r0
 8009186:	4605      	mov	r5, r0
 8009188:	9b07      	ldr	r3, [sp, #28]
 800918a:	3301      	adds	r3, #1
 800918c:	9307      	str	r3, [sp, #28]
 800918e:	e774      	b.n	800907a <_dtoa_r+0x9b2>
 8009190:	f000 f9c2 	bl	8009518 <__multadd>
 8009194:	4629      	mov	r1, r5
 8009196:	4607      	mov	r7, r0
 8009198:	2300      	movs	r3, #0
 800919a:	220a      	movs	r2, #10
 800919c:	4658      	mov	r0, fp
 800919e:	f000 f9bb 	bl	8009518 <__multadd>
 80091a2:	4605      	mov	r5, r0
 80091a4:	e7f0      	b.n	8009188 <_dtoa_r+0xac0>
 80091a6:	9b08      	ldr	r3, [sp, #32]
 80091a8:	2700      	movs	r7, #0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfcc      	ite	gt
 80091ae:	461e      	movgt	r6, r3
 80091b0:	2601      	movle	r6, #1
 80091b2:	4456      	add	r6, sl
 80091b4:	4649      	mov	r1, r9
 80091b6:	2201      	movs	r2, #1
 80091b8:	4658      	mov	r0, fp
 80091ba:	f000 fba1 	bl	8009900 <__lshift>
 80091be:	4621      	mov	r1, r4
 80091c0:	4681      	mov	r9, r0
 80091c2:	f000 fc09 	bl	80099d8 <__mcmp>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	dcb0      	bgt.n	800912c <_dtoa_r+0xa64>
 80091ca:	d102      	bne.n	80091d2 <_dtoa_r+0xb0a>
 80091cc:	f018 0f01 	tst.w	r8, #1
 80091d0:	d1ac      	bne.n	800912c <_dtoa_r+0xa64>
 80091d2:	4633      	mov	r3, r6
 80091d4:	461e      	mov	r6, r3
 80091d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091da:	2a30      	cmp	r2, #48	@ 0x30
 80091dc:	d0fa      	beq.n	80091d4 <_dtoa_r+0xb0c>
 80091de:	e5be      	b.n	8008d5e <_dtoa_r+0x696>
 80091e0:	459a      	cmp	sl, r3
 80091e2:	d1a4      	bne.n	800912e <_dtoa_r+0xa66>
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	3301      	adds	r3, #1
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	2331      	movs	r3, #49	@ 0x31
 80091ec:	f88a 3000 	strb.w	r3, [sl]
 80091f0:	e5b5      	b.n	8008d5e <_dtoa_r+0x696>
 80091f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80091f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009254 <_dtoa_r+0xb8c>
 80091f8:	b11b      	cbz	r3, 8009202 <_dtoa_r+0xb3a>
 80091fa:	f10a 0308 	add.w	r3, sl, #8
 80091fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	4650      	mov	r0, sl
 8009204:	b017      	add	sp, #92	@ 0x5c
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800920c:	2b01      	cmp	r3, #1
 800920e:	f77f ae3d 	ble.w	8008e8c <_dtoa_r+0x7c4>
 8009212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009214:	930a      	str	r3, [sp, #40]	@ 0x28
 8009216:	2001      	movs	r0, #1
 8009218:	e65b      	b.n	8008ed2 <_dtoa_r+0x80a>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f77f aed6 	ble.w	8008fce <_dtoa_r+0x906>
 8009222:	4656      	mov	r6, sl
 8009224:	4621      	mov	r1, r4
 8009226:	4648      	mov	r0, r9
 8009228:	f7ff f9c6 	bl	80085b8 <quorem>
 800922c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	f806 8b01 	strb.w	r8, [r6], #1
 8009236:	eba6 020a 	sub.w	r2, r6, sl
 800923a:	4293      	cmp	r3, r2
 800923c:	ddb3      	ble.n	80091a6 <_dtoa_r+0xade>
 800923e:	4649      	mov	r1, r9
 8009240:	2300      	movs	r3, #0
 8009242:	220a      	movs	r2, #10
 8009244:	4658      	mov	r0, fp
 8009246:	f000 f967 	bl	8009518 <__multadd>
 800924a:	4681      	mov	r9, r0
 800924c:	e7ea      	b.n	8009224 <_dtoa_r+0xb5c>
 800924e:	bf00      	nop
 8009250:	0800be7f 	.word	0x0800be7f
 8009254:	0800be03 	.word	0x0800be03

08009258 <_free_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4605      	mov	r5, r0
 800925c:	2900      	cmp	r1, #0
 800925e:	d040      	beq.n	80092e2 <_free_r+0x8a>
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f0c      	subs	r4, r1, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfb8      	it	lt
 800926a:	18e4      	addlt	r4, r4, r3
 800926c:	f000 f8e6 	bl	800943c <__malloc_lock>
 8009270:	4a1c      	ldr	r2, [pc, #112]	@ (80092e4 <_free_r+0x8c>)
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	b933      	cbnz	r3, 8009284 <_free_r+0x2c>
 8009276:	6063      	str	r3, [r4, #4]
 8009278:	6014      	str	r4, [r2, #0]
 800927a:	4628      	mov	r0, r5
 800927c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009280:	f000 b8e2 	b.w	8009448 <__malloc_unlock>
 8009284:	42a3      	cmp	r3, r4
 8009286:	d908      	bls.n	800929a <_free_r+0x42>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	1821      	adds	r1, r4, r0
 800928c:	428b      	cmp	r3, r1
 800928e:	bf01      	itttt	eq
 8009290:	6819      	ldreq	r1, [r3, #0]
 8009292:	685b      	ldreq	r3, [r3, #4]
 8009294:	1809      	addeq	r1, r1, r0
 8009296:	6021      	streq	r1, [r4, #0]
 8009298:	e7ed      	b.n	8009276 <_free_r+0x1e>
 800929a:	461a      	mov	r2, r3
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	b10b      	cbz	r3, 80092a4 <_free_r+0x4c>
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	d9fa      	bls.n	800929a <_free_r+0x42>
 80092a4:	6811      	ldr	r1, [r2, #0]
 80092a6:	1850      	adds	r0, r2, r1
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d10b      	bne.n	80092c4 <_free_r+0x6c>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	4401      	add	r1, r0
 80092b0:	1850      	adds	r0, r2, r1
 80092b2:	4283      	cmp	r3, r0
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	d1e0      	bne.n	800927a <_free_r+0x22>
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4408      	add	r0, r1
 80092be:	6010      	str	r0, [r2, #0]
 80092c0:	6053      	str	r3, [r2, #4]
 80092c2:	e7da      	b.n	800927a <_free_r+0x22>
 80092c4:	d902      	bls.n	80092cc <_free_r+0x74>
 80092c6:	230c      	movs	r3, #12
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	e7d6      	b.n	800927a <_free_r+0x22>
 80092cc:	6820      	ldr	r0, [r4, #0]
 80092ce:	1821      	adds	r1, r4, r0
 80092d0:	428b      	cmp	r3, r1
 80092d2:	bf01      	itttt	eq
 80092d4:	6819      	ldreq	r1, [r3, #0]
 80092d6:	685b      	ldreq	r3, [r3, #4]
 80092d8:	1809      	addeq	r1, r1, r0
 80092da:	6021      	streq	r1, [r4, #0]
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6054      	str	r4, [r2, #4]
 80092e0:	e7cb      	b.n	800927a <_free_r+0x22>
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20000728 	.word	0x20000728

080092e8 <malloc>:
 80092e8:	4b02      	ldr	r3, [pc, #8]	@ (80092f4 <malloc+0xc>)
 80092ea:	4601      	mov	r1, r0
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	f000 b825 	b.w	800933c <_malloc_r>
 80092f2:	bf00      	nop
 80092f4:	20000034 	.word	0x20000034

080092f8 <sbrk_aligned>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4e0f      	ldr	r6, [pc, #60]	@ (8009338 <sbrk_aligned+0x40>)
 80092fc:	460c      	mov	r4, r1
 80092fe:	6831      	ldr	r1, [r6, #0]
 8009300:	4605      	mov	r5, r0
 8009302:	b911      	cbnz	r1, 800930a <sbrk_aligned+0x12>
 8009304:	f001 fdf6 	bl	800aef4 <_sbrk_r>
 8009308:	6030      	str	r0, [r6, #0]
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	f001 fdf1 	bl	800aef4 <_sbrk_r>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d103      	bne.n	800931e <sbrk_aligned+0x26>
 8009316:	f04f 34ff 	mov.w	r4, #4294967295
 800931a:	4620      	mov	r0, r4
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	1cc4      	adds	r4, r0, #3
 8009320:	f024 0403 	bic.w	r4, r4, #3
 8009324:	42a0      	cmp	r0, r4
 8009326:	d0f8      	beq.n	800931a <sbrk_aligned+0x22>
 8009328:	1a21      	subs	r1, r4, r0
 800932a:	4628      	mov	r0, r5
 800932c:	f001 fde2 	bl	800aef4 <_sbrk_r>
 8009330:	3001      	adds	r0, #1
 8009332:	d1f2      	bne.n	800931a <sbrk_aligned+0x22>
 8009334:	e7ef      	b.n	8009316 <sbrk_aligned+0x1e>
 8009336:	bf00      	nop
 8009338:	20000724 	.word	0x20000724

0800933c <_malloc_r>:
 800933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009340:	1ccd      	adds	r5, r1, #3
 8009342:	f025 0503 	bic.w	r5, r5, #3
 8009346:	3508      	adds	r5, #8
 8009348:	2d0c      	cmp	r5, #12
 800934a:	bf38      	it	cc
 800934c:	250c      	movcc	r5, #12
 800934e:	2d00      	cmp	r5, #0
 8009350:	4606      	mov	r6, r0
 8009352:	db01      	blt.n	8009358 <_malloc_r+0x1c>
 8009354:	42a9      	cmp	r1, r5
 8009356:	d904      	bls.n	8009362 <_malloc_r+0x26>
 8009358:	230c      	movs	r3, #12
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	2000      	movs	r0, #0
 800935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009438 <_malloc_r+0xfc>
 8009366:	f000 f869 	bl	800943c <__malloc_lock>
 800936a:	f8d8 3000 	ldr.w	r3, [r8]
 800936e:	461c      	mov	r4, r3
 8009370:	bb44      	cbnz	r4, 80093c4 <_malloc_r+0x88>
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff ffbf 	bl	80092f8 <sbrk_aligned>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	4604      	mov	r4, r0
 800937e:	d158      	bne.n	8009432 <_malloc_r+0xf6>
 8009380:	f8d8 4000 	ldr.w	r4, [r8]
 8009384:	4627      	mov	r7, r4
 8009386:	2f00      	cmp	r7, #0
 8009388:	d143      	bne.n	8009412 <_malloc_r+0xd6>
 800938a:	2c00      	cmp	r4, #0
 800938c:	d04b      	beq.n	8009426 <_malloc_r+0xea>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	4639      	mov	r1, r7
 8009392:	4630      	mov	r0, r6
 8009394:	eb04 0903 	add.w	r9, r4, r3
 8009398:	f001 fdac 	bl	800aef4 <_sbrk_r>
 800939c:	4581      	cmp	r9, r0
 800939e:	d142      	bne.n	8009426 <_malloc_r+0xea>
 80093a0:	6821      	ldr	r1, [r4, #0]
 80093a2:	4630      	mov	r0, r6
 80093a4:	1a6d      	subs	r5, r5, r1
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7ff ffa6 	bl	80092f8 <sbrk_aligned>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d03a      	beq.n	8009426 <_malloc_r+0xea>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	442b      	add	r3, r5
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	f8d8 3000 	ldr.w	r3, [r8]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	bb62      	cbnz	r2, 8009418 <_malloc_r+0xdc>
 80093be:	f8c8 7000 	str.w	r7, [r8]
 80093c2:	e00f      	b.n	80093e4 <_malloc_r+0xa8>
 80093c4:	6822      	ldr	r2, [r4, #0]
 80093c6:	1b52      	subs	r2, r2, r5
 80093c8:	d420      	bmi.n	800940c <_malloc_r+0xd0>
 80093ca:	2a0b      	cmp	r2, #11
 80093cc:	d917      	bls.n	80093fe <_malloc_r+0xc2>
 80093ce:	1961      	adds	r1, r4, r5
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	6025      	str	r5, [r4, #0]
 80093d4:	bf18      	it	ne
 80093d6:	6059      	strne	r1, [r3, #4]
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	bf08      	it	eq
 80093dc:	f8c8 1000 	streq.w	r1, [r8]
 80093e0:	5162      	str	r2, [r4, r5]
 80093e2:	604b      	str	r3, [r1, #4]
 80093e4:	4630      	mov	r0, r6
 80093e6:	f000 f82f 	bl	8009448 <__malloc_unlock>
 80093ea:	f104 000b 	add.w	r0, r4, #11
 80093ee:	1d23      	adds	r3, r4, #4
 80093f0:	f020 0007 	bic.w	r0, r0, #7
 80093f4:	1ac2      	subs	r2, r0, r3
 80093f6:	bf1c      	itt	ne
 80093f8:	1a1b      	subne	r3, r3, r0
 80093fa:	50a3      	strne	r3, [r4, r2]
 80093fc:	e7af      	b.n	800935e <_malloc_r+0x22>
 80093fe:	6862      	ldr	r2, [r4, #4]
 8009400:	42a3      	cmp	r3, r4
 8009402:	bf0c      	ite	eq
 8009404:	f8c8 2000 	streq.w	r2, [r8]
 8009408:	605a      	strne	r2, [r3, #4]
 800940a:	e7eb      	b.n	80093e4 <_malloc_r+0xa8>
 800940c:	4623      	mov	r3, r4
 800940e:	6864      	ldr	r4, [r4, #4]
 8009410:	e7ae      	b.n	8009370 <_malloc_r+0x34>
 8009412:	463c      	mov	r4, r7
 8009414:	687f      	ldr	r7, [r7, #4]
 8009416:	e7b6      	b.n	8009386 <_malloc_r+0x4a>
 8009418:	461a      	mov	r2, r3
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	42a3      	cmp	r3, r4
 800941e:	d1fb      	bne.n	8009418 <_malloc_r+0xdc>
 8009420:	2300      	movs	r3, #0
 8009422:	6053      	str	r3, [r2, #4]
 8009424:	e7de      	b.n	80093e4 <_malloc_r+0xa8>
 8009426:	230c      	movs	r3, #12
 8009428:	4630      	mov	r0, r6
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	f000 f80c 	bl	8009448 <__malloc_unlock>
 8009430:	e794      	b.n	800935c <_malloc_r+0x20>
 8009432:	6005      	str	r5, [r0, #0]
 8009434:	e7d6      	b.n	80093e4 <_malloc_r+0xa8>
 8009436:	bf00      	nop
 8009438:	20000728 	.word	0x20000728

0800943c <__malloc_lock>:
 800943c:	4801      	ldr	r0, [pc, #4]	@ (8009444 <__malloc_lock+0x8>)
 800943e:	f7ff b8a6 	b.w	800858e <__retarget_lock_acquire_recursive>
 8009442:	bf00      	nop
 8009444:	20000720 	.word	0x20000720

08009448 <__malloc_unlock>:
 8009448:	4801      	ldr	r0, [pc, #4]	@ (8009450 <__malloc_unlock+0x8>)
 800944a:	f7ff b8a1 	b.w	8008590 <__retarget_lock_release_recursive>
 800944e:	bf00      	nop
 8009450:	20000720 	.word	0x20000720

08009454 <_Balloc>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	69c6      	ldr	r6, [r0, #28]
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	b976      	cbnz	r6, 800947c <_Balloc+0x28>
 800945e:	2010      	movs	r0, #16
 8009460:	f7ff ff42 	bl	80092e8 <malloc>
 8009464:	4602      	mov	r2, r0
 8009466:	61e0      	str	r0, [r4, #28]
 8009468:	b920      	cbnz	r0, 8009474 <_Balloc+0x20>
 800946a:	216b      	movs	r1, #107	@ 0x6b
 800946c:	4b17      	ldr	r3, [pc, #92]	@ (80094cc <_Balloc+0x78>)
 800946e:	4818      	ldr	r0, [pc, #96]	@ (80094d0 <_Balloc+0x7c>)
 8009470:	f001 fd64 	bl	800af3c <__assert_func>
 8009474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009478:	6006      	str	r6, [r0, #0]
 800947a:	60c6      	str	r6, [r0, #12]
 800947c:	69e6      	ldr	r6, [r4, #28]
 800947e:	68f3      	ldr	r3, [r6, #12]
 8009480:	b183      	cbz	r3, 80094a4 <_Balloc+0x50>
 8009482:	69e3      	ldr	r3, [r4, #28]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800948a:	b9b8      	cbnz	r0, 80094bc <_Balloc+0x68>
 800948c:	2101      	movs	r1, #1
 800948e:	fa01 f605 	lsl.w	r6, r1, r5
 8009492:	1d72      	adds	r2, r6, #5
 8009494:	4620      	mov	r0, r4
 8009496:	0092      	lsls	r2, r2, #2
 8009498:	f001 fd6e 	bl	800af78 <_calloc_r>
 800949c:	b160      	cbz	r0, 80094b8 <_Balloc+0x64>
 800949e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094a2:	e00e      	b.n	80094c2 <_Balloc+0x6e>
 80094a4:	2221      	movs	r2, #33	@ 0x21
 80094a6:	2104      	movs	r1, #4
 80094a8:	4620      	mov	r0, r4
 80094aa:	f001 fd65 	bl	800af78 <_calloc_r>
 80094ae:	69e3      	ldr	r3, [r4, #28]
 80094b0:	60f0      	str	r0, [r6, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e4      	bne.n	8009482 <_Balloc+0x2e>
 80094b8:	2000      	movs	r0, #0
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	6802      	ldr	r2, [r0, #0]
 80094be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094c2:	2300      	movs	r3, #0
 80094c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094c8:	e7f7      	b.n	80094ba <_Balloc+0x66>
 80094ca:	bf00      	nop
 80094cc:	0800be10 	.word	0x0800be10
 80094d0:	0800be90 	.word	0x0800be90

080094d4 <_Bfree>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	69c6      	ldr	r6, [r0, #28]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b976      	cbnz	r6, 80094fc <_Bfree+0x28>
 80094de:	2010      	movs	r0, #16
 80094e0:	f7ff ff02 	bl	80092e8 <malloc>
 80094e4:	4602      	mov	r2, r0
 80094e6:	61e8      	str	r0, [r5, #28]
 80094e8:	b920      	cbnz	r0, 80094f4 <_Bfree+0x20>
 80094ea:	218f      	movs	r1, #143	@ 0x8f
 80094ec:	4b08      	ldr	r3, [pc, #32]	@ (8009510 <_Bfree+0x3c>)
 80094ee:	4809      	ldr	r0, [pc, #36]	@ (8009514 <_Bfree+0x40>)
 80094f0:	f001 fd24 	bl	800af3c <__assert_func>
 80094f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094f8:	6006      	str	r6, [r0, #0]
 80094fa:	60c6      	str	r6, [r0, #12]
 80094fc:	b13c      	cbz	r4, 800950e <_Bfree+0x3a>
 80094fe:	69eb      	ldr	r3, [r5, #28]
 8009500:	6862      	ldr	r2, [r4, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009508:	6021      	str	r1, [r4, #0]
 800950a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	0800be10 	.word	0x0800be10
 8009514:	0800be90 	.word	0x0800be90

08009518 <__multadd>:
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	4607      	mov	r7, r0
 800951e:	460c      	mov	r4, r1
 8009520:	461e      	mov	r6, r3
 8009522:	2000      	movs	r0, #0
 8009524:	690d      	ldr	r5, [r1, #16]
 8009526:	f101 0c14 	add.w	ip, r1, #20
 800952a:	f8dc 3000 	ldr.w	r3, [ip]
 800952e:	3001      	adds	r0, #1
 8009530:	b299      	uxth	r1, r3
 8009532:	fb02 6101 	mla	r1, r2, r1, r6
 8009536:	0c1e      	lsrs	r6, r3, #16
 8009538:	0c0b      	lsrs	r3, r1, #16
 800953a:	fb02 3306 	mla	r3, r2, r6, r3
 800953e:	b289      	uxth	r1, r1
 8009540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009544:	4285      	cmp	r5, r0
 8009546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800954a:	f84c 1b04 	str.w	r1, [ip], #4
 800954e:	dcec      	bgt.n	800952a <__multadd+0x12>
 8009550:	b30e      	cbz	r6, 8009596 <__multadd+0x7e>
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	42ab      	cmp	r3, r5
 8009556:	dc19      	bgt.n	800958c <__multadd+0x74>
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	4638      	mov	r0, r7
 800955c:	3101      	adds	r1, #1
 800955e:	f7ff ff79 	bl	8009454 <_Balloc>
 8009562:	4680      	mov	r8, r0
 8009564:	b928      	cbnz	r0, 8009572 <__multadd+0x5a>
 8009566:	4602      	mov	r2, r0
 8009568:	21ba      	movs	r1, #186	@ 0xba
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <__multadd+0x84>)
 800956c:	480c      	ldr	r0, [pc, #48]	@ (80095a0 <__multadd+0x88>)
 800956e:	f001 fce5 	bl	800af3c <__assert_func>
 8009572:	6922      	ldr	r2, [r4, #16]
 8009574:	f104 010c 	add.w	r1, r4, #12
 8009578:	3202      	adds	r2, #2
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	300c      	adds	r0, #12
 800957e:	f001 fcc9 	bl	800af14 <memcpy>
 8009582:	4621      	mov	r1, r4
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ffa5 	bl	80094d4 <_Bfree>
 800958a:	4644      	mov	r4, r8
 800958c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009590:	3501      	adds	r5, #1
 8009592:	615e      	str	r6, [r3, #20]
 8009594:	6125      	str	r5, [r4, #16]
 8009596:	4620      	mov	r0, r4
 8009598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959c:	0800be7f 	.word	0x0800be7f
 80095a0:	0800be90 	.word	0x0800be90

080095a4 <__s2b>:
 80095a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a8:	4615      	mov	r5, r2
 80095aa:	2209      	movs	r2, #9
 80095ac:	461f      	mov	r7, r3
 80095ae:	3308      	adds	r3, #8
 80095b0:	460c      	mov	r4, r1
 80095b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b6:	4606      	mov	r6, r0
 80095b8:	2201      	movs	r2, #1
 80095ba:	2100      	movs	r1, #0
 80095bc:	429a      	cmp	r2, r3
 80095be:	db09      	blt.n	80095d4 <__s2b+0x30>
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7ff ff47 	bl	8009454 <_Balloc>
 80095c6:	b940      	cbnz	r0, 80095da <__s2b+0x36>
 80095c8:	4602      	mov	r2, r0
 80095ca:	21d3      	movs	r1, #211	@ 0xd3
 80095cc:	4b18      	ldr	r3, [pc, #96]	@ (8009630 <__s2b+0x8c>)
 80095ce:	4819      	ldr	r0, [pc, #100]	@ (8009634 <__s2b+0x90>)
 80095d0:	f001 fcb4 	bl	800af3c <__assert_func>
 80095d4:	0052      	lsls	r2, r2, #1
 80095d6:	3101      	adds	r1, #1
 80095d8:	e7f0      	b.n	80095bc <__s2b+0x18>
 80095da:	9b08      	ldr	r3, [sp, #32]
 80095dc:	2d09      	cmp	r5, #9
 80095de:	6143      	str	r3, [r0, #20]
 80095e0:	f04f 0301 	mov.w	r3, #1
 80095e4:	6103      	str	r3, [r0, #16]
 80095e6:	dd16      	ble.n	8009616 <__s2b+0x72>
 80095e8:	f104 0909 	add.w	r9, r4, #9
 80095ec:	46c8      	mov	r8, r9
 80095ee:	442c      	add	r4, r5
 80095f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095f4:	4601      	mov	r1, r0
 80095f6:	220a      	movs	r2, #10
 80095f8:	4630      	mov	r0, r6
 80095fa:	3b30      	subs	r3, #48	@ 0x30
 80095fc:	f7ff ff8c 	bl	8009518 <__multadd>
 8009600:	45a0      	cmp	r8, r4
 8009602:	d1f5      	bne.n	80095f0 <__s2b+0x4c>
 8009604:	f1a5 0408 	sub.w	r4, r5, #8
 8009608:	444c      	add	r4, r9
 800960a:	1b2d      	subs	r5, r5, r4
 800960c:	1963      	adds	r3, r4, r5
 800960e:	42bb      	cmp	r3, r7
 8009610:	db04      	blt.n	800961c <__s2b+0x78>
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	2509      	movs	r5, #9
 8009618:	340a      	adds	r4, #10
 800961a:	e7f6      	b.n	800960a <__s2b+0x66>
 800961c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009620:	4601      	mov	r1, r0
 8009622:	220a      	movs	r2, #10
 8009624:	4630      	mov	r0, r6
 8009626:	3b30      	subs	r3, #48	@ 0x30
 8009628:	f7ff ff76 	bl	8009518 <__multadd>
 800962c:	e7ee      	b.n	800960c <__s2b+0x68>
 800962e:	bf00      	nop
 8009630:	0800be7f 	.word	0x0800be7f
 8009634:	0800be90 	.word	0x0800be90

08009638 <__hi0bits>:
 8009638:	4603      	mov	r3, r0
 800963a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800963e:	bf3a      	itte	cc
 8009640:	0403      	lslcc	r3, r0, #16
 8009642:	2010      	movcc	r0, #16
 8009644:	2000      	movcs	r0, #0
 8009646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800964a:	bf3c      	itt	cc
 800964c:	021b      	lslcc	r3, r3, #8
 800964e:	3008      	addcc	r0, #8
 8009650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009654:	bf3c      	itt	cc
 8009656:	011b      	lslcc	r3, r3, #4
 8009658:	3004      	addcc	r0, #4
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800965e:	bf3c      	itt	cc
 8009660:	009b      	lslcc	r3, r3, #2
 8009662:	3002      	addcc	r0, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	db05      	blt.n	8009674 <__hi0bits+0x3c>
 8009668:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800966c:	f100 0001 	add.w	r0, r0, #1
 8009670:	bf08      	it	eq
 8009672:	2020      	moveq	r0, #32
 8009674:	4770      	bx	lr

08009676 <__lo0bits>:
 8009676:	6803      	ldr	r3, [r0, #0]
 8009678:	4602      	mov	r2, r0
 800967a:	f013 0007 	ands.w	r0, r3, #7
 800967e:	d00b      	beq.n	8009698 <__lo0bits+0x22>
 8009680:	07d9      	lsls	r1, r3, #31
 8009682:	d421      	bmi.n	80096c8 <__lo0bits+0x52>
 8009684:	0798      	lsls	r0, r3, #30
 8009686:	bf49      	itett	mi
 8009688:	085b      	lsrmi	r3, r3, #1
 800968a:	089b      	lsrpl	r3, r3, #2
 800968c:	2001      	movmi	r0, #1
 800968e:	6013      	strmi	r3, [r2, #0]
 8009690:	bf5c      	itt	pl
 8009692:	2002      	movpl	r0, #2
 8009694:	6013      	strpl	r3, [r2, #0]
 8009696:	4770      	bx	lr
 8009698:	b299      	uxth	r1, r3
 800969a:	b909      	cbnz	r1, 80096a0 <__lo0bits+0x2a>
 800969c:	2010      	movs	r0, #16
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	b2d9      	uxtb	r1, r3
 80096a2:	b909      	cbnz	r1, 80096a8 <__lo0bits+0x32>
 80096a4:	3008      	adds	r0, #8
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	0719      	lsls	r1, r3, #28
 80096aa:	bf04      	itt	eq
 80096ac:	091b      	lsreq	r3, r3, #4
 80096ae:	3004      	addeq	r0, #4
 80096b0:	0799      	lsls	r1, r3, #30
 80096b2:	bf04      	itt	eq
 80096b4:	089b      	lsreq	r3, r3, #2
 80096b6:	3002      	addeq	r0, #2
 80096b8:	07d9      	lsls	r1, r3, #31
 80096ba:	d403      	bmi.n	80096c4 <__lo0bits+0x4e>
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	f100 0001 	add.w	r0, r0, #1
 80096c2:	d003      	beq.n	80096cc <__lo0bits+0x56>
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4770      	bx	lr
 80096c8:	2000      	movs	r0, #0
 80096ca:	4770      	bx	lr
 80096cc:	2020      	movs	r0, #32
 80096ce:	4770      	bx	lr

080096d0 <__i2b>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	460c      	mov	r4, r1
 80096d4:	2101      	movs	r1, #1
 80096d6:	f7ff febd 	bl	8009454 <_Balloc>
 80096da:	4602      	mov	r2, r0
 80096dc:	b928      	cbnz	r0, 80096ea <__i2b+0x1a>
 80096de:	f240 1145 	movw	r1, #325	@ 0x145
 80096e2:	4b04      	ldr	r3, [pc, #16]	@ (80096f4 <__i2b+0x24>)
 80096e4:	4804      	ldr	r0, [pc, #16]	@ (80096f8 <__i2b+0x28>)
 80096e6:	f001 fc29 	bl	800af3c <__assert_func>
 80096ea:	2301      	movs	r3, #1
 80096ec:	6144      	str	r4, [r0, #20]
 80096ee:	6103      	str	r3, [r0, #16]
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	bf00      	nop
 80096f4:	0800be7f 	.word	0x0800be7f
 80096f8:	0800be90 	.word	0x0800be90

080096fc <__multiply>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	4614      	mov	r4, r2
 8009702:	690a      	ldr	r2, [r1, #16]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	460f      	mov	r7, r1
 8009708:	429a      	cmp	r2, r3
 800970a:	bfa2      	ittt	ge
 800970c:	4623      	movge	r3, r4
 800970e:	460c      	movge	r4, r1
 8009710:	461f      	movge	r7, r3
 8009712:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009716:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	6861      	ldr	r1, [r4, #4]
 800971e:	eb0a 0609 	add.w	r6, sl, r9
 8009722:	42b3      	cmp	r3, r6
 8009724:	b085      	sub	sp, #20
 8009726:	bfb8      	it	lt
 8009728:	3101      	addlt	r1, #1
 800972a:	f7ff fe93 	bl	8009454 <_Balloc>
 800972e:	b930      	cbnz	r0, 800973e <__multiply+0x42>
 8009730:	4602      	mov	r2, r0
 8009732:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009736:	4b43      	ldr	r3, [pc, #268]	@ (8009844 <__multiply+0x148>)
 8009738:	4843      	ldr	r0, [pc, #268]	@ (8009848 <__multiply+0x14c>)
 800973a:	f001 fbff 	bl	800af3c <__assert_func>
 800973e:	f100 0514 	add.w	r5, r0, #20
 8009742:	462b      	mov	r3, r5
 8009744:	2200      	movs	r2, #0
 8009746:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800974a:	4543      	cmp	r3, r8
 800974c:	d321      	bcc.n	8009792 <__multiply+0x96>
 800974e:	f107 0114 	add.w	r1, r7, #20
 8009752:	f104 0214 	add.w	r2, r4, #20
 8009756:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800975a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	1b13      	subs	r3, r2, r4
 8009762:	3b15      	subs	r3, #21
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	3304      	adds	r3, #4
 800976a:	f104 0715 	add.w	r7, r4, #21
 800976e:	42ba      	cmp	r2, r7
 8009770:	bf38      	it	cc
 8009772:	2304      	movcc	r3, #4
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	9103      	str	r1, [sp, #12]
 800977a:	428b      	cmp	r3, r1
 800977c:	d80c      	bhi.n	8009798 <__multiply+0x9c>
 800977e:	2e00      	cmp	r6, #0
 8009780:	dd03      	ble.n	800978a <__multiply+0x8e>
 8009782:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009786:	2b00      	cmp	r3, #0
 8009788:	d05a      	beq.n	8009840 <__multiply+0x144>
 800978a:	6106      	str	r6, [r0, #16]
 800978c:	b005      	add	sp, #20
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	f843 2b04 	str.w	r2, [r3], #4
 8009796:	e7d8      	b.n	800974a <__multiply+0x4e>
 8009798:	f8b1 a000 	ldrh.w	sl, [r1]
 800979c:	f1ba 0f00 	cmp.w	sl, #0
 80097a0:	d023      	beq.n	80097ea <__multiply+0xee>
 80097a2:	46a9      	mov	r9, r5
 80097a4:	f04f 0c00 	mov.w	ip, #0
 80097a8:	f104 0e14 	add.w	lr, r4, #20
 80097ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097b0:	f8d9 3000 	ldr.w	r3, [r9]
 80097b4:	fa1f fb87 	uxth.w	fp, r7
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80097be:	4463      	add	r3, ip
 80097c0:	f8d9 c000 	ldr.w	ip, [r9]
 80097c4:	0c3f      	lsrs	r7, r7, #16
 80097c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097ca:	fb0a c707 	mla	r7, sl, r7, ip
 80097ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097d8:	4572      	cmp	r2, lr
 80097da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097de:	f849 3b04 	str.w	r3, [r9], #4
 80097e2:	d8e3      	bhi.n	80097ac <__multiply+0xb0>
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	f845 c003 	str.w	ip, [r5, r3]
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	3104      	adds	r1, #4
 80097ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097f2:	f1b9 0f00 	cmp.w	r9, #0
 80097f6:	d021      	beq.n	800983c <__multiply+0x140>
 80097f8:	46ae      	mov	lr, r5
 80097fa:	f04f 0a00 	mov.w	sl, #0
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	f104 0c14 	add.w	ip, r4, #20
 8009804:	f8bc b000 	ldrh.w	fp, [ip]
 8009808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800980c:	b29b      	uxth	r3, r3
 800980e:	fb09 770b 	mla	r7, r9, fp, r7
 8009812:	4457      	add	r7, sl
 8009814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009818:	f84e 3b04 	str.w	r3, [lr], #4
 800981c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009824:	f8be 3000 	ldrh.w	r3, [lr]
 8009828:	4562      	cmp	r2, ip
 800982a:	fb09 330a 	mla	r3, r9, sl, r3
 800982e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009836:	d8e5      	bhi.n	8009804 <__multiply+0x108>
 8009838:	9f01      	ldr	r7, [sp, #4]
 800983a:	51eb      	str	r3, [r5, r7]
 800983c:	3504      	adds	r5, #4
 800983e:	e79a      	b.n	8009776 <__multiply+0x7a>
 8009840:	3e01      	subs	r6, #1
 8009842:	e79c      	b.n	800977e <__multiply+0x82>
 8009844:	0800be7f 	.word	0x0800be7f
 8009848:	0800be90 	.word	0x0800be90

0800984c <__pow5mult>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4615      	mov	r5, r2
 8009852:	f012 0203 	ands.w	r2, r2, #3
 8009856:	4607      	mov	r7, r0
 8009858:	460e      	mov	r6, r1
 800985a:	d007      	beq.n	800986c <__pow5mult+0x20>
 800985c:	4c25      	ldr	r4, [pc, #148]	@ (80098f4 <__pow5mult+0xa8>)
 800985e:	3a01      	subs	r2, #1
 8009860:	2300      	movs	r3, #0
 8009862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009866:	f7ff fe57 	bl	8009518 <__multadd>
 800986a:	4606      	mov	r6, r0
 800986c:	10ad      	asrs	r5, r5, #2
 800986e:	d03d      	beq.n	80098ec <__pow5mult+0xa0>
 8009870:	69fc      	ldr	r4, [r7, #28]
 8009872:	b97c      	cbnz	r4, 8009894 <__pow5mult+0x48>
 8009874:	2010      	movs	r0, #16
 8009876:	f7ff fd37 	bl	80092e8 <malloc>
 800987a:	4602      	mov	r2, r0
 800987c:	61f8      	str	r0, [r7, #28]
 800987e:	b928      	cbnz	r0, 800988c <__pow5mult+0x40>
 8009880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009884:	4b1c      	ldr	r3, [pc, #112]	@ (80098f8 <__pow5mult+0xac>)
 8009886:	481d      	ldr	r0, [pc, #116]	@ (80098fc <__pow5mult+0xb0>)
 8009888:	f001 fb58 	bl	800af3c <__assert_func>
 800988c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009890:	6004      	str	r4, [r0, #0]
 8009892:	60c4      	str	r4, [r0, #12]
 8009894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800989c:	b94c      	cbnz	r4, 80098b2 <__pow5mult+0x66>
 800989e:	f240 2171 	movw	r1, #625	@ 0x271
 80098a2:	4638      	mov	r0, r7
 80098a4:	f7ff ff14 	bl	80096d0 <__i2b>
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	f04f 0900 	mov.w	r9, #0
 80098b6:	07eb      	lsls	r3, r5, #31
 80098b8:	d50a      	bpl.n	80098d0 <__pow5mult+0x84>
 80098ba:	4631      	mov	r1, r6
 80098bc:	4622      	mov	r2, r4
 80098be:	4638      	mov	r0, r7
 80098c0:	f7ff ff1c 	bl	80096fc <__multiply>
 80098c4:	4680      	mov	r8, r0
 80098c6:	4631      	mov	r1, r6
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7ff fe03 	bl	80094d4 <_Bfree>
 80098ce:	4646      	mov	r6, r8
 80098d0:	106d      	asrs	r5, r5, #1
 80098d2:	d00b      	beq.n	80098ec <__pow5mult+0xa0>
 80098d4:	6820      	ldr	r0, [r4, #0]
 80098d6:	b938      	cbnz	r0, 80098e8 <__pow5mult+0x9c>
 80098d8:	4622      	mov	r2, r4
 80098da:	4621      	mov	r1, r4
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff ff0d 	bl	80096fc <__multiply>
 80098e2:	6020      	str	r0, [r4, #0]
 80098e4:	f8c0 9000 	str.w	r9, [r0]
 80098e8:	4604      	mov	r4, r0
 80098ea:	e7e4      	b.n	80098b6 <__pow5mult+0x6a>
 80098ec:	4630      	mov	r0, r6
 80098ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f2:	bf00      	nop
 80098f4:	0800beec 	.word	0x0800beec
 80098f8:	0800be10 	.word	0x0800be10
 80098fc:	0800be90 	.word	0x0800be90

08009900 <__lshift>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	4607      	mov	r7, r0
 8009908:	4691      	mov	r9, r2
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	6849      	ldr	r1, [r1, #4]
 800990e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009918:	f108 0601 	add.w	r6, r8, #1
 800991c:	42b3      	cmp	r3, r6
 800991e:	db0b      	blt.n	8009938 <__lshift+0x38>
 8009920:	4638      	mov	r0, r7
 8009922:	f7ff fd97 	bl	8009454 <_Balloc>
 8009926:	4605      	mov	r5, r0
 8009928:	b948      	cbnz	r0, 800993e <__lshift+0x3e>
 800992a:	4602      	mov	r2, r0
 800992c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009930:	4b27      	ldr	r3, [pc, #156]	@ (80099d0 <__lshift+0xd0>)
 8009932:	4828      	ldr	r0, [pc, #160]	@ (80099d4 <__lshift+0xd4>)
 8009934:	f001 fb02 	bl	800af3c <__assert_func>
 8009938:	3101      	adds	r1, #1
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	e7ee      	b.n	800991c <__lshift+0x1c>
 800993e:	2300      	movs	r3, #0
 8009940:	f100 0114 	add.w	r1, r0, #20
 8009944:	f100 0210 	add.w	r2, r0, #16
 8009948:	4618      	mov	r0, r3
 800994a:	4553      	cmp	r3, sl
 800994c:	db33      	blt.n	80099b6 <__lshift+0xb6>
 800994e:	6920      	ldr	r0, [r4, #16]
 8009950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009954:	f104 0314 	add.w	r3, r4, #20
 8009958:	f019 091f 	ands.w	r9, r9, #31
 800995c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009964:	d02b      	beq.n	80099be <__lshift+0xbe>
 8009966:	468a      	mov	sl, r1
 8009968:	2200      	movs	r2, #0
 800996a:	f1c9 0e20 	rsb	lr, r9, #32
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	fa00 f009 	lsl.w	r0, r0, r9
 8009974:	4310      	orrs	r0, r2
 8009976:	f84a 0b04 	str.w	r0, [sl], #4
 800997a:	f853 2b04 	ldr.w	r2, [r3], #4
 800997e:	459c      	cmp	ip, r3
 8009980:	fa22 f20e 	lsr.w	r2, r2, lr
 8009984:	d8f3      	bhi.n	800996e <__lshift+0x6e>
 8009986:	ebac 0304 	sub.w	r3, ip, r4
 800998a:	3b15      	subs	r3, #21
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	3304      	adds	r3, #4
 8009992:	f104 0015 	add.w	r0, r4, #21
 8009996:	4584      	cmp	ip, r0
 8009998:	bf38      	it	cc
 800999a:	2304      	movcc	r3, #4
 800999c:	50ca      	str	r2, [r1, r3]
 800999e:	b10a      	cbz	r2, 80099a4 <__lshift+0xa4>
 80099a0:	f108 0602 	add.w	r6, r8, #2
 80099a4:	3e01      	subs	r6, #1
 80099a6:	4638      	mov	r0, r7
 80099a8:	4621      	mov	r1, r4
 80099aa:	612e      	str	r6, [r5, #16]
 80099ac:	f7ff fd92 	bl	80094d4 <_Bfree>
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099ba:	3301      	adds	r3, #1
 80099bc:	e7c5      	b.n	800994a <__lshift+0x4a>
 80099be:	3904      	subs	r1, #4
 80099c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c4:	459c      	cmp	ip, r3
 80099c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80099ca:	d8f9      	bhi.n	80099c0 <__lshift+0xc0>
 80099cc:	e7ea      	b.n	80099a4 <__lshift+0xa4>
 80099ce:	bf00      	nop
 80099d0:	0800be7f 	.word	0x0800be7f
 80099d4:	0800be90 	.word	0x0800be90

080099d8 <__mcmp>:
 80099d8:	4603      	mov	r3, r0
 80099da:	690a      	ldr	r2, [r1, #16]
 80099dc:	6900      	ldr	r0, [r0, #16]
 80099de:	b530      	push	{r4, r5, lr}
 80099e0:	1a80      	subs	r0, r0, r2
 80099e2:	d10e      	bne.n	8009a02 <__mcmp+0x2a>
 80099e4:	3314      	adds	r3, #20
 80099e6:	3114      	adds	r1, #20
 80099e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099f8:	4295      	cmp	r5, r2
 80099fa:	d003      	beq.n	8009a04 <__mcmp+0x2c>
 80099fc:	d205      	bcs.n	8009a0a <__mcmp+0x32>
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009a02:	bd30      	pop	{r4, r5, pc}
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d3f3      	bcc.n	80099f0 <__mcmp+0x18>
 8009a08:	e7fb      	b.n	8009a02 <__mcmp+0x2a>
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	e7f9      	b.n	8009a02 <__mcmp+0x2a>
	...

08009a10 <__mdiff>:
 8009a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	4689      	mov	r9, r1
 8009a16:	4606      	mov	r6, r0
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4648      	mov	r0, r9
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	f7ff ffdb 	bl	80099d8 <__mcmp>
 8009a22:	1e05      	subs	r5, r0, #0
 8009a24:	d112      	bne.n	8009a4c <__mdiff+0x3c>
 8009a26:	4629      	mov	r1, r5
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff fd13 	bl	8009454 <_Balloc>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <__mdiff+0x2e>
 8009a32:	f240 2137 	movw	r1, #567	@ 0x237
 8009a36:	4b3e      	ldr	r3, [pc, #248]	@ (8009b30 <__mdiff+0x120>)
 8009a38:	483e      	ldr	r0, [pc, #248]	@ (8009b34 <__mdiff+0x124>)
 8009a3a:	f001 fa7f 	bl	800af3c <__assert_func>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a44:	4610      	mov	r0, r2
 8009a46:	b003      	add	sp, #12
 8009a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4c:	bfbc      	itt	lt
 8009a4e:	464b      	movlt	r3, r9
 8009a50:	46a1      	movlt	r9, r4
 8009a52:	4630      	mov	r0, r6
 8009a54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a58:	bfba      	itte	lt
 8009a5a:	461c      	movlt	r4, r3
 8009a5c:	2501      	movlt	r5, #1
 8009a5e:	2500      	movge	r5, #0
 8009a60:	f7ff fcf8 	bl	8009454 <_Balloc>
 8009a64:	4602      	mov	r2, r0
 8009a66:	b918      	cbnz	r0, 8009a70 <__mdiff+0x60>
 8009a68:	f240 2145 	movw	r1, #581	@ 0x245
 8009a6c:	4b30      	ldr	r3, [pc, #192]	@ (8009b30 <__mdiff+0x120>)
 8009a6e:	e7e3      	b.n	8009a38 <__mdiff+0x28>
 8009a70:	f100 0b14 	add.w	fp, r0, #20
 8009a74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a78:	f109 0310 	add.w	r3, r9, #16
 8009a7c:	60c5      	str	r5, [r0, #12]
 8009a7e:	f04f 0c00 	mov.w	ip, #0
 8009a82:	f109 0514 	add.w	r5, r9, #20
 8009a86:	46d9      	mov	r9, fp
 8009a88:	6926      	ldr	r6, [r4, #16]
 8009a8a:	f104 0e14 	add.w	lr, r4, #20
 8009a8e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a92:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009aa2:	b281      	uxth	r1, r0
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	fa1f f38a 	uxth.w	r3, sl
 8009aaa:	1a5b      	subs	r3, r3, r1
 8009aac:	0c00      	lsrs	r0, r0, #16
 8009aae:	4463      	add	r3, ip
 8009ab0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ab4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009abe:	4576      	cmp	r6, lr
 8009ac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ac4:	f849 3b04 	str.w	r3, [r9], #4
 8009ac8:	d8e6      	bhi.n	8009a98 <__mdiff+0x88>
 8009aca:	1b33      	subs	r3, r6, r4
 8009acc:	3b15      	subs	r3, #21
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	3415      	adds	r4, #21
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	42a6      	cmp	r6, r4
 8009ad8:	bf38      	it	cc
 8009ada:	2304      	movcc	r3, #4
 8009adc:	441d      	add	r5, r3
 8009ade:	445b      	add	r3, fp
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	462c      	mov	r4, r5
 8009ae4:	4544      	cmp	r4, r8
 8009ae6:	d30e      	bcc.n	8009b06 <__mdiff+0xf6>
 8009ae8:	f108 0103 	add.w	r1, r8, #3
 8009aec:	1b49      	subs	r1, r1, r5
 8009aee:	f021 0103 	bic.w	r1, r1, #3
 8009af2:	3d03      	subs	r5, #3
 8009af4:	45a8      	cmp	r8, r5
 8009af6:	bf38      	it	cc
 8009af8:	2100      	movcc	r1, #0
 8009afa:	440b      	add	r3, r1
 8009afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b00:	b199      	cbz	r1, 8009b2a <__mdiff+0x11a>
 8009b02:	6117      	str	r7, [r2, #16]
 8009b04:	e79e      	b.n	8009a44 <__mdiff+0x34>
 8009b06:	46e6      	mov	lr, ip
 8009b08:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b0c:	fa1f fc81 	uxth.w	ip, r1
 8009b10:	44f4      	add	ip, lr
 8009b12:	0c08      	lsrs	r0, r1, #16
 8009b14:	4471      	add	r1, lr
 8009b16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b1a:	b289      	uxth	r1, r1
 8009b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b24:	f846 1b04 	str.w	r1, [r6], #4
 8009b28:	e7dc      	b.n	8009ae4 <__mdiff+0xd4>
 8009b2a:	3f01      	subs	r7, #1
 8009b2c:	e7e6      	b.n	8009afc <__mdiff+0xec>
 8009b2e:	bf00      	nop
 8009b30:	0800be7f 	.word	0x0800be7f
 8009b34:	0800be90 	.word	0x0800be90

08009b38 <__ulp>:
 8009b38:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <__ulp+0x3c>)
 8009b3a:	400b      	ands	r3, r1
 8009b3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc08      	bgt.n	8009b56 <__ulp+0x1e>
 8009b44:	425b      	negs	r3, r3
 8009b46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b4e:	da04      	bge.n	8009b5a <__ulp+0x22>
 8009b50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b54:	4113      	asrs	r3, r2
 8009b56:	2200      	movs	r2, #0
 8009b58:	e008      	b.n	8009b6c <__ulp+0x34>
 8009b5a:	f1a2 0314 	sub.w	r3, r2, #20
 8009b5e:	2b1e      	cmp	r3, #30
 8009b60:	bfd6      	itet	le
 8009b62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b66:	2201      	movgt	r2, #1
 8009b68:	40da      	lsrle	r2, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	7ff00000 	.word	0x7ff00000

08009b78 <__b2d>:
 8009b78:	6902      	ldr	r2, [r0, #16]
 8009b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7c:	f100 0614 	add.w	r6, r0, #20
 8009b80:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009b84:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009b88:	4f1e      	ldr	r7, [pc, #120]	@ (8009c04 <__b2d+0x8c>)
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7ff fd54 	bl	8009638 <__hi0bits>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f1c0 0020 	rsb	r0, r0, #32
 8009b96:	2b0a      	cmp	r3, #10
 8009b98:	f1a2 0504 	sub.w	r5, r2, #4
 8009b9c:	6008      	str	r0, [r1, #0]
 8009b9e:	dc12      	bgt.n	8009bc6 <__b2d+0x4e>
 8009ba0:	42ae      	cmp	r6, r5
 8009ba2:	bf2c      	ite	cs
 8009ba4:	2200      	movcs	r2, #0
 8009ba6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009baa:	f1c3 0c0b 	rsb	ip, r3, #11
 8009bae:	3315      	adds	r3, #21
 8009bb0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009bb4:	fa04 f303 	lsl.w	r3, r4, r3
 8009bb8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009bbc:	ea4e 0107 	orr.w	r1, lr, r7
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc6:	42ae      	cmp	r6, r5
 8009bc8:	bf36      	itet	cc
 8009bca:	f1a2 0508 	subcc.w	r5, r2, #8
 8009bce:	2200      	movcs	r2, #0
 8009bd0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009bd4:	3b0b      	subs	r3, #11
 8009bd6:	d012      	beq.n	8009bfe <__b2d+0x86>
 8009bd8:	f1c3 0720 	rsb	r7, r3, #32
 8009bdc:	fa22 f107 	lsr.w	r1, r2, r7
 8009be0:	409c      	lsls	r4, r3
 8009be2:	430c      	orrs	r4, r1
 8009be4:	42b5      	cmp	r5, r6
 8009be6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009bea:	bf94      	ite	ls
 8009bec:	2400      	movls	r4, #0
 8009bee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009bf2:	409a      	lsls	r2, r3
 8009bf4:	40fc      	lsrs	r4, r7
 8009bf6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009bfa:	4322      	orrs	r2, r4
 8009bfc:	e7e1      	b.n	8009bc2 <__b2d+0x4a>
 8009bfe:	ea44 0107 	orr.w	r1, r4, r7
 8009c02:	e7de      	b.n	8009bc2 <__b2d+0x4a>
 8009c04:	3ff00000 	.word	0x3ff00000

08009c08 <__d2b>:
 8009c08:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	4690      	mov	r8, r2
 8009c10:	4699      	mov	r9, r3
 8009c12:	9e08      	ldr	r6, [sp, #32]
 8009c14:	f7ff fc1e 	bl	8009454 <_Balloc>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	b930      	cbnz	r0, 8009c2a <__d2b+0x22>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c22:	4b23      	ldr	r3, [pc, #140]	@ (8009cb0 <__d2b+0xa8>)
 8009c24:	4823      	ldr	r0, [pc, #140]	@ (8009cb4 <__d2b+0xac>)
 8009c26:	f001 f989 	bl	800af3c <__assert_func>
 8009c2a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c32:	b10d      	cbz	r5, 8009c38 <__d2b+0x30>
 8009c34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f1b8 0300 	subs.w	r3, r8, #0
 8009c3e:	d024      	beq.n	8009c8a <__d2b+0x82>
 8009c40:	4668      	mov	r0, sp
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	f7ff fd17 	bl	8009676 <__lo0bits>
 8009c48:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c4c:	b1d8      	cbz	r0, 8009c86 <__d2b+0x7e>
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	430b      	orrs	r3, r1
 8009c58:	40c2      	lsrs	r2, r0
 8009c5a:	6163      	str	r3, [r4, #20]
 8009c5c:	9201      	str	r2, [sp, #4]
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bf0c      	ite	eq
 8009c64:	2201      	moveq	r2, #1
 8009c66:	2202      	movne	r2, #2
 8009c68:	61a3      	str	r3, [r4, #24]
 8009c6a:	6122      	str	r2, [r4, #16]
 8009c6c:	b1ad      	cbz	r5, 8009c9a <__d2b+0x92>
 8009c6e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c72:	4405      	add	r5, r0
 8009c74:	6035      	str	r5, [r6, #0]
 8009c76:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	6018      	str	r0, [r3, #0]
 8009c7e:	4620      	mov	r0, r4
 8009c80:	b002      	add	sp, #8
 8009c82:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009c86:	6161      	str	r1, [r4, #20]
 8009c88:	e7e9      	b.n	8009c5e <__d2b+0x56>
 8009c8a:	a801      	add	r0, sp, #4
 8009c8c:	f7ff fcf3 	bl	8009676 <__lo0bits>
 8009c90:	9b01      	ldr	r3, [sp, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	6163      	str	r3, [r4, #20]
 8009c96:	3020      	adds	r0, #32
 8009c98:	e7e7      	b.n	8009c6a <__d2b+0x62>
 8009c9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ca2:	6030      	str	r0, [r6, #0]
 8009ca4:	6918      	ldr	r0, [r3, #16]
 8009ca6:	f7ff fcc7 	bl	8009638 <__hi0bits>
 8009caa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cae:	e7e4      	b.n	8009c7a <__d2b+0x72>
 8009cb0:	0800be7f 	.word	0x0800be7f
 8009cb4:	0800be90 	.word	0x0800be90

08009cb8 <__ratio>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	e9cd 1000 	strd	r1, r0, [sp]
 8009cc2:	a902      	add	r1, sp, #8
 8009cc4:	f7ff ff58 	bl	8009b78 <__b2d>
 8009cc8:	468b      	mov	fp, r1
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	9800      	ldr	r0, [sp, #0]
 8009cd0:	a903      	add	r1, sp, #12
 8009cd2:	f7ff ff51 	bl	8009b78 <__b2d>
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	4689      	mov	r9, r1
 8009cdc:	6919      	ldr	r1, [r3, #16]
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	1ac9      	subs	r1, r1, r3
 8009ce8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cec:	1a9b      	subs	r3, r3, r2
 8009cee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfcd      	iteet	gt
 8009cf6:	463a      	movgt	r2, r7
 8009cf8:	462a      	movle	r2, r5
 8009cfa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cfe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009d02:	bfd8      	it	le
 8009d04:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d08:	464b      	mov	r3, r9
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	f7f6 fd79 	bl	8000804 <__aeabi_ddiv>
 8009d12:	b005      	add	sp, #20
 8009d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d18 <__copybits>:
 8009d18:	3901      	subs	r1, #1
 8009d1a:	b570      	push	{r4, r5, r6, lr}
 8009d1c:	1149      	asrs	r1, r1, #5
 8009d1e:	6914      	ldr	r4, [r2, #16]
 8009d20:	3101      	adds	r1, #1
 8009d22:	f102 0314 	add.w	r3, r2, #20
 8009d26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d2e:	1f05      	subs	r5, r0, #4
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d30c      	bcc.n	8009d4e <__copybits+0x36>
 8009d34:	1aa3      	subs	r3, r4, r2
 8009d36:	3b11      	subs	r3, #17
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	3211      	adds	r2, #17
 8009d3e:	42a2      	cmp	r2, r4
 8009d40:	bf88      	it	hi
 8009d42:	2300      	movhi	r3, #0
 8009d44:	4418      	add	r0, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4288      	cmp	r0, r1
 8009d4a:	d305      	bcc.n	8009d58 <__copybits+0x40>
 8009d4c:	bd70      	pop	{r4, r5, r6, pc}
 8009d4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d52:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d56:	e7eb      	b.n	8009d30 <__copybits+0x18>
 8009d58:	f840 3b04 	str.w	r3, [r0], #4
 8009d5c:	e7f4      	b.n	8009d48 <__copybits+0x30>

08009d5e <__any_on>:
 8009d5e:	f100 0214 	add.w	r2, r0, #20
 8009d62:	6900      	ldr	r0, [r0, #16]
 8009d64:	114b      	asrs	r3, r1, #5
 8009d66:	4298      	cmp	r0, r3
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	db11      	blt.n	8009d90 <__any_on+0x32>
 8009d6c:	dd0a      	ble.n	8009d84 <__any_on+0x26>
 8009d6e:	f011 011f 	ands.w	r1, r1, #31
 8009d72:	d007      	beq.n	8009d84 <__any_on+0x26>
 8009d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d78:	fa24 f001 	lsr.w	r0, r4, r1
 8009d7c:	fa00 f101 	lsl.w	r1, r0, r1
 8009d80:	428c      	cmp	r4, r1
 8009d82:	d10b      	bne.n	8009d9c <__any_on+0x3e>
 8009d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d803      	bhi.n	8009d94 <__any_on+0x36>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	bd10      	pop	{r4, pc}
 8009d90:	4603      	mov	r3, r0
 8009d92:	e7f7      	b.n	8009d84 <__any_on+0x26>
 8009d94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	d0f5      	beq.n	8009d88 <__any_on+0x2a>
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	e7f6      	b.n	8009d8e <__any_on+0x30>

08009da0 <sulp>:
 8009da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da4:	460f      	mov	r7, r1
 8009da6:	4690      	mov	r8, r2
 8009da8:	f7ff fec6 	bl	8009b38 <__ulp>
 8009dac:	4604      	mov	r4, r0
 8009dae:	460d      	mov	r5, r1
 8009db0:	f1b8 0f00 	cmp.w	r8, #0
 8009db4:	d011      	beq.n	8009dda <sulp+0x3a>
 8009db6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009dba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dd0b      	ble.n	8009dda <sulp+0x3a>
 8009dc2:	2400      	movs	r4, #0
 8009dc4:	051b      	lsls	r3, r3, #20
 8009dc6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009dca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009dce:	4622      	mov	r2, r4
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	f7f6 fbed 	bl	80005b0 <__aeabi_dmul>
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de2:	0000      	movs	r0, r0
 8009de4:	0000      	movs	r0, r0
	...

08009de8 <_strtod_l>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	b09f      	sub	sp, #124	@ 0x7c
 8009dee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009df0:	2200      	movs	r2, #0
 8009df2:	460c      	mov	r4, r1
 8009df4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009df6:	f04f 0a00 	mov.w	sl, #0
 8009dfa:	f04f 0b00 	mov.w	fp, #0
 8009dfe:	460a      	mov	r2, r1
 8009e00:	9005      	str	r0, [sp, #20]
 8009e02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e04:	7811      	ldrb	r1, [r2, #0]
 8009e06:	292b      	cmp	r1, #43	@ 0x2b
 8009e08:	d048      	beq.n	8009e9c <_strtod_l+0xb4>
 8009e0a:	d836      	bhi.n	8009e7a <_strtod_l+0x92>
 8009e0c:	290d      	cmp	r1, #13
 8009e0e:	d830      	bhi.n	8009e72 <_strtod_l+0x8a>
 8009e10:	2908      	cmp	r1, #8
 8009e12:	d830      	bhi.n	8009e76 <_strtod_l+0x8e>
 8009e14:	2900      	cmp	r1, #0
 8009e16:	d039      	beq.n	8009e8c <_strtod_l+0xa4>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e1e:	782a      	ldrb	r2, [r5, #0]
 8009e20:	2a30      	cmp	r2, #48	@ 0x30
 8009e22:	f040 80b1 	bne.w	8009f88 <_strtod_l+0x1a0>
 8009e26:	786a      	ldrb	r2, [r5, #1]
 8009e28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e2c:	2a58      	cmp	r2, #88	@ 0x58
 8009e2e:	d16c      	bne.n	8009f0a <_strtod_l+0x122>
 8009e30:	9302      	str	r3, [sp, #8]
 8009e32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e34:	4a8e      	ldr	r2, [pc, #568]	@ (800a070 <_strtod_l+0x288>)
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	9805      	ldr	r0, [sp, #20]
 8009e3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e40:	a919      	add	r1, sp, #100	@ 0x64
 8009e42:	f001 f915 	bl	800b070 <__gethex>
 8009e46:	f010 060f 	ands.w	r6, r0, #15
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	d005      	beq.n	8009e5a <_strtod_l+0x72>
 8009e4e:	2e06      	cmp	r6, #6
 8009e50:	d126      	bne.n	8009ea0 <_strtod_l+0xb8>
 8009e52:	2300      	movs	r3, #0
 8009e54:	3501      	adds	r5, #1
 8009e56:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8584 	bne.w	800a96a <_strtod_l+0xb82>
 8009e62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e64:	b1bb      	cbz	r3, 8009e96 <_strtod_l+0xae>
 8009e66:	4650      	mov	r0, sl
 8009e68:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009e6c:	b01f      	add	sp, #124	@ 0x7c
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	2920      	cmp	r1, #32
 8009e74:	d1d0      	bne.n	8009e18 <_strtod_l+0x30>
 8009e76:	3201      	adds	r2, #1
 8009e78:	e7c3      	b.n	8009e02 <_strtod_l+0x1a>
 8009e7a:	292d      	cmp	r1, #45	@ 0x2d
 8009e7c:	d1cc      	bne.n	8009e18 <_strtod_l+0x30>
 8009e7e:	2101      	movs	r1, #1
 8009e80:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e82:	1c51      	adds	r1, r2, #1
 8009e84:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e86:	7852      	ldrb	r2, [r2, #1]
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	d1c7      	bne.n	8009e1c <_strtod_l+0x34>
 8009e8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e8e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f040 8568 	bne.w	800a966 <_strtod_l+0xb7e>
 8009e96:	4650      	mov	r0, sl
 8009e98:	4659      	mov	r1, fp
 8009e9a:	e7e7      	b.n	8009e6c <_strtod_l+0x84>
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	e7ef      	b.n	8009e80 <_strtod_l+0x98>
 8009ea0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ea2:	b13a      	cbz	r2, 8009eb4 <_strtod_l+0xcc>
 8009ea4:	2135      	movs	r1, #53	@ 0x35
 8009ea6:	a81c      	add	r0, sp, #112	@ 0x70
 8009ea8:	f7ff ff36 	bl	8009d18 <__copybits>
 8009eac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eae:	9805      	ldr	r0, [sp, #20]
 8009eb0:	f7ff fb10 	bl	80094d4 <_Bfree>
 8009eb4:	3e01      	subs	r6, #1
 8009eb6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009eb8:	2e04      	cmp	r6, #4
 8009eba:	d806      	bhi.n	8009eca <_strtod_l+0xe2>
 8009ebc:	e8df f006 	tbb	[pc, r6]
 8009ec0:	201d0314 	.word	0x201d0314
 8009ec4:	14          	.byte	0x14
 8009ec5:	00          	.byte	0x00
 8009ec6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009eca:	05e1      	lsls	r1, r4, #23
 8009ecc:	bf48      	it	mi
 8009ece:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ed2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ed6:	0d1b      	lsrs	r3, r3, #20
 8009ed8:	051b      	lsls	r3, r3, #20
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1bd      	bne.n	8009e5a <_strtod_l+0x72>
 8009ede:	f7fe fb2b 	bl	8008538 <__errno>
 8009ee2:	2322      	movs	r3, #34	@ 0x22
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	e7b8      	b.n	8009e5a <_strtod_l+0x72>
 8009ee8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009eec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ef0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ef4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ef8:	e7e7      	b.n	8009eca <_strtod_l+0xe2>
 8009efa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a074 <_strtod_l+0x28c>
 8009efe:	e7e4      	b.n	8009eca <_strtod_l+0xe2>
 8009f00:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f04:	f04f 3aff 	mov.w	sl, #4294967295
 8009f08:	e7df      	b.n	8009eca <_strtod_l+0xe2>
 8009f0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b30      	cmp	r3, #48	@ 0x30
 8009f14:	d0f9      	beq.n	8009f0a <_strtod_l+0x122>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d09f      	beq.n	8009e5a <_strtod_l+0x72>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f20:	220a      	movs	r2, #10
 8009f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f24:	2300      	movs	r3, #0
 8009f26:	461f      	mov	r7, r3
 8009f28:	9308      	str	r3, [sp, #32]
 8009f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f2c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f2e:	7805      	ldrb	r5, [r0, #0]
 8009f30:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f34:	b2d9      	uxtb	r1, r3
 8009f36:	2909      	cmp	r1, #9
 8009f38:	d928      	bls.n	8009f8c <_strtod_l+0x1a4>
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	494e      	ldr	r1, [pc, #312]	@ (800a078 <_strtod_l+0x290>)
 8009f3e:	f000 ffc7 	bl	800aed0 <strncmp>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d032      	beq.n	8009fac <_strtod_l+0x1c4>
 8009f46:	2000      	movs	r0, #0
 8009f48:	462a      	mov	r2, r5
 8009f4a:	4681      	mov	r9, r0
 8009f4c:	463d      	mov	r5, r7
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2a65      	cmp	r2, #101	@ 0x65
 8009f52:	d001      	beq.n	8009f58 <_strtod_l+0x170>
 8009f54:	2a45      	cmp	r2, #69	@ 0x45
 8009f56:	d114      	bne.n	8009f82 <_strtod_l+0x19a>
 8009f58:	b91d      	cbnz	r5, 8009f62 <_strtod_l+0x17a>
 8009f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f5c:	4302      	orrs	r2, r0
 8009f5e:	d095      	beq.n	8009e8c <_strtod_l+0xa4>
 8009f60:	2500      	movs	r5, #0
 8009f62:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f64:	1c62      	adds	r2, r4, #1
 8009f66:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f68:	7862      	ldrb	r2, [r4, #1]
 8009f6a:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f6c:	d077      	beq.n	800a05e <_strtod_l+0x276>
 8009f6e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f70:	d07b      	beq.n	800a06a <_strtod_l+0x282>
 8009f72:	f04f 0c00 	mov.w	ip, #0
 8009f76:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f7a:	2909      	cmp	r1, #9
 8009f7c:	f240 8082 	bls.w	800a084 <_strtod_l+0x29c>
 8009f80:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f82:	f04f 0800 	mov.w	r8, #0
 8009f86:	e0a2      	b.n	800a0ce <_strtod_l+0x2e6>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e7c7      	b.n	8009f1c <_strtod_l+0x134>
 8009f8c:	2f08      	cmp	r7, #8
 8009f8e:	bfd5      	itete	le
 8009f90:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f92:	9908      	ldrgt	r1, [sp, #32]
 8009f94:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f98:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f9c:	f100 0001 	add.w	r0, r0, #1
 8009fa0:	bfd4      	ite	le
 8009fa2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009fa4:	9308      	strgt	r3, [sp, #32]
 8009fa6:	3701      	adds	r7, #1
 8009fa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009faa:	e7bf      	b.n	8009f2c <_strtod_l+0x144>
 8009fac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fb2:	785a      	ldrb	r2, [r3, #1]
 8009fb4:	b37f      	cbz	r7, 800a016 <_strtod_l+0x22e>
 8009fb6:	4681      	mov	r9, r0
 8009fb8:	463d      	mov	r5, r7
 8009fba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	d912      	bls.n	8009fe8 <_strtod_l+0x200>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e7c4      	b.n	8009f50 <_strtod_l+0x168>
 8009fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc8:	3001      	adds	r0, #1
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fce:	785a      	ldrb	r2, [r3, #1]
 8009fd0:	2a30      	cmp	r2, #48	@ 0x30
 8009fd2:	d0f8      	beq.n	8009fc6 <_strtod_l+0x1de>
 8009fd4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	f200 84cb 	bhi.w	800a974 <_strtod_l+0xb8c>
 8009fde:	4681      	mov	r9, r0
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fe6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fe8:	3a30      	subs	r2, #48	@ 0x30
 8009fea:	f100 0301 	add.w	r3, r0, #1
 8009fee:	d02a      	beq.n	800a046 <_strtod_l+0x25e>
 8009ff0:	4499      	add	r9, r3
 8009ff2:	210a      	movs	r1, #10
 8009ff4:	462b      	mov	r3, r5
 8009ff6:	eb00 0c05 	add.w	ip, r0, r5
 8009ffa:	4563      	cmp	r3, ip
 8009ffc:	d10d      	bne.n	800a01a <_strtod_l+0x232>
 8009ffe:	1c69      	adds	r1, r5, #1
 800a000:	4401      	add	r1, r0
 800a002:	4428      	add	r0, r5
 800a004:	2808      	cmp	r0, #8
 800a006:	dc16      	bgt.n	800a036 <_strtod_l+0x24e>
 800a008:	230a      	movs	r3, #10
 800a00a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a00c:	fb03 2300 	mla	r3, r3, r0, r2
 800a010:	930a      	str	r3, [sp, #40]	@ 0x28
 800a012:	2300      	movs	r3, #0
 800a014:	e018      	b.n	800a048 <_strtod_l+0x260>
 800a016:	4638      	mov	r0, r7
 800a018:	e7da      	b.n	8009fd0 <_strtod_l+0x1e8>
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	f103 0301 	add.w	r3, r3, #1
 800a020:	dc03      	bgt.n	800a02a <_strtod_l+0x242>
 800a022:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a024:	434e      	muls	r6, r1
 800a026:	960a      	str	r6, [sp, #40]	@ 0x28
 800a028:	e7e7      	b.n	8009ffa <_strtod_l+0x212>
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	bfde      	ittt	le
 800a02e:	9e08      	ldrle	r6, [sp, #32]
 800a030:	434e      	mulle	r6, r1
 800a032:	9608      	strle	r6, [sp, #32]
 800a034:	e7e1      	b.n	8009ffa <_strtod_l+0x212>
 800a036:	280f      	cmp	r0, #15
 800a038:	dceb      	bgt.n	800a012 <_strtod_l+0x22a>
 800a03a:	230a      	movs	r3, #10
 800a03c:	9808      	ldr	r0, [sp, #32]
 800a03e:	fb03 2300 	mla	r3, r3, r0, r2
 800a042:	9308      	str	r3, [sp, #32]
 800a044:	e7e5      	b.n	800a012 <_strtod_l+0x22a>
 800a046:	4629      	mov	r1, r5
 800a048:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a04a:	460d      	mov	r5, r1
 800a04c:	1c50      	adds	r0, r2, #1
 800a04e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a050:	7852      	ldrb	r2, [r2, #1]
 800a052:	4618      	mov	r0, r3
 800a054:	e7b1      	b.n	8009fba <_strtod_l+0x1d2>
 800a056:	f04f 0900 	mov.w	r9, #0
 800a05a:	2301      	movs	r3, #1
 800a05c:	e77d      	b.n	8009f5a <_strtod_l+0x172>
 800a05e:	f04f 0c00 	mov.w	ip, #0
 800a062:	1ca2      	adds	r2, r4, #2
 800a064:	9219      	str	r2, [sp, #100]	@ 0x64
 800a066:	78a2      	ldrb	r2, [r4, #2]
 800a068:	e785      	b.n	8009f76 <_strtod_l+0x18e>
 800a06a:	f04f 0c01 	mov.w	ip, #1
 800a06e:	e7f8      	b.n	800a062 <_strtod_l+0x27a>
 800a070:	0800c000 	.word	0x0800c000
 800a074:	7ff00000 	.word	0x7ff00000
 800a078:	0800bfe8 	.word	0x0800bfe8
 800a07c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a07e:	1c51      	adds	r1, r2, #1
 800a080:	9119      	str	r1, [sp, #100]	@ 0x64
 800a082:	7852      	ldrb	r2, [r2, #1]
 800a084:	2a30      	cmp	r2, #48	@ 0x30
 800a086:	d0f9      	beq.n	800a07c <_strtod_l+0x294>
 800a088:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a08c:	2908      	cmp	r1, #8
 800a08e:	f63f af78 	bhi.w	8009f82 <_strtod_l+0x19a>
 800a092:	f04f 080a 	mov.w	r8, #10
 800a096:	3a30      	subs	r2, #48	@ 0x30
 800a098:	920e      	str	r2, [sp, #56]	@ 0x38
 800a09a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a09c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a09e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0a0:	1c56      	adds	r6, r2, #1
 800a0a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a0a4:	7852      	ldrb	r2, [r2, #1]
 800a0a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a0aa:	f1be 0f09 	cmp.w	lr, #9
 800a0ae:	d939      	bls.n	800a124 <_strtod_l+0x33c>
 800a0b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a0b6:	1a76      	subs	r6, r6, r1
 800a0b8:	2e08      	cmp	r6, #8
 800a0ba:	dc03      	bgt.n	800a0c4 <_strtod_l+0x2dc>
 800a0bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0be:	4588      	cmp	r8, r1
 800a0c0:	bfa8      	it	ge
 800a0c2:	4688      	movge	r8, r1
 800a0c4:	f1bc 0f00 	cmp.w	ip, #0
 800a0c8:	d001      	beq.n	800a0ce <_strtod_l+0x2e6>
 800a0ca:	f1c8 0800 	rsb	r8, r8, #0
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	d14e      	bne.n	800a170 <_strtod_l+0x388>
 800a0d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d4:	4308      	orrs	r0, r1
 800a0d6:	f47f aec0 	bne.w	8009e5a <_strtod_l+0x72>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f47f aed6 	bne.w	8009e8c <_strtod_l+0xa4>
 800a0e0:	2a69      	cmp	r2, #105	@ 0x69
 800a0e2:	d028      	beq.n	800a136 <_strtod_l+0x34e>
 800a0e4:	dc25      	bgt.n	800a132 <_strtod_l+0x34a>
 800a0e6:	2a49      	cmp	r2, #73	@ 0x49
 800a0e8:	d025      	beq.n	800a136 <_strtod_l+0x34e>
 800a0ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0ec:	f47f aece 	bne.w	8009e8c <_strtod_l+0xa4>
 800a0f0:	499a      	ldr	r1, [pc, #616]	@ (800a35c <_strtod_l+0x574>)
 800a0f2:	a819      	add	r0, sp, #100	@ 0x64
 800a0f4:	f001 f9de 	bl	800b4b4 <__match>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	f43f aec7 	beq.w	8009e8c <_strtod_l+0xa4>
 800a0fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b28      	cmp	r3, #40	@ 0x28
 800a104:	d12e      	bne.n	800a164 <_strtod_l+0x37c>
 800a106:	4996      	ldr	r1, [pc, #600]	@ (800a360 <_strtod_l+0x578>)
 800a108:	aa1c      	add	r2, sp, #112	@ 0x70
 800a10a:	a819      	add	r0, sp, #100	@ 0x64
 800a10c:	f001 f9e6 	bl	800b4dc <__hexnan>
 800a110:	2805      	cmp	r0, #5
 800a112:	d127      	bne.n	800a164 <_strtod_l+0x37c>
 800a114:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a116:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a11a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a11e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a122:	e69a      	b.n	8009e5a <_strtod_l+0x72>
 800a124:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a126:	fb08 2101 	mla	r1, r8, r1, r2
 800a12a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a12e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a130:	e7b5      	b.n	800a09e <_strtod_l+0x2b6>
 800a132:	2a6e      	cmp	r2, #110	@ 0x6e
 800a134:	e7da      	b.n	800a0ec <_strtod_l+0x304>
 800a136:	498b      	ldr	r1, [pc, #556]	@ (800a364 <_strtod_l+0x57c>)
 800a138:	a819      	add	r0, sp, #100	@ 0x64
 800a13a:	f001 f9bb 	bl	800b4b4 <__match>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f aea4 	beq.w	8009e8c <_strtod_l+0xa4>
 800a144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a146:	4988      	ldr	r1, [pc, #544]	@ (800a368 <_strtod_l+0x580>)
 800a148:	3b01      	subs	r3, #1
 800a14a:	a819      	add	r0, sp, #100	@ 0x64
 800a14c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a14e:	f001 f9b1 	bl	800b4b4 <__match>
 800a152:	b910      	cbnz	r0, 800a15a <_strtod_l+0x372>
 800a154:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a156:	3301      	adds	r3, #1
 800a158:	9319      	str	r3, [sp, #100]	@ 0x64
 800a15a:	f04f 0a00 	mov.w	sl, #0
 800a15e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a36c <_strtod_l+0x584>
 800a162:	e67a      	b.n	8009e5a <_strtod_l+0x72>
 800a164:	4882      	ldr	r0, [pc, #520]	@ (800a370 <_strtod_l+0x588>)
 800a166:	f000 fee3 	bl	800af30 <nan>
 800a16a:	4682      	mov	sl, r0
 800a16c:	468b      	mov	fp, r1
 800a16e:	e674      	b.n	8009e5a <_strtod_l+0x72>
 800a170:	eba8 0309 	sub.w	r3, r8, r9
 800a174:	2f00      	cmp	r7, #0
 800a176:	bf08      	it	eq
 800a178:	462f      	moveq	r7, r5
 800a17a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a17c:	2d10      	cmp	r5, #16
 800a17e:	462c      	mov	r4, r5
 800a180:	9309      	str	r3, [sp, #36]	@ 0x24
 800a182:	bfa8      	it	ge
 800a184:	2410      	movge	r4, #16
 800a186:	f7f6 f999 	bl	80004bc <__aeabi_ui2d>
 800a18a:	2d09      	cmp	r5, #9
 800a18c:	4682      	mov	sl, r0
 800a18e:	468b      	mov	fp, r1
 800a190:	dc11      	bgt.n	800a1b6 <_strtod_l+0x3ce>
 800a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	f43f ae60 	beq.w	8009e5a <_strtod_l+0x72>
 800a19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a19c:	dd76      	ble.n	800a28c <_strtod_l+0x4a4>
 800a19e:	2b16      	cmp	r3, #22
 800a1a0:	dc5d      	bgt.n	800a25e <_strtod_l+0x476>
 800a1a2:	4974      	ldr	r1, [pc, #464]	@ (800a374 <_strtod_l+0x58c>)
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b0:	f7f6 f9fe 	bl	80005b0 <__aeabi_dmul>
 800a1b4:	e7d9      	b.n	800a16a <_strtod_l+0x382>
 800a1b6:	4b6f      	ldr	r3, [pc, #444]	@ (800a374 <_strtod_l+0x58c>)
 800a1b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1c0:	f7f6 f9f6 	bl	80005b0 <__aeabi_dmul>
 800a1c4:	4682      	mov	sl, r0
 800a1c6:	9808      	ldr	r0, [sp, #32]
 800a1c8:	468b      	mov	fp, r1
 800a1ca:	f7f6 f977 	bl	80004bc <__aeabi_ui2d>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	f7f6 f835 	bl	8000244 <__adddf3>
 800a1da:	2d0f      	cmp	r5, #15
 800a1dc:	4682      	mov	sl, r0
 800a1de:	468b      	mov	fp, r1
 800a1e0:	ddd7      	ble.n	800a192 <_strtod_l+0x3aa>
 800a1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e4:	1b2c      	subs	r4, r5, r4
 800a1e6:	441c      	add	r4, r3
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	f340 8096 	ble.w	800a31a <_strtod_l+0x532>
 800a1ee:	f014 030f 	ands.w	r3, r4, #15
 800a1f2:	d00a      	beq.n	800a20a <_strtod_l+0x422>
 800a1f4:	495f      	ldr	r1, [pc, #380]	@ (800a374 <_strtod_l+0x58c>)
 800a1f6:	4652      	mov	r2, sl
 800a1f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a200:	465b      	mov	r3, fp
 800a202:	f7f6 f9d5 	bl	80005b0 <__aeabi_dmul>
 800a206:	4682      	mov	sl, r0
 800a208:	468b      	mov	fp, r1
 800a20a:	f034 040f 	bics.w	r4, r4, #15
 800a20e:	d073      	beq.n	800a2f8 <_strtod_l+0x510>
 800a210:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a214:	dd48      	ble.n	800a2a8 <_strtod_l+0x4c0>
 800a216:	2400      	movs	r4, #0
 800a218:	46a0      	mov	r8, r4
 800a21a:	46a1      	mov	r9, r4
 800a21c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a21e:	2322      	movs	r3, #34	@ 0x22
 800a220:	f04f 0a00 	mov.w	sl, #0
 800a224:	9a05      	ldr	r2, [sp, #20]
 800a226:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a36c <_strtod_l+0x584>
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f43f ae13 	beq.w	8009e5a <_strtod_l+0x72>
 800a234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a236:	9805      	ldr	r0, [sp, #20]
 800a238:	f7ff f94c 	bl	80094d4 <_Bfree>
 800a23c:	4649      	mov	r1, r9
 800a23e:	9805      	ldr	r0, [sp, #20]
 800a240:	f7ff f948 	bl	80094d4 <_Bfree>
 800a244:	4641      	mov	r1, r8
 800a246:	9805      	ldr	r0, [sp, #20]
 800a248:	f7ff f944 	bl	80094d4 <_Bfree>
 800a24c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a24e:	9805      	ldr	r0, [sp, #20]
 800a250:	f7ff f940 	bl	80094d4 <_Bfree>
 800a254:	4621      	mov	r1, r4
 800a256:	9805      	ldr	r0, [sp, #20]
 800a258:	f7ff f93c 	bl	80094d4 <_Bfree>
 800a25c:	e5fd      	b.n	8009e5a <_strtod_l+0x72>
 800a25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a260:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a264:	4293      	cmp	r3, r2
 800a266:	dbbc      	blt.n	800a1e2 <_strtod_l+0x3fa>
 800a268:	4c42      	ldr	r4, [pc, #264]	@ (800a374 <_strtod_l+0x58c>)
 800a26a:	f1c5 050f 	rsb	r5, r5, #15
 800a26e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a272:	4652      	mov	r2, sl
 800a274:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a278:	465b      	mov	r3, fp
 800a27a:	f7f6 f999 	bl	80005b0 <__aeabi_dmul>
 800a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a280:	1b5d      	subs	r5, r3, r5
 800a282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a286:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a28a:	e791      	b.n	800a1b0 <_strtod_l+0x3c8>
 800a28c:	3316      	adds	r3, #22
 800a28e:	dba8      	blt.n	800a1e2 <_strtod_l+0x3fa>
 800a290:	4b38      	ldr	r3, [pc, #224]	@ (800a374 <_strtod_l+0x58c>)
 800a292:	eba9 0808 	sub.w	r8, r9, r8
 800a296:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a29a:	4650      	mov	r0, sl
 800a29c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	f7f6 faaf 	bl	8000804 <__aeabi_ddiv>
 800a2a6:	e760      	b.n	800a16a <_strtod_l+0x382>
 800a2a8:	4b33      	ldr	r3, [pc, #204]	@ (800a378 <_strtod_l+0x590>)
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	9308      	str	r3, [sp, #32]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	461e      	mov	r6, r3
 800a2b4:	1124      	asrs	r4, r4, #4
 800a2b6:	2c01      	cmp	r4, #1
 800a2b8:	dc21      	bgt.n	800a2fe <_strtod_l+0x516>
 800a2ba:	b10b      	cbz	r3, 800a2c0 <_strtod_l+0x4d8>
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	492d      	ldr	r1, [pc, #180]	@ (800a378 <_strtod_l+0x590>)
 800a2c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2ca:	4652      	mov	r2, sl
 800a2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	f7f6 f96d 	bl	80005b0 <__aeabi_dmul>
 800a2d6:	4b25      	ldr	r3, [pc, #148]	@ (800a36c <_strtod_l+0x584>)
 800a2d8:	460a      	mov	r2, r1
 800a2da:	400b      	ands	r3, r1
 800a2dc:	4927      	ldr	r1, [pc, #156]	@ (800a37c <_strtod_l+0x594>)
 800a2de:	4682      	mov	sl, r0
 800a2e0:	428b      	cmp	r3, r1
 800a2e2:	d898      	bhi.n	800a216 <_strtod_l+0x42e>
 800a2e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	bf86      	itte	hi
 800a2ec:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2f0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a380 <_strtod_l+0x598>
 800a2f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	e07a      	b.n	800a3f4 <_strtod_l+0x60c>
 800a2fe:	07e2      	lsls	r2, r4, #31
 800a300:	d505      	bpl.n	800a30e <_strtod_l+0x526>
 800a302:	9b08      	ldr	r3, [sp, #32]
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f6 f952 	bl	80005b0 <__aeabi_dmul>
 800a30c:	2301      	movs	r3, #1
 800a30e:	9a08      	ldr	r2, [sp, #32]
 800a310:	3601      	adds	r6, #1
 800a312:	3208      	adds	r2, #8
 800a314:	1064      	asrs	r4, r4, #1
 800a316:	9208      	str	r2, [sp, #32]
 800a318:	e7cd      	b.n	800a2b6 <_strtod_l+0x4ce>
 800a31a:	d0ed      	beq.n	800a2f8 <_strtod_l+0x510>
 800a31c:	4264      	negs	r4, r4
 800a31e:	f014 020f 	ands.w	r2, r4, #15
 800a322:	d00a      	beq.n	800a33a <_strtod_l+0x552>
 800a324:	4b13      	ldr	r3, [pc, #76]	@ (800a374 <_strtod_l+0x58c>)
 800a326:	4650      	mov	r0, sl
 800a328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a32c:	4659      	mov	r1, fp
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f6 fa67 	bl	8000804 <__aeabi_ddiv>
 800a336:	4682      	mov	sl, r0
 800a338:	468b      	mov	fp, r1
 800a33a:	1124      	asrs	r4, r4, #4
 800a33c:	d0dc      	beq.n	800a2f8 <_strtod_l+0x510>
 800a33e:	2c1f      	cmp	r4, #31
 800a340:	dd20      	ble.n	800a384 <_strtod_l+0x59c>
 800a342:	2400      	movs	r4, #0
 800a344:	46a0      	mov	r8, r4
 800a346:	46a1      	mov	r9, r4
 800a348:	940a      	str	r4, [sp, #40]	@ 0x28
 800a34a:	2322      	movs	r3, #34	@ 0x22
 800a34c:	9a05      	ldr	r2, [sp, #20]
 800a34e:	f04f 0a00 	mov.w	sl, #0
 800a352:	f04f 0b00 	mov.w	fp, #0
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e768      	b.n	800a22c <_strtod_l+0x444>
 800a35a:	bf00      	nop
 800a35c:	0800bdd7 	.word	0x0800bdd7
 800a360:	0800bfec 	.word	0x0800bfec
 800a364:	0800bdcf 	.word	0x0800bdcf
 800a368:	0800be06 	.word	0x0800be06
 800a36c:	7ff00000 	.word	0x7ff00000
 800a370:	0800c195 	.word	0x0800c195
 800a374:	0800bf20 	.word	0x0800bf20
 800a378:	0800bef8 	.word	0x0800bef8
 800a37c:	7ca00000 	.word	0x7ca00000
 800a380:	7fefffff 	.word	0x7fefffff
 800a384:	f014 0310 	ands.w	r3, r4, #16
 800a388:	bf18      	it	ne
 800a38a:	236a      	movne	r3, #106	@ 0x6a
 800a38c:	4650      	mov	r0, sl
 800a38e:	9308      	str	r3, [sp, #32]
 800a390:	4659      	mov	r1, fp
 800a392:	2300      	movs	r3, #0
 800a394:	4ea9      	ldr	r6, [pc, #676]	@ (800a63c <_strtod_l+0x854>)
 800a396:	07e2      	lsls	r2, r4, #31
 800a398:	d504      	bpl.n	800a3a4 <_strtod_l+0x5bc>
 800a39a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a39e:	f7f6 f907 	bl	80005b0 <__aeabi_dmul>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	1064      	asrs	r4, r4, #1
 800a3a6:	f106 0608 	add.w	r6, r6, #8
 800a3aa:	d1f4      	bne.n	800a396 <_strtod_l+0x5ae>
 800a3ac:	b10b      	cbz	r3, 800a3b2 <_strtod_l+0x5ca>
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	b1b3      	cbz	r3, 800a3e4 <_strtod_l+0x5fc>
 800a3b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	dd0f      	ble.n	800a3e4 <_strtod_l+0x5fc>
 800a3c4:	2b1f      	cmp	r3, #31
 800a3c6:	dd57      	ble.n	800a478 <_strtod_l+0x690>
 800a3c8:	2b34      	cmp	r3, #52	@ 0x34
 800a3ca:	bfd8      	it	le
 800a3cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a3d0:	f04f 0a00 	mov.w	sl, #0
 800a3d4:	bfcf      	iteee	gt
 800a3d6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3da:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3de:	4093      	lslle	r3, r2
 800a3e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	f7f6 fb48 	bl	8000a80 <__aeabi_dcmpeq>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d1a6      	bne.n	800a342 <_strtod_l+0x55a>
 800a3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f6:	463a      	mov	r2, r7
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	f7ff f8d0 	bl	80095a4 <__s2b>
 800a404:	900a      	str	r0, [sp, #40]	@ 0x28
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f af05 	beq.w	800a216 <_strtod_l+0x42e>
 800a40c:	2400      	movs	r4, #0
 800a40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a410:	eba9 0308 	sub.w	r3, r9, r8
 800a414:	2a00      	cmp	r2, #0
 800a416:	bfa8      	it	ge
 800a418:	2300      	movge	r3, #0
 800a41a:	46a0      	mov	r8, r4
 800a41c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a41e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a422:	9316      	str	r3, [sp, #88]	@ 0x58
 800a424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a426:	9805      	ldr	r0, [sp, #20]
 800a428:	6859      	ldr	r1, [r3, #4]
 800a42a:	f7ff f813 	bl	8009454 <_Balloc>
 800a42e:	4681      	mov	r9, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	f43f aef4 	beq.w	800a21e <_strtod_l+0x436>
 800a436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a438:	300c      	adds	r0, #12
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	f103 010c 	add.w	r1, r3, #12
 800a440:	3202      	adds	r2, #2
 800a442:	0092      	lsls	r2, r2, #2
 800a444:	f000 fd66 	bl	800af14 <memcpy>
 800a448:	ab1c      	add	r3, sp, #112	@ 0x70
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	4652      	mov	r2, sl
 800a452:	465b      	mov	r3, fp
 800a454:	9805      	ldr	r0, [sp, #20]
 800a456:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a45a:	f7ff fbd5 	bl	8009c08 <__d2b>
 800a45e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a460:	2800      	cmp	r0, #0
 800a462:	f43f aedc 	beq.w	800a21e <_strtod_l+0x436>
 800a466:	2101      	movs	r1, #1
 800a468:	9805      	ldr	r0, [sp, #20]
 800a46a:	f7ff f931 	bl	80096d0 <__i2b>
 800a46e:	4680      	mov	r8, r0
 800a470:	b948      	cbnz	r0, 800a486 <_strtod_l+0x69e>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	e6d2      	b.n	800a21e <_strtod_l+0x436>
 800a478:	f04f 32ff 	mov.w	r2, #4294967295
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	ea03 0a0a 	and.w	sl, r3, sl
 800a484:	e7ae      	b.n	800a3e4 <_strtod_l+0x5fc>
 800a486:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a488:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a48a:	2d00      	cmp	r5, #0
 800a48c:	bfab      	itete	ge
 800a48e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a490:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a492:	18ef      	addge	r7, r5, r3
 800a494:	1b5e      	sublt	r6, r3, r5
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	bfa8      	it	ge
 800a49a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a49c:	eba5 0503 	sub.w	r5, r5, r3
 800a4a0:	4415      	add	r5, r2
 800a4a2:	4b67      	ldr	r3, [pc, #412]	@ (800a640 <_strtod_l+0x858>)
 800a4a4:	f105 35ff 	add.w	r5, r5, #4294967295
 800a4a8:	bfb8      	it	lt
 800a4aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a4ac:	429d      	cmp	r5, r3
 800a4ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a4b2:	da50      	bge.n	800a556 <_strtod_l+0x76e>
 800a4b4:	1b5b      	subs	r3, r3, r5
 800a4b6:	2b1f      	cmp	r3, #31
 800a4b8:	f04f 0101 	mov.w	r1, #1
 800a4bc:	eba2 0203 	sub.w	r2, r2, r3
 800a4c0:	dc3d      	bgt.n	800a53e <_strtod_l+0x756>
 800a4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4cc:	18bd      	adds	r5, r7, r2
 800a4ce:	9b08      	ldr	r3, [sp, #32]
 800a4d0:	42af      	cmp	r7, r5
 800a4d2:	4416      	add	r6, r2
 800a4d4:	441e      	add	r6, r3
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	bfa8      	it	ge
 800a4da:	462b      	movge	r3, r5
 800a4dc:	42b3      	cmp	r3, r6
 800a4de:	bfa8      	it	ge
 800a4e0:	4633      	movge	r3, r6
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	bfc2      	ittt	gt
 800a4e6:	1aed      	subgt	r5, r5, r3
 800a4e8:	1af6      	subgt	r6, r6, r3
 800a4ea:	1aff      	subgt	r7, r7, r3
 800a4ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	dd16      	ble.n	800a520 <_strtod_l+0x738>
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	9805      	ldr	r0, [sp, #20]
 800a4f8:	f7ff f9a8 	bl	800984c <__pow5mult>
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0b7      	beq.n	800a472 <_strtod_l+0x68a>
 800a502:	4601      	mov	r1, r0
 800a504:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a506:	9805      	ldr	r0, [sp, #20]
 800a508:	f7ff f8f8 	bl	80096fc <__multiply>
 800a50c:	900e      	str	r0, [sp, #56]	@ 0x38
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f ae85 	beq.w	800a21e <_strtod_l+0x436>
 800a514:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a516:	9805      	ldr	r0, [sp, #20]
 800a518:	f7fe ffdc 	bl	80094d4 <_Bfree>
 800a51c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a51e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a520:	2d00      	cmp	r5, #0
 800a522:	dc1d      	bgt.n	800a560 <_strtod_l+0x778>
 800a524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	dd23      	ble.n	800a572 <_strtod_l+0x78a>
 800a52a:	4649      	mov	r1, r9
 800a52c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a52e:	9805      	ldr	r0, [sp, #20]
 800a530:	f7ff f98c 	bl	800984c <__pow5mult>
 800a534:	4681      	mov	r9, r0
 800a536:	b9e0      	cbnz	r0, 800a572 <_strtod_l+0x78a>
 800a538:	f04f 0900 	mov.w	r9, #0
 800a53c:	e66f      	b.n	800a21e <_strtod_l+0x436>
 800a53e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a542:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a546:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a54a:	35e2      	adds	r5, #226	@ 0xe2
 800a54c:	fa01 f305 	lsl.w	r3, r1, r5
 800a550:	9310      	str	r3, [sp, #64]	@ 0x40
 800a552:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a554:	e7ba      	b.n	800a4cc <_strtod_l+0x6e4>
 800a556:	2300      	movs	r3, #0
 800a558:	9310      	str	r3, [sp, #64]	@ 0x40
 800a55a:	2301      	movs	r3, #1
 800a55c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a55e:	e7b5      	b.n	800a4cc <_strtod_l+0x6e4>
 800a560:	462a      	mov	r2, r5
 800a562:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	f7ff f9cb 	bl	8009900 <__lshift>
 800a56a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d1d9      	bne.n	800a524 <_strtod_l+0x73c>
 800a570:	e655      	b.n	800a21e <_strtod_l+0x436>
 800a572:	2e00      	cmp	r6, #0
 800a574:	dd07      	ble.n	800a586 <_strtod_l+0x79e>
 800a576:	4649      	mov	r1, r9
 800a578:	4632      	mov	r2, r6
 800a57a:	9805      	ldr	r0, [sp, #20]
 800a57c:	f7ff f9c0 	bl	8009900 <__lshift>
 800a580:	4681      	mov	r9, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	d0d8      	beq.n	800a538 <_strtod_l+0x750>
 800a586:	2f00      	cmp	r7, #0
 800a588:	dd08      	ble.n	800a59c <_strtod_l+0x7b4>
 800a58a:	4641      	mov	r1, r8
 800a58c:	463a      	mov	r2, r7
 800a58e:	9805      	ldr	r0, [sp, #20]
 800a590:	f7ff f9b6 	bl	8009900 <__lshift>
 800a594:	4680      	mov	r8, r0
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f ae41 	beq.w	800a21e <_strtod_l+0x436>
 800a59c:	464a      	mov	r2, r9
 800a59e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5a0:	9805      	ldr	r0, [sp, #20]
 800a5a2:	f7ff fa35 	bl	8009a10 <__mdiff>
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f43f ae38 	beq.w	800a21e <_strtod_l+0x436>
 800a5ae:	68c3      	ldr	r3, [r0, #12]
 800a5b0:	4641      	mov	r1, r8
 800a5b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60c3      	str	r3, [r0, #12]
 800a5b8:	f7ff fa0e 	bl	80099d8 <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	da45      	bge.n	800a64c <_strtod_l+0x864>
 800a5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a5c6:	d16b      	bne.n	800a6a0 <_strtod_l+0x8b8>
 800a5c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d167      	bne.n	800a6a0 <_strtod_l+0x8b8>
 800a5d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5d4:	0d1b      	lsrs	r3, r3, #20
 800a5d6:	051b      	lsls	r3, r3, #20
 800a5d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5dc:	d960      	bls.n	800a6a0 <_strtod_l+0x8b8>
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	b913      	cbnz	r3, 800a5e8 <_strtod_l+0x800>
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	dd5b      	ble.n	800a6a0 <_strtod_l+0x8b8>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	f7ff f987 	bl	8009900 <__lshift>
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	f7ff f9ef 	bl	80099d8 <__mcmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	dd50      	ble.n	800a6a0 <_strtod_l+0x8b8>
 800a5fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a602:	9a08      	ldr	r2, [sp, #32]
 800a604:	0d1b      	lsrs	r3, r3, #20
 800a606:	051b      	lsls	r3, r3, #20
 800a608:	2a00      	cmp	r2, #0
 800a60a:	d06a      	beq.n	800a6e2 <_strtod_l+0x8fa>
 800a60c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a610:	d867      	bhi.n	800a6e2 <_strtod_l+0x8fa>
 800a612:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a616:	f67f ae98 	bls.w	800a34a <_strtod_l+0x562>
 800a61a:	4650      	mov	r0, sl
 800a61c:	4659      	mov	r1, fp
 800a61e:	4b09      	ldr	r3, [pc, #36]	@ (800a644 <_strtod_l+0x85c>)
 800a620:	2200      	movs	r2, #0
 800a622:	f7f5 ffc5 	bl	80005b0 <__aeabi_dmul>
 800a626:	4b08      	ldr	r3, [pc, #32]	@ (800a648 <_strtod_l+0x860>)
 800a628:	4682      	mov	sl, r0
 800a62a:	400b      	ands	r3, r1
 800a62c:	468b      	mov	fp, r1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f47f ae00 	bne.w	800a234 <_strtod_l+0x44c>
 800a634:	2322      	movs	r3, #34	@ 0x22
 800a636:	9a05      	ldr	r2, [sp, #20]
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	e5fb      	b.n	800a234 <_strtod_l+0x44c>
 800a63c:	0800c018 	.word	0x0800c018
 800a640:	fffffc02 	.word	0xfffffc02
 800a644:	39500000 	.word	0x39500000
 800a648:	7ff00000 	.word	0x7ff00000
 800a64c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a650:	d165      	bne.n	800a71e <_strtod_l+0x936>
 800a652:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a658:	b35a      	cbz	r2, 800a6b2 <_strtod_l+0x8ca>
 800a65a:	4a99      	ldr	r2, [pc, #612]	@ (800a8c0 <_strtod_l+0xad8>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d12b      	bne.n	800a6b8 <_strtod_l+0x8d0>
 800a660:	9b08      	ldr	r3, [sp, #32]
 800a662:	4651      	mov	r1, sl
 800a664:	b303      	cbz	r3, 800a6a8 <_strtod_l+0x8c0>
 800a666:	465a      	mov	r2, fp
 800a668:	4b96      	ldr	r3, [pc, #600]	@ (800a8c4 <_strtod_l+0xadc>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a670:	f04f 32ff 	mov.w	r2, #4294967295
 800a674:	d81b      	bhi.n	800a6ae <_strtod_l+0x8c6>
 800a676:	0d1b      	lsrs	r3, r3, #20
 800a678:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	4299      	cmp	r1, r3
 800a682:	d119      	bne.n	800a6b8 <_strtod_l+0x8d0>
 800a684:	4b90      	ldr	r3, [pc, #576]	@ (800a8c8 <_strtod_l+0xae0>)
 800a686:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a688:	429a      	cmp	r2, r3
 800a68a:	d102      	bne.n	800a692 <_strtod_l+0x8aa>
 800a68c:	3101      	adds	r1, #1
 800a68e:	f43f adc6 	beq.w	800a21e <_strtod_l+0x436>
 800a692:	f04f 0a00 	mov.w	sl, #0
 800a696:	4b8b      	ldr	r3, [pc, #556]	@ (800a8c4 <_strtod_l+0xadc>)
 800a698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a69a:	401a      	ands	r2, r3
 800a69c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a6a0:	9b08      	ldr	r3, [sp, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1b9      	bne.n	800a61a <_strtod_l+0x832>
 800a6a6:	e5c5      	b.n	800a234 <_strtod_l+0x44c>
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	e7e8      	b.n	800a680 <_strtod_l+0x898>
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	e7e6      	b.n	800a680 <_strtod_l+0x898>
 800a6b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a6b6:	d0a2      	beq.n	800a5fe <_strtod_l+0x816>
 800a6b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6ba:	b1db      	cbz	r3, 800a6f4 <_strtod_l+0x90c>
 800a6bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6be:	4213      	tst	r3, r2
 800a6c0:	d0ee      	beq.n	800a6a0 <_strtod_l+0x8b8>
 800a6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	4659      	mov	r1, fp
 800a6c8:	9a08      	ldr	r2, [sp, #32]
 800a6ca:	b1bb      	cbz	r3, 800a6fc <_strtod_l+0x914>
 800a6cc:	f7ff fb68 	bl	8009da0 <sulp>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6d8:	f7f5 fdb4 	bl	8000244 <__adddf3>
 800a6dc:	4682      	mov	sl, r0
 800a6de:	468b      	mov	fp, r1
 800a6e0:	e7de      	b.n	800a6a0 <_strtod_l+0x8b8>
 800a6e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6ea:	f04f 3aff 	mov.w	sl, #4294967295
 800a6ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6f2:	e7d5      	b.n	800a6a0 <_strtod_l+0x8b8>
 800a6f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6f6:	ea13 0f0a 	tst.w	r3, sl
 800a6fa:	e7e1      	b.n	800a6c0 <_strtod_l+0x8d8>
 800a6fc:	f7ff fb50 	bl	8009da0 <sulp>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a708:	f7f5 fd9a 	bl	8000240 <__aeabi_dsub>
 800a70c:	2200      	movs	r2, #0
 800a70e:	2300      	movs	r3, #0
 800a710:	4682      	mov	sl, r0
 800a712:	468b      	mov	fp, r1
 800a714:	f7f6 f9b4 	bl	8000a80 <__aeabi_dcmpeq>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d0c1      	beq.n	800a6a0 <_strtod_l+0x8b8>
 800a71c:	e615      	b.n	800a34a <_strtod_l+0x562>
 800a71e:	4641      	mov	r1, r8
 800a720:	4620      	mov	r0, r4
 800a722:	f7ff fac9 	bl	8009cb8 <__ratio>
 800a726:	2200      	movs	r2, #0
 800a728:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	f7f6 f9ba 	bl	8000aa8 <__aeabi_dcmple>
 800a734:	2800      	cmp	r0, #0
 800a736:	d06d      	beq.n	800a814 <_strtod_l+0xa2c>
 800a738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d178      	bne.n	800a830 <_strtod_l+0xa48>
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d156      	bne.n	800a7f2 <_strtod_l+0xa0a>
 800a744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d158      	bne.n	800a800 <_strtod_l+0xa18>
 800a74e:	2200      	movs	r2, #0
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	4b5d      	ldr	r3, [pc, #372]	@ (800a8cc <_strtod_l+0xae4>)
 800a756:	f7f6 f99d 	bl	8000a94 <__aeabi_dcmplt>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d157      	bne.n	800a80e <_strtod_l+0xa26>
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	2200      	movs	r2, #0
 800a764:	4b5a      	ldr	r3, [pc, #360]	@ (800a8d0 <_strtod_l+0xae8>)
 800a766:	f7f5 ff23 	bl	80005b0 <__aeabi_dmul>
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a772:	9606      	str	r6, [sp, #24]
 800a774:	9307      	str	r3, [sp, #28]
 800a776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a77a:	4d52      	ldr	r5, [pc, #328]	@ (800a8c4 <_strtod_l+0xadc>)
 800a77c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a782:	401d      	ands	r5, r3
 800a784:	4b53      	ldr	r3, [pc, #332]	@ (800a8d4 <_strtod_l+0xaec>)
 800a786:	429d      	cmp	r5, r3
 800a788:	f040 80aa 	bne.w	800a8e0 <_strtod_l+0xaf8>
 800a78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a78e:	4650      	mov	r0, sl
 800a790:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a794:	4659      	mov	r1, fp
 800a796:	f7ff f9cf 	bl	8009b38 <__ulp>
 800a79a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a79e:	f7f5 ff07 	bl	80005b0 <__aeabi_dmul>
 800a7a2:	4652      	mov	r2, sl
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	f7f5 fd4d 	bl	8000244 <__adddf3>
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4945      	ldr	r1, [pc, #276]	@ (800a8c4 <_strtod_l+0xadc>)
 800a7ae:	4a4a      	ldr	r2, [pc, #296]	@ (800a8d8 <_strtod_l+0xaf0>)
 800a7b0:	4019      	ands	r1, r3
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	d942      	bls.n	800a83e <_strtod_l+0xa56>
 800a7b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7ba:	4b43      	ldr	r3, [pc, #268]	@ (800a8c8 <_strtod_l+0xae0>)
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d103      	bne.n	800a7c8 <_strtod_l+0x9e0>
 800a7c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f43f ad2b 	beq.w	800a21e <_strtod_l+0x436>
 800a7c8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7cc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a8c8 <_strtod_l+0xae0>
 800a7d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7d2:	9805      	ldr	r0, [sp, #20]
 800a7d4:	f7fe fe7e 	bl	80094d4 <_Bfree>
 800a7d8:	4649      	mov	r1, r9
 800a7da:	9805      	ldr	r0, [sp, #20]
 800a7dc:	f7fe fe7a 	bl	80094d4 <_Bfree>
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	9805      	ldr	r0, [sp, #20]
 800a7e4:	f7fe fe76 	bl	80094d4 <_Bfree>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	9805      	ldr	r0, [sp, #20]
 800a7ec:	f7fe fe72 	bl	80094d4 <_Bfree>
 800a7f0:	e618      	b.n	800a424 <_strtod_l+0x63c>
 800a7f2:	f1ba 0f01 	cmp.w	sl, #1
 800a7f6:	d103      	bne.n	800a800 <_strtod_l+0xa18>
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f43f ada5 	beq.w	800a34a <_strtod_l+0x562>
 800a800:	2200      	movs	r2, #0
 800a802:	4b36      	ldr	r3, [pc, #216]	@ (800a8dc <_strtod_l+0xaf4>)
 800a804:	2600      	movs	r6, #0
 800a806:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a80a:	4f30      	ldr	r7, [pc, #192]	@ (800a8cc <_strtod_l+0xae4>)
 800a80c:	e7b3      	b.n	800a776 <_strtod_l+0x98e>
 800a80e:	2600      	movs	r6, #0
 800a810:	4f2f      	ldr	r7, [pc, #188]	@ (800a8d0 <_strtod_l+0xae8>)
 800a812:	e7ac      	b.n	800a76e <_strtod_l+0x986>
 800a814:	4630      	mov	r0, r6
 800a816:	4639      	mov	r1, r7
 800a818:	4b2d      	ldr	r3, [pc, #180]	@ (800a8d0 <_strtod_l+0xae8>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	f7f5 fec8 	bl	80005b0 <__aeabi_dmul>
 800a820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a822:	4606      	mov	r6, r0
 800a824:	460f      	mov	r7, r1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0a1      	beq.n	800a76e <_strtod_l+0x986>
 800a82a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a82e:	e7a2      	b.n	800a776 <_strtod_l+0x98e>
 800a830:	2200      	movs	r2, #0
 800a832:	4b26      	ldr	r3, [pc, #152]	@ (800a8cc <_strtod_l+0xae4>)
 800a834:	4616      	mov	r6, r2
 800a836:	461f      	mov	r7, r3
 800a838:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a83c:	e79b      	b.n	800a776 <_strtod_l+0x98e>
 800a83e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1c1      	bne.n	800a7d0 <_strtod_l+0x9e8>
 800a84c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a850:	0d1b      	lsrs	r3, r3, #20
 800a852:	051b      	lsls	r3, r3, #20
 800a854:	429d      	cmp	r5, r3
 800a856:	d1bb      	bne.n	800a7d0 <_strtod_l+0x9e8>
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 fd0a 	bl	8001274 <__aeabi_d2lz>
 800a860:	f7f5 fe78 	bl	8000554 <__aeabi_l2d>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fce8 	bl	8000240 <__aeabi_dsub>
 800a870:	460b      	mov	r3, r1
 800a872:	4602      	mov	r2, r0
 800a874:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a878:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87e:	ea46 060a 	orr.w	r6, r6, sl
 800a882:	431e      	orrs	r6, r3
 800a884:	d069      	beq.n	800a95a <_strtod_l+0xb72>
 800a886:	a30a      	add	r3, pc, #40	@ (adr r3, 800a8b0 <_strtod_l+0xac8>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f6 f902 	bl	8000a94 <__aeabi_dcmplt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f47f accf 	bne.w	800a234 <_strtod_l+0x44c>
 800a896:	a308      	add	r3, pc, #32	@ (adr r3, 800a8b8 <_strtod_l+0xad0>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8a0:	f7f6 f916 	bl	8000ad0 <__aeabi_dcmpgt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d093      	beq.n	800a7d0 <_strtod_l+0x9e8>
 800a8a8:	e4c4      	b.n	800a234 <_strtod_l+0x44c>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	94a03595 	.word	0x94a03595
 800a8b4:	3fdfffff 	.word	0x3fdfffff
 800a8b8:	35afe535 	.word	0x35afe535
 800a8bc:	3fe00000 	.word	0x3fe00000
 800a8c0:	000fffff 	.word	0x000fffff
 800a8c4:	7ff00000 	.word	0x7ff00000
 800a8c8:	7fefffff 	.word	0x7fefffff
 800a8cc:	3ff00000 	.word	0x3ff00000
 800a8d0:	3fe00000 	.word	0x3fe00000
 800a8d4:	7fe00000 	.word	0x7fe00000
 800a8d8:	7c9fffff 	.word	0x7c9fffff
 800a8dc:	bff00000 	.word	0xbff00000
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	b323      	cbz	r3, 800a92e <_strtod_l+0xb46>
 800a8e4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8e8:	d821      	bhi.n	800a92e <_strtod_l+0xb46>
 800a8ea:	a327      	add	r3, pc, #156	@ (adr r3, 800a988 <_strtod_l+0xba0>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f6 f8d8 	bl	8000aa8 <__aeabi_dcmple>
 800a8f8:	b1a0      	cbz	r0, 800a924 <_strtod_l+0xb3c>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7f6 f92f 	bl	8000b60 <__aeabi_d2uiz>
 800a902:	2801      	cmp	r0, #1
 800a904:	bf38      	it	cc
 800a906:	2001      	movcc	r0, #1
 800a908:	f7f5 fdd8 	bl	80004bc <__aeabi_ui2d>
 800a90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a90e:	4606      	mov	r6, r0
 800a910:	460f      	mov	r7, r1
 800a912:	b9fb      	cbnz	r3, 800a954 <_strtod_l+0xb6c>
 800a914:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a918:	9014      	str	r0, [sp, #80]	@ 0x50
 800a91a:	9315      	str	r3, [sp, #84]	@ 0x54
 800a91c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a920:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a924:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a926:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a92a:	1b5b      	subs	r3, r3, r5
 800a92c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a92e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a932:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a936:	f7ff f8ff 	bl	8009b38 <__ulp>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4650      	mov	r0, sl
 800a940:	4659      	mov	r1, fp
 800a942:	f7f5 fe35 	bl	80005b0 <__aeabi_dmul>
 800a946:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a94a:	f7f5 fc7b 	bl	8000244 <__adddf3>
 800a94e:	4682      	mov	sl, r0
 800a950:	468b      	mov	fp, r1
 800a952:	e776      	b.n	800a842 <_strtod_l+0xa5a>
 800a954:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a958:	e7e0      	b.n	800a91c <_strtod_l+0xb34>
 800a95a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a990 <_strtod_l+0xba8>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f6 f898 	bl	8000a94 <__aeabi_dcmplt>
 800a964:	e79e      	b.n	800a8a4 <_strtod_l+0xabc>
 800a966:	2300      	movs	r3, #0
 800a968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a96a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a96c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	f7ff ba77 	b.w	8009e62 <_strtod_l+0x7a>
 800a974:	2a65      	cmp	r2, #101	@ 0x65
 800a976:	f43f ab6e 	beq.w	800a056 <_strtod_l+0x26e>
 800a97a:	2a45      	cmp	r2, #69	@ 0x45
 800a97c:	f43f ab6b 	beq.w	800a056 <_strtod_l+0x26e>
 800a980:	2301      	movs	r3, #1
 800a982:	f7ff bba6 	b.w	800a0d2 <_strtod_l+0x2ea>
 800a986:	bf00      	nop
 800a988:	ffc00000 	.word	0xffc00000
 800a98c:	41dfffff 	.word	0x41dfffff
 800a990:	94a03595 	.word	0x94a03595
 800a994:	3fcfffff 	.word	0x3fcfffff

0800a998 <_strtod_r>:
 800a998:	4b01      	ldr	r3, [pc, #4]	@ (800a9a0 <_strtod_r+0x8>)
 800a99a:	f7ff ba25 	b.w	8009de8 <_strtod_l>
 800a99e:	bf00      	nop
 800a9a0:	20000084 	.word	0x20000084

0800a9a4 <_strtol_l.constprop.0>:
 800a9a4:	2b24      	cmp	r3, #36	@ 0x24
 800a9a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9aa:	4686      	mov	lr, r0
 800a9ac:	4690      	mov	r8, r2
 800a9ae:	d801      	bhi.n	800a9b4 <_strtol_l.constprop.0+0x10>
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d106      	bne.n	800a9c2 <_strtol_l.constprop.0+0x1e>
 800a9b4:	f7fd fdc0 	bl	8008538 <__errno>
 800a9b8:	2316      	movs	r3, #22
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	2000      	movs	r0, #0
 800a9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4833      	ldr	r0, [pc, #204]	@ (800aa94 <_strtol_l.constprop.0+0xf0>)
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9cc:	5d06      	ldrb	r6, [r0, r4]
 800a9ce:	f016 0608 	ands.w	r6, r6, #8
 800a9d2:	d1f8      	bne.n	800a9c6 <_strtol_l.constprop.0+0x22>
 800a9d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9d6:	d12d      	bne.n	800aa34 <_strtol_l.constprop.0+0x90>
 800a9d8:	2601      	movs	r6, #1
 800a9da:	782c      	ldrb	r4, [r5, #0]
 800a9dc:	1c95      	adds	r5, r2, #2
 800a9de:	f033 0210 	bics.w	r2, r3, #16
 800a9e2:	d109      	bne.n	800a9f8 <_strtol_l.constprop.0+0x54>
 800a9e4:	2c30      	cmp	r4, #48	@ 0x30
 800a9e6:	d12a      	bne.n	800aa3e <_strtol_l.constprop.0+0x9a>
 800a9e8:	782a      	ldrb	r2, [r5, #0]
 800a9ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9ee:	2a58      	cmp	r2, #88	@ 0x58
 800a9f0:	d125      	bne.n	800aa3e <_strtol_l.constprop.0+0x9a>
 800a9f2:	2310      	movs	r3, #16
 800a9f4:	786c      	ldrb	r4, [r5, #1]
 800a9f6:	3502      	adds	r5, #2
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a9fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa02:	fbbc f9f3 	udiv	r9, ip, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa10:	2f09      	cmp	r7, #9
 800aa12:	d81b      	bhi.n	800aa4c <_strtol_l.constprop.0+0xa8>
 800aa14:	463c      	mov	r4, r7
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	dd27      	ble.n	800aa6a <_strtol_l.constprop.0+0xc6>
 800aa1a:	1c57      	adds	r7, r2, #1
 800aa1c:	d007      	beq.n	800aa2e <_strtol_l.constprop.0+0x8a>
 800aa1e:	4581      	cmp	r9, r0
 800aa20:	d320      	bcc.n	800aa64 <_strtol_l.constprop.0+0xc0>
 800aa22:	d101      	bne.n	800aa28 <_strtol_l.constprop.0+0x84>
 800aa24:	45a2      	cmp	sl, r4
 800aa26:	db1d      	blt.n	800aa64 <_strtol_l.constprop.0+0xc0>
 800aa28:	2201      	movs	r2, #1
 800aa2a:	fb00 4003 	mla	r0, r0, r3, r4
 800aa2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa32:	e7eb      	b.n	800aa0c <_strtol_l.constprop.0+0x68>
 800aa34:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa36:	bf04      	itt	eq
 800aa38:	782c      	ldrbeq	r4, [r5, #0]
 800aa3a:	1c95      	addeq	r5, r2, #2
 800aa3c:	e7cf      	b.n	800a9de <_strtol_l.constprop.0+0x3a>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1da      	bne.n	800a9f8 <_strtol_l.constprop.0+0x54>
 800aa42:	2c30      	cmp	r4, #48	@ 0x30
 800aa44:	bf0c      	ite	eq
 800aa46:	2308      	moveq	r3, #8
 800aa48:	230a      	movne	r3, #10
 800aa4a:	e7d5      	b.n	800a9f8 <_strtol_l.constprop.0+0x54>
 800aa4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa50:	2f19      	cmp	r7, #25
 800aa52:	d801      	bhi.n	800aa58 <_strtol_l.constprop.0+0xb4>
 800aa54:	3c37      	subs	r4, #55	@ 0x37
 800aa56:	e7de      	b.n	800aa16 <_strtol_l.constprop.0+0x72>
 800aa58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa5c:	2f19      	cmp	r7, #25
 800aa5e:	d804      	bhi.n	800aa6a <_strtol_l.constprop.0+0xc6>
 800aa60:	3c57      	subs	r4, #87	@ 0x57
 800aa62:	e7d8      	b.n	800aa16 <_strtol_l.constprop.0+0x72>
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295
 800aa68:	e7e1      	b.n	800aa2e <_strtol_l.constprop.0+0x8a>
 800aa6a:	1c53      	adds	r3, r2, #1
 800aa6c:	d108      	bne.n	800aa80 <_strtol_l.constprop.0+0xdc>
 800aa6e:	2322      	movs	r3, #34	@ 0x22
 800aa70:	4660      	mov	r0, ip
 800aa72:	f8ce 3000 	str.w	r3, [lr]
 800aa76:	f1b8 0f00 	cmp.w	r8, #0
 800aa7a:	d0a0      	beq.n	800a9be <_strtol_l.constprop.0+0x1a>
 800aa7c:	1e69      	subs	r1, r5, #1
 800aa7e:	e006      	b.n	800aa8e <_strtol_l.constprop.0+0xea>
 800aa80:	b106      	cbz	r6, 800aa84 <_strtol_l.constprop.0+0xe0>
 800aa82:	4240      	negs	r0, r0
 800aa84:	f1b8 0f00 	cmp.w	r8, #0
 800aa88:	d099      	beq.n	800a9be <_strtol_l.constprop.0+0x1a>
 800aa8a:	2a00      	cmp	r2, #0
 800aa8c:	d1f6      	bne.n	800aa7c <_strtol_l.constprop.0+0xd8>
 800aa8e:	f8c8 1000 	str.w	r1, [r8]
 800aa92:	e794      	b.n	800a9be <_strtol_l.constprop.0+0x1a>
 800aa94:	0800c041 	.word	0x0800c041

0800aa98 <_strtol_r>:
 800aa98:	f7ff bf84 	b.w	800a9a4 <_strtol_l.constprop.0>

0800aa9c <__ssputs_r>:
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	461f      	mov	r7, r3
 800aaa2:	688e      	ldr	r6, [r1, #8]
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	42be      	cmp	r6, r7
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	4690      	mov	r8, r2
 800aaac:	680b      	ldr	r3, [r1, #0]
 800aaae:	d82d      	bhi.n	800ab0c <__ssputs_r+0x70>
 800aab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aab8:	d026      	beq.n	800ab08 <__ssputs_r+0x6c>
 800aaba:	6965      	ldr	r5, [r4, #20]
 800aabc:	6909      	ldr	r1, [r1, #16]
 800aabe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aac2:	eba3 0901 	sub.w	r9, r3, r1
 800aac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaca:	1c7b      	adds	r3, r7, #1
 800aacc:	444b      	add	r3, r9
 800aace:	106d      	asrs	r5, r5, #1
 800aad0:	429d      	cmp	r5, r3
 800aad2:	bf38      	it	cc
 800aad4:	461d      	movcc	r5, r3
 800aad6:	0553      	lsls	r3, r2, #21
 800aad8:	d527      	bpl.n	800ab2a <__ssputs_r+0x8e>
 800aada:	4629      	mov	r1, r5
 800aadc:	f7fe fc2e 	bl	800933c <_malloc_r>
 800aae0:	4606      	mov	r6, r0
 800aae2:	b360      	cbz	r0, 800ab3e <__ssputs_r+0xa2>
 800aae4:	464a      	mov	r2, r9
 800aae6:	6921      	ldr	r1, [r4, #16]
 800aae8:	f000 fa14 	bl	800af14 <memcpy>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aaf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaf6:	81a3      	strh	r3, [r4, #12]
 800aaf8:	6126      	str	r6, [r4, #16]
 800aafa:	444e      	add	r6, r9
 800aafc:	6026      	str	r6, [r4, #0]
 800aafe:	463e      	mov	r6, r7
 800ab00:	6165      	str	r5, [r4, #20]
 800ab02:	eba5 0509 	sub.w	r5, r5, r9
 800ab06:	60a5      	str	r5, [r4, #8]
 800ab08:	42be      	cmp	r6, r7
 800ab0a:	d900      	bls.n	800ab0e <__ssputs_r+0x72>
 800ab0c:	463e      	mov	r6, r7
 800ab0e:	4632      	mov	r2, r6
 800ab10:	4641      	mov	r1, r8
 800ab12:	6820      	ldr	r0, [r4, #0]
 800ab14:	f000 f9c2 	bl	800ae9c <memmove>
 800ab18:	2000      	movs	r0, #0
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	1b9b      	subs	r3, r3, r6
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	4433      	add	r3, r6
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	f000 fd83 	bl	800b636 <_realloc_r>
 800ab30:	4606      	mov	r6, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1e0      	bne.n	800aaf8 <__ssputs_r+0x5c>
 800ab36:	4650      	mov	r0, sl
 800ab38:	6921      	ldr	r1, [r4, #16]
 800ab3a:	f7fe fb8d 	bl	8009258 <_free_r>
 800ab3e:	230c      	movs	r3, #12
 800ab40:	f8ca 3000 	str.w	r3, [sl]
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab4e:	81a3      	strh	r3, [r4, #12]
 800ab50:	e7e9      	b.n	800ab26 <__ssputs_r+0x8a>
	...

0800ab54 <_svfiprintf_r>:
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	4698      	mov	r8, r3
 800ab5a:	898b      	ldrh	r3, [r1, #12]
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	061b      	lsls	r3, r3, #24
 800ab60:	460d      	mov	r5, r1
 800ab62:	4614      	mov	r4, r2
 800ab64:	b09d      	sub	sp, #116	@ 0x74
 800ab66:	d510      	bpl.n	800ab8a <_svfiprintf_r+0x36>
 800ab68:	690b      	ldr	r3, [r1, #16]
 800ab6a:	b973      	cbnz	r3, 800ab8a <_svfiprintf_r+0x36>
 800ab6c:	2140      	movs	r1, #64	@ 0x40
 800ab6e:	f7fe fbe5 	bl	800933c <_malloc_r>
 800ab72:	6028      	str	r0, [r5, #0]
 800ab74:	6128      	str	r0, [r5, #16]
 800ab76:	b930      	cbnz	r0, 800ab86 <_svfiprintf_r+0x32>
 800ab78:	230c      	movs	r3, #12
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab80:	b01d      	add	sp, #116	@ 0x74
 800ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab86:	2340      	movs	r3, #64	@ 0x40
 800ab88:	616b      	str	r3, [r5, #20]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab8e:	2320      	movs	r3, #32
 800ab90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab94:	2330      	movs	r3, #48	@ 0x30
 800ab96:	f04f 0901 	mov.w	r9, #1
 800ab9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ad38 <_svfiprintf_r+0x1e4>
 800aba2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aba6:	4623      	mov	r3, r4
 800aba8:	469a      	mov	sl, r3
 800abaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abae:	b10a      	cbz	r2, 800abb4 <_svfiprintf_r+0x60>
 800abb0:	2a25      	cmp	r2, #37	@ 0x25
 800abb2:	d1f9      	bne.n	800aba8 <_svfiprintf_r+0x54>
 800abb4:	ebba 0b04 	subs.w	fp, sl, r4
 800abb8:	d00b      	beq.n	800abd2 <_svfiprintf_r+0x7e>
 800abba:	465b      	mov	r3, fp
 800abbc:	4622      	mov	r2, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff ff6b 	bl	800aa9c <__ssputs_r>
 800abc6:	3001      	adds	r0, #1
 800abc8:	f000 80a7 	beq.w	800ad1a <_svfiprintf_r+0x1c6>
 800abcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abce:	445a      	add	r2, fp
 800abd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800abd2:	f89a 3000 	ldrb.w	r3, [sl]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 809f 	beq.w	800ad1a <_svfiprintf_r+0x1c6>
 800abdc:	2300      	movs	r3, #0
 800abde:	f04f 32ff 	mov.w	r2, #4294967295
 800abe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe6:	f10a 0a01 	add.w	sl, sl, #1
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	9307      	str	r3, [sp, #28]
 800abee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800abf4:	4654      	mov	r4, sl
 800abf6:	2205      	movs	r2, #5
 800abf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfc:	484e      	ldr	r0, [pc, #312]	@ (800ad38 <_svfiprintf_r+0x1e4>)
 800abfe:	f7fd fcc8 	bl	8008592 <memchr>
 800ac02:	9a04      	ldr	r2, [sp, #16]
 800ac04:	b9d8      	cbnz	r0, 800ac3e <_svfiprintf_r+0xea>
 800ac06:	06d0      	lsls	r0, r2, #27
 800ac08:	bf44      	itt	mi
 800ac0a:	2320      	movmi	r3, #32
 800ac0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac10:	0711      	lsls	r1, r2, #28
 800ac12:	bf44      	itt	mi
 800ac14:	232b      	movmi	r3, #43	@ 0x2b
 800ac16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac20:	d015      	beq.n	800ac4e <_svfiprintf_r+0xfa>
 800ac22:	4654      	mov	r4, sl
 800ac24:	2000      	movs	r0, #0
 800ac26:	f04f 0c0a 	mov.w	ip, #10
 800ac2a:	9a07      	ldr	r2, [sp, #28]
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac32:	3b30      	subs	r3, #48	@ 0x30
 800ac34:	2b09      	cmp	r3, #9
 800ac36:	d94b      	bls.n	800acd0 <_svfiprintf_r+0x17c>
 800ac38:	b1b0      	cbz	r0, 800ac68 <_svfiprintf_r+0x114>
 800ac3a:	9207      	str	r2, [sp, #28]
 800ac3c:	e014      	b.n	800ac68 <_svfiprintf_r+0x114>
 800ac3e:	eba0 0308 	sub.w	r3, r0, r8
 800ac42:	fa09 f303 	lsl.w	r3, r9, r3
 800ac46:	4313      	orrs	r3, r2
 800ac48:	46a2      	mov	sl, r4
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	e7d2      	b.n	800abf4 <_svfiprintf_r+0xa0>
 800ac4e:	9b03      	ldr	r3, [sp, #12]
 800ac50:	1d19      	adds	r1, r3, #4
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	9103      	str	r1, [sp, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bfbb      	ittet	lt
 800ac5a:	425b      	neglt	r3, r3
 800ac5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac60:	9307      	strge	r3, [sp, #28]
 800ac62:	9307      	strlt	r3, [sp, #28]
 800ac64:	bfb8      	it	lt
 800ac66:	9204      	strlt	r2, [sp, #16]
 800ac68:	7823      	ldrb	r3, [r4, #0]
 800ac6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac6c:	d10a      	bne.n	800ac84 <_svfiprintf_r+0x130>
 800ac6e:	7863      	ldrb	r3, [r4, #1]
 800ac70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac72:	d132      	bne.n	800acda <_svfiprintf_r+0x186>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	3402      	adds	r4, #2
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ad3c <_svfiprintf_r+0x1e8>
 800ac88:	2203      	movs	r2, #3
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	7821      	ldrb	r1, [r4, #0]
 800ac8e:	f7fd fc80 	bl	8008592 <memchr>
 800ac92:	b138      	cbz	r0, 800aca4 <_svfiprintf_r+0x150>
 800ac94:	2240      	movs	r2, #64	@ 0x40
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	eba0 000a 	sub.w	r0, r0, sl
 800ac9c:	4082      	lsls	r2, r0
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	3401      	adds	r4, #1
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca8:	2206      	movs	r2, #6
 800acaa:	4825      	ldr	r0, [pc, #148]	@ (800ad40 <_svfiprintf_r+0x1ec>)
 800acac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acb0:	f7fd fc6f 	bl	8008592 <memchr>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d036      	beq.n	800ad26 <_svfiprintf_r+0x1d2>
 800acb8:	4b22      	ldr	r3, [pc, #136]	@ (800ad44 <_svfiprintf_r+0x1f0>)
 800acba:	bb1b      	cbnz	r3, 800ad04 <_svfiprintf_r+0x1b0>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	3307      	adds	r3, #7
 800acc0:	f023 0307 	bic.w	r3, r3, #7
 800acc4:	3308      	adds	r3, #8
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acca:	4433      	add	r3, r6
 800accc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acce:	e76a      	b.n	800aba6 <_svfiprintf_r+0x52>
 800acd0:	460c      	mov	r4, r1
 800acd2:	2001      	movs	r0, #1
 800acd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd8:	e7a8      	b.n	800ac2c <_svfiprintf_r+0xd8>
 800acda:	2300      	movs	r3, #0
 800acdc:	f04f 0c0a 	mov.w	ip, #10
 800ace0:	4619      	mov	r1, r3
 800ace2:	3401      	adds	r4, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acec:	3a30      	subs	r2, #48	@ 0x30
 800acee:	2a09      	cmp	r2, #9
 800acf0:	d903      	bls.n	800acfa <_svfiprintf_r+0x1a6>
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0c6      	beq.n	800ac84 <_svfiprintf_r+0x130>
 800acf6:	9105      	str	r1, [sp, #20]
 800acf8:	e7c4      	b.n	800ac84 <_svfiprintf_r+0x130>
 800acfa:	4604      	mov	r4, r0
 800acfc:	2301      	movs	r3, #1
 800acfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad02:	e7f0      	b.n	800ace6 <_svfiprintf_r+0x192>
 800ad04:	ab03      	add	r3, sp, #12
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ad48 <_svfiprintf_r+0x1f4>)
 800ad0e:	a904      	add	r1, sp, #16
 800ad10:	f7fc fccc 	bl	80076ac <_printf_float>
 800ad14:	1c42      	adds	r2, r0, #1
 800ad16:	4606      	mov	r6, r0
 800ad18:	d1d6      	bne.n	800acc8 <_svfiprintf_r+0x174>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	065b      	lsls	r3, r3, #25
 800ad1e:	f53f af2d 	bmi.w	800ab7c <_svfiprintf_r+0x28>
 800ad22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad24:	e72c      	b.n	800ab80 <_svfiprintf_r+0x2c>
 800ad26:	ab03      	add	r3, sp, #12
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	4b06      	ldr	r3, [pc, #24]	@ (800ad48 <_svfiprintf_r+0x1f4>)
 800ad30:	a904      	add	r1, sp, #16
 800ad32:	f7fc ff59 	bl	8007be8 <_printf_i>
 800ad36:	e7ed      	b.n	800ad14 <_svfiprintf_r+0x1c0>
 800ad38:	0800c141 	.word	0x0800c141
 800ad3c:	0800c147 	.word	0x0800c147
 800ad40:	0800c14b 	.word	0x0800c14b
 800ad44:	080076ad 	.word	0x080076ad
 800ad48:	0800aa9d 	.word	0x0800aa9d

0800ad4c <__sflush_r>:
 800ad4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	0716      	lsls	r6, r2, #28
 800ad54:	4605      	mov	r5, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	d454      	bmi.n	800ae04 <__sflush_r+0xb8>
 800ad5a:	684b      	ldr	r3, [r1, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc02      	bgt.n	800ad66 <__sflush_r+0x1a>
 800ad60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	dd48      	ble.n	800adf8 <__sflush_r+0xac>
 800ad66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad68:	2e00      	cmp	r6, #0
 800ad6a:	d045      	beq.n	800adf8 <__sflush_r+0xac>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad72:	682f      	ldr	r7, [r5, #0]
 800ad74:	6a21      	ldr	r1, [r4, #32]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	d030      	beq.n	800addc <__sflush_r+0x90>
 800ad7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	0759      	lsls	r1, r3, #29
 800ad80:	d505      	bpl.n	800ad8e <__sflush_r+0x42>
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad88:	b10b      	cbz	r3, 800ad8e <__sflush_r+0x42>
 800ad8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad8c:	1ad2      	subs	r2, r2, r3
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4628      	mov	r0, r5
 800ad92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	47b0      	blx	r6
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	d106      	bne.n	800adac <__sflush_r+0x60>
 800ad9e:	6829      	ldr	r1, [r5, #0]
 800ada0:	291d      	cmp	r1, #29
 800ada2:	d82b      	bhi.n	800adfc <__sflush_r+0xb0>
 800ada4:	4a28      	ldr	r2, [pc, #160]	@ (800ae48 <__sflush_r+0xfc>)
 800ada6:	410a      	asrs	r2, r1
 800ada8:	07d6      	lsls	r6, r2, #31
 800adaa:	d427      	bmi.n	800adfc <__sflush_r+0xb0>
 800adac:	2200      	movs	r2, #0
 800adae:	6062      	str	r2, [r4, #4]
 800adb0:	6922      	ldr	r2, [r4, #16]
 800adb2:	04d9      	lsls	r1, r3, #19
 800adb4:	6022      	str	r2, [r4, #0]
 800adb6:	d504      	bpl.n	800adc2 <__sflush_r+0x76>
 800adb8:	1c42      	adds	r2, r0, #1
 800adba:	d101      	bne.n	800adc0 <__sflush_r+0x74>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b903      	cbnz	r3, 800adc2 <__sflush_r+0x76>
 800adc0:	6560      	str	r0, [r4, #84]	@ 0x54
 800adc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adc4:	602f      	str	r7, [r5, #0]
 800adc6:	b1b9      	cbz	r1, 800adf8 <__sflush_r+0xac>
 800adc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adcc:	4299      	cmp	r1, r3
 800adce:	d002      	beq.n	800add6 <__sflush_r+0x8a>
 800add0:	4628      	mov	r0, r5
 800add2:	f7fe fa41 	bl	8009258 <_free_r>
 800add6:	2300      	movs	r3, #0
 800add8:	6363      	str	r3, [r4, #52]	@ 0x34
 800adda:	e00d      	b.n	800adf8 <__sflush_r+0xac>
 800addc:	2301      	movs	r3, #1
 800adde:	4628      	mov	r0, r5
 800ade0:	47b0      	blx	r6
 800ade2:	4602      	mov	r2, r0
 800ade4:	1c50      	adds	r0, r2, #1
 800ade6:	d1c9      	bne.n	800ad7c <__sflush_r+0x30>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0c6      	beq.n	800ad7c <__sflush_r+0x30>
 800adee:	2b1d      	cmp	r3, #29
 800adf0:	d001      	beq.n	800adf6 <__sflush_r+0xaa>
 800adf2:	2b16      	cmp	r3, #22
 800adf4:	d11d      	bne.n	800ae32 <__sflush_r+0xe6>
 800adf6:	602f      	str	r7, [r5, #0]
 800adf8:	2000      	movs	r0, #0
 800adfa:	e021      	b.n	800ae40 <__sflush_r+0xf4>
 800adfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae00:	b21b      	sxth	r3, r3
 800ae02:	e01a      	b.n	800ae3a <__sflush_r+0xee>
 800ae04:	690f      	ldr	r7, [r1, #16]
 800ae06:	2f00      	cmp	r7, #0
 800ae08:	d0f6      	beq.n	800adf8 <__sflush_r+0xac>
 800ae0a:	0793      	lsls	r3, r2, #30
 800ae0c:	bf18      	it	ne
 800ae0e:	2300      	movne	r3, #0
 800ae10:	680e      	ldr	r6, [r1, #0]
 800ae12:	bf08      	it	eq
 800ae14:	694b      	ldreq	r3, [r1, #20]
 800ae16:	1bf6      	subs	r6, r6, r7
 800ae18:	600f      	str	r7, [r1, #0]
 800ae1a:	608b      	str	r3, [r1, #8]
 800ae1c:	2e00      	cmp	r6, #0
 800ae1e:	ddeb      	ble.n	800adf8 <__sflush_r+0xac>
 800ae20:	4633      	mov	r3, r6
 800ae22:	463a      	mov	r2, r7
 800ae24:	4628      	mov	r0, r5
 800ae26:	6a21      	ldr	r1, [r4, #32]
 800ae28:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ae2c:	47e0      	blx	ip
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	dc07      	bgt.n	800ae42 <__sflush_r+0xf6>
 800ae32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae42:	4407      	add	r7, r0
 800ae44:	1a36      	subs	r6, r6, r0
 800ae46:	e7e9      	b.n	800ae1c <__sflush_r+0xd0>
 800ae48:	dfbffffe 	.word	0xdfbffffe

0800ae4c <_fflush_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b913      	cbnz	r3, 800ae5c <_fflush_r+0x10>
 800ae56:	2500      	movs	r5, #0
 800ae58:	4628      	mov	r0, r5
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	b118      	cbz	r0, 800ae66 <_fflush_r+0x1a>
 800ae5e:	6a03      	ldr	r3, [r0, #32]
 800ae60:	b90b      	cbnz	r3, 800ae66 <_fflush_r+0x1a>
 800ae62:	f7fd fa7d 	bl	8008360 <__sinit>
 800ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0f3      	beq.n	800ae56 <_fflush_r+0xa>
 800ae6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae70:	07d0      	lsls	r0, r2, #31
 800ae72:	d404      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae74:	0599      	lsls	r1, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae7a:	f7fd fb88 	bl	800858e <__retarget_lock_acquire_recursive>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	4621      	mov	r1, r4
 800ae82:	f7ff ff63 	bl	800ad4c <__sflush_r>
 800ae86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae88:	4605      	mov	r5, r0
 800ae8a:	07da      	lsls	r2, r3, #31
 800ae8c:	d4e4      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d4e1      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae96:	f7fd fb7b 	bl	8008590 <__retarget_lock_release_recursive>
 800ae9a:	e7dd      	b.n	800ae58 <_fflush_r+0xc>

0800ae9c <memmove>:
 800ae9c:	4288      	cmp	r0, r1
 800ae9e:	b510      	push	{r4, lr}
 800aea0:	eb01 0402 	add.w	r4, r1, r2
 800aea4:	d902      	bls.n	800aeac <memmove+0x10>
 800aea6:	4284      	cmp	r4, r0
 800aea8:	4623      	mov	r3, r4
 800aeaa:	d807      	bhi.n	800aebc <memmove+0x20>
 800aeac:	1e43      	subs	r3, r0, #1
 800aeae:	42a1      	cmp	r1, r4
 800aeb0:	d008      	beq.n	800aec4 <memmove+0x28>
 800aeb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeba:	e7f8      	b.n	800aeae <memmove+0x12>
 800aebc:	4601      	mov	r1, r0
 800aebe:	4402      	add	r2, r0
 800aec0:	428a      	cmp	r2, r1
 800aec2:	d100      	bne.n	800aec6 <memmove+0x2a>
 800aec4:	bd10      	pop	{r4, pc}
 800aec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aece:	e7f7      	b.n	800aec0 <memmove+0x24>

0800aed0 <strncmp>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	b16a      	cbz	r2, 800aef0 <strncmp+0x20>
 800aed4:	3901      	subs	r1, #1
 800aed6:	1884      	adds	r4, r0, r2
 800aed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aedc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d103      	bne.n	800aeec <strncmp+0x1c>
 800aee4:	42a0      	cmp	r0, r4
 800aee6:	d001      	beq.n	800aeec <strncmp+0x1c>
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	d1f5      	bne.n	800aed8 <strncmp+0x8>
 800aeec:	1ad0      	subs	r0, r2, r3
 800aeee:	bd10      	pop	{r4, pc}
 800aef0:	4610      	mov	r0, r2
 800aef2:	e7fc      	b.n	800aeee <strncmp+0x1e>

0800aef4 <_sbrk_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	2300      	movs	r3, #0
 800aef8:	4d05      	ldr	r5, [pc, #20]	@ (800af10 <_sbrk_r+0x1c>)
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	602b      	str	r3, [r5, #0]
 800af00:	f7f7 ff6e 	bl	8002de0 <_sbrk>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_sbrk_r+0x1a>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_sbrk_r+0x1a>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	2000071c 	.word	0x2000071c

0800af14 <memcpy>:
 800af14:	440a      	add	r2, r1
 800af16:	4291      	cmp	r1, r2
 800af18:	f100 33ff 	add.w	r3, r0, #4294967295
 800af1c:	d100      	bne.n	800af20 <memcpy+0xc>
 800af1e:	4770      	bx	lr
 800af20:	b510      	push	{r4, lr}
 800af22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af26:	4291      	cmp	r1, r2
 800af28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af2c:	d1f9      	bne.n	800af22 <memcpy+0xe>
 800af2e:	bd10      	pop	{r4, pc}

0800af30 <nan>:
 800af30:	2000      	movs	r0, #0
 800af32:	4901      	ldr	r1, [pc, #4]	@ (800af38 <nan+0x8>)
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	7ff80000 	.word	0x7ff80000

0800af3c <__assert_func>:
 800af3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af3e:	4614      	mov	r4, r2
 800af40:	461a      	mov	r2, r3
 800af42:	4b09      	ldr	r3, [pc, #36]	@ (800af68 <__assert_func+0x2c>)
 800af44:	4605      	mov	r5, r0
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68d8      	ldr	r0, [r3, #12]
 800af4a:	b954      	cbnz	r4, 800af62 <__assert_func+0x26>
 800af4c:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <__assert_func+0x30>)
 800af4e:	461c      	mov	r4, r3
 800af50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af54:	9100      	str	r1, [sp, #0]
 800af56:	462b      	mov	r3, r5
 800af58:	4905      	ldr	r1, [pc, #20]	@ (800af70 <__assert_func+0x34>)
 800af5a:	f000 fba7 	bl	800b6ac <fiprintf>
 800af5e:	f000 fbb7 	bl	800b6d0 <abort>
 800af62:	4b04      	ldr	r3, [pc, #16]	@ (800af74 <__assert_func+0x38>)
 800af64:	e7f4      	b.n	800af50 <__assert_func+0x14>
 800af66:	bf00      	nop
 800af68:	20000034 	.word	0x20000034
 800af6c:	0800c195 	.word	0x0800c195
 800af70:	0800c167 	.word	0x0800c167
 800af74:	0800c15a 	.word	0x0800c15a

0800af78 <_calloc_r>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	fba1 5402 	umull	r5, r4, r1, r2
 800af7e:	b93c      	cbnz	r4, 800af90 <_calloc_r+0x18>
 800af80:	4629      	mov	r1, r5
 800af82:	f7fe f9db 	bl	800933c <_malloc_r>
 800af86:	4606      	mov	r6, r0
 800af88:	b928      	cbnz	r0, 800af96 <_calloc_r+0x1e>
 800af8a:	2600      	movs	r6, #0
 800af8c:	4630      	mov	r0, r6
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 800af90:	220c      	movs	r2, #12
 800af92:	6002      	str	r2, [r0, #0]
 800af94:	e7f9      	b.n	800af8a <_calloc_r+0x12>
 800af96:	462a      	mov	r2, r5
 800af98:	4621      	mov	r1, r4
 800af9a:	f7fd fa7a 	bl	8008492 <memset>
 800af9e:	e7f5      	b.n	800af8c <_calloc_r+0x14>

0800afa0 <rshift>:
 800afa0:	6903      	ldr	r3, [r0, #16]
 800afa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afaa:	f100 0414 	add.w	r4, r0, #20
 800afae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afb2:	dd46      	ble.n	800b042 <rshift+0xa2>
 800afb4:	f011 011f 	ands.w	r1, r1, #31
 800afb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afc0:	d10c      	bne.n	800afdc <rshift+0x3c>
 800afc2:	4629      	mov	r1, r5
 800afc4:	f100 0710 	add.w	r7, r0, #16
 800afc8:	42b1      	cmp	r1, r6
 800afca:	d335      	bcc.n	800b038 <rshift+0x98>
 800afcc:	1a9b      	subs	r3, r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	1eea      	subs	r2, r5, #3
 800afd2:	4296      	cmp	r6, r2
 800afd4:	bf38      	it	cc
 800afd6:	2300      	movcc	r3, #0
 800afd8:	4423      	add	r3, r4
 800afda:	e015      	b.n	800b008 <rshift+0x68>
 800afdc:	46a1      	mov	r9, r4
 800afde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afe2:	f1c1 0820 	rsb	r8, r1, #32
 800afe6:	40cf      	lsrs	r7, r1
 800afe8:	f105 0e04 	add.w	lr, r5, #4
 800afec:	4576      	cmp	r6, lr
 800afee:	46f4      	mov	ip, lr
 800aff0:	d816      	bhi.n	800b020 <rshift+0x80>
 800aff2:	1a9a      	subs	r2, r3, r2
 800aff4:	0092      	lsls	r2, r2, #2
 800aff6:	3a04      	subs	r2, #4
 800aff8:	3501      	adds	r5, #1
 800affa:	42ae      	cmp	r6, r5
 800affc:	bf38      	it	cc
 800affe:	2200      	movcc	r2, #0
 800b000:	18a3      	adds	r3, r4, r2
 800b002:	50a7      	str	r7, [r4, r2]
 800b004:	b107      	cbz	r7, 800b008 <rshift+0x68>
 800b006:	3304      	adds	r3, #4
 800b008:	42a3      	cmp	r3, r4
 800b00a:	eba3 0204 	sub.w	r2, r3, r4
 800b00e:	bf08      	it	eq
 800b010:	2300      	moveq	r3, #0
 800b012:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b016:	6102      	str	r2, [r0, #16]
 800b018:	bf08      	it	eq
 800b01a:	6143      	streq	r3, [r0, #20]
 800b01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b020:	f8dc c000 	ldr.w	ip, [ip]
 800b024:	fa0c fc08 	lsl.w	ip, ip, r8
 800b028:	ea4c 0707 	orr.w	r7, ip, r7
 800b02c:	f849 7b04 	str.w	r7, [r9], #4
 800b030:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b034:	40cf      	lsrs	r7, r1
 800b036:	e7d9      	b.n	800afec <rshift+0x4c>
 800b038:	f851 cb04 	ldr.w	ip, [r1], #4
 800b03c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b040:	e7c2      	b.n	800afc8 <rshift+0x28>
 800b042:	4623      	mov	r3, r4
 800b044:	e7e0      	b.n	800b008 <rshift+0x68>

0800b046 <__hexdig_fun>:
 800b046:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b04a:	2b09      	cmp	r3, #9
 800b04c:	d802      	bhi.n	800b054 <__hexdig_fun+0xe>
 800b04e:	3820      	subs	r0, #32
 800b050:	b2c0      	uxtb	r0, r0
 800b052:	4770      	bx	lr
 800b054:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b058:	2b05      	cmp	r3, #5
 800b05a:	d801      	bhi.n	800b060 <__hexdig_fun+0x1a>
 800b05c:	3847      	subs	r0, #71	@ 0x47
 800b05e:	e7f7      	b.n	800b050 <__hexdig_fun+0xa>
 800b060:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b064:	2b05      	cmp	r3, #5
 800b066:	d801      	bhi.n	800b06c <__hexdig_fun+0x26>
 800b068:	3827      	subs	r0, #39	@ 0x27
 800b06a:	e7f1      	b.n	800b050 <__hexdig_fun+0xa>
 800b06c:	2000      	movs	r0, #0
 800b06e:	4770      	bx	lr

0800b070 <__gethex>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	468a      	mov	sl, r1
 800b076:	4690      	mov	r8, r2
 800b078:	b085      	sub	sp, #20
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	680b      	ldr	r3, [r1, #0]
 800b07e:	9001      	str	r0, [sp, #4]
 800b080:	1c9c      	adds	r4, r3, #2
 800b082:	46a1      	mov	r9, r4
 800b084:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b088:	2830      	cmp	r0, #48	@ 0x30
 800b08a:	d0fa      	beq.n	800b082 <__gethex+0x12>
 800b08c:	eba9 0303 	sub.w	r3, r9, r3
 800b090:	f1a3 0b02 	sub.w	fp, r3, #2
 800b094:	f7ff ffd7 	bl	800b046 <__hexdig_fun>
 800b098:	4605      	mov	r5, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d168      	bne.n	800b170 <__gethex+0x100>
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4648      	mov	r0, r9
 800b0a2:	499f      	ldr	r1, [pc, #636]	@ (800b320 <__gethex+0x2b0>)
 800b0a4:	f7ff ff14 	bl	800aed0 <strncmp>
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d167      	bne.n	800b17e <__gethex+0x10e>
 800b0ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0b2:	4626      	mov	r6, r4
 800b0b4:	f7ff ffc7 	bl	800b046 <__hexdig_fun>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d062      	beq.n	800b182 <__gethex+0x112>
 800b0bc:	4623      	mov	r3, r4
 800b0be:	7818      	ldrb	r0, [r3, #0]
 800b0c0:	4699      	mov	r9, r3
 800b0c2:	2830      	cmp	r0, #48	@ 0x30
 800b0c4:	f103 0301 	add.w	r3, r3, #1
 800b0c8:	d0f9      	beq.n	800b0be <__gethex+0x4e>
 800b0ca:	f7ff ffbc 	bl	800b046 <__hexdig_fun>
 800b0ce:	fab0 f580 	clz	r5, r0
 800b0d2:	f04f 0b01 	mov.w	fp, #1
 800b0d6:	096d      	lsrs	r5, r5, #5
 800b0d8:	464a      	mov	r2, r9
 800b0da:	4616      	mov	r6, r2
 800b0dc:	7830      	ldrb	r0, [r6, #0]
 800b0de:	3201      	adds	r2, #1
 800b0e0:	f7ff ffb1 	bl	800b046 <__hexdig_fun>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d1f8      	bne.n	800b0da <__gethex+0x6a>
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	498c      	ldr	r1, [pc, #560]	@ (800b320 <__gethex+0x2b0>)
 800b0ee:	f7ff feef 	bl	800aed0 <strncmp>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d13f      	bne.n	800b176 <__gethex+0x106>
 800b0f6:	b944      	cbnz	r4, 800b10a <__gethex+0x9a>
 800b0f8:	1c74      	adds	r4, r6, #1
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	7830      	ldrb	r0, [r6, #0]
 800b100:	3201      	adds	r2, #1
 800b102:	f7ff ffa0 	bl	800b046 <__hexdig_fun>
 800b106:	2800      	cmp	r0, #0
 800b108:	d1f8      	bne.n	800b0fc <__gethex+0x8c>
 800b10a:	1ba4      	subs	r4, r4, r6
 800b10c:	00a7      	lsls	r7, r4, #2
 800b10e:	7833      	ldrb	r3, [r6, #0]
 800b110:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b114:	2b50      	cmp	r3, #80	@ 0x50
 800b116:	d13e      	bne.n	800b196 <__gethex+0x126>
 800b118:	7873      	ldrb	r3, [r6, #1]
 800b11a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b11c:	d033      	beq.n	800b186 <__gethex+0x116>
 800b11e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b120:	d034      	beq.n	800b18c <__gethex+0x11c>
 800b122:	2400      	movs	r4, #0
 800b124:	1c71      	adds	r1, r6, #1
 800b126:	7808      	ldrb	r0, [r1, #0]
 800b128:	f7ff ff8d 	bl	800b046 <__hexdig_fun>
 800b12c:	1e43      	subs	r3, r0, #1
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b18      	cmp	r3, #24
 800b132:	d830      	bhi.n	800b196 <__gethex+0x126>
 800b134:	f1a0 0210 	sub.w	r2, r0, #16
 800b138:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b13c:	f7ff ff83 	bl	800b046 <__hexdig_fun>
 800b140:	f100 3cff 	add.w	ip, r0, #4294967295
 800b144:	fa5f fc8c 	uxtb.w	ip, ip
 800b148:	f1bc 0f18 	cmp.w	ip, #24
 800b14c:	f04f 030a 	mov.w	r3, #10
 800b150:	d91e      	bls.n	800b190 <__gethex+0x120>
 800b152:	b104      	cbz	r4, 800b156 <__gethex+0xe6>
 800b154:	4252      	negs	r2, r2
 800b156:	4417      	add	r7, r2
 800b158:	f8ca 1000 	str.w	r1, [sl]
 800b15c:	b1ed      	cbz	r5, 800b19a <__gethex+0x12a>
 800b15e:	f1bb 0f00 	cmp.w	fp, #0
 800b162:	bf0c      	ite	eq
 800b164:	2506      	moveq	r5, #6
 800b166:	2500      	movne	r5, #0
 800b168:	4628      	mov	r0, r5
 800b16a:	b005      	add	sp, #20
 800b16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b170:	2500      	movs	r5, #0
 800b172:	462c      	mov	r4, r5
 800b174:	e7b0      	b.n	800b0d8 <__gethex+0x68>
 800b176:	2c00      	cmp	r4, #0
 800b178:	d1c7      	bne.n	800b10a <__gethex+0x9a>
 800b17a:	4627      	mov	r7, r4
 800b17c:	e7c7      	b.n	800b10e <__gethex+0x9e>
 800b17e:	464e      	mov	r6, r9
 800b180:	462f      	mov	r7, r5
 800b182:	2501      	movs	r5, #1
 800b184:	e7c3      	b.n	800b10e <__gethex+0x9e>
 800b186:	2400      	movs	r4, #0
 800b188:	1cb1      	adds	r1, r6, #2
 800b18a:	e7cc      	b.n	800b126 <__gethex+0xb6>
 800b18c:	2401      	movs	r4, #1
 800b18e:	e7fb      	b.n	800b188 <__gethex+0x118>
 800b190:	fb03 0002 	mla	r0, r3, r2, r0
 800b194:	e7ce      	b.n	800b134 <__gethex+0xc4>
 800b196:	4631      	mov	r1, r6
 800b198:	e7de      	b.n	800b158 <__gethex+0xe8>
 800b19a:	4629      	mov	r1, r5
 800b19c:	eba6 0309 	sub.w	r3, r6, r9
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	2b07      	cmp	r3, #7
 800b1a4:	dc0a      	bgt.n	800b1bc <__gethex+0x14c>
 800b1a6:	9801      	ldr	r0, [sp, #4]
 800b1a8:	f7fe f954 	bl	8009454 <_Balloc>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	b940      	cbnz	r0, 800b1c2 <__gethex+0x152>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	21e4      	movs	r1, #228	@ 0xe4
 800b1b4:	4b5b      	ldr	r3, [pc, #364]	@ (800b324 <__gethex+0x2b4>)
 800b1b6:	485c      	ldr	r0, [pc, #368]	@ (800b328 <__gethex+0x2b8>)
 800b1b8:	f7ff fec0 	bl	800af3c <__assert_func>
 800b1bc:	3101      	adds	r1, #1
 800b1be:	105b      	asrs	r3, r3, #1
 800b1c0:	e7ef      	b.n	800b1a2 <__gethex+0x132>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f100 0a14 	add.w	sl, r0, #20
 800b1c8:	4655      	mov	r5, sl
 800b1ca:	469b      	mov	fp, r3
 800b1cc:	45b1      	cmp	r9, r6
 800b1ce:	d337      	bcc.n	800b240 <__gethex+0x1d0>
 800b1d0:	f845 bb04 	str.w	fp, [r5], #4
 800b1d4:	eba5 050a 	sub.w	r5, r5, sl
 800b1d8:	10ad      	asrs	r5, r5, #2
 800b1da:	6125      	str	r5, [r4, #16]
 800b1dc:	4658      	mov	r0, fp
 800b1de:	f7fe fa2b 	bl	8009638 <__hi0bits>
 800b1e2:	016d      	lsls	r5, r5, #5
 800b1e4:	f8d8 6000 	ldr.w	r6, [r8]
 800b1e8:	1a2d      	subs	r5, r5, r0
 800b1ea:	42b5      	cmp	r5, r6
 800b1ec:	dd54      	ble.n	800b298 <__gethex+0x228>
 800b1ee:	1bad      	subs	r5, r5, r6
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f7fe fdb3 	bl	8009d5e <__any_on>
 800b1f8:	4681      	mov	r9, r0
 800b1fa:	b178      	cbz	r0, 800b21c <__gethex+0x1ac>
 800b1fc:	f04f 0901 	mov.w	r9, #1
 800b200:	1e6b      	subs	r3, r5, #1
 800b202:	1159      	asrs	r1, r3, #5
 800b204:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b208:	f003 021f 	and.w	r2, r3, #31
 800b20c:	fa09 f202 	lsl.w	r2, r9, r2
 800b210:	420a      	tst	r2, r1
 800b212:	d003      	beq.n	800b21c <__gethex+0x1ac>
 800b214:	454b      	cmp	r3, r9
 800b216:	dc36      	bgt.n	800b286 <__gethex+0x216>
 800b218:	f04f 0902 	mov.w	r9, #2
 800b21c:	4629      	mov	r1, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	f7ff febe 	bl	800afa0 <rshift>
 800b224:	442f      	add	r7, r5
 800b226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	da42      	bge.n	800b2b4 <__gethex+0x244>
 800b22e:	4621      	mov	r1, r4
 800b230:	9801      	ldr	r0, [sp, #4]
 800b232:	f7fe f94f 	bl	80094d4 <_Bfree>
 800b236:	2300      	movs	r3, #0
 800b238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b23a:	25a3      	movs	r5, #163	@ 0xa3
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	e793      	b.n	800b168 <__gethex+0xf8>
 800b240:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b244:	2a2e      	cmp	r2, #46	@ 0x2e
 800b246:	d012      	beq.n	800b26e <__gethex+0x1fe>
 800b248:	2b20      	cmp	r3, #32
 800b24a:	d104      	bne.n	800b256 <__gethex+0x1e6>
 800b24c:	f845 bb04 	str.w	fp, [r5], #4
 800b250:	f04f 0b00 	mov.w	fp, #0
 800b254:	465b      	mov	r3, fp
 800b256:	7830      	ldrb	r0, [r6, #0]
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	f7ff fef4 	bl	800b046 <__hexdig_fun>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	f000 000f 	and.w	r0, r0, #15
 800b264:	4098      	lsls	r0, r3
 800b266:	ea4b 0b00 	orr.w	fp, fp, r0
 800b26a:	3304      	adds	r3, #4
 800b26c:	e7ae      	b.n	800b1cc <__gethex+0x15c>
 800b26e:	45b1      	cmp	r9, r6
 800b270:	d8ea      	bhi.n	800b248 <__gethex+0x1d8>
 800b272:	2201      	movs	r2, #1
 800b274:	4630      	mov	r0, r6
 800b276:	492a      	ldr	r1, [pc, #168]	@ (800b320 <__gethex+0x2b0>)
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	f7ff fe29 	bl	800aed0 <strncmp>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	2800      	cmp	r0, #0
 800b282:	d1e1      	bne.n	800b248 <__gethex+0x1d8>
 800b284:	e7a2      	b.n	800b1cc <__gethex+0x15c>
 800b286:	4620      	mov	r0, r4
 800b288:	1ea9      	subs	r1, r5, #2
 800b28a:	f7fe fd68 	bl	8009d5e <__any_on>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d0c2      	beq.n	800b218 <__gethex+0x1a8>
 800b292:	f04f 0903 	mov.w	r9, #3
 800b296:	e7c1      	b.n	800b21c <__gethex+0x1ac>
 800b298:	da09      	bge.n	800b2ae <__gethex+0x23e>
 800b29a:	1b75      	subs	r5, r6, r5
 800b29c:	4621      	mov	r1, r4
 800b29e:	462a      	mov	r2, r5
 800b2a0:	9801      	ldr	r0, [sp, #4]
 800b2a2:	f7fe fb2d 	bl	8009900 <__lshift>
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	1b7f      	subs	r7, r7, r5
 800b2aa:	f100 0a14 	add.w	sl, r0, #20
 800b2ae:	f04f 0900 	mov.w	r9, #0
 800b2b2:	e7b8      	b.n	800b226 <__gethex+0x1b6>
 800b2b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2b8:	42bd      	cmp	r5, r7
 800b2ba:	dd6f      	ble.n	800b39c <__gethex+0x32c>
 800b2bc:	1bed      	subs	r5, r5, r7
 800b2be:	42ae      	cmp	r6, r5
 800b2c0:	dc34      	bgt.n	800b32c <__gethex+0x2bc>
 800b2c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d022      	beq.n	800b310 <__gethex+0x2a0>
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d024      	beq.n	800b318 <__gethex+0x2a8>
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d115      	bne.n	800b2fe <__gethex+0x28e>
 800b2d2:	42ae      	cmp	r6, r5
 800b2d4:	d113      	bne.n	800b2fe <__gethex+0x28e>
 800b2d6:	2e01      	cmp	r6, #1
 800b2d8:	d10b      	bne.n	800b2f2 <__gethex+0x282>
 800b2da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2de:	9a02      	ldr	r2, [sp, #8]
 800b2e0:	2562      	movs	r5, #98	@ 0x62
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	f8ca 3000 	str.w	r3, [sl]
 800b2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ee:	601c      	str	r4, [r3, #0]
 800b2f0:	e73a      	b.n	800b168 <__gethex+0xf8>
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	1e71      	subs	r1, r6, #1
 800b2f6:	f7fe fd32 	bl	8009d5e <__any_on>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d1ed      	bne.n	800b2da <__gethex+0x26a>
 800b2fe:	4621      	mov	r1, r4
 800b300:	9801      	ldr	r0, [sp, #4]
 800b302:	f7fe f8e7 	bl	80094d4 <_Bfree>
 800b306:	2300      	movs	r3, #0
 800b308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b30a:	2550      	movs	r5, #80	@ 0x50
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	e72b      	b.n	800b168 <__gethex+0xf8>
 800b310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f3      	bne.n	800b2fe <__gethex+0x28e>
 800b316:	e7e0      	b.n	800b2da <__gethex+0x26a>
 800b318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1dd      	bne.n	800b2da <__gethex+0x26a>
 800b31e:	e7ee      	b.n	800b2fe <__gethex+0x28e>
 800b320:	0800bfe8 	.word	0x0800bfe8
 800b324:	0800be7f 	.word	0x0800be7f
 800b328:	0800c196 	.word	0x0800c196
 800b32c:	1e6f      	subs	r7, r5, #1
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	d130      	bne.n	800b396 <__gethex+0x326>
 800b334:	b127      	cbz	r7, 800b340 <__gethex+0x2d0>
 800b336:	4639      	mov	r1, r7
 800b338:	4620      	mov	r0, r4
 800b33a:	f7fe fd10 	bl	8009d5e <__any_on>
 800b33e:	4681      	mov	r9, r0
 800b340:	2301      	movs	r3, #1
 800b342:	4629      	mov	r1, r5
 800b344:	1b76      	subs	r6, r6, r5
 800b346:	2502      	movs	r5, #2
 800b348:	117a      	asrs	r2, r7, #5
 800b34a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b34e:	f007 071f 	and.w	r7, r7, #31
 800b352:	40bb      	lsls	r3, r7
 800b354:	4213      	tst	r3, r2
 800b356:	4620      	mov	r0, r4
 800b358:	bf18      	it	ne
 800b35a:	f049 0902 	orrne.w	r9, r9, #2
 800b35e:	f7ff fe1f 	bl	800afa0 <rshift>
 800b362:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	d047      	beq.n	800b3fc <__gethex+0x38c>
 800b36c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d015      	beq.n	800b3a0 <__gethex+0x330>
 800b374:	2b03      	cmp	r3, #3
 800b376:	d017      	beq.n	800b3a8 <__gethex+0x338>
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d109      	bne.n	800b390 <__gethex+0x320>
 800b37c:	f019 0f02 	tst.w	r9, #2
 800b380:	d006      	beq.n	800b390 <__gethex+0x320>
 800b382:	f8da 3000 	ldr.w	r3, [sl]
 800b386:	ea49 0903 	orr.w	r9, r9, r3
 800b38a:	f019 0f01 	tst.w	r9, #1
 800b38e:	d10e      	bne.n	800b3ae <__gethex+0x33e>
 800b390:	f045 0510 	orr.w	r5, r5, #16
 800b394:	e032      	b.n	800b3fc <__gethex+0x38c>
 800b396:	f04f 0901 	mov.w	r9, #1
 800b39a:	e7d1      	b.n	800b340 <__gethex+0x2d0>
 800b39c:	2501      	movs	r5, #1
 800b39e:	e7e2      	b.n	800b366 <__gethex+0x2f6>
 800b3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a2:	f1c3 0301 	rsb	r3, r3, #1
 800b3a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0f0      	beq.n	800b390 <__gethex+0x320>
 800b3ae:	f04f 0c00 	mov.w	ip, #0
 800b3b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3b6:	f104 0314 	add.w	r3, r4, #20
 800b3ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3cc:	d01b      	beq.n	800b406 <__gethex+0x396>
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	6002      	str	r2, [r0, #0]
 800b3d2:	2d02      	cmp	r5, #2
 800b3d4:	f104 0314 	add.w	r3, r4, #20
 800b3d8:	d13c      	bne.n	800b454 <__gethex+0x3e4>
 800b3da:	f8d8 2000 	ldr.w	r2, [r8]
 800b3de:	3a01      	subs	r2, #1
 800b3e0:	42b2      	cmp	r2, r6
 800b3e2:	d109      	bne.n	800b3f8 <__gethex+0x388>
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	1171      	asrs	r1, r6, #5
 800b3e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3ec:	f006 061f 	and.w	r6, r6, #31
 800b3f0:	fa02 f606 	lsl.w	r6, r2, r6
 800b3f4:	421e      	tst	r6, r3
 800b3f6:	d13a      	bne.n	800b46e <__gethex+0x3fe>
 800b3f8:	f045 0520 	orr.w	r5, r5, #32
 800b3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fe:	601c      	str	r4, [r3, #0]
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	601f      	str	r7, [r3, #0]
 800b404:	e6b0      	b.n	800b168 <__gethex+0xf8>
 800b406:	4299      	cmp	r1, r3
 800b408:	f843 cc04 	str.w	ip, [r3, #-4]
 800b40c:	d8d9      	bhi.n	800b3c2 <__gethex+0x352>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	459b      	cmp	fp, r3
 800b412:	db17      	blt.n	800b444 <__gethex+0x3d4>
 800b414:	6861      	ldr	r1, [r4, #4]
 800b416:	9801      	ldr	r0, [sp, #4]
 800b418:	3101      	adds	r1, #1
 800b41a:	f7fe f81b 	bl	8009454 <_Balloc>
 800b41e:	4681      	mov	r9, r0
 800b420:	b918      	cbnz	r0, 800b42a <__gethex+0x3ba>
 800b422:	4602      	mov	r2, r0
 800b424:	2184      	movs	r1, #132	@ 0x84
 800b426:	4b19      	ldr	r3, [pc, #100]	@ (800b48c <__gethex+0x41c>)
 800b428:	e6c5      	b.n	800b1b6 <__gethex+0x146>
 800b42a:	6922      	ldr	r2, [r4, #16]
 800b42c:	f104 010c 	add.w	r1, r4, #12
 800b430:	3202      	adds	r2, #2
 800b432:	0092      	lsls	r2, r2, #2
 800b434:	300c      	adds	r0, #12
 800b436:	f7ff fd6d 	bl	800af14 <memcpy>
 800b43a:	4621      	mov	r1, r4
 800b43c:	9801      	ldr	r0, [sp, #4]
 800b43e:	f7fe f849 	bl	80094d4 <_Bfree>
 800b442:	464c      	mov	r4, r9
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	6122      	str	r2, [r4, #16]
 800b44a:	2201      	movs	r2, #1
 800b44c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b450:	615a      	str	r2, [r3, #20]
 800b452:	e7be      	b.n	800b3d2 <__gethex+0x362>
 800b454:	6922      	ldr	r2, [r4, #16]
 800b456:	455a      	cmp	r2, fp
 800b458:	dd0b      	ble.n	800b472 <__gethex+0x402>
 800b45a:	2101      	movs	r1, #1
 800b45c:	4620      	mov	r0, r4
 800b45e:	f7ff fd9f 	bl	800afa0 <rshift>
 800b462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b466:	3701      	adds	r7, #1
 800b468:	42bb      	cmp	r3, r7
 800b46a:	f6ff aee0 	blt.w	800b22e <__gethex+0x1be>
 800b46e:	2501      	movs	r5, #1
 800b470:	e7c2      	b.n	800b3f8 <__gethex+0x388>
 800b472:	f016 061f 	ands.w	r6, r6, #31
 800b476:	d0fa      	beq.n	800b46e <__gethex+0x3fe>
 800b478:	4453      	add	r3, sl
 800b47a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b47e:	f7fe f8db 	bl	8009638 <__hi0bits>
 800b482:	f1c6 0620 	rsb	r6, r6, #32
 800b486:	42b0      	cmp	r0, r6
 800b488:	dbe7      	blt.n	800b45a <__gethex+0x3ea>
 800b48a:	e7f0      	b.n	800b46e <__gethex+0x3fe>
 800b48c:	0800be7f 	.word	0x0800be7f

0800b490 <L_shift>:
 800b490:	f1c2 0208 	rsb	r2, r2, #8
 800b494:	0092      	lsls	r2, r2, #2
 800b496:	b570      	push	{r4, r5, r6, lr}
 800b498:	f1c2 0620 	rsb	r6, r2, #32
 800b49c:	6843      	ldr	r3, [r0, #4]
 800b49e:	6804      	ldr	r4, [r0, #0]
 800b4a0:	fa03 f506 	lsl.w	r5, r3, r6
 800b4a4:	432c      	orrs	r4, r5
 800b4a6:	40d3      	lsrs	r3, r2
 800b4a8:	6004      	str	r4, [r0, #0]
 800b4aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4ae:	4288      	cmp	r0, r1
 800b4b0:	d3f4      	bcc.n	800b49c <L_shift+0xc>
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}

0800b4b4 <__match>:
 800b4b4:	b530      	push	{r4, r5, lr}
 800b4b6:	6803      	ldr	r3, [r0, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4be:	b914      	cbnz	r4, 800b4c6 <__match+0x12>
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b4ce:	2d19      	cmp	r5, #25
 800b4d0:	bf98      	it	ls
 800b4d2:	3220      	addls	r2, #32
 800b4d4:	42a2      	cmp	r2, r4
 800b4d6:	d0f0      	beq.n	800b4ba <__match+0x6>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e7f3      	b.n	800b4c4 <__match+0x10>

0800b4dc <__hexnan>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	2500      	movs	r5, #0
 800b4e2:	680b      	ldr	r3, [r1, #0]
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	115e      	asrs	r6, r3, #5
 800b4e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4ec:	f013 031f 	ands.w	r3, r3, #31
 800b4f0:	bf18      	it	ne
 800b4f2:	3604      	addne	r6, #4
 800b4f4:	1f37      	subs	r7, r6, #4
 800b4f6:	4690      	mov	r8, r2
 800b4f8:	46b9      	mov	r9, r7
 800b4fa:	463c      	mov	r4, r7
 800b4fc:	46ab      	mov	fp, r5
 800b4fe:	b087      	sub	sp, #28
 800b500:	6801      	ldr	r1, [r0, #0]
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	f846 5c04 	str.w	r5, [r6, #-4]
 800b508:	9502      	str	r5, [sp, #8]
 800b50a:	784a      	ldrb	r2, [r1, #1]
 800b50c:	1c4b      	adds	r3, r1, #1
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	b342      	cbz	r2, 800b564 <__hexnan+0x88>
 800b512:	4610      	mov	r0, r2
 800b514:	9105      	str	r1, [sp, #20]
 800b516:	9204      	str	r2, [sp, #16]
 800b518:	f7ff fd95 	bl	800b046 <__hexdig_fun>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d151      	bne.n	800b5c4 <__hexnan+0xe8>
 800b520:	9a04      	ldr	r2, [sp, #16]
 800b522:	9905      	ldr	r1, [sp, #20]
 800b524:	2a20      	cmp	r2, #32
 800b526:	d818      	bhi.n	800b55a <__hexnan+0x7e>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	459b      	cmp	fp, r3
 800b52c:	dd13      	ble.n	800b556 <__hexnan+0x7a>
 800b52e:	454c      	cmp	r4, r9
 800b530:	d206      	bcs.n	800b540 <__hexnan+0x64>
 800b532:	2d07      	cmp	r5, #7
 800b534:	dc04      	bgt.n	800b540 <__hexnan+0x64>
 800b536:	462a      	mov	r2, r5
 800b538:	4649      	mov	r1, r9
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff ffa8 	bl	800b490 <L_shift>
 800b540:	4544      	cmp	r4, r8
 800b542:	d952      	bls.n	800b5ea <__hexnan+0x10e>
 800b544:	2300      	movs	r3, #0
 800b546:	f1a4 0904 	sub.w	r9, r4, #4
 800b54a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b54e:	461d      	mov	r5, r3
 800b550:	464c      	mov	r4, r9
 800b552:	f8cd b008 	str.w	fp, [sp, #8]
 800b556:	9903      	ldr	r1, [sp, #12]
 800b558:	e7d7      	b.n	800b50a <__hexnan+0x2e>
 800b55a:	2a29      	cmp	r2, #41	@ 0x29
 800b55c:	d157      	bne.n	800b60e <__hexnan+0x132>
 800b55e:	3102      	adds	r1, #2
 800b560:	f8ca 1000 	str.w	r1, [sl]
 800b564:	f1bb 0f00 	cmp.w	fp, #0
 800b568:	d051      	beq.n	800b60e <__hexnan+0x132>
 800b56a:	454c      	cmp	r4, r9
 800b56c:	d206      	bcs.n	800b57c <__hexnan+0xa0>
 800b56e:	2d07      	cmp	r5, #7
 800b570:	dc04      	bgt.n	800b57c <__hexnan+0xa0>
 800b572:	462a      	mov	r2, r5
 800b574:	4649      	mov	r1, r9
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff ff8a 	bl	800b490 <L_shift>
 800b57c:	4544      	cmp	r4, r8
 800b57e:	d936      	bls.n	800b5ee <__hexnan+0x112>
 800b580:	4623      	mov	r3, r4
 800b582:	f1a8 0204 	sub.w	r2, r8, #4
 800b586:	f853 1b04 	ldr.w	r1, [r3], #4
 800b58a:	429f      	cmp	r7, r3
 800b58c:	f842 1f04 	str.w	r1, [r2, #4]!
 800b590:	d2f9      	bcs.n	800b586 <__hexnan+0xaa>
 800b592:	1b3b      	subs	r3, r7, r4
 800b594:	f023 0303 	bic.w	r3, r3, #3
 800b598:	3304      	adds	r3, #4
 800b59a:	3401      	adds	r4, #1
 800b59c:	3e03      	subs	r6, #3
 800b59e:	42b4      	cmp	r4, r6
 800b5a0:	bf88      	it	hi
 800b5a2:	2304      	movhi	r3, #4
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4443      	add	r3, r8
 800b5a8:	f843 2b04 	str.w	r2, [r3], #4
 800b5ac:	429f      	cmp	r7, r3
 800b5ae:	d2fb      	bcs.n	800b5a8 <__hexnan+0xcc>
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	b91b      	cbnz	r3, 800b5bc <__hexnan+0xe0>
 800b5b4:	4547      	cmp	r7, r8
 800b5b6:	d128      	bne.n	800b60a <__hexnan+0x12e>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	2005      	movs	r0, #5
 800b5be:	b007      	add	sp, #28
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	2d08      	cmp	r5, #8
 800b5c8:	f10b 0b01 	add.w	fp, fp, #1
 800b5cc:	dd06      	ble.n	800b5dc <__hexnan+0x100>
 800b5ce:	4544      	cmp	r4, r8
 800b5d0:	d9c1      	bls.n	800b556 <__hexnan+0x7a>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2501      	movs	r5, #1
 800b5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5da:	3c04      	subs	r4, #4
 800b5dc:	6822      	ldr	r2, [r4, #0]
 800b5de:	f000 000f 	and.w	r0, r0, #15
 800b5e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b5e6:	6020      	str	r0, [r4, #0]
 800b5e8:	e7b5      	b.n	800b556 <__hexnan+0x7a>
 800b5ea:	2508      	movs	r5, #8
 800b5ec:	e7b3      	b.n	800b556 <__hexnan+0x7a>
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0dd      	beq.n	800b5b0 <__hexnan+0xd4>
 800b5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f8:	f1c3 0320 	rsb	r3, r3, #32
 800b5fc:	40da      	lsrs	r2, r3
 800b5fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b602:	4013      	ands	r3, r2
 800b604:	f846 3c04 	str.w	r3, [r6, #-4]
 800b608:	e7d2      	b.n	800b5b0 <__hexnan+0xd4>
 800b60a:	3f04      	subs	r7, #4
 800b60c:	e7d0      	b.n	800b5b0 <__hexnan+0xd4>
 800b60e:	2004      	movs	r0, #4
 800b610:	e7d5      	b.n	800b5be <__hexnan+0xe2>

0800b612 <__ascii_mbtowc>:
 800b612:	b082      	sub	sp, #8
 800b614:	b901      	cbnz	r1, 800b618 <__ascii_mbtowc+0x6>
 800b616:	a901      	add	r1, sp, #4
 800b618:	b142      	cbz	r2, 800b62c <__ascii_mbtowc+0x1a>
 800b61a:	b14b      	cbz	r3, 800b630 <__ascii_mbtowc+0x1e>
 800b61c:	7813      	ldrb	r3, [r2, #0]
 800b61e:	600b      	str	r3, [r1, #0]
 800b620:	7812      	ldrb	r2, [r2, #0]
 800b622:	1e10      	subs	r0, r2, #0
 800b624:	bf18      	it	ne
 800b626:	2001      	movne	r0, #1
 800b628:	b002      	add	sp, #8
 800b62a:	4770      	bx	lr
 800b62c:	4610      	mov	r0, r2
 800b62e:	e7fb      	b.n	800b628 <__ascii_mbtowc+0x16>
 800b630:	f06f 0001 	mvn.w	r0, #1
 800b634:	e7f8      	b.n	800b628 <__ascii_mbtowc+0x16>

0800b636 <_realloc_r>:
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	4680      	mov	r8, r0
 800b63c:	4615      	mov	r5, r2
 800b63e:	460c      	mov	r4, r1
 800b640:	b921      	cbnz	r1, 800b64c <_realloc_r+0x16>
 800b642:	4611      	mov	r1, r2
 800b644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	f7fd be78 	b.w	800933c <_malloc_r>
 800b64c:	b92a      	cbnz	r2, 800b65a <_realloc_r+0x24>
 800b64e:	f7fd fe03 	bl	8009258 <_free_r>
 800b652:	2400      	movs	r4, #0
 800b654:	4620      	mov	r0, r4
 800b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65a:	f000 f840 	bl	800b6de <_malloc_usable_size_r>
 800b65e:	4285      	cmp	r5, r0
 800b660:	4606      	mov	r6, r0
 800b662:	d802      	bhi.n	800b66a <_realloc_r+0x34>
 800b664:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b668:	d8f4      	bhi.n	800b654 <_realloc_r+0x1e>
 800b66a:	4629      	mov	r1, r5
 800b66c:	4640      	mov	r0, r8
 800b66e:	f7fd fe65 	bl	800933c <_malloc_r>
 800b672:	4607      	mov	r7, r0
 800b674:	2800      	cmp	r0, #0
 800b676:	d0ec      	beq.n	800b652 <_realloc_r+0x1c>
 800b678:	42b5      	cmp	r5, r6
 800b67a:	462a      	mov	r2, r5
 800b67c:	4621      	mov	r1, r4
 800b67e:	bf28      	it	cs
 800b680:	4632      	movcs	r2, r6
 800b682:	f7ff fc47 	bl	800af14 <memcpy>
 800b686:	4621      	mov	r1, r4
 800b688:	4640      	mov	r0, r8
 800b68a:	f7fd fde5 	bl	8009258 <_free_r>
 800b68e:	463c      	mov	r4, r7
 800b690:	e7e0      	b.n	800b654 <_realloc_r+0x1e>

0800b692 <__ascii_wctomb>:
 800b692:	4603      	mov	r3, r0
 800b694:	4608      	mov	r0, r1
 800b696:	b141      	cbz	r1, 800b6aa <__ascii_wctomb+0x18>
 800b698:	2aff      	cmp	r2, #255	@ 0xff
 800b69a:	d904      	bls.n	800b6a6 <__ascii_wctomb+0x14>
 800b69c:	228a      	movs	r2, #138	@ 0x8a
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	4770      	bx	lr
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	700a      	strb	r2, [r1, #0]
 800b6aa:	4770      	bx	lr

0800b6ac <fiprintf>:
 800b6ac:	b40e      	push	{r1, r2, r3}
 800b6ae:	b503      	push	{r0, r1, lr}
 800b6b0:	4601      	mov	r1, r0
 800b6b2:	ab03      	add	r3, sp, #12
 800b6b4:	4805      	ldr	r0, [pc, #20]	@ (800b6cc <fiprintf+0x20>)
 800b6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ba:	6800      	ldr	r0, [r0, #0]
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	f000 f83d 	bl	800b73c <_vfiprintf_r>
 800b6c2:	b002      	add	sp, #8
 800b6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6c8:	b003      	add	sp, #12
 800b6ca:	4770      	bx	lr
 800b6cc:	20000034 	.word	0x20000034

0800b6d0 <abort>:
 800b6d0:	2006      	movs	r0, #6
 800b6d2:	b508      	push	{r3, lr}
 800b6d4:	f000 fa06 	bl	800bae4 <raise>
 800b6d8:	2001      	movs	r0, #1
 800b6da:	f7f7 fb0c 	bl	8002cf6 <_exit>

0800b6de <_malloc_usable_size_r>:
 800b6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e2:	1f18      	subs	r0, r3, #4
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bfbc      	itt	lt
 800b6e8:	580b      	ldrlt	r3, [r1, r0]
 800b6ea:	18c0      	addlt	r0, r0, r3
 800b6ec:	4770      	bx	lr

0800b6ee <__sfputc_r>:
 800b6ee:	6893      	ldr	r3, [r2, #8]
 800b6f0:	b410      	push	{r4}
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	6093      	str	r3, [r2, #8]
 800b6f8:	da07      	bge.n	800b70a <__sfputc_r+0x1c>
 800b6fa:	6994      	ldr	r4, [r2, #24]
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	db01      	blt.n	800b704 <__sfputc_r+0x16>
 800b700:	290a      	cmp	r1, #10
 800b702:	d102      	bne.n	800b70a <__sfputc_r+0x1c>
 800b704:	bc10      	pop	{r4}
 800b706:	f000 b931 	b.w	800b96c <__swbuf_r>
 800b70a:	6813      	ldr	r3, [r2, #0]
 800b70c:	1c58      	adds	r0, r3, #1
 800b70e:	6010      	str	r0, [r2, #0]
 800b710:	7019      	strb	r1, [r3, #0]
 800b712:	4608      	mov	r0, r1
 800b714:	bc10      	pop	{r4}
 800b716:	4770      	bx	lr

0800b718 <__sfputs_r>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	4614      	mov	r4, r2
 800b720:	18d5      	adds	r5, r2, r3
 800b722:	42ac      	cmp	r4, r5
 800b724:	d101      	bne.n	800b72a <__sfputs_r+0x12>
 800b726:	2000      	movs	r0, #0
 800b728:	e007      	b.n	800b73a <__sfputs_r+0x22>
 800b72a:	463a      	mov	r2, r7
 800b72c:	4630      	mov	r0, r6
 800b72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b732:	f7ff ffdc 	bl	800b6ee <__sfputc_r>
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d1f3      	bne.n	800b722 <__sfputs_r+0xa>
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b73c <_vfiprintf_r>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	460d      	mov	r5, r1
 800b742:	4614      	mov	r4, r2
 800b744:	4698      	mov	r8, r3
 800b746:	4606      	mov	r6, r0
 800b748:	b09d      	sub	sp, #116	@ 0x74
 800b74a:	b118      	cbz	r0, 800b754 <_vfiprintf_r+0x18>
 800b74c:	6a03      	ldr	r3, [r0, #32]
 800b74e:	b90b      	cbnz	r3, 800b754 <_vfiprintf_r+0x18>
 800b750:	f7fc fe06 	bl	8008360 <__sinit>
 800b754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b756:	07d9      	lsls	r1, r3, #31
 800b758:	d405      	bmi.n	800b766 <_vfiprintf_r+0x2a>
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	059a      	lsls	r2, r3, #22
 800b75e:	d402      	bmi.n	800b766 <_vfiprintf_r+0x2a>
 800b760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b762:	f7fc ff14 	bl	800858e <__retarget_lock_acquire_recursive>
 800b766:	89ab      	ldrh	r3, [r5, #12]
 800b768:	071b      	lsls	r3, r3, #28
 800b76a:	d501      	bpl.n	800b770 <_vfiprintf_r+0x34>
 800b76c:	692b      	ldr	r3, [r5, #16]
 800b76e:	b99b      	cbnz	r3, 800b798 <_vfiprintf_r+0x5c>
 800b770:	4629      	mov	r1, r5
 800b772:	4630      	mov	r0, r6
 800b774:	f000 f938 	bl	800b9e8 <__swsetup_r>
 800b778:	b170      	cbz	r0, 800b798 <_vfiprintf_r+0x5c>
 800b77a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b77c:	07dc      	lsls	r4, r3, #31
 800b77e:	d504      	bpl.n	800b78a <_vfiprintf_r+0x4e>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	b01d      	add	sp, #116	@ 0x74
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	0598      	lsls	r0, r3, #22
 800b78e:	d4f7      	bmi.n	800b780 <_vfiprintf_r+0x44>
 800b790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b792:	f7fc fefd 	bl	8008590 <__retarget_lock_release_recursive>
 800b796:	e7f3      	b.n	800b780 <_vfiprintf_r+0x44>
 800b798:	2300      	movs	r3, #0
 800b79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b79c:	2320      	movs	r3, #32
 800b79e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7a2:	2330      	movs	r3, #48	@ 0x30
 800b7a4:	f04f 0901 	mov.w	r9, #1
 800b7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b958 <_vfiprintf_r+0x21c>
 800b7b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	469a      	mov	sl, r3
 800b7b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7bc:	b10a      	cbz	r2, 800b7c2 <_vfiprintf_r+0x86>
 800b7be:	2a25      	cmp	r2, #37	@ 0x25
 800b7c0:	d1f9      	bne.n	800b7b6 <_vfiprintf_r+0x7a>
 800b7c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7c6:	d00b      	beq.n	800b7e0 <_vfiprintf_r+0xa4>
 800b7c8:	465b      	mov	r3, fp
 800b7ca:	4622      	mov	r2, r4
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7ff ffa2 	bl	800b718 <__sfputs_r>
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f000 80a7 	beq.w	800b928 <_vfiprintf_r+0x1ec>
 800b7da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7dc:	445a      	add	r2, fp
 800b7de:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 809f 	beq.w	800b928 <_vfiprintf_r+0x1ec>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f4:	f10a 0a01 	add.w	sl, sl, #1
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	9307      	str	r3, [sp, #28]
 800b7fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b800:	931a      	str	r3, [sp, #104]	@ 0x68
 800b802:	4654      	mov	r4, sl
 800b804:	2205      	movs	r2, #5
 800b806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80a:	4853      	ldr	r0, [pc, #332]	@ (800b958 <_vfiprintf_r+0x21c>)
 800b80c:	f7fc fec1 	bl	8008592 <memchr>
 800b810:	9a04      	ldr	r2, [sp, #16]
 800b812:	b9d8      	cbnz	r0, 800b84c <_vfiprintf_r+0x110>
 800b814:	06d1      	lsls	r1, r2, #27
 800b816:	bf44      	itt	mi
 800b818:	2320      	movmi	r3, #32
 800b81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b81e:	0713      	lsls	r3, r2, #28
 800b820:	bf44      	itt	mi
 800b822:	232b      	movmi	r3, #43	@ 0x2b
 800b824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b828:	f89a 3000 	ldrb.w	r3, [sl]
 800b82c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b82e:	d015      	beq.n	800b85c <_vfiprintf_r+0x120>
 800b830:	4654      	mov	r4, sl
 800b832:	2000      	movs	r0, #0
 800b834:	f04f 0c0a 	mov.w	ip, #10
 800b838:	9a07      	ldr	r2, [sp, #28]
 800b83a:	4621      	mov	r1, r4
 800b83c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b840:	3b30      	subs	r3, #48	@ 0x30
 800b842:	2b09      	cmp	r3, #9
 800b844:	d94b      	bls.n	800b8de <_vfiprintf_r+0x1a2>
 800b846:	b1b0      	cbz	r0, 800b876 <_vfiprintf_r+0x13a>
 800b848:	9207      	str	r2, [sp, #28]
 800b84a:	e014      	b.n	800b876 <_vfiprintf_r+0x13a>
 800b84c:	eba0 0308 	sub.w	r3, r0, r8
 800b850:	fa09 f303 	lsl.w	r3, r9, r3
 800b854:	4313      	orrs	r3, r2
 800b856:	46a2      	mov	sl, r4
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	e7d2      	b.n	800b802 <_vfiprintf_r+0xc6>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	1d19      	adds	r1, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	9103      	str	r1, [sp, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfbb      	ittet	lt
 800b868:	425b      	neglt	r3, r3
 800b86a:	f042 0202 	orrlt.w	r2, r2, #2
 800b86e:	9307      	strge	r3, [sp, #28]
 800b870:	9307      	strlt	r3, [sp, #28]
 800b872:	bfb8      	it	lt
 800b874:	9204      	strlt	r2, [sp, #16]
 800b876:	7823      	ldrb	r3, [r4, #0]
 800b878:	2b2e      	cmp	r3, #46	@ 0x2e
 800b87a:	d10a      	bne.n	800b892 <_vfiprintf_r+0x156>
 800b87c:	7863      	ldrb	r3, [r4, #1]
 800b87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b880:	d132      	bne.n	800b8e8 <_vfiprintf_r+0x1ac>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	3402      	adds	r4, #2
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	9203      	str	r2, [sp, #12]
 800b88c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b95c <_vfiprintf_r+0x220>
 800b896:	2203      	movs	r2, #3
 800b898:	4650      	mov	r0, sl
 800b89a:	7821      	ldrb	r1, [r4, #0]
 800b89c:	f7fc fe79 	bl	8008592 <memchr>
 800b8a0:	b138      	cbz	r0, 800b8b2 <_vfiprintf_r+0x176>
 800b8a2:	2240      	movs	r2, #64	@ 0x40
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	eba0 000a 	sub.w	r0, r0, sl
 800b8aa:	4082      	lsls	r2, r0
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	3401      	adds	r4, #1
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b6:	2206      	movs	r2, #6
 800b8b8:	4829      	ldr	r0, [pc, #164]	@ (800b960 <_vfiprintf_r+0x224>)
 800b8ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8be:	f7fc fe68 	bl	8008592 <memchr>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d03f      	beq.n	800b946 <_vfiprintf_r+0x20a>
 800b8c6:	4b27      	ldr	r3, [pc, #156]	@ (800b964 <_vfiprintf_r+0x228>)
 800b8c8:	bb1b      	cbnz	r3, 800b912 <_vfiprintf_r+0x1d6>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	3307      	adds	r3, #7
 800b8ce:	f023 0307 	bic.w	r3, r3, #7
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d8:	443b      	add	r3, r7
 800b8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8dc:	e76a      	b.n	800b7b4 <_vfiprintf_r+0x78>
 800b8de:	460c      	mov	r4, r1
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8e6:	e7a8      	b.n	800b83a <_vfiprintf_r+0xfe>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f04f 0c0a 	mov.w	ip, #10
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8fa:	3a30      	subs	r2, #48	@ 0x30
 800b8fc:	2a09      	cmp	r2, #9
 800b8fe:	d903      	bls.n	800b908 <_vfiprintf_r+0x1cc>
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0c6      	beq.n	800b892 <_vfiprintf_r+0x156>
 800b904:	9105      	str	r1, [sp, #20]
 800b906:	e7c4      	b.n	800b892 <_vfiprintf_r+0x156>
 800b908:	4604      	mov	r4, r0
 800b90a:	2301      	movs	r3, #1
 800b90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b910:	e7f0      	b.n	800b8f4 <_vfiprintf_r+0x1b8>
 800b912:	ab03      	add	r3, sp, #12
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	462a      	mov	r2, r5
 800b918:	4630      	mov	r0, r6
 800b91a:	4b13      	ldr	r3, [pc, #76]	@ (800b968 <_vfiprintf_r+0x22c>)
 800b91c:	a904      	add	r1, sp, #16
 800b91e:	f7fb fec5 	bl	80076ac <_printf_float>
 800b922:	4607      	mov	r7, r0
 800b924:	1c78      	adds	r0, r7, #1
 800b926:	d1d6      	bne.n	800b8d6 <_vfiprintf_r+0x19a>
 800b928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x1fe>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x1fe>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7fc fe2b 	bl	8008590 <__retarget_lock_release_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	065b      	lsls	r3, r3, #25
 800b93e:	f53f af1f 	bmi.w	800b780 <_vfiprintf_r+0x44>
 800b942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b944:	e71e      	b.n	800b784 <_vfiprintf_r+0x48>
 800b946:	ab03      	add	r3, sp, #12
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	462a      	mov	r2, r5
 800b94c:	4630      	mov	r0, r6
 800b94e:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <_vfiprintf_r+0x22c>)
 800b950:	a904      	add	r1, sp, #16
 800b952:	f7fc f949 	bl	8007be8 <_printf_i>
 800b956:	e7e4      	b.n	800b922 <_vfiprintf_r+0x1e6>
 800b958:	0800c141 	.word	0x0800c141
 800b95c:	0800c147 	.word	0x0800c147
 800b960:	0800c14b 	.word	0x0800c14b
 800b964:	080076ad 	.word	0x080076ad
 800b968:	0800b719 	.word	0x0800b719

0800b96c <__swbuf_r>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	460e      	mov	r6, r1
 800b970:	4614      	mov	r4, r2
 800b972:	4605      	mov	r5, r0
 800b974:	b118      	cbz	r0, 800b97e <__swbuf_r+0x12>
 800b976:	6a03      	ldr	r3, [r0, #32]
 800b978:	b90b      	cbnz	r3, 800b97e <__swbuf_r+0x12>
 800b97a:	f7fc fcf1 	bl	8008360 <__sinit>
 800b97e:	69a3      	ldr	r3, [r4, #24]
 800b980:	60a3      	str	r3, [r4, #8]
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	071a      	lsls	r2, r3, #28
 800b986:	d501      	bpl.n	800b98c <__swbuf_r+0x20>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	b943      	cbnz	r3, 800b99e <__swbuf_r+0x32>
 800b98c:	4621      	mov	r1, r4
 800b98e:	4628      	mov	r0, r5
 800b990:	f000 f82a 	bl	800b9e8 <__swsetup_r>
 800b994:	b118      	cbz	r0, 800b99e <__swbuf_r+0x32>
 800b996:	f04f 37ff 	mov.w	r7, #4294967295
 800b99a:	4638      	mov	r0, r7
 800b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	6922      	ldr	r2, [r4, #16]
 800b9a2:	b2f6      	uxtb	r6, r6
 800b9a4:	1a98      	subs	r0, r3, r2
 800b9a6:	6963      	ldr	r3, [r4, #20]
 800b9a8:	4637      	mov	r7, r6
 800b9aa:	4283      	cmp	r3, r0
 800b9ac:	dc05      	bgt.n	800b9ba <__swbuf_r+0x4e>
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f7ff fa4b 	bl	800ae4c <_fflush_r>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d1ed      	bne.n	800b996 <__swbuf_r+0x2a>
 800b9ba:	68a3      	ldr	r3, [r4, #8]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	60a3      	str	r3, [r4, #8]
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	1c5a      	adds	r2, r3, #1
 800b9c4:	6022      	str	r2, [r4, #0]
 800b9c6:	701e      	strb	r6, [r3, #0]
 800b9c8:	6962      	ldr	r2, [r4, #20]
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d004      	beq.n	800b9da <__swbuf_r+0x6e>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	07db      	lsls	r3, r3, #31
 800b9d4:	d5e1      	bpl.n	800b99a <__swbuf_r+0x2e>
 800b9d6:	2e0a      	cmp	r6, #10
 800b9d8:	d1df      	bne.n	800b99a <__swbuf_r+0x2e>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f7ff fa35 	bl	800ae4c <_fflush_r>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d0d9      	beq.n	800b99a <__swbuf_r+0x2e>
 800b9e6:	e7d6      	b.n	800b996 <__swbuf_r+0x2a>

0800b9e8 <__swsetup_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ba90 <__swsetup_r+0xa8>)
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	6818      	ldr	r0, [r3, #0]
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	b118      	cbz	r0, 800b9fc <__swsetup_r+0x14>
 800b9f4:	6a03      	ldr	r3, [r0, #32]
 800b9f6:	b90b      	cbnz	r3, 800b9fc <__swsetup_r+0x14>
 800b9f8:	f7fc fcb2 	bl	8008360 <__sinit>
 800b9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba00:	0719      	lsls	r1, r3, #28
 800ba02:	d422      	bmi.n	800ba4a <__swsetup_r+0x62>
 800ba04:	06da      	lsls	r2, r3, #27
 800ba06:	d407      	bmi.n	800ba18 <__swsetup_r+0x30>
 800ba08:	2209      	movs	r2, #9
 800ba0a:	602a      	str	r2, [r5, #0]
 800ba0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	e033      	b.n	800ba80 <__swsetup_r+0x98>
 800ba18:	0758      	lsls	r0, r3, #29
 800ba1a:	d512      	bpl.n	800ba42 <__swsetup_r+0x5a>
 800ba1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba1e:	b141      	cbz	r1, 800ba32 <__swsetup_r+0x4a>
 800ba20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba24:	4299      	cmp	r1, r3
 800ba26:	d002      	beq.n	800ba2e <__swsetup_r+0x46>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f7fd fc15 	bl	8009258 <_free_r>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba38:	81a3      	strh	r3, [r4, #12]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	6063      	str	r3, [r4, #4]
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	f043 0308 	orr.w	r3, r3, #8
 800ba48:	81a3      	strh	r3, [r4, #12]
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	b94b      	cbnz	r3, 800ba62 <__swsetup_r+0x7a>
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba58:	d003      	beq.n	800ba62 <__swsetup_r+0x7a>
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f882 	bl	800bb66 <__smakebuf_r>
 800ba62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba66:	f013 0201 	ands.w	r2, r3, #1
 800ba6a:	d00a      	beq.n	800ba82 <__swsetup_r+0x9a>
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	60a2      	str	r2, [r4, #8]
 800ba70:	6962      	ldr	r2, [r4, #20]
 800ba72:	4252      	negs	r2, r2
 800ba74:	61a2      	str	r2, [r4, #24]
 800ba76:	6922      	ldr	r2, [r4, #16]
 800ba78:	b942      	cbnz	r2, 800ba8c <__swsetup_r+0xa4>
 800ba7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba7e:	d1c5      	bne.n	800ba0c <__swsetup_r+0x24>
 800ba80:	bd38      	pop	{r3, r4, r5, pc}
 800ba82:	0799      	lsls	r1, r3, #30
 800ba84:	bf58      	it	pl
 800ba86:	6962      	ldrpl	r2, [r4, #20]
 800ba88:	60a2      	str	r2, [r4, #8]
 800ba8a:	e7f4      	b.n	800ba76 <__swsetup_r+0x8e>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e7f7      	b.n	800ba80 <__swsetup_r+0x98>
 800ba90:	20000034 	.word	0x20000034

0800ba94 <_raise_r>:
 800ba94:	291f      	cmp	r1, #31
 800ba96:	b538      	push	{r3, r4, r5, lr}
 800ba98:	4605      	mov	r5, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	d904      	bls.n	800baa8 <_raise_r+0x14>
 800ba9e:	2316      	movs	r3, #22
 800baa0:	6003      	str	r3, [r0, #0]
 800baa2:	f04f 30ff 	mov.w	r0, #4294967295
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baaa:	b112      	cbz	r2, 800bab2 <_raise_r+0x1e>
 800baac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bab0:	b94b      	cbnz	r3, 800bac6 <_raise_r+0x32>
 800bab2:	4628      	mov	r0, r5
 800bab4:	f000 f830 	bl	800bb18 <_getpid_r>
 800bab8:	4622      	mov	r2, r4
 800baba:	4601      	mov	r1, r0
 800babc:	4628      	mov	r0, r5
 800babe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bac2:	f000 b817 	b.w	800baf4 <_kill_r>
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d00a      	beq.n	800bae0 <_raise_r+0x4c>
 800baca:	1c59      	adds	r1, r3, #1
 800bacc:	d103      	bne.n	800bad6 <_raise_r+0x42>
 800bace:	2316      	movs	r3, #22
 800bad0:	6003      	str	r3, [r0, #0]
 800bad2:	2001      	movs	r0, #1
 800bad4:	e7e7      	b.n	800baa6 <_raise_r+0x12>
 800bad6:	2100      	movs	r1, #0
 800bad8:	4620      	mov	r0, r4
 800bada:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bade:	4798      	blx	r3
 800bae0:	2000      	movs	r0, #0
 800bae2:	e7e0      	b.n	800baa6 <_raise_r+0x12>

0800bae4 <raise>:
 800bae4:	4b02      	ldr	r3, [pc, #8]	@ (800baf0 <raise+0xc>)
 800bae6:	4601      	mov	r1, r0
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	f7ff bfd3 	b.w	800ba94 <_raise_r>
 800baee:	bf00      	nop
 800baf0:	20000034 	.word	0x20000034

0800baf4 <_kill_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	2300      	movs	r3, #0
 800baf8:	4d06      	ldr	r5, [pc, #24]	@ (800bb14 <_kill_r+0x20>)
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	f7f7 f8e8 	bl	8002cd6 <_kill>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d102      	bne.n	800bb10 <_kill_r+0x1c>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	b103      	cbz	r3, 800bb10 <_kill_r+0x1c>
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	2000071c 	.word	0x2000071c

0800bb18 <_getpid_r>:
 800bb18:	f7f7 b8d6 	b.w	8002cc8 <_getpid>

0800bb1c <__swhatbuf_r>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	460c      	mov	r4, r1
 800bb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb24:	4615      	mov	r5, r2
 800bb26:	2900      	cmp	r1, #0
 800bb28:	461e      	mov	r6, r3
 800bb2a:	b096      	sub	sp, #88	@ 0x58
 800bb2c:	da0c      	bge.n	800bb48 <__swhatbuf_r+0x2c>
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	2100      	movs	r1, #0
 800bb32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb36:	bf14      	ite	ne
 800bb38:	2340      	movne	r3, #64	@ 0x40
 800bb3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb3e:	2000      	movs	r0, #0
 800bb40:	6031      	str	r1, [r6, #0]
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	b016      	add	sp, #88	@ 0x58
 800bb46:	bd70      	pop	{r4, r5, r6, pc}
 800bb48:	466a      	mov	r2, sp
 800bb4a:	f000 f849 	bl	800bbe0 <_fstat_r>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	dbed      	blt.n	800bb2e <__swhatbuf_r+0x12>
 800bb52:	9901      	ldr	r1, [sp, #4]
 800bb54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb5c:	4259      	negs	r1, r3
 800bb5e:	4159      	adcs	r1, r3
 800bb60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb64:	e7eb      	b.n	800bb3e <__swhatbuf_r+0x22>

0800bb66 <__smakebuf_r>:
 800bb66:	898b      	ldrh	r3, [r1, #12]
 800bb68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb6a:	079d      	lsls	r5, r3, #30
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460c      	mov	r4, r1
 800bb70:	d507      	bpl.n	800bb82 <__smakebuf_r+0x1c>
 800bb72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb76:	6023      	str	r3, [r4, #0]
 800bb78:	6123      	str	r3, [r4, #16]
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	6163      	str	r3, [r4, #20]
 800bb7e:	b003      	add	sp, #12
 800bb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb82:	466a      	mov	r2, sp
 800bb84:	ab01      	add	r3, sp, #4
 800bb86:	f7ff ffc9 	bl	800bb1c <__swhatbuf_r>
 800bb8a:	9f00      	ldr	r7, [sp, #0]
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7fd fbd3 	bl	800933c <_malloc_r>
 800bb96:	b948      	cbnz	r0, 800bbac <__smakebuf_r+0x46>
 800bb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb9c:	059a      	lsls	r2, r3, #22
 800bb9e:	d4ee      	bmi.n	800bb7e <__smakebuf_r+0x18>
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	e7e2      	b.n	800bb72 <__smakebuf_r+0xc>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	6020      	str	r0, [r4, #0]
 800bbbc:	b15b      	cbz	r3, 800bbd6 <__smakebuf_r+0x70>
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbc4:	f000 f81e 	bl	800bc04 <_isatty_r>
 800bbc8:	b128      	cbz	r0, 800bbd6 <__smakebuf_r+0x70>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f023 0303 	bic.w	r3, r3, #3
 800bbd0:	f043 0301 	orr.w	r3, r3, #1
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	431d      	orrs	r5, r3
 800bbda:	81a5      	strh	r5, [r4, #12]
 800bbdc:	e7cf      	b.n	800bb7e <__smakebuf_r+0x18>
	...

0800bbe0 <_fstat_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	4d06      	ldr	r5, [pc, #24]	@ (800bc00 <_fstat_r+0x20>)
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	4611      	mov	r1, r2
 800bbec:	602b      	str	r3, [r5, #0]
 800bbee:	f7f7 f8d1 	bl	8002d94 <_fstat>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	d102      	bne.n	800bbfc <_fstat_r+0x1c>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	b103      	cbz	r3, 800bbfc <_fstat_r+0x1c>
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
 800bbfe:	bf00      	nop
 800bc00:	2000071c 	.word	0x2000071c

0800bc04 <_isatty_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	2300      	movs	r3, #0
 800bc08:	4d05      	ldr	r5, [pc, #20]	@ (800bc20 <_isatty_r+0x1c>)
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	602b      	str	r3, [r5, #0]
 800bc10:	f7f7 f8cf 	bl	8002db2 <_isatty>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_isatty_r+0x1a>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_isatty_r+0x1a>
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	2000071c 	.word	0x2000071c

0800bc24 <_init>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	bf00      	nop
 800bc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2a:	bc08      	pop	{r3}
 800bc2c:	469e      	mov	lr, r3
 800bc2e:	4770      	bx	lr

0800bc30 <_fini>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr

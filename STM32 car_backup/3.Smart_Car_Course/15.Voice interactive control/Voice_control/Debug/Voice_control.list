
Voice_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007f4c  08007f4c  00008f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800826c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000007c  080082e8  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080082e8  0000a548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c95d  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d6  00000000  00000000  00016a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00019ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  0001a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dae7  00000000  00000000  0001b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001775f  00000000  00000000  00038fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e84c  00000000  00000000  00050730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eef7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000eefc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000f31d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	00000000 	.word	0x00000000
 8000204:	08007f34 	.word	0x08007f34

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000080 	.word	0x20000080
 8000220:	08007f34 	.word	0x08007f34

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	@ 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_d2f>:
 80005ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005b4:	bf24      	itt	cs
 80005b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005be:	d90d      	bls.n	80005dc <__aeabi_d2f+0x30>
 80005c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005d4:	bf08      	it	eq
 80005d6:	f020 0001 	biceq.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005e0:	d121      	bne.n	8000626 <__aeabi_d2f+0x7a>
 80005e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005e6:	bfbc      	itt	lt
 80005e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005ec:	4770      	bxlt	lr
 80005ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005f6:	f1c2 0218 	rsb	r2, r2, #24
 80005fa:	f1c2 0c20 	rsb	ip, r2, #32
 80005fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	bf18      	it	ne
 8000608:	f040 0001 	orrne.w	r0, r0, #1
 800060c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000610:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000614:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000618:	ea40 000c 	orr.w	r0, r0, ip
 800061c:	fa23 f302 	lsr.w	r3, r3, r2
 8000620:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000624:	e7cc      	b.n	80005c0 <__aeabi_d2f+0x14>
 8000626:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800062a:	d107      	bne.n	800063c <__aeabi_d2f+0x90>
 800062c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000630:	bf1e      	ittt	ne
 8000632:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000636:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800063a:	4770      	bxne	lr
 800063c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000640:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000644:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_frsub>:
 800064c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000650:	e002      	b.n	8000658 <__addsf3>
 8000652:	bf00      	nop

08000654 <__aeabi_fsub>:
 8000654:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000658 <__addsf3>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	bf1f      	itttt	ne
 800065c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000660:	ea92 0f03 	teqne	r2, r3
 8000664:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000668:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066c:	d06a      	beq.n	8000744 <__addsf3+0xec>
 800066e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000672:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000676:	bfc1      	itttt	gt
 8000678:	18d2      	addgt	r2, r2, r3
 800067a:	4041      	eorgt	r1, r0
 800067c:	4048      	eorgt	r0, r1
 800067e:	4041      	eorgt	r1, r0
 8000680:	bfb8      	it	lt
 8000682:	425b      	neglt	r3, r3
 8000684:	2b19      	cmp	r3, #25
 8000686:	bf88      	it	hi
 8000688:	4770      	bxhi	lr
 800068a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800068e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000692:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4240      	negne	r0, r0
 800069a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800069e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006a6:	bf18      	it	ne
 80006a8:	4249      	negne	r1, r1
 80006aa:	ea92 0f03 	teq	r2, r3
 80006ae:	d03f      	beq.n	8000730 <__addsf3+0xd8>
 80006b0:	f1a2 0201 	sub.w	r2, r2, #1
 80006b4:	fa41 fc03 	asr.w	ip, r1, r3
 80006b8:	eb10 000c 	adds.w	r0, r0, ip
 80006bc:	f1c3 0320 	rsb	r3, r3, #32
 80006c0:	fa01 f103 	lsl.w	r1, r1, r3
 80006c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006c8:	d502      	bpl.n	80006d0 <__addsf3+0x78>
 80006ca:	4249      	negs	r1, r1
 80006cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006d4:	d313      	bcc.n	80006fe <__addsf3+0xa6>
 80006d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006da:	d306      	bcc.n	80006ea <__addsf3+0x92>
 80006dc:	0840      	lsrs	r0, r0, #1
 80006de:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e2:	f102 0201 	add.w	r2, r2, #1
 80006e6:	2afe      	cmp	r2, #254	@ 0xfe
 80006e8:	d251      	bcs.n	800078e <__addsf3+0x136>
 80006ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f2:	bf08      	it	eq
 80006f4:	f020 0001 	biceq.w	r0, r0, #1
 80006f8:	ea40 0003 	orr.w	r0, r0, r3
 80006fc:	4770      	bx	lr
 80006fe:	0049      	lsls	r1, r1, #1
 8000700:	eb40 0000 	adc.w	r0, r0, r0
 8000704:	3a01      	subs	r2, #1
 8000706:	bf28      	it	cs
 8000708:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800070c:	d2ed      	bcs.n	80006ea <__addsf3+0x92>
 800070e:	fab0 fc80 	clz	ip, r0
 8000712:	f1ac 0c08 	sub.w	ip, ip, #8
 8000716:	ebb2 020c 	subs.w	r2, r2, ip
 800071a:	fa00 f00c 	lsl.w	r0, r0, ip
 800071e:	bfaa      	itet	ge
 8000720:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000724:	4252      	neglt	r2, r2
 8000726:	4318      	orrge	r0, r3
 8000728:	bfbc      	itt	lt
 800072a:	40d0      	lsrlt	r0, r2
 800072c:	4318      	orrlt	r0, r3
 800072e:	4770      	bx	lr
 8000730:	f092 0f00 	teq	r2, #0
 8000734:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000738:	bf06      	itte	eq
 800073a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800073e:	3201      	addeq	r2, #1
 8000740:	3b01      	subne	r3, #1
 8000742:	e7b5      	b.n	80006b0 <__addsf3+0x58>
 8000744:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000748:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800074c:	bf18      	it	ne
 800074e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000752:	d021      	beq.n	8000798 <__addsf3+0x140>
 8000754:	ea92 0f03 	teq	r2, r3
 8000758:	d004      	beq.n	8000764 <__addsf3+0x10c>
 800075a:	f092 0f00 	teq	r2, #0
 800075e:	bf08      	it	eq
 8000760:	4608      	moveq	r0, r1
 8000762:	4770      	bx	lr
 8000764:	ea90 0f01 	teq	r0, r1
 8000768:	bf1c      	itt	ne
 800076a:	2000      	movne	r0, #0
 800076c:	4770      	bxne	lr
 800076e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000772:	d104      	bne.n	800077e <__addsf3+0x126>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	bf28      	it	cs
 8000778:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800077c:	4770      	bx	lr
 800077e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000782:	bf3c      	itt	cc
 8000784:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000788:	4770      	bxcc	lr
 800078a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800078e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000792:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000796:	4770      	bx	lr
 8000798:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800079c:	bf16      	itet	ne
 800079e:	4608      	movne	r0, r1
 80007a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a4:	4601      	movne	r1, r0
 80007a6:	0242      	lsls	r2, r0, #9
 80007a8:	bf06      	itte	eq
 80007aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ae:	ea90 0f01 	teqeq	r0, r1
 80007b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_ui2f>:
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	e004      	b.n	80007c8 <__aeabi_i2f+0x8>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2f>:
 80007c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007c4:	bf48      	it	mi
 80007c6:	4240      	negmi	r0, r0
 80007c8:	ea5f 0c00 	movs.w	ip, r0
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007d4:	4601      	mov	r1, r0
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	e01c      	b.n	8000816 <__aeabi_l2f+0x2a>

080007dc <__aeabi_ul2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e00a      	b.n	8000800 <__aeabi_l2f+0x14>
 80007ea:	bf00      	nop

080007ec <__aeabi_l2f>:
 80007ec:	ea50 0201 	orrs.w	r2, r0, r1
 80007f0:	bf08      	it	eq
 80007f2:	4770      	bxeq	lr
 80007f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007f8:	d502      	bpl.n	8000800 <__aeabi_l2f+0x14>
 80007fa:	4240      	negs	r0, r0
 80007fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000800:	ea5f 0c01 	movs.w	ip, r1
 8000804:	bf02      	ittt	eq
 8000806:	4684      	moveq	ip, r0
 8000808:	4601      	moveq	r1, r0
 800080a:	2000      	moveq	r0, #0
 800080c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000810:	bf08      	it	eq
 8000812:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000816:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800081a:	fabc f28c 	clz	r2, ip
 800081e:	3a08      	subs	r2, #8
 8000820:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000824:	db10      	blt.n	8000848 <__aeabi_l2f+0x5c>
 8000826:	fa01 fc02 	lsl.w	ip, r1, r2
 800082a:	4463      	add	r3, ip
 800082c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000830:	f1c2 0220 	rsb	r2, r2, #32
 8000834:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000838:	fa20 f202 	lsr.w	r2, r0, r2
 800083c:	eb43 0002 	adc.w	r0, r3, r2
 8000840:	bf08      	it	eq
 8000842:	f020 0001 	biceq.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	f102 0220 	add.w	r2, r2, #32
 800084c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000850:	f1c2 0220 	rsb	r2, r2, #32
 8000854:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000858:	fa21 f202 	lsr.w	r2, r1, r2
 800085c:	eb43 0002 	adc.w	r0, r3, r2
 8000860:	bf08      	it	eq
 8000862:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000866:	4770      	bx	lr

08000868 <__aeabi_fmul>:
 8000868:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000870:	bf1e      	ittt	ne
 8000872:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000876:	ea92 0f0c 	teqne	r2, ip
 800087a:	ea93 0f0c 	teqne	r3, ip
 800087e:	d06f      	beq.n	8000960 <__aeabi_fmul+0xf8>
 8000880:	441a      	add	r2, r3
 8000882:	ea80 0c01 	eor.w	ip, r0, r1
 8000886:	0240      	lsls	r0, r0, #9
 8000888:	bf18      	it	ne
 800088a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800088e:	d01e      	beq.n	80008ce <__aeabi_fmul+0x66>
 8000890:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000894:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000898:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800089c:	fba0 3101 	umull	r3, r1, r0, r1
 80008a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008a8:	bf3e      	ittt	cc
 80008aa:	0049      	lslcc	r1, r1, #1
 80008ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008b0:	005b      	lslcc	r3, r3, #1
 80008b2:	ea40 0001 	orr.w	r0, r0, r1
 80008b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ba:	2afd      	cmp	r2, #253	@ 0xfd
 80008bc:	d81d      	bhi.n	80008fa <__aeabi_fmul+0x92>
 80008be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008c6:	bf08      	it	eq
 80008c8:	f020 0001 	biceq.w	r0, r0, #1
 80008cc:	4770      	bx	lr
 80008ce:	f090 0f00 	teq	r0, #0
 80008d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008d6:	bf08      	it	eq
 80008d8:	0249      	lsleq	r1, r1, #9
 80008da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008e2:	3a7f      	subs	r2, #127	@ 0x7f
 80008e4:	bfc2      	ittt	gt
 80008e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ee:	4770      	bxgt	lr
 80008f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	3a01      	subs	r2, #1
 80008fa:	dc5d      	bgt.n	80009b8 <__aeabi_fmul+0x150>
 80008fc:	f112 0f19 	cmn.w	r2, #25
 8000900:	bfdc      	itt	le
 8000902:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000906:	4770      	bxle	lr
 8000908:	f1c2 0200 	rsb	r2, r2, #0
 800090c:	0041      	lsls	r1, r0, #1
 800090e:	fa21 f102 	lsr.w	r1, r1, r2
 8000912:	f1c2 0220 	rsb	r2, r2, #32
 8000916:	fa00 fc02 	lsl.w	ip, r0, r2
 800091a:	ea5f 0031 	movs.w	r0, r1, rrx
 800091e:	f140 0000 	adc.w	r0, r0, #0
 8000922:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000926:	bf08      	it	eq
 8000928:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800092c:	4770      	bx	lr
 800092e:	f092 0f00 	teq	r2, #0
 8000932:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000936:	bf02      	ittt	eq
 8000938:	0040      	lsleq	r0, r0, #1
 800093a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800093e:	3a01      	subeq	r2, #1
 8000940:	d0f9      	beq.n	8000936 <__aeabi_fmul+0xce>
 8000942:	ea40 000c 	orr.w	r0, r0, ip
 8000946:	f093 0f00 	teq	r3, #0
 800094a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800094e:	bf02      	ittt	eq
 8000950:	0049      	lsleq	r1, r1, #1
 8000952:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000956:	3b01      	subeq	r3, #1
 8000958:	d0f9      	beq.n	800094e <__aeabi_fmul+0xe6>
 800095a:	ea41 010c 	orr.w	r1, r1, ip
 800095e:	e78f      	b.n	8000880 <__aeabi_fmul+0x18>
 8000960:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000964:	ea92 0f0c 	teq	r2, ip
 8000968:	bf18      	it	ne
 800096a:	ea93 0f0c 	teqne	r3, ip
 800096e:	d00a      	beq.n	8000986 <__aeabi_fmul+0x11e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800097a:	d1d8      	bne.n	800092e <__aeabi_fmul+0xc6>
 800097c:	ea80 0001 	eor.w	r0, r0, r1
 8000980:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000984:	4770      	bx	lr
 8000986:	f090 0f00 	teq	r0, #0
 800098a:	bf17      	itett	ne
 800098c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000990:	4608      	moveq	r0, r1
 8000992:	f091 0f00 	teqne	r1, #0
 8000996:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800099a:	d014      	beq.n	80009c6 <__aeabi_fmul+0x15e>
 800099c:	ea92 0f0c 	teq	r2, ip
 80009a0:	d101      	bne.n	80009a6 <__aeabi_fmul+0x13e>
 80009a2:	0242      	lsls	r2, r0, #9
 80009a4:	d10f      	bne.n	80009c6 <__aeabi_fmul+0x15e>
 80009a6:	ea93 0f0c 	teq	r3, ip
 80009aa:	d103      	bne.n	80009b4 <__aeabi_fmul+0x14c>
 80009ac:	024b      	lsls	r3, r1, #9
 80009ae:	bf18      	it	ne
 80009b0:	4608      	movne	r0, r1
 80009b2:	d108      	bne.n	80009c6 <__aeabi_fmul+0x15e>
 80009b4:	ea80 0001 	eor.w	r0, r0, r1
 80009b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009ce:	4770      	bx	lr

080009d0 <__aeabi_fdiv>:
 80009d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009d8:	bf1e      	ittt	ne
 80009da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009de:	ea92 0f0c 	teqne	r2, ip
 80009e2:	ea93 0f0c 	teqne	r3, ip
 80009e6:	d069      	beq.n	8000abc <__aeabi_fdiv+0xec>
 80009e8:	eba2 0203 	sub.w	r2, r2, r3
 80009ec:	ea80 0c01 	eor.w	ip, r0, r1
 80009f0:	0249      	lsls	r1, r1, #9
 80009f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009f6:	d037      	beq.n	8000a68 <__aeabi_fdiv+0x98>
 80009f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf38      	it	cc
 8000a0c:	005b      	lslcc	r3, r3, #1
 8000a0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a16:	428b      	cmp	r3, r1
 8000a18:	bf24      	itt	cs
 8000a1a:	1a5b      	subcs	r3, r3, r1
 8000a1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a24:	bf24      	itt	cs
 8000a26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a32:	bf24      	itt	cs
 8000a34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	bf18      	it	ne
 8000a4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a52:	d1e0      	bne.n	8000a16 <__aeabi_fdiv+0x46>
 8000a54:	2afd      	cmp	r2, #253	@ 0xfd
 8000a56:	f63f af50 	bhi.w	80008fa <__aeabi_fmul+0x92>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a70:	327f      	adds	r2, #127	@ 0x7f
 8000a72:	bfc2      	ittt	gt
 8000a74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a7c:	4770      	bxgt	lr
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	3a01      	subs	r2, #1
 8000a88:	e737      	b.n	80008fa <__aeabi_fmul+0x92>
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a92:	bf02      	ittt	eq
 8000a94:	0040      	lsleq	r0, r0, #1
 8000a96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a9a:	3a01      	subeq	r2, #1
 8000a9c:	d0f9      	beq.n	8000a92 <__aeabi_fdiv+0xc2>
 8000a9e:	ea40 000c 	orr.w	r0, r0, ip
 8000aa2:	f093 0f00 	teq	r3, #0
 8000aa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aaa:	bf02      	ittt	eq
 8000aac:	0049      	lsleq	r1, r1, #1
 8000aae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ab2:	3b01      	subeq	r3, #1
 8000ab4:	d0f9      	beq.n	8000aaa <__aeabi_fdiv+0xda>
 8000ab6:	ea41 010c 	orr.w	r1, r1, ip
 8000aba:	e795      	b.n	80009e8 <__aeabi_fdiv+0x18>
 8000abc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d108      	bne.n	8000ad8 <__aeabi_fdiv+0x108>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	f47f af7d 	bne.w	80009c6 <__aeabi_fmul+0x15e>
 8000acc:	ea93 0f0c 	teq	r3, ip
 8000ad0:	f47f af70 	bne.w	80009b4 <__aeabi_fmul+0x14c>
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e776      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000ad8:	ea93 0f0c 	teq	r3, ip
 8000adc:	d104      	bne.n	8000ae8 <__aeabi_fdiv+0x118>
 8000ade:	024b      	lsls	r3, r1, #9
 8000ae0:	f43f af4c 	beq.w	800097c <__aeabi_fmul+0x114>
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	e76e      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000ae8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000aec:	bf18      	it	ne
 8000aee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000af2:	d1ca      	bne.n	8000a8a <__aeabi_fdiv+0xba>
 8000af4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000af8:	f47f af5c 	bne.w	80009b4 <__aeabi_fmul+0x14c>
 8000afc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b00:	f47f af3c 	bne.w	800097c <__aeabi_fmul+0x114>
 8000b04:	e75f      	b.n	80009c6 <__aeabi_fmul+0x15e>
 8000b06:	bf00      	nop

08000b08 <__gesf2>:
 8000b08:	f04f 3cff 	mov.w	ip, #4294967295
 8000b0c:	e006      	b.n	8000b1c <__cmpsf2+0x4>
 8000b0e:	bf00      	nop

08000b10 <__lesf2>:
 8000b10:	f04f 0c01 	mov.w	ip, #1
 8000b14:	e002      	b.n	8000b1c <__cmpsf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__cmpsf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d011      	beq.n	8000b58 <__cmpsf2+0x40>
 8000b34:	b001      	add	sp, #4
 8000b36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b3a:	bf18      	it	ne
 8000b3c:	ea90 0f01 	teqne	r0, r1
 8000b40:	bf58      	it	pl
 8000b42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b46:	bf88      	it	hi
 8000b48:	17c8      	asrhi	r0, r1, #31
 8000b4a:	bf38      	it	cc
 8000b4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b50:	bf18      	it	ne
 8000b52:	f040 0001 	orrne.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	d102      	bne.n	8000b64 <__cmpsf2+0x4c>
 8000b5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b62:	d105      	bne.n	8000b70 <__cmpsf2+0x58>
 8000b64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b68:	d1e4      	bne.n	8000b34 <__cmpsf2+0x1c>
 8000b6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b6e:	d0e1      	beq.n	8000b34 <__cmpsf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cfrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4661      	mov	r1, ip
 8000b7e:	e7ff      	b.n	8000b80 <__aeabi_cfcmpeq>

08000b80 <__aeabi_cfcmpeq>:
 8000b80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b82:	f7ff ffc9 	bl	8000b18 <__cmpsf2>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	bf48      	it	mi
 8000b8a:	f110 0f00 	cmnmi.w	r0, #0
 8000b8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b90 <__aeabi_fcmpeq>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff fff4 	bl	8000b80 <__aeabi_cfcmpeq>
 8000b98:	bf0c      	ite	eq
 8000b9a:	2001      	moveq	r0, #1
 8000b9c:	2000      	movne	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fcmplt>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffea 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bac:	bf34      	ite	cc
 8000bae:	2001      	movcc	r0, #1
 8000bb0:	2000      	movcs	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmple>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffe0 	bl	8000b80 <__aeabi_cfcmpeq>
 8000bc0:	bf94      	ite	ls
 8000bc2:	2001      	movls	r0, #1
 8000bc4:	2000      	movhi	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmpge>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffd2 	bl	8000b78 <__aeabi_cfrcmple>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpgt>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffc8 	bl	8000b78 <__aeabi_cfrcmple>
 8000be8:	bf34      	ite	cc
 8000bea:	2001      	movcc	r0, #1
 8000bec:	2000      	movcs	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_f2iz>:
 8000bf4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bfc:	d30f      	bcc.n	8000c1e <__aeabi_f2iz+0x2a>
 8000bfe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_f2iz+0x30>
 8000c08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c14:	fa23 f002 	lsr.w	r0, r3, r2
 8000c18:	bf18      	it	ne
 8000c1a:	4240      	negne	r0, r0
 8000c1c:	4770      	bx	lr
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	4770      	bx	lr
 8000c24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c28:	d101      	bne.n	8000c2e <__aeabi_f2iz+0x3a>
 8000c2a:	0242      	lsls	r2, r0, #9
 8000c2c:	d105      	bne.n	8000c3a <__aeabi_f2iz+0x46>
 8000c2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c32:	bf08      	it	eq
 8000c34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <Set_color_R>:
/*
 * 打开右边的探照灯并显示颜色 Turn on the searchlight on the right and show the color
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	f200 8081 	bhi.w	8000d54 <Set_color_R+0x114>
 8000c52:	a201      	add	r2, pc, #4	@ (adr r2, 8000c58 <Set_color_R+0x18>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c75 	.word	0x08000c75
 8000c5c:	08000c95 	.word	0x08000c95
 8000c60:	08000cb5 	.word	0x08000cb5
 8000c64:	08000cd5 	.word	0x08000cd5
 8000c68:	08000cf5 	.word	0x08000cf5
 8000c6c:	08000d15 	.word	0x08000d15
 8000c70:	08000d35 	.word	0x08000d35
	{
	case red:
		RRGB_SET(set, reset, reset);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2104      	movs	r1, #4
 8000c78:	4840      	ldr	r0, [pc, #256]	@ (8000d7c <Set_color_R+0x13c>)
 8000c7a:	f003 f933 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2108      	movs	r1, #8
 8000c82:	483e      	ldr	r0, [pc, #248]	@ (8000d7c <Set_color_R+0x13c>)
 8000c84:	f003 f92e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	483b      	ldr	r0, [pc, #236]	@ (8000d7c <Set_color_R+0x13c>)
 8000c8e:	f003 f929 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000c92:	e06f      	b.n	8000d74 <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	4838      	ldr	r0, [pc, #224]	@ (8000d7c <Set_color_R+0x13c>)
 8000c9a:	f003 f923 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4836      	ldr	r0, [pc, #216]	@ (8000d7c <Set_color_R+0x13c>)
 8000ca4:	f003 f91e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	4833      	ldr	r0, [pc, #204]	@ (8000d7c <Set_color_R+0x13c>)
 8000cae:	f003 f919 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000cb2:	e05f      	b.n	8000d74 <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4830      	ldr	r0, [pc, #192]	@ (8000d7c <Set_color_R+0x13c>)
 8000cba:	f003 f913 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	482e      	ldr	r0, [pc, #184]	@ (8000d7c <Set_color_R+0x13c>)
 8000cc4:	f003 f90e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	482b      	ldr	r0, [pc, #172]	@ (8000d7c <Set_color_R+0x13c>)
 8000cce:	f003 f909 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000cd2:	e04f      	b.n	8000d74 <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4828      	ldr	r0, [pc, #160]	@ (8000d7c <Set_color_R+0x13c>)
 8000cda:	f003 f903 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4826      	ldr	r0, [pc, #152]	@ (8000d7c <Set_color_R+0x13c>)
 8000ce4:	f003 f8fe 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2110      	movs	r1, #16
 8000cec:	4823      	ldr	r0, [pc, #140]	@ (8000d7c <Set_color_R+0x13c>)
 8000cee:	f003 f8f9 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000cf2:	e03f      	b.n	8000d74 <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4820      	ldr	r0, [pc, #128]	@ (8000d7c <Set_color_R+0x13c>)
 8000cfa:	f003 f8f3 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <Set_color_R+0x13c>)
 8000d04:	f003 f8ee 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	481b      	ldr	r0, [pc, #108]	@ (8000d7c <Set_color_R+0x13c>)
 8000d0e:	f003 f8e9 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000d12:	e02f      	b.n	8000d74 <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2104      	movs	r1, #4
 8000d18:	4818      	ldr	r0, [pc, #96]	@ (8000d7c <Set_color_R+0x13c>)
 8000d1a:	f003 f8e3 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2108      	movs	r1, #8
 8000d22:	4816      	ldr	r0, [pc, #88]	@ (8000d7c <Set_color_R+0x13c>)
 8000d24:	f003 f8de 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4813      	ldr	r0, [pc, #76]	@ (8000d7c <Set_color_R+0x13c>)
 8000d2e:	f003 f8d9 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000d32:	e01f      	b.n	8000d74 <Set_color_R+0x134>
	case write:
		RRGB_SET(set, set, set);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2104      	movs	r1, #4
 8000d38:	4810      	ldr	r0, [pc, #64]	@ (8000d7c <Set_color_R+0x13c>)
 8000d3a:	f003 f8d3 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2108      	movs	r1, #8
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <Set_color_R+0x13c>)
 8000d44:	f003 f8ce 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <Set_color_R+0x13c>)
 8000d4e:	f003 f8c9 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000d52:	e00f      	b.n	8000d74 <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <Set_color_R+0x13c>)
 8000d5a:	f003 f8c3 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2108      	movs	r1, #8
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <Set_color_R+0x13c>)
 8000d64:	f003 f8be 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <Set_color_R+0x13c>)
 8000d6e:	f003 f8b9 	bl	8003ee4 <HAL_GPIO_WritePin>
	}
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40011800 	.word	0x40011800

08000d80 <Set_color_L>:
/*
 * 打开左边的探照灯并显示颜色 Turn on the left searchlight and show colors
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	f200 8081 	bhi.w	8000e94 <Set_color_L+0x114>
 8000d92:	a201      	add	r2, pc, #4	@ (adr r2, 8000d98 <Set_color_L+0x18>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000db5 	.word	0x08000db5
 8000d9c:	08000dd5 	.word	0x08000dd5
 8000da0:	08000df5 	.word	0x08000df5
 8000da4:	08000e15 	.word	0x08000e15
 8000da8:	08000e35 	.word	0x08000e35
 8000dac:	08000e55 	.word	0x08000e55
 8000db0:	08000e75 	.word	0x08000e75
	{
	case red:
		LRGB_SET(set, reset, reset);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2102      	movs	r1, #2
 8000db8:	4840      	ldr	r0, [pc, #256]	@ (8000ebc <Set_color_L+0x13c>)
 8000dba:	f003 f893 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	483f      	ldr	r0, [pc, #252]	@ (8000ec0 <Set_color_L+0x140>)
 8000dc4:	f003 f88e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	483b      	ldr	r0, [pc, #236]	@ (8000ebc <Set_color_L+0x13c>)
 8000dce:	f003 f889 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000dd2:	e06f      	b.n	8000eb4 <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4838      	ldr	r0, [pc, #224]	@ (8000ebc <Set_color_L+0x13c>)
 8000dda:	f003 f883 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000dde:	2201      	movs	r2, #1
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	4837      	ldr	r0, [pc, #220]	@ (8000ec0 <Set_color_L+0x140>)
 8000de4:	f003 f87e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	4833      	ldr	r0, [pc, #204]	@ (8000ebc <Set_color_L+0x13c>)
 8000dee:	f003 f879 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000df2:	e05f      	b.n	8000eb4 <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4830      	ldr	r0, [pc, #192]	@ (8000ebc <Set_color_L+0x13c>)
 8000dfa:	f003 f873 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	482f      	ldr	r0, [pc, #188]	@ (8000ec0 <Set_color_L+0x140>)
 8000e04:	f003 f86e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	482b      	ldr	r0, [pc, #172]	@ (8000ebc <Set_color_L+0x13c>)
 8000e0e:	f003 f869 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000e12:	e04f      	b.n	8000eb4 <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2102      	movs	r1, #2
 8000e18:	4828      	ldr	r0, [pc, #160]	@ (8000ebc <Set_color_L+0x13c>)
 8000e1a:	f003 f863 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	4827      	ldr	r0, [pc, #156]	@ (8000ec0 <Set_color_L+0x140>)
 8000e24:	f003 f85e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4823      	ldr	r0, [pc, #140]	@ (8000ebc <Set_color_L+0x13c>)
 8000e2e:	f003 f859 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000e32:	e03f      	b.n	8000eb4 <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	4820      	ldr	r0, [pc, #128]	@ (8000ebc <Set_color_L+0x13c>)
 8000e3a:	f003 f853 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	481f      	ldr	r0, [pc, #124]	@ (8000ec0 <Set_color_L+0x140>)
 8000e44:	f003 f84e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	481b      	ldr	r0, [pc, #108]	@ (8000ebc <Set_color_L+0x13c>)
 8000e4e:	f003 f849 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000e52:	e02f      	b.n	8000eb4 <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <Set_color_L+0x13c>)
 8000e5a:	f003 f843 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <Set_color_L+0x140>)
 8000e64:	f003 f83e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <Set_color_L+0x13c>)
 8000e6e:	f003 f839 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000e72:	e01f      	b.n	8000eb4 <Set_color_L+0x134>
	case write:
		LRGB_SET(set, set, set);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2102      	movs	r1, #2
 8000e78:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <Set_color_L+0x13c>)
 8000e7a:	f003 f833 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <Set_color_L+0x140>)
 8000e84:	f003 f82e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <Set_color_L+0x13c>)
 8000e8e:	f003 f829 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8000e92:	e00f      	b.n	8000eb4 <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <Set_color_L+0x13c>)
 8000e9a:	f003 f823 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2180      	movs	r1, #128	@ 0x80
 8000ea2:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <Set_color_L+0x140>)
 8000ea4:	f003 f81e 	bl	8003ee4 <HAL_GPIO_WritePin>
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <Set_color_L+0x13c>)
 8000eae:	f003 f819 	bl	8003ee4 <HAL_GPIO_WritePin>
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	40011800 	.word	0x40011800

08000ec4 <Deal_Two_Massage>:
// 函数功能:接收2麦的信息
// 传入函数:recv:串口接收到的信息
// Function function: Receive information from 2 microphones
// Incoming function: recv: Information received by serial port
void Deal_Two_Massage(uint8_t recv)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]

	static uint8_t recv_flag = 0;  // Flag for the start of reception 接收开始的标志
	static uint8_t recv_index = 0; // Index Flag 索引的标志

	if (recv == '$' && recv_flag ==0 )
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b24      	cmp	r3, #36	@ 0x24
 8000ed2:	d10c      	bne.n	8000eee <Deal_Two_Massage+0x2a>
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <Deal_Two_Massage+0xa4>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d108      	bne.n	8000eee <Deal_Two_Massage+0x2a>
	{
		recv_flag = 1;
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <Deal_Two_Massage+0xa4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
		memset(g_recv_buf, 0, sizeof(g_recv_buf));
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4821      	ldr	r0, [pc, #132]	@ (8000f6c <Deal_Two_Massage+0xa8>)
 8000ee8:	f006 fb94 	bl	8007614 <memset>
		return;
 8000eec:	e039      	b.n	8000f62 <Deal_Two_Massage+0x9e>
	}
	if(recv_flag == 1)
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <Deal_Two_Massage+0xa4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d135      	bne.n	8000f62 <Deal_Two_Massage+0x9e>
	{
		if (recv == '#')
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b23      	cmp	r3, #35	@ 0x23
 8000efa:	d110      	bne.n	8000f1e <Deal_Two_Massage+0x5a>
		{
			// Enter data processing 进入数据处理
			Massage_Deal(); // Incoming function 传入函数
 8000efc:	f000 f83c 	bl	8000f78 <Massage_Deal>
			g_recv_send_flag = 1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <Deal_Two_Massage+0xac>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
			recv_flag = 0;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Deal_Two_Massage+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			recv_index = 0;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <Deal_Two_Massage+0xb0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			memset(g_recv_buf, 0, sizeof(g_recv_buf));
 8000f12:	2214      	movs	r2, #20
 8000f14:	2100      	movs	r1, #0
 8000f16:	4815      	ldr	r0, [pc, #84]	@ (8000f6c <Deal_Two_Massage+0xa8>)
 8000f18:	f006 fb7c 	bl	8007614 <memset>
			return;
 8000f1c:	e021      	b.n	8000f62 <Deal_Two_Massage+0x9e>
		}

		else if ((recv != '#') && (recv != '$')) // Remove$# 去$#
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b23      	cmp	r3, #35	@ 0x23
 8000f22:	d01e      	beq.n	8000f62 <Deal_Two_Massage+0x9e>
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b24      	cmp	r3, #36	@ 0x24
 8000f28:	d01b      	beq.n	8000f62 <Deal_Two_Massage+0x9e>
		{
			// Save valid data 有效数据存起来
			g_recv_buf[recv_index++] = recv;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <Deal_Two_Massage+0xb0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	b2d1      	uxtb	r1, r2
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <Deal_Two_Massage+0xb0>)
 8000f34:	7011      	strb	r1, [r2, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <Deal_Two_Massage+0xa8>)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	5453      	strb	r3, [r2, r1]
			if(recv_index > 20)//数组溢出
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <Deal_Two_Massage+0xb0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b14      	cmp	r3, #20
 8000f44:	d90d      	bls.n	8000f62 <Deal_Two_Massage+0x9e>
			{
				g_recv_send_flag = 0;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <Deal_Two_Massage+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
				recv_flag = 0;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <Deal_Two_Massage+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
				recv_index = 0;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <Deal_Two_Massage+0xb0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
				memset(g_recv_buf, 0, sizeof(g_recv_buf));
 8000f58:	2214      	movs	r2, #20
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <Deal_Two_Massage+0xa8>)
 8000f5e:	f006 fb59 	bl	8007614 <memset>
			}
		}
	}
}
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000c4 	.word	0x200000c4
 8000f6c:	20000098 	.word	0x20000098
 8000f70:	200000ac 	.word	0x200000ac
 8000f74:	200000c5 	.word	0x200000c5

08000f78 <Massage_Deal>:
// 函数功能:2麦信息处理
// 传入函数:无
// Function function: 2-microphone information processing
// Incoming function: None
void Massage_Deal(void) // Because the data is $B001#  因为数据是"$B001#"
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
	if (g_recv_buf[0] != 'B')
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <Massage_Deal+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b42      	cmp	r3, #66	@ 0x42
 8000f84:	d116      	bne.n	8000fb4 <Massage_Deal+0x3c>
		return;

	uint8_t recv_buff[20] = {'\0'};
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
	my_strcmp(recv_buff, &g_recv_buf[1]);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4909      	ldr	r1, [pc, #36]	@ (8000fc0 <Massage_Deal+0x48>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f887 	bl	80010b0 <my_strcmp>

	g_massage = atoi((char *)recv_buff);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 fa8d 	bl	80074c4 <atoi>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <Massage_Deal+0x4c>)
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	e000      	b.n	8000fb6 <Massage_Deal+0x3e>
		return;
 8000fb4:	bf00      	nop
}
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000098 	.word	0x20000098
 8000fc0:	20000099 	.word	0x20000099
 8000fc4:	200000ae 	.word	0x200000ae

08000fc8 <Get_Massage>:

// 函数功能:获取2麦信息的最新指令信息
// 传入函数:无
uint16_t Get_Massage(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	return g_massage;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <Get_Massage+0x10>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	200000ae 	.word	0x200000ae

08000fdc <Send_Massage>:
// 函数功能:发送数据给2麦，使其进行语音播报
// 传入函数:msg:信息
// Function function: Send data to 2 microphones for voice broadcasting
// Incoming function: msg: Information
void Send_Massage(uint16_t msg)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
	if (g_recv_send_flag == 0)
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <Send_Massage+0xbc>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d04e      	beq.n	800108c <Send_Massage+0xb0>
		return;
	// The data transmitted is not the latest data 传过来的数据不是最新数据
	if (msg != g_massage)
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <Send_Massage+0xc0>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d14b      	bne.n	8001090 <Send_Massage+0xb4>
		return;
	// If it is 0, no data will be returned 是0就不回传数据了
	if (msg == 0)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <Send_Massage+0x2a>
	{
		g_recv_send_flag = 0;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <Send_Massage+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		return;
 8001004:	e045      	b.n	8001092 <Send_Massage+0xb6>
	}

	// The data type is $A010# 数据类型是$A010# \ $A101#
	if ((msg>0 && msg<15 )||msg ==95||msg==96)//屏蔽语音交互模块的其它词条回复 Block responses to other entries in the voice interaction module
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <Send_Massage+0x36>
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	2b0e      	cmp	r3, #14
 8001010:	d905      	bls.n	800101e <Send_Massage+0x42>
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	2b5f      	cmp	r3, #95	@ 0x5f
 8001016:	d002      	beq.n	800101e <Send_Massage+0x42>
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	2b60      	cmp	r3, #96	@ 0x60
 800101c:	d11a      	bne.n	8001054 <Send_Massage+0x78>
	{
		if(msg == down)
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	2b60      	cmp	r3, #96	@ 0x60
 8001022:	d102      	bne.n	800102a <Send_Massage+0x4e>
		{
			msg = 45;
 8001024:	232d      	movs	r3, #45	@ 0x2d
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	e004      	b.n	8001034 <Send_Massage+0x58>
		}
		else if (msg == up)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b5f      	cmp	r3, #95	@ 0x5f
 800102e:	d101      	bne.n	8001034 <Send_Massage+0x58>
		{
			msg = 45;
 8001030:	232d      	movs	r3, #45	@ 0x2d
 8001032:	80fb      	strh	r3, [r7, #6]
		}

		sprintf(send_buf, "$A0%d#", msg);
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	461a      	mov	r2, r3
 8001038:	4919      	ldr	r1, [pc, #100]	@ (80010a0 <Send_Massage+0xc4>)
 800103a:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <Send_Massage+0xc8>)
 800103c:	f006 faca 	bl	80075d4 <siprintf>

		if (msg < 10)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	2b09      	cmp	r3, #9
 8001044:	d80c      	bhi.n	8001060 <Send_Massage+0x84>
			sprintf(send_buf, "$A00%d#", msg);
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	461a      	mov	r2, r3
 800104a:	4917      	ldr	r1, [pc, #92]	@ (80010a8 <Send_Massage+0xcc>)
 800104c:	4815      	ldr	r0, [pc, #84]	@ (80010a4 <Send_Massage+0xc8>)
 800104e:	f006 fac1 	bl	80075d4 <siprintf>
		if (msg < 10)
 8001052:	e005      	b.n	8001060 <Send_Massage+0x84>
	}
	else
	{
		sprintf(send_buf, "$A%d#", msg);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	461a      	mov	r2, r3
 8001058:	4914      	ldr	r1, [pc, #80]	@ (80010ac <Send_Massage+0xd0>)
 800105a:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <Send_Massage+0xc8>)
 800105c:	f006 faba 	bl	80075d4 <siprintf>
	}

	HAL_Delay(500); // We need to add a delay to the 2-wire reaction 要加延迟给2麦反应
 8001060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001064:	f002 fb4a 	bl	80036fc <HAL_Delay>
	USRT4_DataString((uint8_t *)send_buf, strlen(send_buf));
 8001068:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <Send_Massage+0xc8>)
 800106a:	f7ff f8db 	bl	8000224 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29b      	uxth	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <Send_Massage+0xc8>)
 8001076:	f000 f8d1 	bl	800121c <USRT4_DataString>
	memset(send_buf, 0, sizeof(send_buf));
 800107a:	2214      	movs	r2, #20
 800107c:	2100      	movs	r1, #0
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <Send_Massage+0xc8>)
 8001080:	f006 fac8 	bl	8007614 <memset>
	g_recv_send_flag = 0;
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <Send_Massage+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e002      	b.n	8001092 <Send_Massage+0xb6>
		return;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <Send_Massage+0xb6>
		return;
 8001090:	bf00      	nop
}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000ac 	.word	0x200000ac
 800109c:	200000ae 	.word	0x200000ae
 80010a0:	08007f4c 	.word	0x08007f4c
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	08007f54 	.word	0x08007f54
 80010ac:	08007f5c 	.word	0x08007f5c

080010b0 <my_strcmp>:

// 函数功能:复制函数
// 传入函数:*str1：保存数据的地址  *str2：要复制数据的地址
void my_strcmp(uint8_t *str1, uint8_t *str2)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	while (*str2 != '\0')
 80010ba:	e009      	b.n	80010d0 <my_strcmp+0x20>
	{
		*str1 = *str2;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	701a      	strb	r2, [r3, #0]
		str2++;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	603b      	str	r3, [r7, #0]
		str1++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
	while (*str2 != '\0')
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f1      	bne.n	80010bc <my_strcmp+0xc>
	}
	*str1 = '\0';
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f8:	2b80      	cmp	r3, #128	@ 0x80
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	330c      	adds	r3, #12
 8001118:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	e853 3f00 	ldrex	r3, [r3]
 8001120:	60bb      	str	r3, [r7, #8]
   return(result);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	330c      	adds	r3, #12
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	61ba      	str	r2, [r7, #24]
 8001132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001134:	6979      	ldr	r1, [r7, #20]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	e841 2300 	strex	r3, r2, [r1]
 800113c:	613b      	str	r3, [r7, #16]
   return(result);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e7      	bne.n	8001114 <LL_USART_EnableIT_RXNE+0x8>
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	2b20      	cmp	r3, #32
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <UART4_Init>:
#include "bsp_usrt4.h"

void UART4_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

	LL_USART_EnableIT_RXNE(UART4); // Start receiving interrupt 启动接收中断
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <UART4_Init+0x10>)
 80011ae:	f7ff ffad 	bl	800110c <LL_USART_EnableIT_RXNE>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004c00 	.word	0x40004c00

080011bc <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	uint8_t rx4_temp;
	if (LL_USART_IsEnabledIT_RXNE(UART4)) // Determine if there is any interruption information 判断是否有中断信息
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <UART4_IRQHandler+0x2c>)
 80011c4:	f7ff ffc4 	bl	8001150 <LL_USART_IsEnabledIT_RXNE>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <UART4_IRQHandler+0x24>
	{
		// LL_USART_ClearFlag_RXNE(UART4); //clear interrupt 清除中断
		rx4_temp = LL_USART_ReceiveData8(UART4); // Read information and clear interrupts 读取信息并清除中断
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <UART4_IRQHandler+0x2c>)
 80011d0:	f7ff ffd0 	bl	8001174 <LL_USART_ReceiveData8>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
		// USRT4_DataByte(rx4_temp);//send data 发送数据
		Deal_Two_Massage(rx4_temp);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe72 	bl	8000ec4 <Deal_Two_Massage>
	}
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004c00 	.word	0x40004c00

080011ec <USRT4_DataByte>:

// Send a Byte 发送一个字节
void USRT4_DataByte(uint8_t data_byte)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(UART4))
 80011f6:	bf00      	nop
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <USRT4_DataByte+0x2c>)
 80011fa:	f7ff ff75 	bl	80010e8 <LL_USART_IsActiveFlag_TXE>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f9      	beq.n	80011f8 <USRT4_DataByte+0xc>
	{
	};
	LL_USART_TransmitData8(UART4, data_byte);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4619      	mov	r1, r3
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <USRT4_DataByte+0x2c>)
 800120a:	f7ff ffbf 	bl	800118c <LL_USART_TransmitData8>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004c00 	.word	0x40004c00

0800121c <USRT4_DataString>:

// Set to send a string 设置发送一个字符串
void USRT4_DataString(uint8_t *data_str, uint16_t datasize)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
	for (uint8_t len = 0; len < datasize; len++)
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e009      	b.n	8001242 <USRT4_DataString+0x26>
	{
		USRT4_DataByte(*(data_str + len));
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffd8 	bl	80011ec <USRT4_DataByte>
	for (uint8_t len = 0; len < datasize; len++)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	3301      	adds	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	b29b      	uxth	r3, r3
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f0      	bhi.n	800122e <USRT4_DataString+0x12>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <BSP_Init>:

//Hardware Initialization
//Parameter:None

void BSP_Init(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
	Bsp_Tim_Init();
 800125a:	f001 f9a5 	bl	80025a8 <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化 Motor PID initialization
 800125e:	f000 feaf 	bl	8001fc0 <PID_Param_Init>
	UART4_Init();
 8001262:	f7ff ffa1 	bl	80011a8 <UART4_Init>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <BSP_Loop>:

//Hardware Initialization
//Parameter:None

void BSP_Loop(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    if(state!=Get_Massage())//判断是否更新了语音指令 Determine whether the voice command has been updated
 8001270:	f7ff feaa 	bl	8000fc8 <Get_Massage>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <BSP_Loop+0x50>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d01a      	beq.n	80012b6 <BSP_Loop+0x4a>
    {
	Change_RGB((Control_RGB_t)Get_Massage());
 8001280:	f7ff fea2 	bl	8000fc8 <Get_Massage>
 8001284:	4603      	mov	r3, r0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f819 	bl	80012c0 <Change_RGB>
	Control_Car((Control_MOTOR_t)Get_Massage());
 800128e:	f7ff fe9b 	bl	8000fc8 <Get_Massage>
 8001292:	4603      	mov	r3, r0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f870 	bl	800137c <Control_Car>
	Control_speed((Control_Speed_t)Get_Massage());
 800129c:	f7ff fe94 	bl	8000fc8 <Get_Massage>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f9f9 	bl	800169c <Control_speed>
	state=Get_Massage();
 80012aa:	f7ff fe8d 	bl	8000fc8 <Get_Massage>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <BSP_Loop+0x50>)
 80012b4:	801a      	strh	r2, [r3, #0]
    }
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000

080012c0 <Change_RGB>:
 * Voice control RGB light
 * Control_RGB_t rgb_flag: The last two digits of the id sent by the corresponding voice module to the host
 * */

void Change_RGB(Control_RGB_t rgb_flag)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	switch (rgb_flag)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3b0a      	subs	r3, #10
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d847      	bhi.n	8001362 <Change_RGB+0xa2>
 80012d2:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <Change_RGB+0x18>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	0800132b 	.word	0x0800132b
 80012e0:	08001339 	.word	0x08001339
 80012e4:	08001347 	.word	0x08001347
 80012e8:	08001355 	.word	0x08001355
	{
	case close_light:
		RGB_OFF_ALL;
 80012ec:	2200      	movs	r2, #0
 80012ee:	2104      	movs	r1, #4
 80012f0:	4820      	ldr	r0, [pc, #128]	@ (8001374 <Change_RGB+0xb4>)
 80012f2:	f002 fdf7 	bl	8003ee4 <HAL_GPIO_WritePin>
 80012f6:	2200      	movs	r2, #0
 80012f8:	2108      	movs	r1, #8
 80012fa:	481e      	ldr	r0, [pc, #120]	@ (8001374 <Change_RGB+0xb4>)
 80012fc:	f002 fdf2 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	481b      	ldr	r0, [pc, #108]	@ (8001374 <Change_RGB+0xb4>)
 8001306:	f002 fded 	bl	8003ee4 <HAL_GPIO_WritePin>
 800130a:	2200      	movs	r2, #0
 800130c:	2102      	movs	r1, #2
 800130e:	481a      	ldr	r0, [pc, #104]	@ (8001378 <Change_RGB+0xb8>)
 8001310:	f002 fde8 	bl	8003ee4 <HAL_GPIO_WritePin>
 8001314:	2200      	movs	r2, #0
 8001316:	2180      	movs	r1, #128	@ 0x80
 8001318:	4816      	ldr	r0, [pc, #88]	@ (8001374 <Change_RGB+0xb4>)
 800131a:	f002 fde3 	bl	8003ee4 <HAL_GPIO_WritePin>
 800131e:	2200      	movs	r2, #0
 8001320:	2104      	movs	r1, #4
 8001322:	4815      	ldr	r0, [pc, #84]	@ (8001378 <Change_RGB+0xb8>)
 8001324:	f002 fdde 	bl	8003ee4 <HAL_GPIO_WritePin>
		break;
 8001328:	e01b      	b.n	8001362 <Change_RGB+0xa2>
	case red_light:
		Set_color_R(red);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fc88 	bl	8000c40 <Set_color_R>
		Set_color_L(red);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fd25 	bl	8000d80 <Set_color_L>
		break;
 8001336:	e014      	b.n	8001362 <Change_RGB+0xa2>
	case green_light:
		Set_color_R(green);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fc81 	bl	8000c40 <Set_color_R>
		Set_color_L(green);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fd1e 	bl	8000d80 <Set_color_L>
		break;
 8001344:	e00d      	b.n	8001362 <Change_RGB+0xa2>
	case blue_light:
		Set_color_R(blue);
 8001346:	2002      	movs	r0, #2
 8001348:	f7ff fc7a 	bl	8000c40 <Set_color_R>
		Set_color_L(blue);
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fd17 	bl	8000d80 <Set_color_L>
		break;
 8001352:	e006      	b.n	8001362 <Change_RGB+0xa2>
	case yellow_light:
		Set_color_R(yellow);
 8001354:	2003      	movs	r0, #3
 8001356:	f7ff fc73 	bl	8000c40 <Set_color_R>
		Set_color_L(yellow);
 800135a:	2003      	movs	r0, #3
 800135c:	f7ff fd10 	bl	8000d80 <Set_color_L>
		break;
 8001360:	bf00      	nop
	}

	Send_Massage((uint16_t)rgb_flag);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe38 	bl	8000fdc <Send_Massage>

}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40011800 	.word	0x40011800
 8001378:	40012000 	.word	0x40012000

0800137c <Control_Car>:
 * Voice control car action
 * Control_RGB_t rgb_flag: The last two digits of the id sent by the corresponding voice module to the host
 * */

void Control_Car(Control_MOTOR_t car_state )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	switch(car_state)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	3b01      	subs	r3, #1
 800138a:	2b0a      	cmp	r3, #10
 800138c:	f200 8177 	bhi.w	800167e <Control_Car+0x302>
 8001390:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <Control_Car+0x1c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013c5 	.word	0x080013c5
 800139c:	080013cf 	.word	0x080013cf
 80013a0:	0800167f 	.word	0x0800167f
 80013a4:	080014d9 	.word	0x080014d9
 80013a8:	080014e7 	.word	0x080014e7
 80013ac:	080014f5 	.word	0x080014f5
 80013b0:	08001527 	.word	0x08001527
 80013b4:	08001559 	.word	0x08001559
 80013b8:	08001567 	.word	0x08001567
 80013bc:	08001575 	.word	0x08001575
 80013c0:	0800167f 	.word	0x0800167f
	{
	case car_stop:
		wheel_State(MOTION_STOP,0);
 80013c4:	2100      	movs	r1, #0
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 fc40 	bl	8001c4c <wheel_State>
		break;
 80013cc:	e157      	b.n	800167e <Control_Car+0x302>
	case stop:
		wheel_State(MOTION_STOP, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 fc3b 	bl	8001c4c <wheel_State>
	    HAL_Delay(500);
 80013d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013da:	f002 f98f 	bl	80036fc <HAL_Delay>
	    Motion_Set_Speed(-400, -400, -100, -100);
 80013de:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013e2:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80013e6:	49aa      	ldr	r1, [pc, #680]	@ (8001690 <Control_Car+0x314>)
 80013e8:	48a9      	ldr	r0, [pc, #676]	@ (8001690 <Control_Car+0x314>)
 80013ea:	f000 facf 	bl	800198c <Motion_Set_Speed>
	    HAL_Delay(2300);
 80013ee:	f640 00fc 	movw	r0, #2300	@ 0x8fc
 80013f2:	f002 f983 	bl	80036fc <HAL_Delay>
	    wheel_State(MOTION_BACK, 200);
 80013f6:	21c8      	movs	r1, #200	@ 0xc8
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 fc27 	bl	8001c4c <wheel_State>
	    HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001402:	f002 f97b 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_STOP, 0);
 8001406:	2100      	movs	r1, #0
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fc1f 	bl	8001c4c <wheel_State>
		HAL_Delay(10000);
 800140e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001412:	f002 f973 	bl	80036fc <HAL_Delay>
		Motion_Set_Speed(-100, -100, 500, 500);
 8001416:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800141a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800141e:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001422:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001426:	f000 fab1 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1100);
 800142a:	f240 404c 	movw	r0, #1100	@ 0x44c
 800142e:	f002 f965 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 8001432:	21c8      	movs	r1, #200	@ 0xc8
 8001434:	2001      	movs	r0, #1
 8001436:	f000 fc09 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 800143a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800143e:	f002 f95d 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_STOP, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2000      	movs	r0, #0
 8001446:	f000 fc01 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 800144a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800144e:	f002 f955 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_BACK, 200);
 8001452:	21c8      	movs	r1, #200	@ 0xc8
 8001454:	2002      	movs	r0, #2
 8001456:	f000 fbf9 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 800145a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800145e:	f002 f94d 	bl	80036fc <HAL_Delay>

		Motion_Set_Speed(-100, -100, -500, -500);
 8001462:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <Control_Car+0x318>)
 8001464:	4a8b      	ldr	r2, [pc, #556]	@ (8001694 <Control_Car+0x318>)
 8001466:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800146a:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800146e:	f000 fa8d 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1600);
 8001472:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8001476:	f002 f941 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_BACK, 200);
 800147a:	21c8      	movs	r1, #200	@ 0xc8
 800147c:	2002      	movs	r0, #2
 800147e:	f000 fbe5 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 8001482:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001486:	f002 f939 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 800148a:	21c8      	movs	r1, #200	@ 0xc8
 800148c:	2001      	movs	r0, #1
 800148e:	f000 fbdd 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 8001492:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001496:	f002 f931 	bl	80036fc <HAL_Delay>
		Motion_Set_Speed(500, 500, -100, -100);
 800149a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800149e:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80014a2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80014a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014aa:	f000 fa6f 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b2:	f002 f923 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 80014b6:	21c8      	movs	r1, #200	@ 0xc8
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 fbc7 	bl	8001c4c <wheel_State>
		HAL_Delay(5000);
 80014be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014c2:	f002 f91b 	bl	80036fc <HAL_Delay>

		wheel_State(MOTION_STOP, 0);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 fbbf 	bl	8001c4c <wheel_State>
	    HAL_Delay(30000);
 80014ce:	f247 5030 	movw	r0, #30000	@ 0x7530
 80014d2:	f002 f913 	bl	80036fc <HAL_Delay>
		break;
 80014d6:	e0d2      	b.n	800167e <Control_Car+0x302>

	case sleep:
		break;
	case car_forward:
		wheel_State(MOTION_RUN,voice_car_speed);
 80014d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001698 <Control_Car+0x31c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 fbb4 	bl	8001c4c <wheel_State>
		break;
 80014e4:	e0cb      	b.n	800167e <Control_Car+0x302>
	case car_back:
		wheel_State(MOTION_BACK,voice_car_speed);
 80014e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001698 <Control_Car+0x31c>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	2002      	movs	r0, #2
 80014ee:	f000 fbad 	bl	8001c4c <wheel_State>
		break;
 80014f2:	e0c4      	b.n	800167e <Control_Car+0x302>
	case car_left:
		Motion_Set_Speed(-voice_car_speed/4,-voice_car_speed/4,voice_car_speed,voice_car_speed);
 80014f4:	4b68      	ldr	r3, [pc, #416]	@ (8001698 <Control_Car+0x31c>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <Control_Car+0x182>
 80014fc:	3303      	adds	r3, #3
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	425b      	negs	r3, r3
 8001502:	b218      	sxth	r0, r3
 8001504:	4b64      	ldr	r3, [pc, #400]	@ (8001698 <Control_Car+0x31c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	da00      	bge.n	800150e <Control_Car+0x192>
 800150c:	3303      	adds	r3, #3
 800150e:	109b      	asrs	r3, r3, #2
 8001510:	425b      	negs	r3, r3
 8001512:	b219      	sxth	r1, r3
 8001514:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <Control_Car+0x31c>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b5f      	ldr	r3, [pc, #380]	@ (8001698 <Control_Car+0x31c>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b21b      	sxth	r3, r3
 8001520:	f000 fa34 	bl	800198c <Motion_Set_Speed>
		break;
 8001524:	e0ab      	b.n	800167e <Control_Car+0x302>
	case car_right:
		Motion_Set_Speed(voice_car_speed,voice_car_speed,-voice_car_speed/4,-voice_car_speed/4);
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <Control_Car+0x31c>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b218      	sxth	r0, r3
 800152c:	4b5a      	ldr	r3, [pc, #360]	@ (8001698 <Control_Car+0x31c>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b219      	sxth	r1, r3
 8001532:	4b59      	ldr	r3, [pc, #356]	@ (8001698 <Control_Car+0x31c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da00      	bge.n	800153c <Control_Car+0x1c0>
 800153a:	3303      	adds	r3, #3
 800153c:	109b      	asrs	r3, r3, #2
 800153e:	425b      	negs	r3, r3
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <Control_Car+0x31c>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	da00      	bge.n	800154c <Control_Car+0x1d0>
 800154a:	3303      	adds	r3, #3
 800154c:	109b      	asrs	r3, r3, #2
 800154e:	425b      	negs	r3, r3
 8001550:	b21b      	sxth	r3, r3
 8001552:	f000 fa1b 	bl	800198c <Motion_Set_Speed>
		break;
 8001556:	e092      	b.n	800167e <Control_Car+0x302>
	case left_spin:
		wheel_State(MOTION_SPIN_LEFT,voice_car_speed);
 8001558:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <Control_Car+0x31c>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	2005      	movs	r0, #5
 8001560:	f000 fb74 	bl	8001c4c <wheel_State>
		break;
 8001564:	e08b      	b.n	800167e <Control_Car+0x302>
	case right_spipn:
		wheel_State(MOTION_SPIN_RIGHT,voice_car_speed);
 8001566:	4b4c      	ldr	r3, [pc, #304]	@ (8001698 <Control_Car+0x31c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	2006      	movs	r0, #6
 800156e:	f000 fb6d 	bl	8001c4c <wheel_State>
		break;
 8001572:	e084      	b.n	800167e <Control_Car+0x302>
	case parking1:
		wheel_State(MOTION_STOP, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f000 fb68 	bl	8001c4c <wheel_State>
	    HAL_Delay(500);
 800157c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001580:	f002 f8bc 	bl	80036fc <HAL_Delay>
	    Motion_Set_Speed(-400, -400, -100, -100);
 8001584:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001588:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800158c:	4940      	ldr	r1, [pc, #256]	@ (8001690 <Control_Car+0x314>)
 800158e:	4840      	ldr	r0, [pc, #256]	@ (8001690 <Control_Car+0x314>)
 8001590:	f000 f9fc 	bl	800198c <Motion_Set_Speed>
	    HAL_Delay(2300);
 8001594:	f640 00fc 	movw	r0, #2300	@ 0x8fc
 8001598:	f002 f8b0 	bl	80036fc <HAL_Delay>
	    wheel_State(MOTION_BACK, 200);
 800159c:	21c8      	movs	r1, #200	@ 0xc8
 800159e:	2002      	movs	r0, #2
 80015a0:	f000 fb54 	bl	8001c4c <wheel_State>
	    HAL_Delay(3000);
 80015a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015a8:	f002 f8a8 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_STOP, 0);
 80015ac:	2100      	movs	r1, #0
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 fb4c 	bl	8001c4c <wheel_State>
		HAL_Delay(10000);
 80015b4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80015b8:	f002 f8a0 	bl	80036fc <HAL_Delay>
		Motion_Set_Speed(-100, -100, 500, 500);
 80015bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015c4:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80015c8:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80015cc:	f000 f9de 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1100);
 80015d0:	f240 404c 	movw	r0, #1100	@ 0x44c
 80015d4:	f002 f892 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 80015d8:	21c8      	movs	r1, #200	@ 0xc8
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fb36 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 80015e0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015e4:	f002 f88a 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_STOP, 0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fb2e 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 80015f0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015f4:	f002 f882 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_BACK, 200);
 80015f8:	21c8      	movs	r1, #200	@ 0xc8
 80015fa:	2002      	movs	r0, #2
 80015fc:	f000 fb26 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 8001600:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001604:	f002 f87a 	bl	80036fc <HAL_Delay>

		Motion_Set_Speed(-100, -100, -500, -500);
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <Control_Car+0x318>)
 800160a:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <Control_Car+0x318>)
 800160c:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001610:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001614:	f000 f9ba 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1600);
 8001618:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800161c:	f002 f86e 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_BACK, 200);
 8001620:	21c8      	movs	r1, #200	@ 0xc8
 8001622:	2002      	movs	r0, #2
 8001624:	f000 fb12 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 8001628:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800162c:	f002 f866 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 8001630:	21c8      	movs	r1, #200	@ 0xc8
 8001632:	2001      	movs	r0, #1
 8001634:	f000 fb0a 	bl	8001c4c <wheel_State>
		HAL_Delay(3000);
 8001638:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800163c:	f002 f85e 	bl	80036fc <HAL_Delay>
		Motion_Set_Speed(500, 500, -100, -100);
 8001640:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001644:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001648:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800164c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001650:	f000 f99c 	bl	800198c <Motion_Set_Speed>
		HAL_Delay(1000);
 8001654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001658:	f002 f850 	bl	80036fc <HAL_Delay>
		wheel_State(MOTION_RUN, 200);
 800165c:	21c8      	movs	r1, #200	@ 0xc8
 800165e:	2001      	movs	r0, #1
 8001660:	f000 faf4 	bl	8001c4c <wheel_State>
		HAL_Delay(5000);
 8001664:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001668:	f002 f848 	bl	80036fc <HAL_Delay>

		wheel_State(MOTION_STOP, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	2000      	movs	r0, #0
 8001670:	f000 faec 	bl	8001c4c <wheel_State>
	    HAL_Delay(30000);
 8001674:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001678:	f002 f840 	bl	80036fc <HAL_Delay>
		break;
 800167c:	bf00      	nop
	case parking2:

		break;

	}
	Send_Massage((uint16_t)car_state);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fcaa 	bl	8000fdc <Send_Massage>

}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	fffffe70 	.word	0xfffffe70
 8001694:	fffffe0c 	.word	0xfffffe0c
 8001698:	20000002 	.word	0x20000002

0800169c <Control_speed>:
 * Voice control acceleration and deceleration
 * Control_RGB_t rgb_flag: The last two digits of the id sent by the corresponding voice module to the host
 * */

void Control_speed( Control_Speed_t ctrl_speed)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	if(ctrl_speed== up )
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80016aa:	d10e      	bne.n	80016ca <Control_speed+0x2e>
	{
		voice_car_speed=voice_car_speed+100;
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <Control_speed+0x60>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	3364      	adds	r3, #100	@ 0x64
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <Control_speed+0x60>)
 80016b6:	801a      	strh	r2, [r3, #0]
		if(voice_car_speed>1000)
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <Control_speed+0x60>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016c0:	d903      	bls.n	80016ca <Control_speed+0x2e>
		{
			voice_car_speed=1000;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <Control_speed+0x60>)
 80016c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016c8:	801a      	strh	r2, [r3, #0]
		}

	}
	if(ctrl_speed== down )
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b60      	cmp	r3, #96	@ 0x60
 80016ce:	d10c      	bne.n	80016ea <Control_speed+0x4e>
	{
		voice_car_speed=voice_car_speed-100;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <Control_speed+0x60>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	3b64      	subs	r3, #100	@ 0x64
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <Control_speed+0x60>)
 80016da:	801a      	strh	r2, [r3, #0]
		if(voice_car_speed<100)
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <Control_speed+0x60>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b63      	cmp	r3, #99	@ 0x63
 80016e2:	d802      	bhi.n	80016ea <Control_speed+0x4e>
		{
			voice_car_speed=100;
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <Control_speed+0x60>)
 80016e6:	2264      	movs	r2, #100	@ 0x64
 80016e8:	801a      	strh	r2, [r3, #0]
		}
	}
	Send_Massage(ctrl_speed);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fc74 	bl	8000fdc <Send_Massage>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000002 	.word	0x20000002

08001700 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d841      	bhi.n	8001798 <Encoder_Read_CNT+0x98>
 8001714:	a201      	add	r2, pc, #4	@ (adr r2, 800171c <Encoder_Read_CNT+0x1c>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001747 	.word	0x08001747
 8001724:	08001765 	.word	0x08001765
 8001728:	0800177f 	.word	0x0800177f
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <Encoder_Read_CNT+0xa8>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	b29b      	uxth	r3, r3
 8001732:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001736:	337f      	adds	r3, #127	@ 0x7f
 8001738:	b29b      	uxth	r3, r3
 800173a:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <Encoder_Read_CNT+0xa8>)
 800173e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001744:	e029      	b.n	800179a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8001746:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	b29b      	uxth	r3, r3
 800174e:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001752:	337f      	adds	r3, #127	@ 0x7f
 8001754:	b29b      	uxth	r3, r3
 8001756:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8001758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800175c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001762:	e01a      	b.n	800179a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <Encoder_Read_CNT+0xac>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	b29b      	uxth	r3, r3
 800176a:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 800176e:	337f      	adds	r3, #127	@ 0x7f
 8001770:	b29b      	uxth	r3, r3
 8001772:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <Encoder_Read_CNT+0xac>)
 8001776:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800177a:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 800177c:	e00d      	b.n	800179a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <Encoder_Read_CNT+0xb0>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	b29b      	uxth	r3, r3
 8001784:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8001788:	337f      	adds	r3, #127	@ 0x7f
 800178a:	b29b      	uxth	r3, r3
 800178c:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <Encoder_Read_CNT+0xb0>)
 8001790:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8001796:	e000      	b.n	800179a <Encoder_Read_CNT+0x9a>
	default:
		break;
 8001798:	bf00      	nop
	}
	return Encoder_TIM;
 800179a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40000800 	.word	0x40000800
 80017ac:	40000c00 	.word	0x40000c00
 80017b0:	40000400 	.word	0x40000400

080017b4 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <Encoder_Get_ALL+0x38>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <Encoder_Get_ALL+0x3c>)
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <Encoder_Get_ALL+0x40>)
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	330c      	adds	r3, #12
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <Encoder_Get_ALL+0x44>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	200000c8 	.word	0x200000c8
 80017f0:	200000cc 	.word	0x200000cc
 80017f4:	200000d0 	.word	0x200000d0
 80017f8:	200000d4 	.word	0x200000d4

080017fc <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff ff7d 	bl	8001700 <Encoder_Read_CNT>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <Encoder_Update_Count+0x58>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <Encoder_Update_Count+0x58>)
 8001812:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ff73 	bl	8001700 <Encoder_Read_CNT>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <Encoder_Update_Count+0x5c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	4a0c      	ldr	r2, [pc, #48]	@ (8001858 <Encoder_Update_Count+0x5c>)
 8001826:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff ff69 	bl	8001700 <Encoder_Read_CNT>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <Encoder_Update_Count+0x60>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <Encoder_Update_Count+0x60>)
 800183a:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 800183c:	2003      	movs	r0, #3
 800183e:	f7ff ff5f 	bl	8001700 <Encoder_Read_CNT>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <Encoder_Update_Count+0x64>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <Encoder_Update_Count+0x64>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000c8 	.word	0x200000c8
 8001858:	200000cc 	.word	0x200000cc
 800185c:	200000d0 	.word	0x200000d0
 8001860:	200000d4 	.word	0x200000d4

08001864 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8001868:	4b02      	ldr	r3, [pc, #8]	@ (8001874 <Motion_Get_Circle_Pulse+0x10>)
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	44820000 	.word	0x44820000

08001878 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <Motion_Set_Yaw_Adjust+0x28>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e002      	b.n	8001896 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <Motion_Set_Yaw_Adjust+0x28>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	2000015c 	.word	0x2000015c

080018a4 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80018ca:	db0a      	blt.n	80018e2 <Motion_Set_Pwm+0x3e>
 80018cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80018d4:	dc05      	bgt.n	80018e2 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	4619      	mov	r1, r3
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 fdcf 	bl	8002480 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 80018e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018e6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80018ea:	db0a      	blt.n	8001902 <Motion_Set_Pwm+0x5e>
 80018ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018f0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80018f4:	dc05      	bgt.n	8001902 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 80018f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018fa:	4619      	mov	r1, r3
 80018fc:	2001      	movs	r0, #1
 80018fe:	f000 fdbf 	bl	8002480 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8001902:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001906:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800190a:	db0a      	blt.n	8001922 <Motion_Set_Pwm+0x7e>
 800190c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001910:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001914:	dc05      	bgt.n	8001922 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8001916:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800191a:	4619      	mov	r1, r3
 800191c:	2002      	movs	r0, #2
 800191e:	f000 fdaf 	bl	8002480 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800192a:	db0a      	blt.n	8001942 <Motion_Set_Pwm+0x9e>
 800192c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001930:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001934:	dc05      	bgt.n	8001942 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8001936:	f9b7 3000 	ldrsh.w	r3, [r7]
 800193a:	4619      	mov	r1, r3
 800193c:	2003      	movs	r0, #3
 800193e:	f000 fd9f 	bl	8002480 <Motor_Set_Pwm>
    }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
	...

0800194c <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8001956:	2300      	movs	r3, #0
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f815 	bl	800198c <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8001962:	2004      	movs	r0, #4
 8001964:	f000 fc64 	bl	8002230 <PID_Clear_Motor>
    g_start_ctrl = 0;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <Motion_Stop+0x38>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <Motion_Stop+0x3c>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd36 	bl	80023e8 <Motor_Stop>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000128 	.word	0x20000128
 8001988:	2000015c 	.word	0x2000015c

0800198c <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	4603      	mov	r3, r0
 80019a0:	80bb      	strh	r3, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <Motion_Set_Speed+0x80>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 80019b0:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <Motion_Set_Speed+0x84>)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 80019b6:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <Motion_Set_Speed+0x84>)
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <Motion_Set_Speed+0x84>)
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 80019c2:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <Motion_Set_Speed+0x84>)
 80019c4:	883b      	ldrh	r3, [r7, #0]
 80019c6:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e016      	b.n	80019fc <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <Motion_Set_Speed+0x84>)
 80019d2:	3310      	adds	r3, #16
 80019d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fd7d 	bl	80004d8 <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7fe fde1 	bl	80005ac <__aeabi_d2f>
 80019ea:	4602      	mov	r2, r0
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fca9 	bl	8002348 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d9e5      	bls.n	80019ce <Motion_Set_Speed+0x42>
    }
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20000128 	.word	0x20000128
 8001a10:	20000134 	.word	0x20000134

08001a14 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 8001a2e:	f000 f8d3 	bl	8001bd8 <Motion_Get_Circle_MM>
 8001a32:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8001a34:	f7ff ff16 	bl	8001864 <Motion_Get_Circle_Pulse>
 8001a38:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 8001a3a:	f000 f8c3 	bl	8001bc4 <Motion_Get_APB>
 8001a3e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8001a40:	f000 f8d4 	bl	8001bec <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a48:	e01e      	b.n	8001a88 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb4 <Motion_Get_Speed+0x1a0>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	2264      	movs	r2, #100	@ 0x64
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe feb1 	bl	80007c0 <__aeabi_i2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ff00 	bl	8000868 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe ffaf 	bl	80009d0 <__aeabi_fdiv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3328      	adds	r3, #40	@ 0x28
 8001a7c:	443b      	add	r3, r7
 8001a7e:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	dddd      	ble.n	8001a4a <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fddf 	bl	8000658 <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7fe fdd8 	bl	8000658 <__addsf3>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7fe fdd1 	bl	8000658 <__addsf3>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe ff87 	bl	80009d0 <__aeabi_fdiv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f895 	bl	8000bf4 <__aeabi_f2iz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fdbb 	bl	8000654 <__aeabi_fsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7fe fdb4 	bl	8000654 <__aeabi_fsub>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7fe fdaf 	bl	8000658 <__addsf3>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b00:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff63 	bl	80009d0 <__aeabi_fdiv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f871 	bl	8000bf4 <__aeabi_f2iz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd99 	bl	8000658 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f7fe fd90 	bl	8000654 <__aeabi_fsub>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7fe fd89 	bl	8000654 <__aeabi_fsub>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b48:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe ff3f 	bl	80009d0 <__aeabi_fdiv>
 8001b52:	4603      	mov	r3, r0
 8001b54:	69b9      	ldr	r1, [r7, #24]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe ff3a 	bl	80009d0 <__aeabi_fdiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4916      	ldr	r1, [pc, #88]	@ (8001bb8 <Motion_Get_Speed+0x1a4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fe81 	bl	8000868 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f843 	bl	8000bf4 <__aeabi_f2iz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <Motion_Get_Speed+0x1a8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b82:	e00c      	b.n	8001b9e <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3328      	adds	r3, #40	@ 0x28
 8001b8a:	443b      	add	r3, r7
 8001b8c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001b90:	490b      	ldr	r1, [pc, #44]	@ (8001bc0 <Motion_Get_Speed+0x1ac>)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	ddef      	ble.n	8001b84 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 8001ba4:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <Motion_Get_Speed+0x1ac>)
 8001ba6:	f000 fb1b 	bl	80021e0 <PID_Calc_Motor>
    }
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000118 	.word	0x20000118
 8001bb8:	447a0000 	.word	0x447a0000
 8001bbc:	20000128 	.word	0x20000128
 8001bc0:	20000134 	.word	0x20000134

08001bc4 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	@ (8001bd4 <Motion_Get_APB+0x10>)
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	431f0000 	.word	0x431f0000

08001bd8 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	@ (8001be8 <Motion_Get_Circle_MM+0x10>)
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	434c33f8 	.word	0x434c33f8

08001bec <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8001bf2:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <Motion_Get_Encoder+0x54>)
 8001bf4:	f7ff fdde 	bl	80017b4 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	e017      	b.n	8001c2e <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <Motion_Get_Encoder+0x54>)
 8001c02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <Motion_Get_Encoder+0x58>)
 8001c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	1a8a      	subs	r2, r1, r2
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <Motion_Get_Encoder+0x5c>)
 8001c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <Motion_Get_Encoder+0x54>)
 8001c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c22:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <Motion_Get_Encoder+0x58>)
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d9e4      	bls.n	8001bfe <Motion_Get_Encoder+0x12>
    }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200000f8 	.word	0x200000f8
 8001c44:	20000108 	.word	0x20000108
 8001c48:	20000118 	.word	0x20000118

08001c4c <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <wheel_State+0x110>)
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	8013      	strh	r3, [r2, #0]
    switch (state)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d873      	bhi.n	8001d50 <wheel_State+0x104>
 8001c68:	a201      	add	r2, pc, #4	@ (adr r2, 8001c70 <wheel_State+0x24>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c91 	.word	0x08001c91
 8001c74:	08001cab 	.word	0x08001cab
 8001c78:	08001cbb 	.word	0x08001cbb
 8001c7c:	08001ccf 	.word	0x08001ccf
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001d09 	.word	0x08001d09
 8001c88:	08001d2b 	.word	0x08001d2b
 8001c8c:	08001d49 	.word	0x08001d49
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <wheel_State+0x110>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8001c96:	88bb      	ldrh	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe52 	bl	800194c <Motion_Stop>
        break;
 8001ca8:	e053      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8001caa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f854 	bl	8001d60 <wheel_Ctrl>
        break;
 8001cb8:	e04b      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f84a 	bl	8001d60 <wheel_Ctrl>
        break;
 8001ccc:	e041      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8001cce:	88bb      	ldrh	r3, [r7, #4]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b218      	sxth	r0, r3
 8001cd6:	88bb      	ldrh	r3, [r7, #4]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	03d2      	lsls	r2, r2, #15
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f000 f83a 	bl	8001d60 <wheel_Ctrl>
        break;
 8001cec:	e031      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8001cee:	88bb      	ldrh	r3, [r7, #4]
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2100      	movs	r1, #0
 8001d02:	f000 f82d 	bl	8001d60 <wheel_Ctrl>

        break;
 8001d06:	e024      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff fdb5 	bl	8001878 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8001d0e:	88bb      	ldrh	r3, [r7, #4]
 8001d10:	461a      	mov	r2, r3
 8001d12:	0392      	lsls	r2, r2, #14
 8001d14:	1ad2      	subs	r2, r2, r3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f81c 	bl	8001d60 <wheel_Ctrl>
        break;
 8001d28:	e013      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fda4 	bl	8001878 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f80d 	bl	8001d60 <wheel_Ctrl>
        break;
 8001d46:	e004      	b.n	8001d52 <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff fdff 	bl	800194c <Motion_Stop>
        break;
 8001d4e:	e000      	b.n	8001d52 <wheel_State+0x106>
    default:
        break;
 8001d50:	bf00      	nop
    }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200000f4 	.word	0x200000f4

08001d60 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	80bb      	strh	r3, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8001d72:	f7ff ff27 	bl	8001bc4 <Motion_Get_APB>
 8001d76:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8001d78:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <wheel_Ctrl+0x1d8>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8001d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fd1b 	bl	80007c0 <__aeabi_i2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f3c <wheel_Ctrl+0x1dc>)
 8001d8e:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8001d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fd13 	bl	80007c0 <__aeabi_i2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4968      	ldr	r1, [pc, #416]	@ (8001f40 <wheel_Ctrl+0x1e0>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fe16 	bl	80009d0 <__aeabi_fdiv>
 8001da4:	4603      	mov	r3, r0
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fd5d 	bl	8000868 <__aeabi_fmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b64      	ldr	r3, [pc, #400]	@ (8001f44 <wheel_Ctrl+0x1e4>)
 8001db4:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10b      	bne.n	8001dd6 <wheel_Ctrl+0x76>
 8001dbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <wheel_Ctrl+0x76>
 8001dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fdbc 	bl	800194c <Motion_Stop>
        return;
 8001dd4:	e0ad      	b.n	8001f32 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001dd6:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <wheel_Ctrl+0x1dc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a57      	ldr	r2, [pc, #348]	@ (8001f38 <wheel_Ctrl+0x1d8>)
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fc39 	bl	8000658 <__addsf3>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b56      	ldr	r3, [pc, #344]	@ (8001f44 <wheel_Ctrl+0x1e4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f7fe fc31 	bl	8000658 <__addsf3>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fefb 	bl	8000bf4 <__aeabi_f2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a51      	ldr	r2, [pc, #324]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001e02:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001e04:	4b4d      	ldr	r3, [pc, #308]	@ (8001f3c <wheel_Ctrl+0x1dc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	@ (8001f38 <wheel_Ctrl+0x1d8>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fc20 	bl	8000654 <__aeabi_fsub>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b4a      	ldr	r3, [pc, #296]	@ (8001f44 <wheel_Ctrl+0x1e4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7fe fc1a 	bl	8000658 <__addsf3>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fee4 	bl	8000bf4 <__aeabi_f2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001e30:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001e32:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <wheel_Ctrl+0x1dc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a40      	ldr	r2, [pc, #256]	@ (8001f38 <wheel_Ctrl+0x1d8>)
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc09 	bl	8000654 <__aeabi_fsub>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <wheel_Ctrl+0x1e4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7fe fc01 	bl	8000654 <__aeabi_fsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fecd 	bl	8000bf4 <__aeabi_f2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001e5e:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001e60:	4b36      	ldr	r3, [pc, #216]	@ (8001f3c <wheel_Ctrl+0x1dc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <wheel_Ctrl+0x1d8>)
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbf4 	bl	8000658 <__addsf3>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <wheel_Ctrl+0x1e4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7fe fbea 	bl	8000654 <__aeabi_fsub>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe feb6 	bl	8000bf4 <__aeabi_f2iz>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a32      	ldr	r2, [pc, #200]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001e8c:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e96:	dd03      	ble.n	8001ea0 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001e9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e9e:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8001ea0:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001ea8:	da02      	bge.n	8001eb0 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <wheel_Ctrl+0x1f8>)
 8001eae:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8001eb0:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eb8:	dd03      	ble.n	8001ec2 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001ebc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ec0:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001eca:	da02      	bge.n	8001ed2 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001ece:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <wheel_Ctrl+0x1f8>)
 8001ed0:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eda:	dd03      	ble.n	8001ee4 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001ede:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ee2:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001eec:	da02      	bge.n	8001ef4 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001ef0:	4a19      	ldr	r2, [pc, #100]	@ (8001f58 <wheel_Ctrl+0x1f8>)
 8001ef2:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8001ef4:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001efc:	dd03      	ble.n	8001f06 <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001f00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f04:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f0e:	da02      	bge.n	8001f16 <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001f12:	4a11      	ldr	r2, [pc, #68]	@ (8001f58 <wheel_Ctrl+0x1f8>)
 8001f14:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <wheel_Ctrl+0x1e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b218      	sxth	r0, r3
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <wheel_Ctrl+0x1ec>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b219      	sxth	r1, r3
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <wheel_Ctrl+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <wheel_Ctrl+0x1f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	f7ff fd2d 	bl	800198c <Motion_Set_Speed>
}
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200000d8 	.word	0x200000d8
 8001f3c:	200000dc 	.word	0x200000dc
 8001f40:	447a0000 	.word	0x447a0000
 8001f44:	200000e0 	.word	0x200000e0
 8001f48:	200000e4 	.word	0x200000e4
 8001f4c:	200000e8 	.word	0x200000e8
 8001f50:	200000ec 	.word	0x200000ec
 8001f54:	200000f0 	.word	0x200000f0
 8001f58:	fffffc18 	.word	0xfffffc18

08001f5c <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001f60:	4814      	ldr	r0, [pc, #80]	@ (8001fb4 <Motion_Handle+0x58>)
 8001f62:	f7ff fd57 	bl	8001a14 <Motion_Get_Speed>

    if (g_start_ctrl)
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <Motion_Handle+0x5c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001f6e:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <Motion_Handle+0x60>)
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe3e 	bl	8000bf4 <__aeabi_f2iz>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b21c      	sxth	r4, r3
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <Motion_Handle+0x60>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fe37 	bl	8000bf4 <__aeabi_f2iz>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b21d      	sxth	r5, r3
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <Motion_Handle+0x60>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe30 	bl	8000bf4 <__aeabi_f2iz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b21e      	sxth	r6, r3
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <Motion_Handle+0x60>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fe29 	bl	8000bf4 <__aeabi_f2iz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4632      	mov	r2, r6
 8001fa8:	4629      	mov	r1, r5
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff fc7a 	bl	80018a4 <Motion_Set_Pwm>
    }
}
 8001fb0:	bf00      	nop
 8001fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb4:	2000012c 	.word	0x2000012c
 8001fb8:	20000128 	.word	0x20000128
 8001fbc:	20000134 	.word	0x20000134

08001fc0 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e062      	b.n	8002092 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001fcc:	493a      	ldr	r1, [pc, #232]	@ (80020b8 <PID_Param_Init+0xf8>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001fe0:	4935      	ldr	r1, [pc, #212]	@ (80020b8 <PID_Param_Init+0xf8>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3308      	adds	r3, #8
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8001ff6:	4930      	ldr	r1, [pc, #192]	@ (80020b8 <PID_Param_Init+0xf8>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3318      	adds	r3, #24
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 800200c:	492a      	ldr	r1, [pc, #168]	@ (80020b8 <PID_Param_Init+0xf8>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	331c      	adds	r3, #28
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8002022:	4925      	ldr	r1, [pc, #148]	@ (80020b8 <PID_Param_Init+0xf8>)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	3320      	adds	r3, #32
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8002038:	491f      	ldr	r1, [pc, #124]	@ (80020b8 <PID_Param_Init+0xf8>)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	3324      	adds	r3, #36	@ 0x24
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 800204e:	491a      	ldr	r1, [pc, #104]	@ (80020b8 <PID_Param_Init+0xf8>)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	330c      	adds	r3, #12
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <PID_Param_Init+0xfc>)
 8002060:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8002062:	4915      	ldr	r1, [pc, #84]	@ (80020b8 <PID_Param_Init+0xf8>)
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3310      	adds	r3, #16
 8002072:	4a13      	ldr	r2, [pc, #76]	@ (80020c0 <PID_Param_Init+0x100>)
 8002074:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8002076:	4910      	ldr	r1, [pc, #64]	@ (80020b8 <PID_Param_Init+0xf8>)
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	3314      	adds	r3, #20
 8002086:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800208a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b03      	cmp	r3, #3
 8002096:	dd99      	ble.n	8001fcc <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <PID_Param_Init+0x104>)
 800209a:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <PID_Param_Init+0x108>)
 800209c:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <PID_Param_Init+0x104>)
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <PID_Param_Init+0x104>)
 80020a8:	4a08      	ldr	r2, [pc, #32]	@ (80020cc <PID_Param_Init+0x10c>)
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000160 	.word	0x20000160
 80020bc:	3f4ccccd 	.word	0x3f4ccccd
 80020c0:	3d75c28f 	.word	0x3d75c28f
 80020c4:	20000004 	.word	0x20000004
 80020c8:	3ecccccd 	.word	0x3ecccccd
 80020cc:	3dcccccd 	.word	0x3dcccccd

080020d0 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 80020d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fab6 	bl	8000654 <__aeabi_fsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689c      	ldr	r4, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68dd      	ldr	r5, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f7fe faa6 	bl	8000654 <__aeabi_fsub>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4628      	mov	r0, r5
 800210e:	f7fe fbab 	bl	8000868 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	461d      	mov	r5, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f7fe fba1 	bl	8000868 <__aeabi_fmul>
 8002126:	4603      	mov	r3, r0
 8002128:	4619      	mov	r1, r3
 800212a:	4628      	mov	r0, r5
 800212c:	f7fe fa94 	bl	8000658 <__addsf3>
 8002130:	4603      	mov	r3, r0
 8002132:	4698      	mov	r8, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695d      	ldr	r5, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699e      	ldr	r6, [r3, #24]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4619      	mov	r1, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa88 	bl	8000658 <__addsf3>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	4630      	mov	r0, r6
 800214e:	f7fe fa81 	bl	8000654 <__aeabi_fsub>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7fe fa7b 	bl	8000658 <__addsf3>
 8002162:	4603      	mov	r3, r0
 8002164:	4619      	mov	r1, r3
 8002166:	4628      	mov	r0, r5
 8002168:	f7fe fb7e 	bl	8000868 <__aeabi_fmul>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	4640      	mov	r0, r8
 8002172:	f7fe fa71 	bl	8000658 <__addsf3>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4620      	mov	r0, r4
 800217c:	f7fe fa6c 	bl	8000658 <__addsf3>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <PID_Incre_Calc+0x108>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fd1e 	bl	8000be0 <__aeabi_fcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <PID_Incre_Calc+0x108>)
 80021ae:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4909      	ldr	r1, [pc, #36]	@ (80021dc <PID_Incre_Calc+0x10c>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fcf4 	bl	8000ba4 <__aeabi_fcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <PID_Incre_Calc+0x10c>)
 80021c6:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d6:	bf00      	nop
 80021d8:	44c80000 	.word	0x44c80000
 80021dc:	c4c80000 	.word	0xc4c80000

080021e0 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e016      	b.n	800221c <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <PID_Calc_Motor+0x4c>)
 80021fa:	1898      	adds	r0, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	4619      	mov	r1, r3
 8002206:	f7ff ff63 	bl	80020d0 <PID_Incre_Calc>
 800220a:	4601      	mov	r1, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	3204      	adds	r2, #4
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3301      	adds	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b03      	cmp	r3, #3
 8002220:	dde5      	ble.n	80021ee <PID_Calc_Motor+0xe>
    }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000160 	.word	0x20000160

08002230 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d87b      	bhi.n	8002338 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d140      	bne.n	80022c8 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e039      	b.n	80022c0 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 800224c:	493d      	ldr	r1, [pc, #244]	@ (8002344 <PID_Clear_Motor+0x114>)
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3308      	adds	r3, #8
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8002262:	4938      	ldr	r1, [pc, #224]	@ (8002344 <PID_Clear_Motor+0x114>)
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3318      	adds	r3, #24
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8002278:	4932      	ldr	r1, [pc, #200]	@ (8002344 <PID_Clear_Motor+0x114>)
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	331c      	adds	r3, #28
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 800228e:	492d      	ldr	r1, [pc, #180]	@ (8002344 <PID_Clear_Motor+0x114>)
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3320      	adds	r3, #32
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 80022a4:	4927      	ldr	r1, [pc, #156]	@ (8002344 <PID_Clear_Motor+0x114>)
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3324      	adds	r3, #36	@ 0x24
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	ddc2      	ble.n	800224c <PID_Clear_Motor+0x1c>
 80022c6:	e038      	b.n	800233a <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	491e      	ldr	r1, [pc, #120]	@ (8002344 <PID_Clear_Motor+0x114>)
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	3308      	adds	r3, #8
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 80022de:	79fa      	ldrb	r2, [r7, #7]
 80022e0:	4918      	ldr	r1, [pc, #96]	@ (8002344 <PID_Clear_Motor+0x114>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	3318      	adds	r3, #24
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 80022f4:	79fa      	ldrb	r2, [r7, #7]
 80022f6:	4913      	ldr	r1, [pc, #76]	@ (8002344 <PID_Clear_Motor+0x114>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	331c      	adds	r3, #28
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	490d      	ldr	r1, [pc, #52]	@ (8002344 <PID_Clear_Motor+0x114>)
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3320      	adds	r3, #32
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8002320:	79fa      	ldrb	r2, [r7, #7]
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <PID_Clear_Motor+0x114>)
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3324      	adds	r3, #36	@ 0x24
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e000      	b.n	800233a <PID_Clear_Motor+0x10a>
        return;
 8002338:	bf00      	nop
    }
}
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000160 	.word	0x20000160

08002348 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d81f      	bhi.n	800239a <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d112      	bne.n	8002386 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00b      	b.n	800237e <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8002366:	490f      	ldr	r1, [pc, #60]	@ (80023a4 <PID_Set_Motor_Target+0x5c>)
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b03      	cmp	r3, #3
 8002382:	ddf0      	ble.n	8002366 <PID_Set_Motor_Target+0x1e>
 8002384:	e00a      	b.n	800239c <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8002386:	79fa      	ldrb	r2, [r7, #7]
 8002388:	4906      	ldr	r1, [pc, #24]	@ (80023a4 <PID_Set_Motor_Target+0x5c>)
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e000      	b.n	800239c <PID_Set_Motor_Target+0x54>
        return;
 800239a:	bf00      	nop
    }
}
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000160 	.word	0x20000160

080023a8 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dd05      	ble.n	80023c6 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	e00a      	b.n	80023dc <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da05      	bge.n	80023da <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	e000      	b.n	80023dc <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <Motor_Stop+0x14>
        brake = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <Motor_Stop+0x90>)
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002410:	fb03 f202 	mul.w	r2, r3, r2
 8002414:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <Motor_Stop+0x90>)
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800241e:	fb03 f202 	mul.w	r2, r3, r2
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <Motor_Stop+0x90>)
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800242c:	fb03 f202 	mul.w	r2, r3, r2
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <Motor_Stop+0x90>)
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800243a:	fb03 f202 	mul.w	r2, r3, r2
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <Motor_Stop+0x94>)
 8002440:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002448:	fb03 f202 	mul.w	r2, r3, r2
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <Motor_Stop+0x94>)
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <Motor_Stop+0x94>)
 800245c:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002464:	fb03 f202 	mul.w	r2, r3, r2
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <Motor_Stop+0x94>)
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40013400 	.word	0x40013400
 800247c:	40012c00 	.word	0x40012c00

08002480 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff87 	bl	80023a8 <Motor_Ignore_Dead_Zone>
 800249a:	4603      	mov	r3, r0
 800249c:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800249e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80024a6:	db02      	blt.n	80024ae <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 80024a8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80024ac:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 80024ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b2:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80024b6:	dc02      	bgt.n	80024be <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 80024b8:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 80024bc:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d867      	bhi.n	8002594 <Motor_Set_Pwm+0x114>
 80024c4:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <Motor_Set_Pwm+0x4c>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	0800250f 	.word	0x0800250f
 80024d4:	08002541 	.word	0x08002541
 80024d8:	0800256b 	.word	0x0800256b
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	425b      	negs	r3, r3
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80024e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db07      	blt.n	80024fc <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 80024ec:	4a2c      	ldr	r2, [pc, #176]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 80024ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80024fa:	e04c      	b.n	8002596 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002506:	425a      	negs	r2, r3
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 800250a:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800250c:	e043      	b.n	8002596 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	425b      	negs	r3, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db07      	blt.n	800252e <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800251e:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 8002520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002524:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 800252c:	e033      	b.n	8002596 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 8002530:	2200      	movs	r2, #0
 8002532:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8002534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002538:	425a      	negs	r2, r3
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <Motor_Set_Pwm+0x120>)
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800253e:	e02a      	b.n	8002596 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8002540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db07      	blt.n	8002558 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8002548:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 800254a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8002556:	e01e      	b.n	8002596 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 800255e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002562:	425a      	negs	r2, r3
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8002568:	e015      	b.n	8002596 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 800256a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db07      	blt.n	8002582 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8002572:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 8002574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002578:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8002580:	e009      	b.n	8002596 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8002588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800258c:	425a      	negs	r2, r3
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <Motor_Set_Pwm+0x124>)
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002592:	e000      	b.n	8002596 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8002594:	bf00      	nop
    }
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40013400 	.word	0x40013400
 80025a4:	40012c00 	.word	0x40012c00

080025a8 <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025ac:	2100      	movs	r1, #0
 80025ae:	4822      	ldr	r0, [pc, #136]	@ (8002638 <Bsp_Tim_Init+0x90>)
 80025b0:	f002 fc78 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025b4:	2104      	movs	r1, #4
 80025b6:	4820      	ldr	r0, [pc, #128]	@ (8002638 <Bsp_Tim_Init+0x90>)
 80025b8:	f002 fc74 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80025bc:	2108      	movs	r1, #8
 80025be:	481e      	ldr	r0, [pc, #120]	@ (8002638 <Bsp_Tim_Init+0x90>)
 80025c0:	f002 fc70 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80025c4:	210c      	movs	r1, #12
 80025c6:	481c      	ldr	r0, [pc, #112]	@ (8002638 <Bsp_Tim_Init+0x90>)
 80025c8:	f002 fc6c 	bl	8004ea4 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025cc:	2100      	movs	r1, #0
 80025ce:	481b      	ldr	r0, [pc, #108]	@ (800263c <Bsp_Tim_Init+0x94>)
 80025d0:	f002 fc68 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80025d4:	2104      	movs	r1, #4
 80025d6:	4819      	ldr	r0, [pc, #100]	@ (800263c <Bsp_Tim_Init+0x94>)
 80025d8:	f002 fc64 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80025dc:	2108      	movs	r1, #8
 80025de:	4817      	ldr	r0, [pc, #92]	@ (800263c <Bsp_Tim_Init+0x94>)
 80025e0:	f002 fc60 	bl	8004ea4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80025e4:	210c      	movs	r1, #12
 80025e6:	4815      	ldr	r0, [pc, #84]	@ (800263c <Bsp_Tim_Init+0x94>)
 80025e8:	f002 fc5c 	bl	8004ea4 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 80025ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80025f6:	2104      	movs	r1, #4
 80025f8:	4811      	ldr	r0, [pc, #68]	@ (8002640 <Bsp_Tim_Init+0x98>)
 80025fa:	f002 ff1f 	bl	800543c <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 80025fe:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <Bsp_Tim_Init+0x9c>)
 8002600:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002606:	2104      	movs	r1, #4
 8002608:	480f      	ldr	r0, [pc, #60]	@ (8002648 <Bsp_Tim_Init+0xa0>)
 800260a:	f002 ff17 	bl	800543c <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <Bsp_Tim_Init+0xa4>)
 8002610:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002616:	2104      	movs	r1, #4
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <Bsp_Tim_Init+0xa8>)
 800261a:	f002 ff0f 	bl	800543c <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <Bsp_Tim_Init+0xac>)
 8002620:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002626:	2104      	movs	r1, #4
 8002628:	480b      	ldr	r0, [pc, #44]	@ (8002658 <Bsp_Tim_Init+0xb0>)
 800262a:	f002 ff07 	bl	800543c <HAL_TIM_Encoder_Start>


	//启动定时6中断
	HAL_TIM_Base_Start_IT(&htim6);
 800262e:	480b      	ldr	r0, [pc, #44]	@ (800265c <Bsp_Tim_Init+0xb4>)
 8002630:	f002 fac8 	bl	8004bc4 <HAL_TIM_Base_Start_IT>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000204 	.word	0x20000204
 800263c:	200003b4 	.word	0x200003b4
 8002640:	2000024c 	.word	0x2000024c
 8002644:	40000400 	.word	0x40000400
 8002648:	20000294 	.word	0x20000294
 800264c:	40000800 	.word	0x40000800
 8002650:	200002dc 	.word	0x200002dc
 8002654:	40000c00 	.word	0x40000c00
 8002658:	20000324 	.word	0x20000324
 800265c:	2000036c 	.word	0x2000036c

08002660 <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d103      	bne.n	800267a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速
 8002672:	f7ff f8c3 	bl	80017fc <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度
 8002676:	f7ff fc71 	bl	8001f5c <Motion_Handle>

	}


}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40001000 	.word	0x40001000

08002688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 0318 	add.w	r3, r7, #24
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269c:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <MX_GPIO_Init+0xf8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a37      	ldr	r2, [pc, #220]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a31      	ldr	r2, [pc, #196]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e4:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a25      	ldr	r2, [pc, #148]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026ea:	f043 0320 	orr.w	r3, r3, #32
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <MX_GPIO_Init+0xf8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <MX_GPIO_Init+0xf8>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <MX_GPIO_Init+0xf8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <MX_GPIO_Init+0xf8>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <MX_GPIO_Init+0xf8>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <MX_GPIO_Init+0xf8>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	219c      	movs	r1, #156	@ 0x9c
 8002730:	4814      	ldr	r0, [pc, #80]	@ (8002784 <MX_GPIO_Init+0xfc>)
 8002732:	f001 fbd7 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2106      	movs	r1, #6
 800273a:	4813      	ldr	r0, [pc, #76]	@ (8002788 <MX_GPIO_Init+0x100>)
 800273c:	f001 fbd2 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin;
 8002740:	239c      	movs	r3, #156	@ 0x9c
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2302      	movs	r3, #2
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4619      	mov	r1, r3
 8002756:	480b      	ldr	r0, [pc, #44]	@ (8002784 <MX_GPIO_Init+0xfc>)
 8002758:	f001 f930 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin;
 800275c:	2306      	movs	r3, #6
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2302      	movs	r3, #2
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800276c:	f107 0318 	add.w	r3, r7, #24
 8002770:	4619      	mov	r1, r3
 8002772:	4805      	ldr	r0, [pc, #20]	@ (8002788 <MX_GPIO_Init+0x100>)
 8002774:	f001 f922 	bl	80039bc <HAL_GPIO_Init>

}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	@ 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	40011800 	.word	0x40011800
 8002788:	40012000 	.word	0x40012000

0800278c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002790:	f000 ff52 	bl	8003638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002794:	f000 f817 	bl	80027c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002798:	f7ff ff76 	bl	8002688 <MX_GPIO_Init>
  MX_TIM1_Init();
 800279c:	f000 f90e 	bl	80029bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80027a0:	f000 f9d0 	bl	8002b44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027a4:	f000 fa22 	bl	8002bec <MX_TIM3_Init>
  MX_TIM4_Init();
 80027a8:	f000 fa74 	bl	8002c94 <MX_TIM4_Init>
  MX_TIM5_Init();
 80027ac:	f000 fac6 	bl	8002d3c <MX_TIM5_Init>
  MX_TIM6_Init();
 80027b0:	f000 fb18 	bl	8002de4 <MX_TIM6_Init>
  MX_TIM8_Init();
 80027b4:	f000 fb4c 	bl	8002e50 <MX_TIM8_Init>
  MX_UART4_Init();
 80027b8:	f000 feb2 	bl	8003520 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 80027bc:	f7fe fd4b 	bl	8001256 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 80027c0:	f7fe fd54 	bl	800126c <BSP_Loop>
 80027c4:	e7fc      	b.n	80027c0 <main+0x34>

080027c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b090      	sub	sp, #64	@ 0x40
 80027ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	2228      	movs	r2, #40	@ 0x28
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 ff1d 	bl	8007614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f6:	2301      	movs	r3, #1
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027fa:	2302      	movs	r3, #2
 80027fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002802:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002804:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800280a:	f107 0318 	add.w	r3, r7, #24
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fb94 	bl	8003f3c <HAL_RCC_OscConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800281a:	f000 f819 	bl	8002850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281e:	230f      	movs	r3, #15
 8002820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002822:	2302      	movs	r3, #2
 8002824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800282a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800282e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2102      	movs	r1, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f001 feed 	bl	8004618 <HAL_RCC_ClockConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002844:	f000 f804 	bl	8002850 <Error_Handler>
  }
}
 8002848:	bf00      	nop
 800284a:	3740      	adds	r7, #64	@ 0x40
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <Error_Handler+0x8>

0800285c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_MspInit+0x60>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <HAL_MspInit+0x60>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6193      	str	r3, [r2, #24]
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_MspInit+0x60>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_MspInit+0x60>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_MspInit+0x60>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_MspInit+0x60>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80028a6:	2005      	movs	r0, #5
 80028a8:	f001 f818 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_MspInit+0x64>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_MspInit+0x64>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010000 	.word	0x40010000

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <NMI_Handler+0x4>

080028e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <MemManage_Handler+0x4>

080028f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <UsageFault_Handler+0x4>

08002900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002928:	f000 fecc 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <TIM6_IRQHandler+0x10>)
 8002936:	f002 fe3f 	bl	80055b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000036c 	.word	0x2000036c

08002944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800294c:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <_sbrk+0x5c>)
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <_sbrk+0x60>)
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <_sbrk+0x64>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <_sbrk+0x64>)
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <_sbrk+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <_sbrk+0x64>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d207      	bcs.n	8002984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002974:	f004 fe56 	bl	8007624 <__errno>
 8002978:	4603      	mov	r3, r0
 800297a:	220c      	movs	r2, #12
 800297c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	e009      	b.n	8002998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	4a05      	ldr	r2, [pc, #20]	@ (80029a8 <_sbrk+0x64>)
 8002994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20010000 	.word	0x20010000
 80029a4:	00000400 	.word	0x00000400
 80029a8:	20000200 	.word	0x20000200
 80029ac:	20000548 	.word	0x20000548

080029b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b096      	sub	sp, #88	@ 0x58
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	615a      	str	r2, [r3, #20]
 80029ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2220      	movs	r2, #32
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 fe0d 	bl	8007614 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029fa:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <MX_TIM1_Init+0x180>)
 80029fc:	4a50      	ldr	r2, [pc, #320]	@ (8002b40 <MX_TIM1_Init+0x184>)
 80029fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a00:	4b4e      	ldr	r3, [pc, #312]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b4d      	ldr	r3, [pc, #308]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8002a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a0e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a1a:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a20:	4b46      	ldr	r3, [pc, #280]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a26:	4845      	ldr	r0, [pc, #276]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a28:	f001 fff8 	bl	8004a1c <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a32:	f7ff ff0d 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a40:	4619      	mov	r1, r3
 8002a42:	483e      	ldr	r0, [pc, #248]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a44:	f003 f862 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a4e:	f7ff feff 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a52:	483a      	ldr	r0, [pc, #232]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a54:	f002 f948 	bl	8004ce8 <HAL_TIM_PWM_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a5e:	f7ff fef7 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4832      	ldr	r0, [pc, #200]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a72:	f003 ff2f 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a7c:	f7ff fee8 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a80:	2360      	movs	r3, #96	@ 0x60
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4825      	ldr	r0, [pc, #148]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002aa6:	f002 fe8f 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ab0:	f7ff fece 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	481f      	ldr	r0, [pc, #124]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002abe:	f002 fe83 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002ac8:	f7ff fec2 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4819      	ldr	r0, [pc, #100]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002ad6:	f002 fe77 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002ae0:	f7ff feb6 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae8:	220c      	movs	r2, #12
 8002aea:	4619      	mov	r1, r3
 8002aec:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002aee:	f002 fe6b 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002af8:	f7ff feaa 	bl	8002850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002b20:	f003 ffa8 	bl	8006a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002b2a:	f7ff fe91 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b2e:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002b30:	f000 fbb2 	bl	8003298 <HAL_TIM_MspPostInit>

}
 8002b34:	bf00      	nop
 8002b36:	3758      	adds	r7, #88	@ 0x58
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000204 	.word	0x20000204
 8002b40:	40012c00 	.word	0x40012c00

08002b44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	@ 0x30
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fd5e 	bl	8007614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b60:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b82:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	480d      	ldr	r0, [pc, #52]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002bb4:	f002 fa9e 	bl	80050f4 <HAL_TIM_Encoder_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002bbe:	f7ff fe47 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4806      	ldr	r0, [pc, #24]	@ (8002be8 <MX_TIM2_Init+0xa4>)
 8002bd0:	f003 fe80 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002bda:	f7ff fe39 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	3730      	adds	r7, #48	@ 0x30
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000024c 	.word	0x2000024c

08002bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	2224      	movs	r2, #36	@ 0x24
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fd0a 	bl	8007614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c08:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c0a:	4a21      	ldr	r2, [pc, #132]	@ (8002c90 <MX_TIM3_Init+0xa4>)
 8002c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c28:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c36:	2301      	movs	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c46:	2301      	movs	r3, #1
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c5a:	f002 fa4b 	bl	80050f4 <HAL_TIM_Encoder_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c64:	f7ff fdf4 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <MX_TIM3_Init+0xa0>)
 8002c76:	f003 fe2d 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c80:	f7ff fde6 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	3730      	adds	r7, #48	@ 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000294 	.word	0x20000294
 8002c90:	40000400 	.word	0x40000400

08002c94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	@ 0x30
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2224      	movs	r2, #36	@ 0x24
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fcb6 	bl	8007614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cb0:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002cb2:	4a21      	ldr	r2, [pc, #132]	@ (8002d38 <MX_TIM4_Init+0xa4>)
 8002cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002d02:	f002 f9f7 	bl	80050f4 <HAL_TIM_Encoder_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002d0c:	f7ff fda0 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <MX_TIM4_Init+0xa0>)
 8002d1e:	f003 fdd9 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002d28:	f7ff fd92 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d2c:	bf00      	nop
 8002d2e:	3730      	adds	r7, #48	@ 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002dc 	.word	0x200002dc
 8002d38:	40000800 	.word	0x40000800

08002d3c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	@ 0x30
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	2224      	movs	r2, #36	@ 0x24
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fc62 	bl	8007614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d58:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d5a:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <MX_TIM5_Init+0xa4>)
 8002d5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d78:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d86:	2301      	movs	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d96:	2301      	movs	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002daa:	f002 f9a3 	bl	80050f4 <HAL_TIM_Encoder_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002db4:	f7ff fd4c 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	@ (8002ddc <MX_TIM5_Init+0xa0>)
 8002dc6:	f003 fd85 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002dd0:	f7ff fd3e 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	3730      	adds	r7, #48	@ 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000324 	.word	0x20000324
 8002de0:	40000c00 	.word	0x40000c00

08002de4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002df4:	4a15      	ldr	r2, [pc, #84]	@ (8002e4c <MX_TIM6_Init+0x68>)
 8002df6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8002df8:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002dfa:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002dfe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002e08:	2263      	movs	r2, #99	@ 0x63
 8002e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e12:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002e14:	f001 fe02 	bl	8004a1c <HAL_TIM_Base_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002e1e:	f7ff fd17 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4806      	ldr	r0, [pc, #24]	@ (8002e48 <MX_TIM6_Init+0x64>)
 8002e30:	f003 fd50 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e3a:	f7ff fd09 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000036c 	.word	0x2000036c
 8002e4c:	40001000 	.word	0x40001000

08002e50 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b096      	sub	sp, #88	@ 0x58
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2220      	movs	r2, #32
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f004 fbc3 	bl	8007614 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e8e:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002e90:	4a50      	ldr	r2, [pc, #320]	@ (8002fd4 <MX_TIM8_Init+0x184>)
 8002e92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e94:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002ea2:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002ea6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea8:	4b49      	ldr	r3, [pc, #292]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002eae:	4b48      	ldr	r3, [pc, #288]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eb4:	4b46      	ldr	r3, [pc, #280]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002eba:	4845      	ldr	r0, [pc, #276]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002ebc:	f001 fdae 	bl	8004a1c <HAL_TIM_Base_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002ec6:	f7ff fcc3 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ed0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	483e      	ldr	r0, [pc, #248]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002ed8:	f002 fe18 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002ee2:	f7ff fcb5 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ee6:	483a      	ldr	r0, [pc, #232]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002ee8:	f001 fefe 	bl	8004ce8 <HAL_TIM_PWM_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002ef2:	f7ff fcad 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002efe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f02:	4619      	mov	r1, r3
 8002f04:	4832      	ldr	r0, [pc, #200]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002f06:	f003 fce5 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002f10:	f7ff fc9e 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f14:	2360      	movs	r3, #96	@ 0x60
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f20:	2300      	movs	r3, #0
 8002f22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f34:	2200      	movs	r2, #0
 8002f36:	4619      	mov	r1, r3
 8002f38:	4825      	ldr	r0, [pc, #148]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002f3a:	f002 fc45 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002f44:	f7ff fc84 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	481f      	ldr	r0, [pc, #124]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002f52:	f002 fc39 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002f5c:	f7ff fc78 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f64:	2208      	movs	r2, #8
 8002f66:	4619      	mov	r1, r3
 8002f68:	4819      	ldr	r0, [pc, #100]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002f6a:	f002 fc2d 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002f74:	f7ff fc6c 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4813      	ldr	r0, [pc, #76]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002f82:	f002 fc21 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002f8c:	f7ff fc60 	bl	8002850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4807      	ldr	r0, [pc, #28]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002fb4:	f003 fd5e 	bl	8006a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002fbe:	f7ff fc47 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002fc2:	4803      	ldr	r0, [pc, #12]	@ (8002fd0 <MX_TIM8_Init+0x180>)
 8002fc4:	f000 f968 	bl	8003298 <HAL_TIM_MspPostInit>

}
 8002fc8:	bf00      	nop
 8002fca:	3758      	adds	r7, #88	@ 0x58
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200003b4 	.word	0x200003b4
 8002fd4:	40013400 	.word	0x40013400

08002fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_TIM_Base_MspInit+0x8c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10c      	bne.n	8003004 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fea:	4b1f      	ldr	r3, [pc, #124]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8002ff0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ff4:	6193      	str	r3, [r2, #24]
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003002:	e02a      	b.n	800305a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a18      	ldr	r2, [pc, #96]	@ (800306c <HAL_TIM_Base_MspInit+0x94>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d114      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	61d3      	str	r3, [r2, #28]
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 3);
 8003026:	2203      	movs	r2, #3
 8003028:	2103      	movs	r1, #3
 800302a:	2036      	movs	r0, #54	@ 0x36
 800302c:	f000 fc76 	bl	800391c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003030:	2036      	movs	r0, #54	@ 0x36
 8003032:	f000 fc9f 	bl	8003974 <HAL_NVIC_EnableIRQ>
}
 8003036:	e010      	b.n	800305a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <HAL_TIM_Base_MspInit+0x98>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10b      	bne.n	800305a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003042:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a08      	ldr	r2, [pc, #32]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8003048:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800304c:	6193      	str	r3, [r2, #24]
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_TIM_Base_MspInit+0x90>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40001000 	.word	0x40001000
 8003070:	40013400 	.word	0x40013400

08003074 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b092      	sub	sp, #72	@ 0x48
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003092:	d14f      	bne.n	8003134 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003094:	4b78      	ldr	r3, [pc, #480]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4a77      	ldr	r2, [pc, #476]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	61d3      	str	r3, [r2, #28]
 80030a0:	4b75      	ldr	r3, [pc, #468]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b72      	ldr	r3, [pc, #456]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a71      	ldr	r2, [pc, #452]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b69      	ldr	r3, [pc, #420]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 80030dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e2:	2300      	movs	r3, #0
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ee:	4619      	mov	r1, r3
 80030f0:	4862      	ldr	r0, [pc, #392]	@ (800327c <HAL_TIM_Encoder_MspInit+0x208>)
 80030f2:	f000 fc63 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 80030f6:	2308      	movs	r3, #8
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fa:	2300      	movs	r3, #0
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 8003102:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003106:	4619      	mov	r1, r3
 8003108:	485d      	ldr	r0, [pc, #372]	@ (8003280 <HAL_TIM_Encoder_MspInit+0x20c>)
 800310a:	f000 fc57 	bl	80039bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800310e:	4b5d      	ldr	r3, [pc, #372]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800311c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800312c:	4a55      	ldr	r2, [pc, #340]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 800312e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003132:	e09d      	b.n	8003270 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a53      	ldr	r2, [pc, #332]	@ (8003288 <HAL_TIM_Encoder_MspInit+0x214>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d136      	bne.n	80031ac <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800313e:	4b4e      	ldr	r3, [pc, #312]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a4d      	ldr	r2, [pc, #308]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b4b      	ldr	r3, [pc, #300]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b48      	ldr	r3, [pc, #288]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	4a47      	ldr	r2, [pc, #284]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	6193      	str	r3, [r2, #24]
 8003162:	4b45      	ldr	r3, [pc, #276]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 800316e:	2330      	movs	r3, #48	@ 0x30
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003172:	2300      	movs	r3, #0
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800317e:	4619      	mov	r1, r3
 8003180:	483f      	ldr	r0, [pc, #252]	@ (8003280 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003182:	f000 fc1b 	bl	80039bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003186:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	643b      	str	r3, [r7, #64]	@ 0x40
 800318c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003192:	643b      	str	r3, [r7, #64]	@ 0x40
 8003194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003196:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800319a:	643b      	str	r3, [r7, #64]	@ 0x40
 800319c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a4:	4a37      	ldr	r2, [pc, #220]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 80031a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a8:	6053      	str	r3, [r2, #4]
}
 80031aa:	e061      	b.n	8003270 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a36      	ldr	r2, [pc, #216]	@ (800328c <HAL_TIM_Encoder_MspInit+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d133      	bne.n	800321e <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031b6:	4b30      	ldr	r3, [pc, #192]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	61d3      	str	r3, [r2, #28]
 80031c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	4a29      	ldr	r2, [pc, #164]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031d4:	f043 0320 	orr.w	r3, r3, #32
 80031d8:	6193      	str	r3, [r2, #24]
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 80031e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ec:	2300      	movs	r3, #0
 80031ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031f8:	4619      	mov	r1, r3
 80031fa:	4825      	ldr	r0, [pc, #148]	@ (8003290 <HAL_TIM_Encoder_MspInit+0x21c>)
 80031fc:	f000 fbde 	bl	80039bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	647b      	str	r3, [r7, #68]	@ 0x44
 8003206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003208:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
 800320e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003210:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_TIM_Encoder_MspInit+0x210>)
 8003218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321a:	6053      	str	r3, [r2, #4]
}
 800321c:	e028      	b.n	8003270 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <HAL_TIM_Encoder_MspInit+0x220>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d123      	bne.n	8003270 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003228:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	61d3      	str	r3, [r2, #28]
 8003234:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a0c      	ldr	r2, [pc, #48]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_TIM_Encoder_MspInit+0x204>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 8003258:	2303      	movs	r3, #3
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800325c:	2300      	movs	r3, #0
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003268:	4619      	mov	r1, r3
 800326a:	4804      	ldr	r0, [pc, #16]	@ (800327c <HAL_TIM_Encoder_MspInit+0x208>)
 800326c:	f000 fba6 	bl	80039bc <HAL_GPIO_Init>
}
 8003270:	bf00      	nop
 8003272:	3748      	adds	r7, #72	@ 0x48
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40010800 	.word	0x40010800
 8003280:	40010c00 	.word	0x40010c00
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40011400 	.word	0x40011400
 8003294:	40000c00 	.word	0x40000c00

08003298 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <HAL_TIM_MspPostInit+0xbc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d12b      	bne.n	8003310 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032b8:	4b27      	ldr	r3, [pc, #156]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 80032be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c2:	6193      	str	r3, [r2, #24]
 80032c4:	4b24      	ldr	r3, [pc, #144]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 80032d0:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80032d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	481d      	ldr	r0, [pc, #116]	@ (800335c <HAL_TIM_MspPostInit+0xc4>)
 80032e6:	f000 fb69 	bl	80039bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80032ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_TIM_MspPostInit+0xc8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <HAL_TIM_MspPostInit+0xc8>)
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800330e:	e01d      	b.n	800334c <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <HAL_TIM_MspPostInit+0xcc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d118      	bne.n	800334c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	4a0e      	ldr	r2, [pc, #56]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 8003320:	f043 0310 	orr.w	r3, r3, #16
 8003324:	6193      	str	r3, [r2, #24]
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <HAL_TIM_MspPostInit+0xc0>)
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 8003332:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2302      	movs	r3, #2
 800333e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	4808      	ldr	r0, [pc, #32]	@ (8003368 <HAL_TIM_MspPostInit+0xd0>)
 8003348:	f000 fb38 	bl	80039bc <HAL_GPIO_Init>
}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	@ 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40021000 	.word	0x40021000
 800335c:	40011800 	.word	0x40011800
 8003360:	40010000 	.word	0x40010000
 8003364:	40013400 	.word	0x40013400
 8003368:	40011000 	.word	0x40011000

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4906      	ldr	r1, [pc, #24]	@ (80033bc <__NVIC_EnableIRQ+0x34>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	@ (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	@ (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	@ 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <LL_USART_Enable>:
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <LL_USART_ConfigAsyncMode>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	4907      	ldr	r1, [pc, #28]	@ (80034ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80034f8:	4b08      	ldr	r3, [pc, #32]	@ (800351c <LL_APB2_GRP1_EnableClock+0x2c>)
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4907      	ldr	r1, [pc, #28]	@ (800351c <LL_APB2_GRP1_EnableClock+0x2c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000

08003520 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	615a      	str	r2, [r3, #20]
 8003538:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353a:	463b      	mov	r3, r7
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8003548:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800354c:	f7ff ffb8 	bl	80034c0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003550:	2010      	movs	r0, #16
 8003552:	f7ff ffcd 	bl	80034f0 <LL_APB2_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_UART4_Init+0xbc>)
 8003558:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800355a:	2309      	movs	r3, #9
 800355c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003566:	463b      	mov	r3, r7
 8003568:	4619      	mov	r1, r3
 800356a:	481d      	ldr	r0, [pc, #116]	@ (80035e0 <MX_UART4_Init+0xc0>)
 800356c:	f003 fc18 	bl	8006da0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003570:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <MX_UART4_Init+0xc4>)
 8003572:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003574:	2304      	movs	r3, #4
 8003576:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003578:	463b      	mov	r3, r7
 800357a:	4619      	mov	r1, r3
 800357c:	4818      	ldr	r0, [pc, #96]	@ (80035e0 <MX_UART4_Init+0xc0>)
 800357e:	f003 fc0f 	bl	8006da0 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 3));
 8003582:	f7ff fef3 	bl	800336c <__NVIC_GetPriorityGrouping>
 8003586:	4603      	mov	r3, r0
 8003588:	2203      	movs	r2, #3
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff41 	bl	8003414 <NVIC_EncodePriority>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	2034      	movs	r0, #52	@ 0x34
 8003598:	f7ff ff12 	bl	80033c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800359c:	2034      	movs	r0, #52	@ 0x34
 800359e:	f7ff fef3 	bl	8003388 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80035a2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80035a6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80035b4:	230c      	movs	r3, #12
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_USART_Init(UART4, &USART_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <MX_UART4_Init+0xc8>)
 80035c4:	f003 fe7c 	bl	80072c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80035c8:	4807      	ldr	r0, [pc, #28]	@ (80035e8 <MX_UART4_Init+0xc8>)
 80035ca:	f7ff ff64 	bl	8003496 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80035ce:	4806      	ldr	r0, [pc, #24]	@ (80035e8 <MX_UART4_Init+0xc8>)
 80035d0:	f7ff ff52 	bl	8003478 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80035d4:	bf00      	nop
 80035d6:	3730      	adds	r7, #48	@ 0x30
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	04040004 	.word	0x04040004
 80035e0:	40011000 	.word	0x40011000
 80035e4:	04080008 	.word	0x04080008
 80035e8:	40004c00 	.word	0x40004c00

080035ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035ec:	f7ff f9e0 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f0:	480b      	ldr	r0, [pc, #44]	@ (8003620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035f2:	490c      	ldr	r1, [pc, #48]	@ (8003624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a09      	ldr	r2, [pc, #36]	@ (800362c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003608:	4c09      	ldr	r4, [pc, #36]	@ (8003630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003616:	f004 f80b 	bl	8007630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800361a:	f7ff f8b7 	bl	800278c <main>
  bx lr
 800361e:	4770      	bx	lr
  ldr r0, =_sdata
 8003620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003624:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003628:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 800362c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003630:	20000548 	.word	0x20000548

08003634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC1_2_IRQHandler>
	...

08003638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_Init+0x28>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <HAL_Init+0x28>)
 8003642:	f043 0310 	orr.w	r3, r3, #16
 8003646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003648:	2003      	movs	r0, #3
 800364a:	f000 f947 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800364e:	2002      	movs	r0, #2
 8003650:	f000 f808 	bl	8003664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003654:	f7ff f90c 	bl	8002870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_InitTick+0x54>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <HAL_InitTick+0x58>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800367a:	fbb3 f3f1 	udiv	r3, r3, r1
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f98e 	bl	80039a4 <HAL_SYSTICK_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00e      	b.n	80036b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d80a      	bhi.n	80036ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003698:	2200      	movs	r2, #0
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f000 f93c 	bl	800391c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a4:	4a06      	ldr	r2, [pc, #24]	@ (80036c0 <HAL_InitTick+0x5c>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000020 	.word	0x20000020
 80036bc:	20000028 	.word	0x20000028
 80036c0:	20000024 	.word	0x20000024

080036c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_IncTick+0x1c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_IncTick+0x20>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	4a03      	ldr	r2, [pc, #12]	@ (80036e4 <HAL_IncTick+0x20>)
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	20000028 	.word	0x20000028
 80036e4:	200003fc 	.word	0x200003fc

080036e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return uwTick;
 80036ec:	4b02      	ldr	r3, [pc, #8]	@ (80036f8 <HAL_GetTick+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	200003fc 	.word	0x200003fc

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff fff0 	bl	80036e8 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003722:	bf00      	nop
 8003724:	f7ff ffe0 	bl	80036e8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000028 	.word	0x20000028

08003744 <__NVIC_SetPriorityGrouping>:
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	@ (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_EnableIRQ>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0b      	blt.n	80037d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4906      	ldr	r1, [pc, #24]	@ (80037dc <__NVIC_EnableIRQ+0x34>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <__NVIC_SetPriority>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db0a      	blt.n	800380a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	490c      	ldr	r1, [pc, #48]	@ (800382c <__NVIC_SetPriority+0x4c>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	440b      	add	r3, r1
 8003804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003808:	e00a      	b.n	8003820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4908      	ldr	r1, [pc, #32]	@ (8003830 <__NVIC_SetPriority+0x50>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3b04      	subs	r3, #4
 8003818:	0112      	lsls	r2, r2, #4
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	440b      	add	r3, r1
 800381e:	761a      	strb	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <NVIC_EncodePriority>:
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	@ 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f1c3 0307 	rsb	r3, r3, #7
 800384e:	2b04      	cmp	r3, #4
 8003850:	bf28      	it	cs
 8003852:	2304      	movcs	r3, #4
 8003854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3304      	adds	r3, #4
 800385a:	2b06      	cmp	r3, #6
 800385c:	d902      	bls.n	8003864 <NVIC_EncodePriority+0x30>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3b03      	subs	r3, #3
 8003862:	e000      	b.n	8003866 <NVIC_EncodePriority+0x32>
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	401a      	ands	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	43d9      	mvns	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	4313      	orrs	r3, r2
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a8:	d301      	bcc.n	80038ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00f      	b.n	80038ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <SysTick_Config+0x40>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b6:	210f      	movs	r1, #15
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f7ff ff90 	bl	80037e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <SysTick_Config+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <SysTick_Config+0x40>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d00f      	beq.n	800390a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b06      	cmp	r3, #6
 80038ee:	d00c      	beq.n	800390a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d009      	beq.n	800390a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d006      	beq.n	800390a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d003      	beq.n	800390a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003902:	2191      	movs	r1, #145	@ 0x91
 8003904:	4804      	ldr	r0, [pc, #16]	@ (8003918 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003906:	f7fe ffa9 	bl	800285c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff1a 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08007f64 	.word	0x08007f64

0800391c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b0f      	cmp	r3, #15
 8003932:	d903      	bls.n	800393c <HAL_NVIC_SetPriority+0x20>
 8003934:	21a9      	movs	r1, #169	@ 0xa9
 8003936:	480e      	ldr	r0, [pc, #56]	@ (8003970 <HAL_NVIC_SetPriority+0x54>)
 8003938:	f7fe ff90 	bl	800285c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d903      	bls.n	800394a <HAL_NVIC_SetPriority+0x2e>
 8003942:	21aa      	movs	r1, #170	@ 0xaa
 8003944:	480a      	ldr	r0, [pc, #40]	@ (8003970 <HAL_NVIC_SetPriority+0x54>)
 8003946:	f7fe ff89 	bl	800285c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800394a:	f7ff ff1f 	bl	800378c <__NVIC_GetPriorityGrouping>
 800394e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f7ff ff6d 	bl	8003834 <NVIC_EncodePriority>
 800395a:	4602      	mov	r2, r0
 800395c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff3c 	bl	80037e0 <__NVIC_SetPriority>
}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	08007f64 	.word	0x08007f64

08003974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da03      	bge.n	800398e <HAL_NVIC_EnableIRQ+0x1a>
 8003986:	21bd      	movs	r1, #189	@ 0xbd
 8003988:	4805      	ldr	r0, [pc, #20]	@ (80039a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800398a:	f7fe ff67 	bl	800285c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ff08 	bl	80037a8 <__NVIC_EnableIRQ>
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08007f64 	.word	0x08007f64

080039a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff73 	bl	8003898 <SysTick_Config>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	@ 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a94      	ldr	r2, [pc, #592]	@ (8003c24 <HAL_GPIO_Init+0x268>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01b      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a93      	ldr	r2, [pc, #588]	@ (8003c28 <HAL_GPIO_Init+0x26c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d017      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a92      	ldr	r2, [pc, #584]	@ (8003c2c <HAL_GPIO_Init+0x270>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a91      	ldr	r2, [pc, #580]	@ (8003c30 <HAL_GPIO_Init+0x274>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00f      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a90      	ldr	r2, [pc, #576]	@ (8003c34 <HAL_GPIO_Init+0x278>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a8f      	ldr	r2, [pc, #572]	@ (8003c38 <HAL_GPIO_Init+0x27c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a8e      	ldr	r2, [pc, #568]	@ (8003c3c <HAL_GPIO_Init+0x280>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
 8003a06:	21bd      	movs	r1, #189	@ 0xbd
 8003a08:	488d      	ldr	r0, [pc, #564]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003a0a:	f7fe ff27 	bl	800285c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_GPIO_Init+0x66>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a20:	d303      	bcc.n	8003a2a <HAL_GPIO_Init+0x6e>
 8003a22:	21be      	movs	r1, #190	@ 0xbe
 8003a24:	4886      	ldr	r0, [pc, #536]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003a26:	f7fe ff19 	bl	800285c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8236 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	f000 8231 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b11      	cmp	r3, #17
 8003a44:	f000 822c 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	f000 8227 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	f000 8222 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a78      	ldr	r2, [pc, #480]	@ (8003c44 <HAL_GPIO_Init+0x288>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f000 821c 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a76      	ldr	r2, [pc, #472]	@ (8003c48 <HAL_GPIO_Init+0x28c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	f000 8216 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a74      	ldr	r2, [pc, #464]	@ (8003c4c <HAL_GPIO_Init+0x290>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f000 8210 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a72      	ldr	r2, [pc, #456]	@ (8003c50 <HAL_GPIO_Init+0x294>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f000 820a 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a70      	ldr	r2, [pc, #448]	@ (8003c54 <HAL_GPIO_Init+0x298>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	f000 8204 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c58 <HAL_GPIO_Init+0x29c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f000 81fe 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	f000 81f9 	beq.w	8003ea0 <HAL_GPIO_Init+0x4e4>
 8003aae:	21bf      	movs	r1, #191	@ 0xbf
 8003ab0:	4863      	ldr	r0, [pc, #396]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003ab2:	f7fe fed3 	bl	800285c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab6:	e1f3      	b.n	8003ea0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 81e2 	bne.w	8003e9a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a52      	ldr	r2, [pc, #328]	@ (8003c24 <HAL_GPIO_Init+0x268>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a51      	ldr	r2, [pc, #324]	@ (8003c28 <HAL_GPIO_Init+0x26c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d017      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a50      	ldr	r2, [pc, #320]	@ (8003c2c <HAL_GPIO_Init+0x270>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c30 <HAL_GPIO_Init+0x274>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4e      	ldr	r2, [pc, #312]	@ (8003c34 <HAL_GPIO_Init+0x278>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4d      	ldr	r2, [pc, #308]	@ (8003c38 <HAL_GPIO_Init+0x27c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_GPIO_Init+0x280>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x15a>
 8003b0e:	21cd      	movs	r1, #205	@ 0xcd
 8003b10:	484b      	ldr	r0, [pc, #300]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003b12:	f7fe fea3 	bl	800285c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a4f      	ldr	r2, [pc, #316]	@ (8003c58 <HAL_GPIO_Init+0x29c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	f000 80c7 	beq.w	8003cb0 <HAL_GPIO_Init+0x2f4>
 8003b22:	4a4d      	ldr	r2, [pc, #308]	@ (8003c58 <HAL_GPIO_Init+0x29c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	f200 80ed 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b2a:	4a48      	ldr	r2, [pc, #288]	@ (8003c4c <HAL_GPIO_Init+0x290>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f000 80bf 	beq.w	8003cb0 <HAL_GPIO_Init+0x2f4>
 8003b32:	4a46      	ldr	r2, [pc, #280]	@ (8003c4c <HAL_GPIO_Init+0x290>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f200 80e5 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b3a:	4a46      	ldr	r2, [pc, #280]	@ (8003c54 <HAL_GPIO_Init+0x298>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f000 80b7 	beq.w	8003cb0 <HAL_GPIO_Init+0x2f4>
 8003b42:	4a44      	ldr	r2, [pc, #272]	@ (8003c54 <HAL_GPIO_Init+0x298>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	f200 80dd 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c48 <HAL_GPIO_Init+0x28c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	f000 80af 	beq.w	8003cb0 <HAL_GPIO_Init+0x2f4>
 8003b52:	4a3d      	ldr	r2, [pc, #244]	@ (8003c48 <HAL_GPIO_Init+0x28c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f200 80d5 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c50 <HAL_GPIO_Init+0x294>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	f000 80a7 	beq.w	8003cb0 <HAL_GPIO_Init+0x2f4>
 8003b62:	4a3b      	ldr	r2, [pc, #236]	@ (8003c50 <HAL_GPIO_Init+0x294>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f200 80cd 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b6a:	2b12      	cmp	r3, #18
 8003b6c:	d82c      	bhi.n	8003bc8 <HAL_GPIO_Init+0x20c>
 8003b6e:	2b12      	cmp	r3, #18
 8003b70:	f200 80c8 	bhi.w	8003d04 <HAL_GPIO_Init+0x348>
 8003b74:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_GPIO_Init+0x1c0>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003cb1 	.word	0x08003cb1
 8003b80:	08003bd1 	.word	0x08003bd1
 8003b84:	08003c5d 	.word	0x08003c5d
 8003b88:	08003cff 	.word	0x08003cff
 8003b8c:	08003d05 	.word	0x08003d05
 8003b90:	08003d05 	.word	0x08003d05
 8003b94:	08003d05 	.word	0x08003d05
 8003b98:	08003d05 	.word	0x08003d05
 8003b9c:	08003d05 	.word	0x08003d05
 8003ba0:	08003d05 	.word	0x08003d05
 8003ba4:	08003d05 	.word	0x08003d05
 8003ba8:	08003d05 	.word	0x08003d05
 8003bac:	08003d05 	.word	0x08003d05
 8003bb0:	08003d05 	.word	0x08003d05
 8003bb4:	08003d05 	.word	0x08003d05
 8003bb8:	08003d05 	.word	0x08003d05
 8003bbc:	08003d05 	.word	0x08003d05
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003c87 	.word	0x08003c87
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c44 <HAL_GPIO_Init+0x288>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d070      	beq.n	8003cb0 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bce:	e099      	b.n	8003d04 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_GPIO_Init+0x234>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_Init+0x234>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x234>
 8003be8:	21d5      	movs	r1, #213	@ 0xd5
 8003bea:	4815      	ldr	r0, [pc, #84]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003bec:	f7fe fe36 	bl	800285c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	623b      	str	r3, [r7, #32]
          break;
 8003bf6:	e086      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d00b      	beq.n	8003c18 <HAL_GPIO_Init+0x25c>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <HAL_GPIO_Init+0x25c>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x25c>
 8003c10:	21dc      	movs	r1, #220	@ 0xdc
 8003c12:	480b      	ldr	r0, [pc, #44]	@ (8003c40 <HAL_GPIO_Init+0x284>)
 8003c14:	f7fe fe22 	bl	800285c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	623b      	str	r3, [r7, #32]
          break;
 8003c20:	e071      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
 8003c22:	bf00      	nop
 8003c24:	40010800 	.word	0x40010800
 8003c28:	40010c00 	.word	0x40010c00
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	40011800 	.word	0x40011800
 8003c38:	40011c00 	.word	0x40011c00
 8003c3c:	40012000 	.word	0x40012000
 8003c40:	08007fa0 	.word	0x08007fa0
 8003c44:	10110000 	.word	0x10110000
 8003c48:	10210000 	.word	0x10210000
 8003c4c:	10310000 	.word	0x10310000
 8003c50:	10120000 	.word	0x10120000
 8003c54:	10220000 	.word	0x10220000
 8003c58:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d00b      	beq.n	8003c7c <HAL_GPIO_Init+0x2c0>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <HAL_GPIO_Init+0x2c0>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2c0>
 8003c74:	21e3      	movs	r1, #227	@ 0xe3
 8003c76:	4891      	ldr	r0, [pc, #580]	@ (8003ebc <HAL_GPIO_Init+0x500>)
 8003c78:	f7fe fdf0 	bl	800285c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	3308      	adds	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
          break;
 8003c84:	e03f      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_GPIO_Init+0x2ea>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d007      	beq.n	8003ca6 <HAL_GPIO_Init+0x2ea>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x2ea>
 8003c9e:	21ea      	movs	r1, #234	@ 0xea
 8003ca0:	4886      	ldr	r0, [pc, #536]	@ (8003ebc <HAL_GPIO_Init+0x500>)
 8003ca2:	f7fe fddb 	bl	800285c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	330c      	adds	r3, #12
 8003cac:	623b      	str	r3, [r7, #32]
          break;
 8003cae:	e02a      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_GPIO_Init+0x314>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_GPIO_Init+0x314>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x314>
 8003cc8:	21f7      	movs	r1, #247	@ 0xf7
 8003cca:	487c      	ldr	r0, [pc, #496]	@ (8003ebc <HAL_GPIO_Init+0x500>)
 8003ccc:	f7fe fdc6 	bl	800285c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	623b      	str	r3, [r7, #32]
          break;
 8003cdc:	e013      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	611a      	str	r2, [r3, #16]
          break;
 8003cf0:	e009      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	615a      	str	r2, [r3, #20]
          break;
 8003cfc:	e003      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
          break;
 8003d02:	e000      	b.n	8003d06 <HAL_GPIO_Init+0x34a>
          break;
 8003d04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2bff      	cmp	r3, #255	@ 0xff
 8003d0a:	d801      	bhi.n	8003d10 <HAL_GPIO_Init+0x354>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e001      	b.n	8003d14 <HAL_GPIO_Init+0x358>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2bff      	cmp	r3, #255	@ 0xff
 8003d1a:	d802      	bhi.n	8003d22 <HAL_GPIO_Init+0x366>
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_Init+0x36c>
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	3b08      	subs	r3, #8
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	210f      	movs	r1, #15
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	6a39      	ldr	r1, [r7, #32]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	431a      	orrs	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a2 	beq.w	8003e9a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d56:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec0 <HAL_GPIO_Init+0x504>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	4a59      	ldr	r2, [pc, #356]	@ (8003ec0 <HAL_GPIO_Init+0x504>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6193      	str	r3, [r2, #24]
 8003d62:	4b57      	ldr	r3, [pc, #348]	@ (8003ec0 <HAL_GPIO_Init+0x504>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d6e:	4a55      	ldr	r2, [pc, #340]	@ (8003ec4 <HAL_GPIO_Init+0x508>)
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec8 <HAL_GPIO_Init+0x50c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <HAL_GPIO_Init+0x41e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003ecc <HAL_GPIO_Init+0x510>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d019      	beq.n	8003dd6 <HAL_GPIO_Init+0x41a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed0 <HAL_GPIO_Init+0x514>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x416>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a49      	ldr	r2, [pc, #292]	@ (8003ed4 <HAL_GPIO_Init+0x518>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x412>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a48      	ldr	r2, [pc, #288]	@ (8003ed8 <HAL_GPIO_Init+0x51c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x40e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a47      	ldr	r2, [pc, #284]	@ (8003edc <HAL_GPIO_Init+0x520>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x40a>
 8003dc2:	2305      	movs	r3, #5
 8003dc4:	e00a      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dc6:	2306      	movs	r3, #6
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x420>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dec:	4935      	ldr	r1, [pc, #212]	@ (8003ec4 <HAL_GPIO_Init+0x508>)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4935      	ldr	r1, [pc, #212]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
 8003e12:	e006      	b.n	8003e22 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e14:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	4930      	ldr	r1, [pc, #192]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	492b      	ldr	r1, [pc, #172]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60cb      	str	r3, [r1, #12]
 8003e3a:	e006      	b.n	8003e4a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e3c:	4b28      	ldr	r3, [pc, #160]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	4926      	ldr	r1, [pc, #152]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e56:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4921      	ldr	r1, [pc, #132]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e006      	b.n	8003e72 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	491c      	ldr	r1, [pc, #112]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4917      	ldr	r1, [pc, #92]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
 8003e8a:	e006      	b.n	8003e9a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <HAL_GPIO_Init+0x524>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f47f ae04 	bne.w	8003ab8 <HAL_GPIO_Init+0xfc>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3728      	adds	r7, #40	@ 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08007fa0 	.word	0x08007fa0
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40010800 	.word	0x40010800
 8003ecc:	40010c00 	.word	0x40010c00
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40011400 	.word	0x40011400
 8003ed8:	40011800 	.word	0x40011800
 8003edc:	40011c00 	.word	0x40011c00
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <HAL_GPIO_WritePin+0x20>
 8003efa:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8003efe:	480e      	ldr	r0, [pc, #56]	@ (8003f38 <HAL_GPIO_WritePin+0x54>)
 8003f00:	f7fe fcac 	bl	800285c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_WritePin+0x36>
 8003f0a:	787b      	ldrb	r3, [r7, #1]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d004      	beq.n	8003f1a <HAL_GPIO_WritePin+0x36>
 8003f10:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8003f14:	4808      	ldr	r0, [pc, #32]	@ (8003f38 <HAL_GPIO_WritePin+0x54>)
 8003f16:	f7fe fca1 	bl	800285c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003f1a:	787b      	ldrb	r3, [r7, #1]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f26:	e003      	b.n	8003f30 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	041a      	lsls	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	611a      	str	r2, [r3, #16]
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	08007fa0 	.word	0x08007fa0

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e35a      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x54>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <HAL_RCC_OscConfig+0x54>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <HAL_RCC_OscConfig+0x54>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x54>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_RCC_OscConfig+0x54>
 8003f86:	f240 1165 	movw	r1, #357	@ 0x165
 8003f8a:	488f      	ldr	r0, [pc, #572]	@ (80041c8 <HAL_RCC_OscConfig+0x28c>)
 8003f8c:	f7fe fc66 	bl	800285c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 809a 	beq.w	80040d2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x88>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x88>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb8:	d004      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x88>
 8003fba:	f240 116b 	movw	r1, #363	@ 0x16b
 8003fbe:	4882      	ldr	r0, [pc, #520]	@ (80041c8 <HAL_RCC_OscConfig+0x28c>)
 8003fc0:	f7fe fc4c 	bl	800285c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc4:	4b81      	ldr	r3, [pc, #516]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d00c      	beq.n	8003fea <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d112      	bne.n	8004002 <HAL_RCC_OscConfig+0xc6>
 8003fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fea:	4b78      	ldr	r3, [pc, #480]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d168      	bne.n	80040d0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e300      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0xde>
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0x13c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x100>
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a69      	ldr	r2, [pc, #420]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b67      	ldr	r3, [pc, #412]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a66      	ldr	r2, [pc, #408]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004034:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0x13c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x124>
 8004046:	4b61      	ldr	r3, [pc, #388]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a60      	ldr	r2, [pc, #384]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b5e      	ldr	r3, [pc, #376]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5d      	ldr	r2, [pc, #372]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x13c>
 8004060:	4b5a      	ldr	r3, [pc, #360]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a59      	ldr	r2, [pc, #356]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a56      	ldr	r2, [pc, #344]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7ff fb32 	bl	80036e8 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7ff fb2e 	bl	80036e8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	@ 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e2b4      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b4c      	ldr	r3, [pc, #304]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x14c>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7ff fb1e 	bl	80036e8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7ff fb1a 	bl	80036e8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	@ 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e2a0      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	4b42      	ldr	r3, [pc, #264]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x174>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8080 	beq.w	80041e0 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_OscConfig+0x1be>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d004      	beq.n	80040fa <HAL_RCC_OscConfig+0x1be>
 80040f0:	f240 119f 	movw	r1, #415	@ 0x19f
 80040f4:	4834      	ldr	r0, [pc, #208]	@ (80041c8 <HAL_RCC_OscConfig+0x28c>)
 80040f6:	f7fe fbb1 	bl	800285c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b1f      	cmp	r3, #31
 8004100:	d904      	bls.n	800410c <HAL_RCC_OscConfig+0x1d0>
 8004102:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8004106:	4830      	ldr	r0, [pc, #192]	@ (80041c8 <HAL_RCC_OscConfig+0x28c>)
 8004108:	f7fe fba8 	bl	800285c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410c:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004118:	4b2c      	ldr	r3, [pc, #176]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11c      	bne.n	800415e <HAL_RCC_OscConfig+0x222>
 8004124:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004130:	4b26      	ldr	r3, [pc, #152]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x20c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e25d      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b20      	ldr	r3, [pc, #128]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	491d      	ldr	r1, [pc, #116]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415c:	e040      	b.n	80041e0 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004166:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_RCC_OscConfig+0x294>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7ff fabc 	bl	80036e8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7ff fab8 	bl	80036e8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e23e      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004186:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCC_OscConfig+0x290>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
 80041a6:	e01b      	b.n	80041e0 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <HAL_RCC_OscConfig+0x294>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7ff fa9b 	bl	80036e8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b4:	e00e      	b.n	80041d4 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7ff fa97 	bl	80036e8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d907      	bls.n	80041d4 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e21d      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
 80041c8:	08007fdc 	.word	0x08007fdc
 80041cc:	40021000 	.word	0x40021000
 80041d0:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d4:	4b7d      	ldr	r3, [pc, #500]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ea      	bne.n	80041b6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d040      	beq.n	800426e <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_OscConfig+0x2ca>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d004      	beq.n	8004206 <HAL_RCC_OscConfig+0x2ca>
 80041fc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004200:	4873      	ldr	r0, [pc, #460]	@ (80043d0 <HAL_RCC_OscConfig+0x494>)
 8004202:	f7fe fb2b 	bl	800285c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b71      	ldr	r3, [pc, #452]	@ (80043d4 <HAL_RCC_OscConfig+0x498>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004214:	f7ff fa68 	bl	80036e8 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7ff fa64 	bl	80036e8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1ea      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b67      	ldr	r3, [pc, #412]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 fbd0 	bl	80049e0 <RCC_Delay>
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b64      	ldr	r3, [pc, #400]	@ (80043d4 <HAL_RCC_OscConfig+0x498>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7ff fa4e 	bl	80036e8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004250:	f7ff fa4a 	bl	80036e8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1d0      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004262:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80bf 	beq.w	80043fa <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x366>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_OscConfig+0x366>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b05      	cmp	r3, #5
 8004296:	d004      	beq.n	80042a2 <HAL_RCC_OscConfig+0x366>
 8004298:	f240 210f 	movw	r1, #527	@ 0x20f
 800429c:	484c      	ldr	r0, [pc, #304]	@ (80043d0 <HAL_RCC_OscConfig+0x494>)
 800429e:	f7fe fadd 	bl	800285c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b47      	ldr	r3, [pc, #284]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4a46      	ldr	r2, [pc, #280]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	61d3      	str	r3, [r2, #28]
 80042ba:	4b44      	ldr	r3, [pc, #272]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b43      	ldr	r3, [pc, #268]	@ (80043d8 <HAL_RCC_OscConfig+0x49c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b40      	ldr	r3, [pc, #256]	@ (80043d8 <HAL_RCC_OscConfig+0x49c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3f      	ldr	r2, [pc, #252]	@ (80043d8 <HAL_RCC_OscConfig+0x49c>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7ff fa01 	bl	80036e8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7ff f9fd 	bl	80036e8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	@ 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e183      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCC_OscConfig+0x49c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x3e2>
 8004310:	4b2e      	ldr	r3, [pc, #184]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a2d      	ldr	r2, [pc, #180]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6213      	str	r3, [r2, #32]
 800431c:	e02d      	b.n	800437a <HAL_RCC_OscConfig+0x43e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x404>
 8004326:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6213      	str	r3, [r2, #32]
 8004332:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a25      	ldr	r2, [pc, #148]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6213      	str	r3, [r2, #32]
 800433e:	e01c      	b.n	800437a <HAL_RCC_OscConfig+0x43e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x426>
 8004348:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a1f      	ldr	r2, [pc, #124]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a1c      	ldr	r2, [pc, #112]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6213      	str	r3, [r2, #32]
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x43e>
 8004362:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6213      	str	r3, [r2, #32]
 800436e:	4b17      	ldr	r3, [pc, #92]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7ff f9b1 	bl	80036e8 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7ff f9ad 	bl	80036e8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e131      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <HAL_RCC_OscConfig+0x490>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCC_OscConfig+0x44e>
 80043ac:	e01c      	b.n	80043e8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7ff f99b 	bl	80036e8 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b4:	e012      	b.n	80043dc <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7ff f997 	bl	80036e8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d909      	bls.n	80043dc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e11b      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
 80043cc:	40021000 	.word	0x40021000
 80043d0:	08007fdc 	.word	0x08007fdc
 80043d4:	42420480 	.word	0x42420480
 80043d8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	4b8b      	ldr	r3, [pc, #556]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b87      	ldr	r3, [pc, #540]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a86      	ldr	r2, [pc, #536]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_RCC_OscConfig+0x4e0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d008      	beq.n	800441c <HAL_RCC_OscConfig+0x4e0>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d004      	beq.n	800441c <HAL_RCC_OscConfig+0x4e0>
 8004412:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8004416:	487e      	ldr	r0, [pc, #504]	@ (8004610 <HAL_RCC_OscConfig+0x6d4>)
 8004418:	f7fe fa20 	bl	800285c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80ee 	beq.w	8004602 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004426:	4b79      	ldr	r3, [pc, #484]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b08      	cmp	r3, #8
 8004430:	f000 80ce 	beq.w	80045d0 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b02      	cmp	r3, #2
 800443a:	f040 80b2 	bne.w	80045a2 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_OscConfig+0x51e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444e:	d004      	beq.n	800445a <HAL_RCC_OscConfig+0x51e>
 8004450:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004454:	486e      	ldr	r0, [pc, #440]	@ (8004610 <HAL_RCC_OscConfig+0x6d4>)
 8004456:	f7fe fa01 	bl	800285c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04a      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800446a:	d045      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004474:	d040      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800447e:	d03b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004488:	d036      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004492:	d031      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800449c:	d02c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80044a6:	d027      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044b0:	d022      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80044ba:	d01d      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80044c4:	d018      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044d8:	d00e      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80044e2:	d009      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80044ec:	d004      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5bc>
 80044ee:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80044f2:	4847      	ldr	r0, [pc, #284]	@ (8004610 <HAL_RCC_OscConfig+0x6d4>)
 80044f4:	f7fe f9b2 	bl	800285c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b46      	ldr	r3, [pc, #280]	@ (8004614 <HAL_RCC_OscConfig+0x6d8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7ff f8f3 	bl	80036e8 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7ff f8ef 	bl	80036e8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e075      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004518:	4b3c      	ldr	r3, [pc, #240]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452c:	d116      	bne.n	800455c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_OscConfig+0x60e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453e:	d004      	beq.n	800454a <HAL_RCC_OscConfig+0x60e>
 8004540:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8004544:	4832      	ldr	r0, [pc, #200]	@ (8004610 <HAL_RCC_OscConfig+0x6d4>)
 8004546:	f7fe f989 	bl	800285c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800454a:	4b30      	ldr	r3, [pc, #192]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	492d      	ldr	r1, [pc, #180]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800455c:	4b2b      	ldr	r3, [pc, #172]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a19      	ldr	r1, [r3, #32]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	430b      	orrs	r3, r1
 800456e:	4927      	ldr	r1, [pc, #156]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004574:	4b27      	ldr	r3, [pc, #156]	@ (8004614 <HAL_RCC_OscConfig+0x6d8>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7ff f8b5 	bl	80036e8 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7ff f8b1 	bl	80036e8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e037      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004594:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x646>
 80045a0:	e02f      	b.n	8004602 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <HAL_RCC_OscConfig+0x6d8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7ff f89e 	bl	80036e8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7ff f89a 	bl	80036e8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e020      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c2:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x674>
 80045ce:	e018      	b.n	8004602 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e013      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <HAL_RCC_OscConfig+0x6d0>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	08007fdc 	.word	0x08007fdc
 8004614:	42420060 	.word	0x42420060

08004618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e176      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <HAL_RCC_ClockConfig+0x4e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d110      	bne.n	8004666 <HAL_RCC_ClockConfig+0x4e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_RCC_ClockConfig+0x4e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_RCC_ClockConfig+0x4e>
 800465c:	f240 3136 	movw	r1, #822	@ 0x336
 8004660:	4874      	ldr	r0, [pc, #464]	@ (8004834 <HAL_RCC_ClockConfig+0x21c>)
 8004662:	f7fe f8fb 	bl	800285c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCC_ClockConfig+0x6a>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d007      	beq.n	8004682 <HAL_RCC_ClockConfig+0x6a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d004      	beq.n	8004682 <HAL_RCC_ClockConfig+0x6a>
 8004678:	f240 3137 	movw	r1, #823	@ 0x337
 800467c:	486d      	ldr	r0, [pc, #436]	@ (8004834 <HAL_RCC_ClockConfig+0x21c>)
 800467e:	f7fe f8ed 	bl	800285c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004682:	4b6d      	ldr	r3, [pc, #436]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d910      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004690:	4b69      	ldr	r3, [pc, #420]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f023 0207 	bic.w	r2, r3, #7
 8004698:	4967      	ldr	r1, [pc, #412]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a0:	4b65      	ldr	r3, [pc, #404]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e133      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d049      	beq.n	8004752 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ca:	4b5c      	ldr	r3, [pc, #368]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4a5b      	ldr	r2, [pc, #364]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80046d0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046d4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e2:	4b56      	ldr	r3, [pc, #344]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a55      	ldr	r2, [pc, #340]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80046e8:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80046ec:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d024      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b80      	cmp	r3, #128	@ 0x80
 80046fc:	d020      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b90      	cmp	r3, #144	@ 0x90
 8004704:	d01c      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2ba0      	cmp	r3, #160	@ 0xa0
 800470c:	d018      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2bb0      	cmp	r3, #176	@ 0xb0
 8004714:	d014      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2bc0      	cmp	r3, #192	@ 0xc0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2bd0      	cmp	r3, #208	@ 0xd0
 8004724:	d00c      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2be0      	cmp	r3, #224	@ 0xe0
 800472c:	d008      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2bf0      	cmp	r3, #240	@ 0xf0
 8004734:	d004      	beq.n	8004740 <HAL_RCC_ClockConfig+0x128>
 8004736:	f240 315d 	movw	r1, #861	@ 0x35d
 800473a:	483e      	ldr	r0, [pc, #248]	@ (8004834 <HAL_RCC_ClockConfig+0x21c>)
 800473c:	f7fe f88e 	bl	800285c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	493b      	ldr	r1, [pc, #236]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d051      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_RCC_ClockConfig+0x168>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d008      	beq.n	8004780 <HAL_RCC_ClockConfig+0x168>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d004      	beq.n	8004780 <HAL_RCC_ClockConfig+0x168>
 8004776:	f44f 7159 	mov.w	r1, #868	@ 0x364
 800477a:	482e      	ldr	r0, [pc, #184]	@ (8004834 <HAL_RCC_ClockConfig+0x21c>)
 800477c:	f7fe f86e 	bl	800285c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004788:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0c0      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a0:	4b26      	ldr	r3, [pc, #152]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b4      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	4b22      	ldr	r3, [pc, #136]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0ac      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c0:	4b1e      	ldr	r3, [pc, #120]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	491b      	ldr	r1, [pc, #108]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d2:	f7fe ff89 	bl	80036e8 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fe ff85 	bl	80036e8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e094      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <HAL_RCC_ClockConfig+0x224>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 020c 	and.w	r2, r3, #12
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1eb      	bne.n	80047da <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d217      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 0207 	bic.w	r2, r3, #7
 8004818:	4907      	ldr	r1, [pc, #28]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_ClockConfig+0x220>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d008      	beq.n	8004840 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e073      	b.n	800491a <HAL_RCC_ClockConfig+0x302>
 8004832:	bf00      	nop
 8004834:	08007fdc 	.word	0x08007fdc
 8004838:	40022000 	.word	0x40022000
 800483c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d025      	beq.n	8004898 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d018      	beq.n	8004886 <HAL_RCC_ClockConfig+0x26e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485c:	d013      	beq.n	8004886 <HAL_RCC_ClockConfig+0x26e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004866:	d00e      	beq.n	8004886 <HAL_RCC_ClockConfig+0x26e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x26e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800487a:	d004      	beq.n	8004886 <HAL_RCC_ClockConfig+0x26e>
 800487c:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8004880:	4828      	ldr	r0, [pc, #160]	@ (8004924 <HAL_RCC_ClockConfig+0x30c>)
 8004882:	f7fd ffeb 	bl	800285c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004886:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <HAL_RCC_ClockConfig+0x310>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4925      	ldr	r1, [pc, #148]	@ (8004928 <HAL_RCC_ClockConfig+0x310>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d026      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d018      	beq.n	80048de <HAL_RCC_ClockConfig+0x2c6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	d013      	beq.n	80048de <HAL_RCC_ClockConfig+0x2c6>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80048be:	d00e      	beq.n	80048de <HAL_RCC_ClockConfig+0x2c6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x2c6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048d2:	d004      	beq.n	80048de <HAL_RCC_ClockConfig+0x2c6>
 80048d4:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80048d8:	4812      	ldr	r0, [pc, #72]	@ (8004924 <HAL_RCC_ClockConfig+0x30c>)
 80048da:	f7fd ffbf 	bl	800285c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_ClockConfig+0x310>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <HAL_RCC_ClockConfig+0x310>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_ClockConfig+0x310>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x314>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <HAL_RCC_ClockConfig+0x318>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x31c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fea6 	bl	8003664 <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	08007fdc 	.word	0x08007fdc
 8004928:	40021000 	.word	0x40021000
 800492c:	080080fc 	.word	0x080080fc
 8004930:	20000020 	.word	0x20000020
 8004934:	20000024 	.word	0x20000024

08004938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004952:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b04      	cmp	r3, #4
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x30>
 8004962:	2b08      	cmp	r3, #8
 8004964:	d003      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x36>
 8004966:	e027      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800496a:	613b      	str	r3, [r7, #16]
      break;
 800496c:	e027      	b.n	80049be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0c9b      	lsrs	r3, r3, #18
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004978:	5cd3      	ldrb	r3, [r2, r3]
 800497a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d010      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004986:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	0c5b      	lsrs	r3, r3, #17
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	4a11      	ldr	r2, [pc, #68]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800499a:	fb03 f202 	mul.w	r2, r3, r2
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e004      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	613b      	str	r3, [r7, #16]
      break;
 80049b6:	e002      	b.n	80049be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049b8:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ba:	613b      	str	r3, [r7, #16]
      break;
 80049bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049be:	693b      	ldr	r3, [r7, #16]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	007a1200 	.word	0x007a1200
 80049d4:	08008114 	.word	0x08008114
 80049d8:	08008124 	.word	0x08008124
 80049dc:	003d0900 	.word	0x003d0900

080049e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <RCC_Delay+0x34>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <RCC_Delay+0x38>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0a5b      	lsrs	r3, r3, #9
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049fc:	bf00      	nop
  }
  while (Delay --);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1e5a      	subs	r2, r3, #1
 8004a02:	60fa      	str	r2, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f9      	bne.n	80049fc <RCC_Delay+0x1c>
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000020 	.word	0x20000020
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0b5      	b.n	8004b9a <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5c      	ldr	r2, [pc, #368]	@ (8004ba4 <HAL_TIM_Base_Init+0x188>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d027      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ba8 <HAL_TIM_Base_Init+0x18c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a56      	ldr	r2, [pc, #344]	@ (8004bac <HAL_TIM_Base_Init+0x190>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a55      	ldr	r2, [pc, #340]	@ (8004bb0 <HAL_TIM_Base_Init+0x194>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a53      	ldr	r2, [pc, #332]	@ (8004bb4 <HAL_TIM_Base_Init+0x198>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a52      	ldr	r2, [pc, #328]	@ (8004bb8 <HAL_TIM_Base_Init+0x19c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a50      	ldr	r2, [pc, #320]	@ (8004bbc <HAL_TIM_Base_Init+0x1a0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Init+0x6c>
 8004a7e:	f240 1113 	movw	r1, #275	@ 0x113
 8004a82:	484f      	ldr	r0, [pc, #316]	@ (8004bc0 <HAL_TIM_Base_Init+0x1a4>)
 8004a84:	f7fd feea 	bl	800285c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d014      	beq.n	8004aba <HAL_TIM_Base_Init+0x9e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d010      	beq.n	8004aba <HAL_TIM_Base_Init+0x9e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d00c      	beq.n	8004aba <HAL_TIM_Base_Init+0x9e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	d008      	beq.n	8004aba <HAL_TIM_Base_Init+0x9e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b60      	cmp	r3, #96	@ 0x60
 8004aae:	d004      	beq.n	8004aba <HAL_TIM_Base_Init+0x9e>
 8004ab0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004ab4:	4842      	ldr	r0, [pc, #264]	@ (8004bc0 <HAL_TIM_Base_Init+0x1a4>)
 8004ab6:	f7fd fed1 	bl	800285c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_TIM_Base_Init+0xc4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aca:	d009      	beq.n	8004ae0 <HAL_TIM_Base_Init+0xc4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIM_Base_Init+0xc4>
 8004ad6:	f240 1115 	movw	r1, #277	@ 0x115
 8004ada:	4839      	ldr	r0, [pc, #228]	@ (8004bc0 <HAL_TIM_Base_Init+0x1a4>)
 8004adc:	f7fd febe 	bl	800285c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_Base_Init+0xd6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af0:	d304      	bcc.n	8004afc <HAL_TIM_Base_Init+0xe0>
 8004af2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004af6:	4832      	ldr	r0, [pc, #200]	@ (8004bc0 <HAL_TIM_Base_Init+0x1a4>)
 8004af8:	f7fd feb0 	bl	800285c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_TIM_Base_Init+0xfa>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b80      	cmp	r3, #128	@ 0x80
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_Base_Init+0xfa>
 8004b0c:	f240 1117 	movw	r1, #279	@ 0x117
 8004b10:	482b      	ldr	r0, [pc, #172]	@ (8004bc0 <HAL_TIM_Base_Init+0x1a4>)
 8004b12:	f7fd fea3 	bl	800285c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fe fa54 	bl	8002fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f001 fb1c 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40001000 	.word	0x40001000
 8004bbc:	40001400 	.word	0x40001400
 8004bc0:	08008014 	.word	0x08008014

08004bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0x104>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <HAL_TIM_Base_Start_IT+0x108>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a38      	ldr	r2, [pc, #224]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0x10c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a36      	ldr	r2, [pc, #216]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0x110>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a35      	ldr	r2, [pc, #212]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0x114>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a33      	ldr	r2, [pc, #204]	@ (8004cdc <HAL_TIM_Base_Start_IT+0x118>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a32      	ldr	r2, [pc, #200]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x62>
 8004c1c:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8004c20:	4830      	ldr	r0, [pc, #192]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0x120>)
 8004c22:	f7fd fe1b 	bl	800285c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e044      	b.n	8004cc0 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_TIM_Base_Start_IT+0xc6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ccc <HAL_TIM_Base_Start_IT+0x108>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_Base_Start_IT+0xc6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_Base_Start_IT+0xc6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a17      	ldr	r2, [pc, #92]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0x10c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_Base_Start_IT+0xc6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0x110>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_Base_Start_IT+0xc6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a14      	ldr	r2, [pc, #80]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0x114>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d010      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	e007      	b.n	8004cbe <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40001000 	.word	0x40001000
 8004ce0:	40001400 	.word	0x40001400
 8004ce4:	08008014 	.word	0x08008014

08004ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0b5      	b.n	8004e66 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8004e70 <HAL_TIM_PWM_Init+0x188>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d027      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5a      	ldr	r2, [pc, #360]	@ (8004e74 <HAL_TIM_PWM_Init+0x18c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d022      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d16:	d01d      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a56      	ldr	r2, [pc, #344]	@ (8004e78 <HAL_TIM_PWM_Init+0x190>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a55      	ldr	r2, [pc, #340]	@ (8004e7c <HAL_TIM_PWM_Init+0x194>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a53      	ldr	r2, [pc, #332]	@ (8004e80 <HAL_TIM_PWM_Init+0x198>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a52      	ldr	r2, [pc, #328]	@ (8004e84 <HAL_TIM_PWM_Init+0x19c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a50      	ldr	r2, [pc, #320]	@ (8004e88 <HAL_TIM_PWM_Init+0x1a0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x6c>
 8004d4a:	f240 512c 	movw	r1, #1324	@ 0x52c
 8004d4e:	484f      	ldr	r0, [pc, #316]	@ (8004e8c <HAL_TIM_PWM_Init+0x1a4>)
 8004d50:	f7fd fd84 	bl	800285c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d014      	beq.n	8004d86 <HAL_TIM_PWM_Init+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d010      	beq.n	8004d86 <HAL_TIM_PWM_Init+0x9e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d00c      	beq.n	8004d86 <HAL_TIM_PWM_Init+0x9e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d008      	beq.n	8004d86 <HAL_TIM_PWM_Init+0x9e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b60      	cmp	r3, #96	@ 0x60
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_PWM_Init+0x9e>
 8004d7c:	f240 512d 	movw	r1, #1325	@ 0x52d
 8004d80:	4842      	ldr	r0, [pc, #264]	@ (8004e8c <HAL_TIM_PWM_Init+0x1a4>)
 8004d82:	f7fd fd6b 	bl	800285c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <HAL_TIM_PWM_Init+0xc4>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d96:	d009      	beq.n	8004dac <HAL_TIM_PWM_Init+0xc4>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da0:	d004      	beq.n	8004dac <HAL_TIM_PWM_Init+0xc4>
 8004da2:	f240 512e 	movw	r1, #1326	@ 0x52e
 8004da6:	4839      	ldr	r0, [pc, #228]	@ (8004e8c <HAL_TIM_PWM_Init+0x1a4>)
 8004da8:	f7fd fd58 	bl	800285c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <HAL_TIM_PWM_Init+0xd6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d304      	bcc.n	8004dc8 <HAL_TIM_PWM_Init+0xe0>
 8004dbe:	f240 512f 	movw	r1, #1327	@ 0x52f
 8004dc2:	4832      	ldr	r0, [pc, #200]	@ (8004e8c <HAL_TIM_PWM_Init+0x1a4>)
 8004dc4:	f7fd fd4a 	bl	800285c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_TIM_PWM_Init+0xfa>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b80      	cmp	r3, #128	@ 0x80
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIM_PWM_Init+0xfa>
 8004dd8:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8004ddc:	482b      	ldr	r0, [pc, #172]	@ (8004e8c <HAL_TIM_PWM_Init+0x1a4>)
 8004dde:	f7fd fd3d 	bl	800285c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f84a 	bl	8004e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f001 f9b6 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40001000 	.word	0x40001000
 8004e88:	40001400 	.word	0x40001400
 8004e8c:	08008014 	.word	0x08008014

08004e90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a8a      	ldr	r2, [pc, #552]	@ (80050dc <HAL_TIM_PWM_Start+0x238>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0x2c>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d062      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d05f      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d05c      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d059      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a82      	ldr	r2, [pc, #520]	@ (80050e0 <HAL_TIM_PWM_Start+0x23c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10b      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x4e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d051      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d04e      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d04b      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d048      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efa:	d10b      	bne.n	8004f14 <HAL_TIM_PWM_Start+0x70>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d040      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d03d      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d03a      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d037      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a72      	ldr	r2, [pc, #456]	@ (80050e4 <HAL_TIM_PWM_Start+0x240>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10b      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x92>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02f      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d02c      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d029      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d026      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80050e8 <HAL_TIM_PWM_Start+0x244>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10b      	bne.n	8004f58 <HAL_TIM_PWM_Start+0xb4>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01e      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d018      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d015      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a63      	ldr	r2, [pc, #396]	@ (80050ec <HAL_TIM_PWM_Start+0x248>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d10b      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xd6>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00a      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d004      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xe0>
 8004f7a:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8004f7e:	485c      	ldr	r0, [pc, #368]	@ (80050f0 <HAL_TIM_PWM_Start+0x24c>)
 8004f80:	f7fd fc6c 	bl	800285c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xfa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e022      	b.n	8004fe4 <HAL_TIM_PWM_Start+0x140>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d109      	bne.n	8004fb8 <HAL_TIM_PWM_Start+0x114>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e015      	b.n	8004fe4 <HAL_TIM_PWM_Start+0x140>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d109      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x12e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e008      	b.n	8004fe4 <HAL_TIM_PWM_Start+0x140>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e072      	b.n	80050d2 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x158>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ffa:	e013      	b.n	8005024 <HAL_TIM_PWM_Start+0x180>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d104      	bne.n	800500c <HAL_TIM_PWM_Start+0x168>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800500a:	e00b      	b.n	8005024 <HAL_TIM_PWM_Start+0x180>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d104      	bne.n	800501c <HAL_TIM_PWM_Start+0x178>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800501a:	e003      	b.n	8005024 <HAL_TIM_PWM_Start+0x180>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fbf1 	bl	8006814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a29      	ldr	r2, [pc, #164]	@ (80050dc <HAL_TIM_PWM_Start+0x238>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1a2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a27      	ldr	r2, [pc, #156]	@ (80050e0 <HAL_TIM_PWM_Start+0x23c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_Start+0x1a6>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_TIM_PWM_Start+0x1a8>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <HAL_TIM_PWM_Start+0x238>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_PWM_Start+0x1f8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <HAL_TIM_PWM_Start+0x23c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_TIM_PWM_Start+0x1f8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d00e      	beq.n	800509c <HAL_TIM_PWM_Start+0x1f8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_TIM_PWM_Start+0x240>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_PWM_Start+0x1f8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_TIM_PWM_Start+0x244>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_PWM_Start+0x1f8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	@ (80050ec <HAL_TIM_PWM_Start+0x248>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	08008014 	.word	0x08008014

080050f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e194      	b.n	8005432 <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7f      	ldr	r2, [pc, #508]	@ (800530c <HAL_TIM_Encoder_Init+0x218>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7e      	ldr	r2, [pc, #504]	@ (8005310 <HAL_TIM_Encoder_Init+0x21c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005124:	d013      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7a      	ldr	r2, [pc, #488]	@ (8005314 <HAL_TIM_Encoder_Init+0x220>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a78      	ldr	r2, [pc, #480]	@ (8005318 <HAL_TIM_Encoder_Init+0x224>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a77      	ldr	r2, [pc, #476]	@ (800531c <HAL_TIM_Encoder_Init+0x228>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_Encoder_Init+0x5a>
 8005144:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8005148:	4875      	ldr	r0, [pc, #468]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 800514a:	f7fd fb87 	bl	800285c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <HAL_TIM_Encoder_Init+0x8c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b10      	cmp	r3, #16
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Encoder_Init+0x8c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_Encoder_Init+0x8c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d008      	beq.n	8005180 <HAL_TIM_Encoder_Init+0x8c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b60      	cmp	r3, #96	@ 0x60
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Encoder_Init+0x8c>
 8005176:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 800517a:	4869      	ldr	r0, [pc, #420]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 800517c:	f7fd fb6e 	bl	800285c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <HAL_TIM_Encoder_Init+0xb2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005190:	d009      	beq.n	80051a6 <HAL_TIM_Encoder_Init+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519a:	d004      	beq.n	80051a6 <HAL_TIM_Encoder_Init+0xb2>
 800519c:	f640 31da 	movw	r1, #3034	@ 0xbda
 80051a0:	485f      	ldr	r0, [pc, #380]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80051a2:	f7fd fb5b 	bl	800285c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_TIM_Encoder_Init+0xcc>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d004      	beq.n	80051c0 <HAL_TIM_Encoder_Init+0xcc>
 80051b6:	f640 31db 	movw	r1, #3035	@ 0xbdb
 80051ba:	4859      	ldr	r0, [pc, #356]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80051bc:	f7fd fb4e 	bl	800285c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d00c      	beq.n	80051e2 <HAL_TIM_Encoder_Init+0xee>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d008      	beq.n	80051e2 <HAL_TIM_Encoder_Init+0xee>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d004      	beq.n	80051e2 <HAL_TIM_Encoder_Init+0xee>
 80051d8:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80051dc:	4850      	ldr	r0, [pc, #320]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80051de:	f7fd fb3d 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00c      	beq.n	8005204 <HAL_TIM_Encoder_Init+0x110>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d008      	beq.n	8005204 <HAL_TIM_Encoder_Init+0x110>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d004      	beq.n	8005204 <HAL_TIM_Encoder_Init+0x110>
 80051fa:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 80051fe:	4848      	ldr	r0, [pc, #288]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 8005200:	f7fd fb2c 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d00c      	beq.n	8005226 <HAL_TIM_Encoder_Init+0x132>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d008      	beq.n	8005226 <HAL_TIM_Encoder_Init+0x132>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d004      	beq.n	8005226 <HAL_TIM_Encoder_Init+0x132>
 800521c:	f640 31de 	movw	r1, #3038	@ 0xbde
 8005220:	483f      	ldr	r0, [pc, #252]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 8005222:	f7fd fb1b 	bl	800285c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_TIM_Encoder_Init+0x14c>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d004      	beq.n	8005240 <HAL_TIM_Encoder_Init+0x14c>
 8005236:	f640 31df 	movw	r1, #3039	@ 0xbdf
 800523a:	4839      	ldr	r0, [pc, #228]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 800523c:	f7fd fb0e 	bl	800285c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_TIM_Encoder_Init+0x166>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d004      	beq.n	800525a <HAL_TIM_Encoder_Init+0x166>
 8005250:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8005254:	4832      	ldr	r0, [pc, #200]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 8005256:	f7fd fb01 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d010      	beq.n	8005284 <HAL_TIM_Encoder_Init+0x190>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00c      	beq.n	8005284 <HAL_TIM_Encoder_Init+0x190>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d008      	beq.n	8005284 <HAL_TIM_Encoder_Init+0x190>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Encoder_Init+0x190>
 800527a:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 800527e:	4828      	ldr	r0, [pc, #160]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 8005280:	f7fd faec 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <HAL_TIM_Encoder_Init+0x1ba>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d00c      	beq.n	80052ae <HAL_TIM_Encoder_Init+0x1ba>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d008      	beq.n	80052ae <HAL_TIM_Encoder_Init+0x1ba>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_Encoder_Init+0x1ba>
 80052a4:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 80052a8:	481d      	ldr	r0, [pc, #116]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80052aa:	f7fd fad7 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	d904      	bls.n	80052c0 <HAL_TIM_Encoder_Init+0x1cc>
 80052b6:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80052ba:	4819      	ldr	r0, [pc, #100]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80052bc:	f7fd face 	bl	800285c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b0f      	cmp	r3, #15
 80052c6:	d904      	bls.n	80052d2 <HAL_TIM_Encoder_Init+0x1de>
 80052c8:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80052cc:	4814      	ldr	r0, [pc, #80]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80052ce:	f7fd fac5 	bl	800285c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_TIM_Encoder_Init+0x1f0>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e2:	d304      	bcc.n	80052ee <HAL_TIM_Encoder_Init+0x1fa>
 80052e4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80052e8:	480d      	ldr	r0, [pc, #52]	@ (8005320 <HAL_TIM_Encoder_Init+0x22c>)
 80052ea:	f7fd fab7 	bl	800285c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d114      	bne.n	8005324 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd feb6 	bl	8003074 <HAL_TIM_Encoder_MspInit>
 8005308:	e00c      	b.n	8005324 <HAL_TIM_Encoder_Init+0x230>
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	08008014 	.word	0x08008014
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f000 ff18 	bl	8006180 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4313      	orrs	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005396:	f023 030c 	bic.w	r3, r3, #12
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	4313      	orrs	r3, r2
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	011a      	lsls	r2, r3, #4
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	4313      	orrs	r3, r2
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053d4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4313      	orrs	r3, r2
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800544c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005454:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005464:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4d      	ldr	r2, [pc, #308]	@ (80055a0 <HAL_TIM_Encoder_Start+0x164>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a4b      	ldr	r2, [pc, #300]	@ (80055a4 <HAL_TIM_Encoder_Start+0x168>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d013      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a47      	ldr	r2, [pc, #284]	@ (80055a8 <HAL_TIM_Encoder_Start+0x16c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a46      	ldr	r2, [pc, #280]	@ (80055ac <HAL_TIM_Encoder_Start+0x170>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a44      	ldr	r2, [pc, #272]	@ (80055b0 <HAL_TIM_Encoder_Start+0x174>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x70>
 80054a2:	f640 4195 	movw	r1, #3221	@ 0xc95
 80054a6:	4843      	ldr	r0, [pc, #268]	@ (80055b4 <HAL_TIM_Encoder_Start+0x178>)
 80054a8:	f7fd f9d8 	bl	800285c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d110      	bne.n	80054d4 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d102      	bne.n	80054be <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b8:	7b7b      	ldrb	r3, [r7, #13]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e069      	b.n	8005596 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d2:	e031      	b.n	8005538 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d110      	bne.n	80054fc <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d102      	bne.n	80054e6 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054e0:	7b3b      	ldrb	r3, [r7, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e055      	b.n	8005596 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054fa:	e01d      	b.n	8005538 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d108      	bne.n	8005514 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d105      	bne.n	8005514 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005508:	7b7b      	ldrb	r3, [r7, #13]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800550e:	7b3b      	ldrb	r3, [r7, #12]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e03e      	b.n	8005596 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_Encoder_Start+0x10a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d008      	beq.n	8005556 <HAL_TIM_Encoder_Start+0x11a>
 8005544:	e00f      	b.n	8005566 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f001 f960 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005554:	e016      	b.n	8005584 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2201      	movs	r2, #1
 800555c:	2104      	movs	r1, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f958 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005564:	e00e      	b.n	8005584 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f950 	bl	8006814 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	2104      	movs	r1, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f949 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005582:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40012c00 	.word	0x40012c00
 80055a4:	40013400 	.word	0x40013400
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	08008014 	.word	0x08008014

080055b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0202 	mvn.w	r2, #2
 80055e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fda5 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fd98 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fda7 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0204 	mvn.w	r2, #4
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fd7b 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fd6e 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fd7d 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0208 	mvn.w	r2, #8
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2204      	movs	r2, #4
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fd51 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fd44 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fd53 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0210 	mvn.w	r2, #16
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2208      	movs	r2, #8
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fd27 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fd1a 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fd29 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0201 	mvn.w	r2, #1
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc ff92 	bl	8002660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b80      	cmp	r3, #128	@ 0x80
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005754:	2b80      	cmp	r3, #128	@ 0x80
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fa5b 	bl	8006c1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b40      	cmp	r3, #64	@ 0x40
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fced 	bl	800616e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0220 	mvn.w	r2, #32
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fa26 	bl	8006c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d010      	beq.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x38>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d00d      	beq.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x38>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d00a      	beq.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x38>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d007      	beq.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b3c      	cmp	r3, #60	@ 0x3c
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x38>
 80057f6:	f241 017e 	movw	r1, #4222	@ 0x107e
 80057fa:	4890      	ldr	r0, [pc, #576]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80057fc:	f7fd f82e 	bl	800285c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b60      	cmp	r3, #96	@ 0x60
 8005806:	d008      	beq.n	800581a <HAL_TIM_PWM_ConfigChannel+0x52>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b70      	cmp	r3, #112	@ 0x70
 800580e:	d004      	beq.n	800581a <HAL_TIM_PWM_ConfigChannel+0x52>
 8005810:	f241 017f 	movw	r1, #4223	@ 0x107f
 8005814:	4889      	ldr	r0, [pc, #548]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005816:	f7fd f821 	bl	800285c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d004      	beq.n	8005834 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800582a:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 800582e:	4883      	ldr	r0, [pc, #524]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005830:	f7fd f814 	bl	800285c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_TIM_PWM_ConfigChannel+0x86>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d004      	beq.n	800584e <HAL_TIM_PWM_ConfigChannel+0x86>
 8005844:	f241 0181 	movw	r1, #4225	@ 0x1081
 8005848:	487c      	ldr	r0, [pc, #496]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800584a:	f7fd f807 	bl	800285c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_PWM_ConfigChannel+0x94>
 8005858:	2302      	movs	r3, #2
 800585a:	e147      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x324>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b0c      	cmp	r3, #12
 8005868:	f200 8138 	bhi.w	8005adc <HAL_TIM_PWM_ConfigChannel+0x314>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	080058a9 	.word	0x080058a9
 8005878:	08005add 	.word	0x08005add
 800587c:	08005add 	.word	0x08005add
 8005880:	08005add 	.word	0x08005add
 8005884:	0800592f 	.word	0x0800592f
 8005888:	08005add 	.word	0x08005add
 800588c:	08005add 	.word	0x08005add
 8005890:	08005add 	.word	0x08005add
 8005894:	080059b7 	.word	0x080059b7
 8005898:	08005add 	.word	0x08005add
 800589c:	08005add 	.word	0x08005add
 80058a0:	08005add 	.word	0x08005add
 80058a4:	08005a55 	.word	0x08005a55
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a64      	ldr	r2, [pc, #400]	@ (8005a40 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a63      	ldr	r2, [pc, #396]	@ (8005a44 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c4:	d013      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005a48 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5d      	ldr	r2, [pc, #372]	@ (8005a4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a5c      	ldr	r2, [pc, #368]	@ (8005a50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x126>
 80058e4:	f241 018b 	movw	r1, #4235	@ 0x108b
 80058e8:	4854      	ldr	r0, [pc, #336]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80058ea:	f7fc ffb7 	bl	800285c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fcbd 	bl	8006274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6999      	ldr	r1, [r3, #24]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	619a      	str	r2, [r3, #24]
      break;
 800592c:	e0d9      	b.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a43      	ldr	r2, [pc, #268]	@ (8005a40 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d01d      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a41      	ldr	r2, [pc, #260]	@ (8005a44 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d013      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a3d      	ldr	r2, [pc, #244]	@ (8005a48 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3a      	ldr	r2, [pc, #232]	@ (8005a50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800596a:	f241 019c 	movw	r1, #4252	@ 0x109c
 800596e:	4833      	ldr	r0, [pc, #204]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005970:	f7fc ff74 	bl	800285c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fd14 	bl	80063a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e095      	b.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a21      	ldr	r2, [pc, #132]	@ (8005a40 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d2:	d013      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a48 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x234>
 80059f2:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 80059f6:	4811      	ldr	r0, [pc, #68]	@ (8005a3c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80059f8:	f7fc ff30 	bl	800285c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fd6e 	bl	80064e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0208 	orr.w	r2, r2, #8
 8005a16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0204 	bic.w	r2, r2, #4
 8005a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69d9      	ldr	r1, [r3, #28]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	61da      	str	r2, [r3, #28]
      break;
 8005a3a:	e052      	b.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a3c:	08008014 	.word	0x08008014
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800
 8005a50:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a26      	ldr	r2, [pc, #152]	@ (8005af4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01d      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a25      	ldr	r2, [pc, #148]	@ (8005af8 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d018      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a70:	d013      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	@ (8005afc <HAL_TIM_PWM_ConfigChannel+0x334>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005a90:	f241 01be 	movw	r1, #4286	@ 0x10be
 8005a94:	481c      	ldr	r0, [pc, #112]	@ (8005b08 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005a96:	f7fc fee1 	bl	800285c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fdbd 	bl	8006620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69d9      	ldr	r1, [r3, #28]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	021a      	lsls	r2, r3, #8
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	61da      	str	r2, [r3, #28]
      break;
 8005ada:	e002      	b.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	08008014 	.word	0x08008014

08005b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_ConfigClockSource+0x1c>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e2f6      	b.n	8006116 <HAL_TIM_ConfigClockSource+0x60a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b40:	d029      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b70      	cmp	r3, #112	@ 0x70
 8005b48:	d025      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b52:	d020      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d01c      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b50      	cmp	r3, #80	@ 0x50
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b60      	cmp	r3, #96	@ 0x60
 8005b6a:	d014      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d00c      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d008      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b30      	cmp	r3, #48	@ 0x30
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x8a>
 8005b8c:	f241 41be 	movw	r1, #5310	@ 0x14be
 8005b90:	487c      	ldr	r0, [pc, #496]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005b92:	f7fc fe63 	bl	800285c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ba4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bbe:	f000 80f1 	beq.w	8005da4 <HAL_TIM_ConfigClockSource+0x298>
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc6:	f200 8299 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bce:	d02d      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0x120>
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd4:	f200 8292 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005bd8:	2b70      	cmp	r3, #112	@ 0x70
 8005bda:	d05d      	beq.n	8005c98 <HAL_TIM_ConfigClockSource+0x18c>
 8005bdc:	2b70      	cmp	r3, #112	@ 0x70
 8005bde:	f200 828d 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005be2:	2b60      	cmp	r3, #96	@ 0x60
 8005be4:	f000 81a5 	beq.w	8005f32 <HAL_TIM_ConfigClockSource+0x426>
 8005be8:	2b60      	cmp	r3, #96	@ 0x60
 8005bea:	f200 8287 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005bee:	2b50      	cmp	r3, #80	@ 0x50
 8005bf0:	f000 8149 	beq.w	8005e86 <HAL_TIM_ConfigClockSource+0x37a>
 8005bf4:	2b50      	cmp	r3, #80	@ 0x50
 8005bf6:	f200 8281 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	f000 81fc 	beq.w	8005ff8 <HAL_TIM_ConfigClockSource+0x4ec>
 8005c00:	2b40      	cmp	r3, #64	@ 0x40
 8005c02:	f200 827b 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	f000 824c 	beq.w	80060a4 <HAL_TIM_ConfigClockSource+0x598>
 8005c0c:	2b30      	cmp	r3, #48	@ 0x30
 8005c0e:	f200 8275 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	f000 8246 	beq.w	80060a4 <HAL_TIM_ConfigClockSource+0x598>
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f200 826f 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8240 	beq.w	80060a4 <HAL_TIM_ConfigClockSource+0x598>
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	f000 823d 	beq.w	80060a4 <HAL_TIM_ConfigClockSource+0x598>
 8005c2a:	e267      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a55      	ldr	r2, [pc, #340]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x27c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f000 8265 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a53      	ldr	r2, [pc, #332]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x280>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f000 825f 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	f000 8259 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a4e      	ldr	r2, [pc, #312]	@ (8005d90 <HAL_TIM_ConfigClockSource+0x284>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f000 8253 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4c      	ldr	r2, [pc, #304]	@ (8005d94 <HAL_TIM_ConfigClockSource+0x288>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	f000 824d 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x28c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f000 8247 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a48      	ldr	r2, [pc, #288]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x290>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f000 8241 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a46      	ldr	r2, [pc, #280]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x294>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f000 823b 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
 8005c8c:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8005c90:	483c      	ldr	r0, [pc, #240]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005c92:	f7fc fde3 	bl	800285c <assert_failed>
      break;
 8005c96:	e234      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x27c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01d      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a39      	ldr	r2, [pc, #228]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x280>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb4:	d013      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <HAL_TIM_ConfigClockSource+0x284>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a33      	ldr	r2, [pc, #204]	@ (8005d94 <HAL_TIM_ConfigClockSource+0x288>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a32      	ldr	r2, [pc, #200]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x28c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x1d2>
 8005cd4:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8005cd8:	482a      	ldr	r0, [pc, #168]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005cda:	f7fc fdbf 	bl	800285c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x202>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x202>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x202>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x202>
 8005d04:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8005d08:	481e      	ldr	r0, [pc, #120]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005d0a:	f7fc fda7 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d16:	d014      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x236>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x236>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x236>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d008      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x236>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b0a      	cmp	r3, #10
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x236>
 8005d38:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8005d3c:	4811      	ldr	r0, [pc, #68]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005d3e:	f7fc fd8d 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d904      	bls.n	8005d54 <HAL_TIM_ConfigClockSource+0x248>
 8005d4a:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8005d4e:	480d      	ldr	r0, [pc, #52]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x278>)
 8005d50:	f7fc fd84 	bl	800285c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	f000 fd37 	bl	80067d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
      break;
 8005d80:	e1c0      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
 8005d82:	bf00      	nop
 8005d84:	08008014 	.word	0x08008014
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40001000 	.word	0x40001000
 8005da0:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a8d      	ldr	r2, [pc, #564]	@ (8005fe0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a8c      	ldr	r2, [pc, #560]	@ (8005fe4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d013      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a88      	ldr	r2, [pc, #544]	@ (8005fe8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a86      	ldr	r2, [pc, #536]	@ (8005fec <HAL_TIM_ConfigClockSource+0x4e0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a85      	ldr	r2, [pc, #532]	@ (8005ff0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x2de>
 8005de0:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8005de4:	4883      	ldr	r0, [pc, #524]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005de6:	f7fc fd39 	bl	800285c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d013      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x30e>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x30e>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d009      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x30e>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x30e>
 8005e10:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8005e14:	4877      	ldr	r0, [pc, #476]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005e16:	f7fc fd21 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e22:	d014      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x342>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x342>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x342>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d008      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x342>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b0a      	cmp	r3, #10
 8005e42:	d004      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x342>
 8005e44:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8005e48:	486a      	ldr	r0, [pc, #424]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005e4a:	f7fc fd07 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d904      	bls.n	8005e60 <HAL_TIM_ConfigClockSource+0x354>
 8005e56:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8005e5a:	4866      	ldr	r0, [pc, #408]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005e5c:	f7fc fcfe 	bl	800285c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e70:	f000 fcb1 	bl	80067d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e82:	609a      	str	r2, [r3, #8]
      break;
 8005e84:	e13e      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a55      	ldr	r2, [pc, #340]	@ (8005fe0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a53      	ldr	r2, [pc, #332]	@ (8005fe4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8005fe8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8005fec <HAL_TIM_ConfigClockSource+0x4e0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a4c      	ldr	r2, [pc, #304]	@ (8005ff0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0x3c0>
 8005ec2:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8005ec6:	484b      	ldr	r0, [pc, #300]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005ec8:	f7fc fcc8 	bl	800285c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed4:	d014      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0x3f4>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d010      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0x3f4>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0x3f4>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d008      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0x3f4>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b0a      	cmp	r3, #10
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0x3f4>
 8005ef6:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8005efa:	483e      	ldr	r0, [pc, #248]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005efc:	f7fc fcae 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b0f      	cmp	r3, #15
 8005f06:	d904      	bls.n	8005f12 <HAL_TIM_ConfigClockSource+0x406>
 8005f08:	f241 5101 	movw	r1, #5377	@ 0x1501
 8005f0c:	4839      	ldr	r0, [pc, #228]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005f0e:	f7fc fca5 	bl	800285c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 fbe2 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2150      	movs	r1, #80	@ 0x50
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fc39 	bl	80067a2 <TIM_ITRx_SetConfig>
      break;
 8005f30:	e0e8      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01d      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a28      	ldr	r2, [pc, #160]	@ (8005fe4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4e:	d013      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a24      	ldr	r2, [pc, #144]	@ (8005fe8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a23      	ldr	r2, [pc, #140]	@ (8005fec <HAL_TIM_ConfigClockSource+0x4e0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a21      	ldr	r2, [pc, #132]	@ (8005ff0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x46c>
 8005f6e:	f241 510d 	movw	r1, #5389	@ 0x150d
 8005f72:	4820      	ldr	r0, [pc, #128]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005f74:	f7fc fc72 	bl	800285c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f80:	d014      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x4a0>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x4a0>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x4a0>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d008      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x4a0>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b0a      	cmp	r3, #10
 8005fa0:	d004      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x4a0>
 8005fa2:	f241 5110 	movw	r1, #5392	@ 0x1510
 8005fa6:	4813      	ldr	r0, [pc, #76]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005fa8:	f7fc fc58 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b0f      	cmp	r3, #15
 8005fb2:	d904      	bls.n	8005fbe <HAL_TIM_ConfigClockSource+0x4b2>
 8005fb4:	f241 5111 	movw	r1, #5393	@ 0x1511
 8005fb8:	480e      	ldr	r0, [pc, #56]	@ (8005ff4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005fba:	f7fc fc4f 	bl	800285c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 fbba 	bl	8006744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2160      	movs	r1, #96	@ 0x60
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fbe3 	bl	80067a2 <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e092      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	08008014 	.word	0x08008014
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a48      	ldr	r2, [pc, #288]	@ (8006120 <HAL_TIM_ConfigClockSource+0x614>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a47      	ldr	r2, [pc, #284]	@ (8006124 <HAL_TIM_ConfigClockSource+0x618>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d013      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a43      	ldr	r2, [pc, #268]	@ (8006128 <HAL_TIM_ConfigClockSource+0x61c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a41      	ldr	r2, [pc, #260]	@ (800612c <HAL_TIM_ConfigClockSource+0x620>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a40      	ldr	r2, [pc, #256]	@ (8006130 <HAL_TIM_ConfigClockSource+0x624>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x532>
 8006034:	f241 511d 	movw	r1, #5405	@ 0x151d
 8006038:	483e      	ldr	r0, [pc, #248]	@ (8006134 <HAL_TIM_ConfigClockSource+0x628>)
 800603a:	f7fc fc0f 	bl	800285c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006046:	d014      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x566>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x566>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x566>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d008      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x566>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b0a      	cmp	r3, #10
 8006066:	d004      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x566>
 8006068:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800606c:	4831      	ldr	r0, [pc, #196]	@ (8006134 <HAL_TIM_ConfigClockSource+0x628>)
 800606e:	f7fc fbf5 	bl	800285c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d904      	bls.n	8006084 <HAL_TIM_ConfigClockSource+0x578>
 800607a:	f241 5121 	movw	r1, #5409	@ 0x1521
 800607e:	482d      	ldr	r0, [pc, #180]	@ (8006134 <HAL_TIM_ConfigClockSource+0x628>)
 8006080:	f7fc fbec 	bl	800285c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006090:	461a      	mov	r2, r3
 8006092:	f000 fb29 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2140      	movs	r1, #64	@ 0x40
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fb80 	bl	80067a2 <TIM_ITRx_SetConfig>
      break;
 80060a2:	e02f      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006120 <HAL_TIM_ConfigClockSource+0x614>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_TIM_ConfigClockSource+0x618>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c0:	d013      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_TIM_ConfigClockSource+0x61c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a16      	ldr	r2, [pc, #88]	@ (800612c <HAL_TIM_ConfigClockSource+0x620>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a15      	ldr	r2, [pc, #84]	@ (8006130 <HAL_TIM_ConfigClockSource+0x624>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x5de>
 80060e0:	f241 5130 	movw	r1, #5424	@ 0x1530
 80060e4:	4813      	ldr	r0, [pc, #76]	@ (8006134 <HAL_TIM_ConfigClockSource+0x628>)
 80060e6:	f7fc fbb9 	bl	800285c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f000 fb54 	bl	80067a2 <TIM_ITRx_SetConfig>
      break;
 80060fa:	e003      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e000      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 8006102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40013400 	.word	0x40013400
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	08008014 	.word	0x08008014

08006138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a33      	ldr	r2, [pc, #204]	@ (8006260 <TIM_Base_SetConfig+0xe0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a32      	ldr	r2, [pc, #200]	@ (8006264 <TIM_Base_SetConfig+0xe4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a6:	d00b      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006268 <TIM_Base_SetConfig+0xe8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2e      	ldr	r2, [pc, #184]	@ (800626c <TIM_Base_SetConfig+0xec>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006270 <TIM_Base_SetConfig+0xf0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a22      	ldr	r2, [pc, #136]	@ (8006260 <TIM_Base_SetConfig+0xe0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a21      	ldr	r2, [pc, #132]	@ (8006264 <TIM_Base_SetConfig+0xe4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006268 <TIM_Base_SetConfig+0xe8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <TIM_Base_SetConfig+0xec>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <TIM_Base_SetConfig+0xf0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a09      	ldr	r2, [pc, #36]	@ (8006260 <TIM_Base_SetConfig+0xe0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0xc8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a08      	ldr	r2, [pc, #32]	@ (8006264 <TIM_Base_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40013400 	.word	0x40013400
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00

08006274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f023 0201 	bic.w	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 0302 	bic.w	r3, r3, #2
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a34      	ldr	r2, [pc, #208]	@ (800639c <TIM_OC1_SetConfig+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC1_SetConfig+0x64>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a33      	ldr	r2, [pc, #204]	@ (80063a0 <TIM_OC1_SetConfig+0x12c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d119      	bne.n	800630c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <TIM_OC1_SetConfig+0x7e>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d004      	beq.n	80062f2 <TIM_OC1_SetConfig+0x7e>
 80062e8:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 80062ec:	482d      	ldr	r0, [pc, #180]	@ (80063a4 <TIM_OC1_SetConfig+0x130>)
 80062ee:	f7fc fab5 	bl	800285c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0308 	bic.w	r3, r3, #8
 80062f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a23      	ldr	r2, [pc, #140]	@ (800639c <TIM_OC1_SetConfig+0x128>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC1_SetConfig+0xa8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <TIM_OC1_SetConfig+0x12c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d12d      	bne.n	8006378 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d008      	beq.n	8006338 <TIM_OC1_SetConfig+0xc4>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <TIM_OC1_SetConfig+0xc4>
 800632e:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 8006332:	481c      	ldr	r0, [pc, #112]	@ (80063a4 <TIM_OC1_SetConfig+0x130>)
 8006334:	f7fc fa92 	bl	800285c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006340:	d008      	beq.n	8006354 <TIM_OC1_SetConfig+0xe0>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <TIM_OC1_SetConfig+0xe0>
 800634a:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800634e:	4815      	ldr	r0, [pc, #84]	@ (80063a4 <TIM_OC1_SetConfig+0x130>)
 8006350:	f7fc fa84 	bl	800285c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800635a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	08008014 	.word	0x08008014

080063a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a35      	ldr	r2, [pc, #212]	@ (80064d8 <TIM_OC2_SetConfig+0x130>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0x68>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a34      	ldr	r2, [pc, #208]	@ (80064dc <TIM_OC2_SetConfig+0x134>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d11a      	bne.n	8006446 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <TIM_OC2_SetConfig+0x82>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d004      	beq.n	800642a <TIM_OC2_SetConfig+0x82>
 8006420:	f641 3110 	movw	r1, #6928	@ 0x1b10
 8006424:	482e      	ldr	r0, [pc, #184]	@ (80064e0 <TIM_OC2_SetConfig+0x138>)
 8006426:	f7fc fa19 	bl	800285c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006444:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a23      	ldr	r2, [pc, #140]	@ (80064d8 <TIM_OC2_SetConfig+0x130>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_OC2_SetConfig+0xae>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a22      	ldr	r2, [pc, #136]	@ (80064dc <TIM_OC2_SetConfig+0x134>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d12f      	bne.n	80064b6 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800645e:	d008      	beq.n	8006472 <TIM_OC2_SetConfig+0xca>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <TIM_OC2_SetConfig+0xca>
 8006468:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 800646c:	481c      	ldr	r0, [pc, #112]	@ (80064e0 <TIM_OC2_SetConfig+0x138>)
 800646e:	f7fc f9f5 	bl	800285c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647a:	d008      	beq.n	800648e <TIM_OC2_SetConfig+0xe6>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <TIM_OC2_SetConfig+0xe6>
 8006484:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 8006488:	4815      	ldr	r0, [pc, #84]	@ (80064e0 <TIM_OC2_SetConfig+0x138>)
 800648a:	f7fc f9e7 	bl	800285c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40013400 	.word	0x40013400
 80064e0:	08008014 	.word	0x08008014

080064e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a35      	ldr	r2, [pc, #212]	@ (8006614 <TIM_OC3_SetConfig+0x130>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC3_SetConfig+0x66>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a34      	ldr	r2, [pc, #208]	@ (8006618 <TIM_OC3_SetConfig+0x134>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d11a      	bne.n	8006580 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <TIM_OC3_SetConfig+0x80>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d004      	beq.n	8006564 <TIM_OC3_SetConfig+0x80>
 800655a:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 800655e:	482f      	ldr	r0, [pc, #188]	@ (800661c <TIM_OC3_SetConfig+0x138>)
 8006560:	f7fc f97c 	bl	800285c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800656a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800657e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a24      	ldr	r2, [pc, #144]	@ (8006614 <TIM_OC3_SetConfig+0x130>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC3_SetConfig+0xac>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a23      	ldr	r2, [pc, #140]	@ (8006618 <TIM_OC3_SetConfig+0x134>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d12f      	bne.n	80065f0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006598:	d008      	beq.n	80065ac <TIM_OC3_SetConfig+0xc8>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <TIM_OC3_SetConfig+0xc8>
 80065a2:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80065a6:	481d      	ldr	r0, [pc, #116]	@ (800661c <TIM_OC3_SetConfig+0x138>)
 80065a8:	f7fc f958 	bl	800285c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065b4:	d008      	beq.n	80065c8 <TIM_OC3_SetConfig+0xe4>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <TIM_OC3_SetConfig+0xe4>
 80065be:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 80065c2:	4816      	ldr	r0, [pc, #88]	@ (800661c <TIM_OC3_SetConfig+0x138>)
 80065c4:	f7fc f94a 	bl	800285c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	08008014 	.word	0x08008014

08006620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800666a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	031b      	lsls	r3, r3, #12
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <TIM_OC4_SetConfig+0xbc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_OC4_SetConfig+0x68>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <TIM_OC4_SetConfig+0xc0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d117      	bne.n	80066b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006690:	d008      	beq.n	80066a4 <TIM_OC4_SetConfig+0x84>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <TIM_OC4_SetConfig+0x84>
 800669a:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 800669e:	4811      	ldr	r0, [pc, #68]	@ (80066e4 <TIM_OC4_SetConfig+0xc4>)
 80066a0:	f7fc f8dc 	bl	800285c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	08008014 	.word	0x08008014

080066e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 030a 	bic.w	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0210 	bic.w	r2, r3, #16
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	031b      	lsls	r3, r3, #12
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	621a      	str	r2, [r3, #32]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	f043 0307 	orr.w	r3, r3, #7
 80067c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b087      	sub	sp, #28
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	021a      	lsls	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	609a      	str	r2, [r3, #8]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a26      	ldr	r2, [pc, #152]	@ (80068bc <TIM_CCxChannelCmd+0xa8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a25      	ldr	r2, [pc, #148]	@ (80068c0 <TIM_CCxChannelCmd+0xac>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d014      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006836:	d010      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a22      	ldr	r2, [pc, #136]	@ (80068c4 <TIM_CCxChannelCmd+0xb0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00c      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a21      	ldr	r2, [pc, #132]	@ (80068c8 <TIM_CCxChannelCmd+0xb4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d008      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a20      	ldr	r2, [pc, #128]	@ (80068cc <TIM_CCxChannelCmd+0xb8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <TIM_CCxChannelCmd+0x46>
 8006850:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8006854:	481e      	ldr	r0, [pc, #120]	@ (80068d0 <TIM_CCxChannelCmd+0xbc>)
 8006856:	f7fc f801 	bl	800285c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <TIM_CCxChannelCmd+0x6e>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b04      	cmp	r3, #4
 8006864:	d00d      	beq.n	8006882 <TIM_CCxChannelCmd+0x6e>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d00a      	beq.n	8006882 <TIM_CCxChannelCmd+0x6e>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b0c      	cmp	r3, #12
 8006870:	d007      	beq.n	8006882 <TIM_CCxChannelCmd+0x6e>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b3c      	cmp	r3, #60	@ 0x3c
 8006876:	d004      	beq.n	8006882 <TIM_CCxChannelCmd+0x6e>
 8006878:	f641 5193 	movw	r1, #7571	@ 0x1d93
 800687c:	4814      	ldr	r0, [pc, #80]	@ (80068d0 <TIM_CCxChannelCmd+0xbc>)
 800687e:	f7fb ffed 	bl	800285c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2201      	movs	r2, #1
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	43db      	mvns	r3, r3
 8006898:	401a      	ands	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	fa01 f303 	lsl.w	r3, r1, r3
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	08008014 	.word	0x08008014

080068d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d027      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d022      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	d01d      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a56      	ldr	r2, [pc, #344]	@ (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d018      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a55      	ldr	r2, [pc, #340]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a53      	ldr	r2, [pc, #332]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00e      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a52      	ldr	r2, [pc, #328]	@ (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a50      	ldr	r2, [pc, #320]	@ (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800692e:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8006932:	484f      	ldr	r0, [pc, #316]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006934:	f7fb ff92 	bl	800285c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d01c      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b20      	cmp	r3, #32
 800694e:	d018      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b30      	cmp	r3, #48	@ 0x30
 8006956:	d014      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b40      	cmp	r3, #64	@ 0x40
 800695e:	d010      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b50      	cmp	r3, #80	@ 0x50
 8006966:	d00c      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b60      	cmp	r3, #96	@ 0x60
 800696e:	d008      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b70      	cmp	r3, #112	@ 0x70
 8006976:	d004      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006978:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 800697c:	483c      	ldr	r0, [pc, #240]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800697e:	f7fb ff6d 	bl	800285c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b80      	cmp	r3, #128	@ 0x80
 8006988:	d008      	beq.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006992:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8006996:	4836      	ldr	r0, [pc, #216]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006998:	f7fb ff60 	bl	800285c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e050      	b.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d018      	beq.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a19      	ldr	r2, [pc, #100]	@ (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d013      	beq.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a00:	d00e      	beq.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d009      	beq.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a13      	ldr	r2, [pc, #76]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d004      	beq.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a12      	ldr	r2, [pc, #72]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10c      	bne.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40001000 	.word	0x40001000
 8006a6c:	40001400 	.word	0x40001400
 8006a70:	0800804c 	.word	0x0800804c

08006a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5e      	ldr	r2, [pc, #376]	@ (8006c00 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5c      	ldr	r2, [pc, #368]	@ (8006c04 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006a96:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8006a9a:	485b      	ldr	r0, [pc, #364]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006a9c:	f7fb fede 	bl	800285c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa8:	d008      	beq.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006ab2:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 8006ab6:	4854      	ldr	r0, [pc, #336]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006ab8:	f7fb fed0 	bl	800285c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac4:	d008      	beq.n	8006ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006ace:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8006ad2:	484d      	ldr	r0, [pc, #308]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006ad4:	f7fb fec2 	bl	800285c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d013      	beq.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae8:	d00e      	beq.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af2:	d009      	beq.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d004      	beq.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006afe:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 8006b02:	4841      	ldr	r0, [pc, #260]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b04:	f7fb feaa 	bl	800285c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2bff      	cmp	r3, #255	@ 0xff
 8006b0e:	d904      	bls.n	8006b1a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8006b10:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8006b14:	483c      	ldr	r0, [pc, #240]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b16:	f7fb fea1 	bl	800285c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b22:	d008      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006b2c:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8006b30:	4835      	ldr	r0, [pc, #212]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b32:	f7fb fe93 	bl	800285c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b46:	d004      	beq.n	8006b52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b48:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8006b4c:	482e      	ldr	r0, [pc, #184]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b4e:	f7fb fe85 	bl	800285c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b5a:	d008      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006b64:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8006b68:	4827      	ldr	r0, [pc, #156]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b6a:	f7fb fe77 	bl	800285c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e03d      	b.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40013400 	.word	0x40013400
 8006c08:	0800804c 	.word	0x0800804c

08006c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006c30:	b490      	push	{r4, r7}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	4413      	add	r3, r2
 8006c46:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	fa93 f3a3 	rbit	r3, r3
 8006c54:	613b      	str	r3, [r7, #16]
  return result;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	fab3 f383 	clz	r3, r3
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	210f      	movs	r1, #15
 8006c62:	fa01 f303 	lsl.w	r3, r1, r3
 8006c66:	43db      	mvns	r3, r3
 8006c68:	401a      	ands	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	61bb      	str	r3, [r7, #24]
  return result;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	6023      	str	r3, [r4, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc90      	pop	{r4, r7}
 8006c92:	4770      	bx	lr

08006c94 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006c94:	b490      	push	{r4, r7}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	0e1b      	lsrs	r3, r3, #24
 8006ca8:	4413      	add	r3, r2
 8006caa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	fa93 f3a3 	rbit	r3, r3
 8006cb8:	613b      	str	r3, [r7, #16]
  return result;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	fab3 f383 	clz	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	2103      	movs	r1, #3
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	401a      	ands	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	fa93 f3a3 	rbit	r3, r3
 8006cd8:	61bb      	str	r3, [r7, #24]
  return result;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8006cee:	bf00      	nop
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc90      	pop	{r4, r7}
 8006cf6:	4770      	bx	lr

08006cf8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8006cf8:	b490      	push	{r4, r7}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	4413      	add	r3, r2
 8006d0e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	613b      	str	r3, [r7, #16]
  return result;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	fab3 f383 	clz	r3, r3
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	2104      	movs	r1, #4
 8006d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	401a      	ands	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	fa93 f3a3 	rbit	r3, r3
 8006d3c:	61bb      	str	r3, [r7, #24]
  return result;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8006d52:	bf00      	nop
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc90      	pop	{r4, r7}
 8006d5a:	4770      	bx	lr

08006d5c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	fa93 f3a3 	rbit	r3, r3
 8006d80:	613b      	str	r3, [r7, #16]
  return result;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	408b      	lsls	r3, r1
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	60da      	str	r2, [r3, #12]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr

08006da0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a68      	ldr	r2, [pc, #416]	@ (8006f50 <LL_GPIO_Init+0x1b0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a67      	ldr	r2, [pc, #412]	@ (8006f54 <LL_GPIO_Init+0x1b4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a66      	ldr	r2, [pc, #408]	@ (8006f58 <LL_GPIO_Init+0x1b8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a65      	ldr	r2, [pc, #404]	@ (8006f5c <LL_GPIO_Init+0x1bc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a64      	ldr	r2, [pc, #400]	@ (8006f60 <LL_GPIO_Init+0x1c0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a63      	ldr	r2, [pc, #396]	@ (8006f64 <LL_GPIO_Init+0x1c4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a62      	ldr	r2, [pc, #392]	@ (8006f68 <LL_GPIO_Init+0x1c8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <LL_GPIO_Init+0x4a>
 8006de2:	21a2      	movs	r1, #162	@ 0xa2
 8006de4:	4861      	ldr	r0, [pc, #388]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006de6:	f7fb fd39 	bl	800285c <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 437b 	bic.w	r3, r3, #4211081216	@ 0xfb000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <LL_GPIO_Init+0x62>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 437b 	and.w	r3, r3, #4211081216	@ 0xfb000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <LL_GPIO_Init+0x6a>
 8006e02:	21a3      	movs	r1, #163	@ 0xa3
 8006e04:	4859      	ldr	r0, [pc, #356]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006e06:	f7fb fd29 	bl	800285c <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	0c1b      	lsrs	r3, r3, #16
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	fa93 f3a3 	rbit	r3, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
  return result;
 8006e20:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8006e22:	fab3 f383 	clz	r3, r3
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8006e2a:	e084      	b.n	8006f36 <LL_GPIO_Init+0x196>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	409a      	lsls	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d07a      	beq.n	8006f30 <LL_GPIO_Init+0x190>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	d806      	bhi.n	8006e4e <LL_GPIO_Init+0xae>
      {
        currentpin = (0x00000101uL << pinpos);
 8006e40:	f240 1201 	movw	r2, #257	@ 0x101
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	e008      	b.n	8006e60 <LL_GPIO_Init+0xc0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3b08      	subs	r3, #8
 8006e52:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e5e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d112      	bne.n	8006e8e <LL_GPIO_Init+0xee>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <LL_GPIO_Init+0xe0>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d003      	beq.n	8006e80 <LL_GPIO_Init+0xe0>
 8006e78:	21be      	movs	r1, #190	@ 0xbe
 8006e7a:	483c      	ldr	r0, [pc, #240]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006e7c:	f7fb fcee 	bl	800285c <assert_failed>

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	461a      	mov	r2, r3
 8006e86:	69b9      	ldr	r1, [r7, #24]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff67 	bl	8006d5c <LL_GPIO_SetPinPull>
      }
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <LL_GPIO_Init+0x11e>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d00f      	beq.n	8006ebe <LL_GPIO_Init+0x11e>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d00b      	beq.n	8006ebe <LL_GPIO_Init+0x11e>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d007      	beq.n	8006ebe <LL_GPIO_Init+0x11e>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d003      	beq.n	8006ebe <LL_GPIO_Init+0x11e>
 8006eb6:	21c5      	movs	r1, #197	@ 0xc5
 8006eb8:	482c      	ldr	r0, [pc, #176]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006eba:	f7fb fccf 	bl	800285c <assert_failed>
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	69b9      	ldr	r1, [r7, #24]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff feb2 	bl	8006c30 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d003      	beq.n	8006edc <LL_GPIO_Init+0x13c>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b09      	cmp	r3, #9
 8006eda:	d129      	bne.n	8006f30 <LL_GPIO_Init+0x190>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d00b      	beq.n	8006efc <LL_GPIO_Init+0x15c>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d007      	beq.n	8006efc <LL_GPIO_Init+0x15c>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d003      	beq.n	8006efc <LL_GPIO_Init+0x15c>
 8006ef4:	21cd      	movs	r1, #205	@ 0xcd
 8006ef6:	481d      	ldr	r0, [pc, #116]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006ef8:	f7fb fcb0 	bl	800285c <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <LL_GPIO_Init+0x174>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d003      	beq.n	8006f14 <LL_GPIO_Init+0x174>
 8006f0c:	21ce      	movs	r1, #206	@ 0xce
 8006f0e:	4817      	ldr	r0, [pc, #92]	@ (8006f6c <LL_GPIO_Init+0x1cc>)
 8006f10:	f7fb fca4 	bl	800285c <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	69b9      	ldr	r1, [r7, #24]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff feb9 	bl	8006c94 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	461a      	mov	r2, r3
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fee4 	bl	8006cf8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f47f af74 	bne.w	8006e2c <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40010800 	.word	0x40010800
 8006f54:	40010c00 	.word	0x40010c00
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	40011400 	.word	0x40011400
 8006f60:	40011800 	.word	0x40011800
 8006f64:	40011c00 	.word	0x40011c00
 8006f68:	40012000 	.word	0x40012000
 8006f6c:	08008088 	.word	0x08008088

08006f70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f74:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <LL_RCC_GetSysClkSource+0x14>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 030c 	and.w	r3, r3, #12
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr
 8006f84:	40021000 	.word	0x40021000

08006f88 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f8c:	4b03      	ldr	r3, [pc, #12]	@ (8006f9c <LL_RCC_GetAHBPrescaler+0x14>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	40021000 	.word	0x40021000

08006fa0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006fa4:	4b03      	ldr	r3, [pc, #12]	@ (8006fb4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr
 8006fb4:	40021000 	.word	0x40021000

08006fb8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006fbc:	4b03      	ldr	r3, [pc, #12]	@ (8006fcc <LL_RCC_GetAPB2Prescaler+0x14>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <LL_RCC_PLL_GetMainSource+0x14>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	40021000 	.word	0x40021000

08006fe8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8006fec:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <LL_RCC_PLL_GetMultiplicator+0x14>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	40021000 	.word	0x40021000

08007000 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8007004:	4b04      	ldr	r3, [pc, #16]	@ (8007018 <LL_RCC_PLL_GetPrediv+0x18>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	0c5b      	lsrs	r3, r3, #17
 800700a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40021000 	.word	0x40021000

0800701c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007024:	f000 f820 	bl	8007068 <RCC_GetSystemClockFreq>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f83e 	bl	80070b4 <RCC_GetHCLKClockFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f84c 	bl	80070e0 <RCC_GetPCLK1ClockFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f858 	bl	8007108 <RCC_GetPCLK2ClockFreq>
 8007058:	4602      	mov	r2, r0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007072:	f7ff ff7d 	bl	8006f70 <LL_RCC_GetSysClkSource>
 8007076:	4603      	mov	r3, r0
 8007078:	2b08      	cmp	r3, #8
 800707a:	d00c      	beq.n	8007096 <RCC_GetSystemClockFreq+0x2e>
 800707c:	2b08      	cmp	r3, #8
 800707e:	d80e      	bhi.n	800709e <RCC_GetSystemClockFreq+0x36>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <RCC_GetSystemClockFreq+0x22>
 8007084:	2b04      	cmp	r3, #4
 8007086:	d003      	beq.n	8007090 <RCC_GetSystemClockFreq+0x28>
 8007088:	e009      	b.n	800709e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800708a:	4b09      	ldr	r3, [pc, #36]	@ (80070b0 <RCC_GetSystemClockFreq+0x48>)
 800708c:	607b      	str	r3, [r7, #4]
      break;
 800708e:	e009      	b.n	80070a4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <RCC_GetSystemClockFreq+0x48>)
 8007092:	607b      	str	r3, [r7, #4]
      break;
 8007094:	e006      	b.n	80070a4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8007096:	f000 f84b 	bl	8007130 <RCC_PLL_GetFreqDomain_SYS>
 800709a:	6078      	str	r0, [r7, #4]
      break;
 800709c:	e002      	b.n	80070a4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800709e:	4b04      	ldr	r3, [pc, #16]	@ (80070b0 <RCC_GetSystemClockFreq+0x48>)
 80070a0:	607b      	str	r3, [r7, #4]
      break;
 80070a2:	bf00      	nop
  }

  return frequency;
 80070a4:	687b      	ldr	r3, [r7, #4]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	007a1200 	.word	0x007a1200

080070b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80070bc:	f7ff ff64 	bl	8006f88 <LL_RCC_GetAHBPrescaler>
 80070c0:	4603      	mov	r3, r0
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <RCC_GetHCLKClockFreq+0x28>)
 80070ca:	5cd3      	ldrb	r3, [r2, r3]
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	40d3      	lsrs	r3, r2
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	080080fc 	.word	0x080080fc

080070e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80070e8:	f7ff ff5a 	bl	8006fa0 <LL_RCC_GetAPB1Prescaler>
 80070ec:	4603      	mov	r3, r0
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	4a04      	ldr	r2, [pc, #16]	@ (8007104 <RCC_GetPCLK1ClockFreq+0x24>)
 80070f2:	5cd3      	ldrb	r3, [r2, r3]
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	40d3      	lsrs	r3, r2
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	0800810c 	.word	0x0800810c

08007108 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007110:	f7ff ff52 	bl	8006fb8 <LL_RCC_GetAPB2Prescaler>
 8007114:	4603      	mov	r3, r0
 8007116:	0adb      	lsrs	r3, r3, #11
 8007118:	4a04      	ldr	r2, [pc, #16]	@ (800712c <RCC_GetPCLK2ClockFreq+0x24>)
 800711a:	5cd3      	ldrb	r3, [r2, r3]
 800711c:	461a      	mov	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	40d3      	lsrs	r3, r2
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	0800810c 	.word	0x0800810c

08007130 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	2300      	movs	r3, #0
 800713c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800713e:	f7ff ff47 	bl	8006fd0 <LL_RCC_PLL_GetMainSource>
 8007142:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007150:	d003      	beq.n	800715a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007152:	e00b      	b.n	800716c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8007154:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8007156:	607b      	str	r3, [r7, #4]
      break;
 8007158:	e00b      	b.n	8007172 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800715a:	f7ff ff51 	bl	8007000 <LL_RCC_PLL_GetPrediv>
 800715e:	4603      	mov	r3, r0
 8007160:	3301      	adds	r3, #1
 8007162:	4a0b      	ldr	r2, [pc, #44]	@ (8007190 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	607b      	str	r3, [r7, #4]
      break;
 800716a:	e002      	b.n	8007172 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800716e:	607b      	str	r3, [r7, #4]
      break;
 8007170:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8007172:	f7ff ff39 	bl	8006fe8 <LL_RCC_PLL_GetMultiplicator>
 8007176:	4603      	mov	r3, r0
 8007178:	0c9b      	lsrs	r3, r3, #18
 800717a:	3302      	adds	r3, #2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	003d0900 	.word	0x003d0900
 8007190:	007a1200 	.word	0x007a1200

08007194 <LL_USART_IsEnabled>:
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <LL_USART_SetStopBitsLength>:
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	611a      	str	r2, [r3, #16]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <LL_USART_SetHWFlowCtrl>:
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	615a      	str	r2, [r3, #20]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
	...

08007204 <LL_USART_SetBaudRate>:
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009a      	lsls	r2, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	4a25      	ldr	r2, [pc, #148]	@ (80072bc <LL_USART_SetBaudRate+0xb8>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	b29b      	uxth	r3, r3
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	b299      	uxth	r1, r3
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009a      	lsls	r2, r3, #2
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	fbb2 f2f3 	udiv	r2, r2, r3
 8007246:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <LL_USART_SetBaudRate+0xb8>)
 8007248:	fba3 0302 	umull	r0, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2064      	movs	r0, #100	@ 0x64
 8007250:	fb00 f303 	mul.w	r3, r0, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	3332      	adds	r3, #50	@ 0x32
 800725a:	4a18      	ldr	r2, [pc, #96]	@ (80072bc <LL_USART_SetBaudRate+0xb8>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	b29b      	uxth	r3, r3
 8007264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007268:	b29b      	uxth	r3, r3
 800726a:	440b      	add	r3, r1
 800726c:	b299      	uxth	r1, r3
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007282:	4b0e      	ldr	r3, [pc, #56]	@ (80072bc <LL_USART_SetBaudRate+0xb8>)
 8007284:	fba3 0302 	umull	r0, r3, r3, r2
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	2064      	movs	r0, #100	@ 0x64
 800728c:	fb00 f303 	mul.w	r3, r0, r3
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	3332      	adds	r3, #50	@ 0x32
 8007296:	4a09      	ldr	r2, [pc, #36]	@ (80072bc <LL_USART_SetBaudRate+0xb8>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	440b      	add	r3, r1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	51eb851f 	.word	0x51eb851f

080072c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a74      	ldr	r2, [pc, #464]	@ (80074a8 <LL_USART_Init+0x1e8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <LL_USART_Init+0x42>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a73      	ldr	r2, [pc, #460]	@ (80074ac <LL_USART_Init+0x1ec>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00f      	beq.n	8007302 <LL_USART_Init+0x42>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a72      	ldr	r2, [pc, #456]	@ (80074b0 <LL_USART_Init+0x1f0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00b      	beq.n	8007302 <LL_USART_Init+0x42>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a71      	ldr	r2, [pc, #452]	@ (80074b4 <LL_USART_Init+0x1f4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <LL_USART_Init+0x42>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a70      	ldr	r2, [pc, #448]	@ (80074b8 <LL_USART_Init+0x1f8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <LL_USART_Init+0x42>
 80072fa:	21cd      	movs	r1, #205	@ 0xcd
 80072fc:	486f      	ldr	r0, [pc, #444]	@ (80074bc <LL_USART_Init+0x1fc>)
 80072fe:	f7fb faad 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a6e      	ldr	r2, [pc, #440]	@ (80074c0 <LL_USART_Init+0x200>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d903      	bls.n	8007314 <LL_USART_Init+0x54>
 800730c:	21ce      	movs	r1, #206	@ 0xce
 800730e:	486b      	ldr	r0, [pc, #428]	@ (80074bc <LL_USART_Init+0x1fc>)
 8007310:	f7fb faa4 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <LL_USART_Init+0x6e>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007324:	d003      	beq.n	800732e <LL_USART_Init+0x6e>
 8007326:	21cf      	movs	r1, #207	@ 0xcf
 8007328:	4864      	ldr	r0, [pc, #400]	@ (80074bc <LL_USART_Init+0x1fc>)
 800732a:	f7fb fa97 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007336:	d011      	beq.n	800735c <LL_USART_Init+0x9c>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <LL_USART_Init+0x9c>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007348:	d008      	beq.n	800735c <LL_USART_Init+0x9c>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007352:	d003      	beq.n	800735c <LL_USART_Init+0x9c>
 8007354:	21d0      	movs	r1, #208	@ 0xd0
 8007356:	4859      	ldr	r0, [pc, #356]	@ (80074bc <LL_USART_Init+0x1fc>)
 8007358:	f7fb fa80 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <LL_USART_Init+0xc0>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800736c:	d008      	beq.n	8007380 <LL_USART_Init+0xc0>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007376:	d003      	beq.n	8007380 <LL_USART_Init+0xc0>
 8007378:	21d1      	movs	r1, #209	@ 0xd1
 800737a:	4850      	ldr	r0, [pc, #320]	@ (80074bc <LL_USART_Init+0x1fc>)
 800737c:	f7fb fa6e 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00f      	beq.n	80073a8 <LL_USART_Init+0xe8>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d00b      	beq.n	80073a8 <LL_USART_Init+0xe8>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d007      	beq.n	80073a8 <LL_USART_Init+0xe8>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d003      	beq.n	80073a8 <LL_USART_Init+0xe8>
 80073a0:	21d2      	movs	r1, #210	@ 0xd2
 80073a2:	4846      	ldr	r0, [pc, #280]	@ (80074bc <LL_USART_Init+0x1fc>)
 80073a4:	f7fb fa5a 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <LL_USART_Init+0x116>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b8:	d00d      	beq.n	80073d6 <LL_USART_Init+0x116>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c2:	d008      	beq.n	80073d6 <LL_USART_Init+0x116>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073cc:	d003      	beq.n	80073d6 <LL_USART_Init+0x116>
 80073ce:	21d3      	movs	r1, #211	@ 0xd3
 80073d0:	483a      	ldr	r0, [pc, #232]	@ (80074bc <LL_USART_Init+0x1fc>)
 80073d2:	f7fb fa43 	bl	800285c <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fedc 	bl	8007194 <LL_USART_IsEnabled>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d15c      	bne.n	800749c <LL_USART_Init+0x1dc>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80073ea:	f023 030c 	bic.w	r3, r3, #12
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	6851      	ldr	r1, [r2, #4]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	68d2      	ldr	r2, [r2, #12]
 80073f6:	4311      	orrs	r1, r2
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	6912      	ldr	r2, [r2, #16]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff fed5 	bl	80071ba <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fee1 	bl	80071de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fdfb 	bl	800701c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1f      	ldr	r2, [pc, #124]	@ (80074a8 <LL_USART_Init+0x1e8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d102      	bne.n	8007434 <LL_USART_Init+0x174>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e01a      	b.n	800746a <LL_USART_Init+0x1aa>
    }
    else if (USARTx == USART2)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <LL_USART_Init+0x1ec>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d102      	bne.n	8007442 <LL_USART_Init+0x182>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e013      	b.n	800746a <LL_USART_Init+0x1aa>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <LL_USART_Init+0x1f0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d102      	bne.n	8007450 <LL_USART_Init+0x190>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e00c      	b.n	800746a <LL_USART_Init+0x1aa>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a18      	ldr	r2, [pc, #96]	@ (80074b4 <LL_USART_Init+0x1f4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d102      	bne.n	800745e <LL_USART_Init+0x19e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e005      	b.n	800746a <LL_USART_Init+0x1aa>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a15      	ldr	r2, [pc, #84]	@ (80074b8 <LL_USART_Init+0x1f8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d101      	bne.n	800746a <LL_USART_Init+0x1aa>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d015      	beq.n	800749c <LL_USART_Init+0x1dc>
        && (USART_InitStruct->BaudRate != 0U))
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d011      	beq.n	800749c <LL_USART_Init+0x1dc>
    {
      status = SUCCESS;
 8007478:	2300      	movs	r3, #0
 800747a:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007480:	461a      	mov	r2, r3
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff febd 	bl	8007204 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d804      	bhi.n	800749c <LL_USART_Init+0x1dc>
 8007492:	f240 1135 	movw	r1, #309	@ 0x135
 8007496:	4809      	ldr	r0, [pc, #36]	@ (80074bc <LL_USART_Init+0x1fc>)
 8007498:	f7fb f9e0 	bl	800285c <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800749c:	7ffb      	ldrb	r3, [r7, #31]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40013800 	.word	0x40013800
 80074ac:	40004400 	.word	0x40004400
 80074b0:	40004800 	.word	0x40004800
 80074b4:	40004c00 	.word	0x40004c00
 80074b8:	40005000 	.word	0x40005000
 80074bc:	080080c0 	.word	0x080080c0
 80074c0:	0044aa20 	.word	0x0044aa20

080074c4 <atoi>:
 80074c4:	220a      	movs	r2, #10
 80074c6:	2100      	movs	r1, #0
 80074c8:	f000 b87a 	b.w	80075c0 <strtol>

080074cc <_strtol_l.constprop.0>:
 80074cc:	2b24      	cmp	r3, #36	@ 0x24
 80074ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d2:	4686      	mov	lr, r0
 80074d4:	4690      	mov	r8, r2
 80074d6:	d801      	bhi.n	80074dc <_strtol_l.constprop.0+0x10>
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d106      	bne.n	80074ea <_strtol_l.constprop.0+0x1e>
 80074dc:	f000 f8a2 	bl	8007624 <__errno>
 80074e0:	2316      	movs	r3, #22
 80074e2:	6003      	str	r3, [r0, #0]
 80074e4:	2000      	movs	r0, #0
 80074e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ea:	460d      	mov	r5, r1
 80074ec:	4833      	ldr	r0, [pc, #204]	@ (80075bc <_strtol_l.constprop.0+0xf0>)
 80074ee:	462a      	mov	r2, r5
 80074f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074f4:	5d06      	ldrb	r6, [r0, r4]
 80074f6:	f016 0608 	ands.w	r6, r6, #8
 80074fa:	d1f8      	bne.n	80074ee <_strtol_l.constprop.0+0x22>
 80074fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80074fe:	d12d      	bne.n	800755c <_strtol_l.constprop.0+0x90>
 8007500:	2601      	movs	r6, #1
 8007502:	782c      	ldrb	r4, [r5, #0]
 8007504:	1c95      	adds	r5, r2, #2
 8007506:	f033 0210 	bics.w	r2, r3, #16
 800750a:	d109      	bne.n	8007520 <_strtol_l.constprop.0+0x54>
 800750c:	2c30      	cmp	r4, #48	@ 0x30
 800750e:	d12a      	bne.n	8007566 <_strtol_l.constprop.0+0x9a>
 8007510:	782a      	ldrb	r2, [r5, #0]
 8007512:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007516:	2a58      	cmp	r2, #88	@ 0x58
 8007518:	d125      	bne.n	8007566 <_strtol_l.constprop.0+0x9a>
 800751a:	2310      	movs	r3, #16
 800751c:	786c      	ldrb	r4, [r5, #1]
 800751e:	3502      	adds	r5, #2
 8007520:	2200      	movs	r2, #0
 8007522:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007526:	f10c 3cff 	add.w	ip, ip, #4294967295
 800752a:	fbbc f9f3 	udiv	r9, ip, r3
 800752e:	4610      	mov	r0, r2
 8007530:	fb03 ca19 	mls	sl, r3, r9, ip
 8007534:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007538:	2f09      	cmp	r7, #9
 800753a:	d81b      	bhi.n	8007574 <_strtol_l.constprop.0+0xa8>
 800753c:	463c      	mov	r4, r7
 800753e:	42a3      	cmp	r3, r4
 8007540:	dd27      	ble.n	8007592 <_strtol_l.constprop.0+0xc6>
 8007542:	1c57      	adds	r7, r2, #1
 8007544:	d007      	beq.n	8007556 <_strtol_l.constprop.0+0x8a>
 8007546:	4581      	cmp	r9, r0
 8007548:	d320      	bcc.n	800758c <_strtol_l.constprop.0+0xc0>
 800754a:	d101      	bne.n	8007550 <_strtol_l.constprop.0+0x84>
 800754c:	45a2      	cmp	sl, r4
 800754e:	db1d      	blt.n	800758c <_strtol_l.constprop.0+0xc0>
 8007550:	2201      	movs	r2, #1
 8007552:	fb00 4003 	mla	r0, r0, r3, r4
 8007556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755a:	e7eb      	b.n	8007534 <_strtol_l.constprop.0+0x68>
 800755c:	2c2b      	cmp	r4, #43	@ 0x2b
 800755e:	bf04      	itt	eq
 8007560:	782c      	ldrbeq	r4, [r5, #0]
 8007562:	1c95      	addeq	r5, r2, #2
 8007564:	e7cf      	b.n	8007506 <_strtol_l.constprop.0+0x3a>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1da      	bne.n	8007520 <_strtol_l.constprop.0+0x54>
 800756a:	2c30      	cmp	r4, #48	@ 0x30
 800756c:	bf0c      	ite	eq
 800756e:	2308      	moveq	r3, #8
 8007570:	230a      	movne	r3, #10
 8007572:	e7d5      	b.n	8007520 <_strtol_l.constprop.0+0x54>
 8007574:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007578:	2f19      	cmp	r7, #25
 800757a:	d801      	bhi.n	8007580 <_strtol_l.constprop.0+0xb4>
 800757c:	3c37      	subs	r4, #55	@ 0x37
 800757e:	e7de      	b.n	800753e <_strtol_l.constprop.0+0x72>
 8007580:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007584:	2f19      	cmp	r7, #25
 8007586:	d804      	bhi.n	8007592 <_strtol_l.constprop.0+0xc6>
 8007588:	3c57      	subs	r4, #87	@ 0x57
 800758a:	e7d8      	b.n	800753e <_strtol_l.constprop.0+0x72>
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	e7e1      	b.n	8007556 <_strtol_l.constprop.0+0x8a>
 8007592:	1c53      	adds	r3, r2, #1
 8007594:	d108      	bne.n	80075a8 <_strtol_l.constprop.0+0xdc>
 8007596:	2322      	movs	r3, #34	@ 0x22
 8007598:	4660      	mov	r0, ip
 800759a:	f8ce 3000 	str.w	r3, [lr]
 800759e:	f1b8 0f00 	cmp.w	r8, #0
 80075a2:	d0a0      	beq.n	80074e6 <_strtol_l.constprop.0+0x1a>
 80075a4:	1e69      	subs	r1, r5, #1
 80075a6:	e006      	b.n	80075b6 <_strtol_l.constprop.0+0xea>
 80075a8:	b106      	cbz	r6, 80075ac <_strtol_l.constprop.0+0xe0>
 80075aa:	4240      	negs	r0, r0
 80075ac:	f1b8 0f00 	cmp.w	r8, #0
 80075b0:	d099      	beq.n	80074e6 <_strtol_l.constprop.0+0x1a>
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	d1f6      	bne.n	80075a4 <_strtol_l.constprop.0+0xd8>
 80075b6:	f8c8 1000 	str.w	r1, [r8]
 80075ba:	e794      	b.n	80074e6 <_strtol_l.constprop.0+0x1a>
 80075bc:	08008127 	.word	0x08008127

080075c0 <strtol>:
 80075c0:	4613      	mov	r3, r2
 80075c2:	460a      	mov	r2, r1
 80075c4:	4601      	mov	r1, r0
 80075c6:	4802      	ldr	r0, [pc, #8]	@ (80075d0 <strtol+0x10>)
 80075c8:	6800      	ldr	r0, [r0, #0]
 80075ca:	f7ff bf7f 	b.w	80074cc <_strtol_l.constprop.0>
 80075ce:	bf00      	nop
 80075d0:	2000002c 	.word	0x2000002c

080075d4 <siprintf>:
 80075d4:	b40e      	push	{r1, r2, r3}
 80075d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075da:	b500      	push	{lr}
 80075dc:	b09c      	sub	sp, #112	@ 0x70
 80075de:	ab1d      	add	r3, sp, #116	@ 0x74
 80075e0:	9002      	str	r0, [sp, #8]
 80075e2:	9006      	str	r0, [sp, #24]
 80075e4:	9107      	str	r1, [sp, #28]
 80075e6:	9104      	str	r1, [sp, #16]
 80075e8:	4808      	ldr	r0, [pc, #32]	@ (800760c <siprintf+0x38>)
 80075ea:	4909      	ldr	r1, [pc, #36]	@ (8007610 <siprintf+0x3c>)
 80075ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f0:	9105      	str	r1, [sp, #20]
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	a902      	add	r1, sp, #8
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	f000 f992 	bl	8007920 <_svfiprintf_r>
 80075fc:	2200      	movs	r2, #0
 80075fe:	9b02      	ldr	r3, [sp, #8]
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	b01c      	add	sp, #112	@ 0x70
 8007604:	f85d eb04 	ldr.w	lr, [sp], #4
 8007608:	b003      	add	sp, #12
 800760a:	4770      	bx	lr
 800760c:	2000002c 	.word	0x2000002c
 8007610:	ffff0208 	.word	0xffff0208

08007614 <memset>:
 8007614:	4603      	mov	r3, r0
 8007616:	4402      	add	r2, r0
 8007618:	4293      	cmp	r3, r2
 800761a:	d100      	bne.n	800761e <memset+0xa>
 800761c:	4770      	bx	lr
 800761e:	f803 1b01 	strb.w	r1, [r3], #1
 8007622:	e7f9      	b.n	8007618 <memset+0x4>

08007624 <__errno>:
 8007624:	4b01      	ldr	r3, [pc, #4]	@ (800762c <__errno+0x8>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	2000002c 	.word	0x2000002c

08007630 <__libc_init_array>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	2600      	movs	r6, #0
 8007634:	4d0c      	ldr	r5, [pc, #48]	@ (8007668 <__libc_init_array+0x38>)
 8007636:	4c0d      	ldr	r4, [pc, #52]	@ (800766c <__libc_init_array+0x3c>)
 8007638:	1b64      	subs	r4, r4, r5
 800763a:	10a4      	asrs	r4, r4, #2
 800763c:	42a6      	cmp	r6, r4
 800763e:	d109      	bne.n	8007654 <__libc_init_array+0x24>
 8007640:	f000 fc78 	bl	8007f34 <_init>
 8007644:	2600      	movs	r6, #0
 8007646:	4d0a      	ldr	r5, [pc, #40]	@ (8007670 <__libc_init_array+0x40>)
 8007648:	4c0a      	ldr	r4, [pc, #40]	@ (8007674 <__libc_init_array+0x44>)
 800764a:	1b64      	subs	r4, r4, r5
 800764c:	10a4      	asrs	r4, r4, #2
 800764e:	42a6      	cmp	r6, r4
 8007650:	d105      	bne.n	800765e <__libc_init_array+0x2e>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f855 3b04 	ldr.w	r3, [r5], #4
 8007658:	4798      	blx	r3
 800765a:	3601      	adds	r6, #1
 800765c:	e7ee      	b.n	800763c <__libc_init_array+0xc>
 800765e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007662:	4798      	blx	r3
 8007664:	3601      	adds	r6, #1
 8007666:	e7f2      	b.n	800764e <__libc_init_array+0x1e>
 8007668:	08008264 	.word	0x08008264
 800766c:	08008264 	.word	0x08008264
 8007670:	08008264 	.word	0x08008264
 8007674:	08008268 	.word	0x08008268

08007678 <__retarget_lock_acquire_recursive>:
 8007678:	4770      	bx	lr

0800767a <__retarget_lock_release_recursive>:
 800767a:	4770      	bx	lr

0800767c <_free_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4605      	mov	r5, r0
 8007680:	2900      	cmp	r1, #0
 8007682:	d040      	beq.n	8007706 <_free_r+0x8a>
 8007684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007688:	1f0c      	subs	r4, r1, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfb8      	it	lt
 800768e:	18e4      	addlt	r4, r4, r3
 8007690:	f000 f8de 	bl	8007850 <__malloc_lock>
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <_free_r+0x8c>)
 8007696:	6813      	ldr	r3, [r2, #0]
 8007698:	b933      	cbnz	r3, 80076a8 <_free_r+0x2c>
 800769a:	6063      	str	r3, [r4, #4]
 800769c:	6014      	str	r4, [r2, #0]
 800769e:	4628      	mov	r0, r5
 80076a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a4:	f000 b8da 	b.w	800785c <__malloc_unlock>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d908      	bls.n	80076be <_free_r+0x42>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	1821      	adds	r1, r4, r0
 80076b0:	428b      	cmp	r3, r1
 80076b2:	bf01      	itttt	eq
 80076b4:	6819      	ldreq	r1, [r3, #0]
 80076b6:	685b      	ldreq	r3, [r3, #4]
 80076b8:	1809      	addeq	r1, r1, r0
 80076ba:	6021      	streq	r1, [r4, #0]
 80076bc:	e7ed      	b.n	800769a <_free_r+0x1e>
 80076be:	461a      	mov	r2, r3
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	b10b      	cbz	r3, 80076c8 <_free_r+0x4c>
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d9fa      	bls.n	80076be <_free_r+0x42>
 80076c8:	6811      	ldr	r1, [r2, #0]
 80076ca:	1850      	adds	r0, r2, r1
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d10b      	bne.n	80076e8 <_free_r+0x6c>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	4401      	add	r1, r0
 80076d4:	1850      	adds	r0, r2, r1
 80076d6:	4283      	cmp	r3, r0
 80076d8:	6011      	str	r1, [r2, #0]
 80076da:	d1e0      	bne.n	800769e <_free_r+0x22>
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4408      	add	r0, r1
 80076e2:	6010      	str	r0, [r2, #0]
 80076e4:	6053      	str	r3, [r2, #4]
 80076e6:	e7da      	b.n	800769e <_free_r+0x22>
 80076e8:	d902      	bls.n	80076f0 <_free_r+0x74>
 80076ea:	230c      	movs	r3, #12
 80076ec:	602b      	str	r3, [r5, #0]
 80076ee:	e7d6      	b.n	800769e <_free_r+0x22>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	1821      	adds	r1, r4, r0
 80076f4:	428b      	cmp	r3, r1
 80076f6:	bf01      	itttt	eq
 80076f8:	6819      	ldreq	r1, [r3, #0]
 80076fa:	685b      	ldreq	r3, [r3, #4]
 80076fc:	1809      	addeq	r1, r1, r0
 80076fe:	6021      	streq	r1, [r4, #0]
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6054      	str	r4, [r2, #4]
 8007704:	e7cb      	b.n	800769e <_free_r+0x22>
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	20000544 	.word	0x20000544

0800770c <sbrk_aligned>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4e0f      	ldr	r6, [pc, #60]	@ (800774c <sbrk_aligned+0x40>)
 8007710:	460c      	mov	r4, r1
 8007712:	6831      	ldr	r1, [r6, #0]
 8007714:	4605      	mov	r5, r0
 8007716:	b911      	cbnz	r1, 800771e <sbrk_aligned+0x12>
 8007718:	f000 fbaa 	bl	8007e70 <_sbrk_r>
 800771c:	6030      	str	r0, [r6, #0]
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f000 fba5 	bl	8007e70 <_sbrk_r>
 8007726:	1c43      	adds	r3, r0, #1
 8007728:	d103      	bne.n	8007732 <sbrk_aligned+0x26>
 800772a:	f04f 34ff 	mov.w	r4, #4294967295
 800772e:	4620      	mov	r0, r4
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	1cc4      	adds	r4, r0, #3
 8007734:	f024 0403 	bic.w	r4, r4, #3
 8007738:	42a0      	cmp	r0, r4
 800773a:	d0f8      	beq.n	800772e <sbrk_aligned+0x22>
 800773c:	1a21      	subs	r1, r4, r0
 800773e:	4628      	mov	r0, r5
 8007740:	f000 fb96 	bl	8007e70 <_sbrk_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1f2      	bne.n	800772e <sbrk_aligned+0x22>
 8007748:	e7ef      	b.n	800772a <sbrk_aligned+0x1e>
 800774a:	bf00      	nop
 800774c:	20000540 	.word	0x20000540

08007750 <_malloc_r>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	1ccd      	adds	r5, r1, #3
 8007756:	f025 0503 	bic.w	r5, r5, #3
 800775a:	3508      	adds	r5, #8
 800775c:	2d0c      	cmp	r5, #12
 800775e:	bf38      	it	cc
 8007760:	250c      	movcc	r5, #12
 8007762:	2d00      	cmp	r5, #0
 8007764:	4606      	mov	r6, r0
 8007766:	db01      	blt.n	800776c <_malloc_r+0x1c>
 8007768:	42a9      	cmp	r1, r5
 800776a:	d904      	bls.n	8007776 <_malloc_r+0x26>
 800776c:	230c      	movs	r3, #12
 800776e:	6033      	str	r3, [r6, #0]
 8007770:	2000      	movs	r0, #0
 8007772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800784c <_malloc_r+0xfc>
 800777a:	f000 f869 	bl	8007850 <__malloc_lock>
 800777e:	f8d8 3000 	ldr.w	r3, [r8]
 8007782:	461c      	mov	r4, r3
 8007784:	bb44      	cbnz	r4, 80077d8 <_malloc_r+0x88>
 8007786:	4629      	mov	r1, r5
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff ffbf 	bl	800770c <sbrk_aligned>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	4604      	mov	r4, r0
 8007792:	d158      	bne.n	8007846 <_malloc_r+0xf6>
 8007794:	f8d8 4000 	ldr.w	r4, [r8]
 8007798:	4627      	mov	r7, r4
 800779a:	2f00      	cmp	r7, #0
 800779c:	d143      	bne.n	8007826 <_malloc_r+0xd6>
 800779e:	2c00      	cmp	r4, #0
 80077a0:	d04b      	beq.n	800783a <_malloc_r+0xea>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	4639      	mov	r1, r7
 80077a6:	4630      	mov	r0, r6
 80077a8:	eb04 0903 	add.w	r9, r4, r3
 80077ac:	f000 fb60 	bl	8007e70 <_sbrk_r>
 80077b0:	4581      	cmp	r9, r0
 80077b2:	d142      	bne.n	800783a <_malloc_r+0xea>
 80077b4:	6821      	ldr	r1, [r4, #0]
 80077b6:	4630      	mov	r0, r6
 80077b8:	1a6d      	subs	r5, r5, r1
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7ff ffa6 	bl	800770c <sbrk_aligned>
 80077c0:	3001      	adds	r0, #1
 80077c2:	d03a      	beq.n	800783a <_malloc_r+0xea>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	442b      	add	r3, r5
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	f8d8 3000 	ldr.w	r3, [r8]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	bb62      	cbnz	r2, 800782c <_malloc_r+0xdc>
 80077d2:	f8c8 7000 	str.w	r7, [r8]
 80077d6:	e00f      	b.n	80077f8 <_malloc_r+0xa8>
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	1b52      	subs	r2, r2, r5
 80077dc:	d420      	bmi.n	8007820 <_malloc_r+0xd0>
 80077de:	2a0b      	cmp	r2, #11
 80077e0:	d917      	bls.n	8007812 <_malloc_r+0xc2>
 80077e2:	1961      	adds	r1, r4, r5
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	6025      	str	r5, [r4, #0]
 80077e8:	bf18      	it	ne
 80077ea:	6059      	strne	r1, [r3, #4]
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	bf08      	it	eq
 80077f0:	f8c8 1000 	streq.w	r1, [r8]
 80077f4:	5162      	str	r2, [r4, r5]
 80077f6:	604b      	str	r3, [r1, #4]
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 f82f 	bl	800785c <__malloc_unlock>
 80077fe:	f104 000b 	add.w	r0, r4, #11
 8007802:	1d23      	adds	r3, r4, #4
 8007804:	f020 0007 	bic.w	r0, r0, #7
 8007808:	1ac2      	subs	r2, r0, r3
 800780a:	bf1c      	itt	ne
 800780c:	1a1b      	subne	r3, r3, r0
 800780e:	50a3      	strne	r3, [r4, r2]
 8007810:	e7af      	b.n	8007772 <_malloc_r+0x22>
 8007812:	6862      	ldr	r2, [r4, #4]
 8007814:	42a3      	cmp	r3, r4
 8007816:	bf0c      	ite	eq
 8007818:	f8c8 2000 	streq.w	r2, [r8]
 800781c:	605a      	strne	r2, [r3, #4]
 800781e:	e7eb      	b.n	80077f8 <_malloc_r+0xa8>
 8007820:	4623      	mov	r3, r4
 8007822:	6864      	ldr	r4, [r4, #4]
 8007824:	e7ae      	b.n	8007784 <_malloc_r+0x34>
 8007826:	463c      	mov	r4, r7
 8007828:	687f      	ldr	r7, [r7, #4]
 800782a:	e7b6      	b.n	800779a <_malloc_r+0x4a>
 800782c:	461a      	mov	r2, r3
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	42a3      	cmp	r3, r4
 8007832:	d1fb      	bne.n	800782c <_malloc_r+0xdc>
 8007834:	2300      	movs	r3, #0
 8007836:	6053      	str	r3, [r2, #4]
 8007838:	e7de      	b.n	80077f8 <_malloc_r+0xa8>
 800783a:	230c      	movs	r3, #12
 800783c:	4630      	mov	r0, r6
 800783e:	6033      	str	r3, [r6, #0]
 8007840:	f000 f80c 	bl	800785c <__malloc_unlock>
 8007844:	e794      	b.n	8007770 <_malloc_r+0x20>
 8007846:	6005      	str	r5, [r0, #0]
 8007848:	e7d6      	b.n	80077f8 <_malloc_r+0xa8>
 800784a:	bf00      	nop
 800784c:	20000544 	.word	0x20000544

08007850 <__malloc_lock>:
 8007850:	4801      	ldr	r0, [pc, #4]	@ (8007858 <__malloc_lock+0x8>)
 8007852:	f7ff bf11 	b.w	8007678 <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	2000053c 	.word	0x2000053c

0800785c <__malloc_unlock>:
 800785c:	4801      	ldr	r0, [pc, #4]	@ (8007864 <__malloc_unlock+0x8>)
 800785e:	f7ff bf0c 	b.w	800767a <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	2000053c 	.word	0x2000053c

08007868 <__ssputs_r>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	461f      	mov	r7, r3
 800786e:	688e      	ldr	r6, [r1, #8]
 8007870:	4682      	mov	sl, r0
 8007872:	42be      	cmp	r6, r7
 8007874:	460c      	mov	r4, r1
 8007876:	4690      	mov	r8, r2
 8007878:	680b      	ldr	r3, [r1, #0]
 800787a:	d82d      	bhi.n	80078d8 <__ssputs_r+0x70>
 800787c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007884:	d026      	beq.n	80078d4 <__ssputs_r+0x6c>
 8007886:	6965      	ldr	r5, [r4, #20]
 8007888:	6909      	ldr	r1, [r1, #16]
 800788a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800788e:	eba3 0901 	sub.w	r9, r3, r1
 8007892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007896:	1c7b      	adds	r3, r7, #1
 8007898:	444b      	add	r3, r9
 800789a:	106d      	asrs	r5, r5, #1
 800789c:	429d      	cmp	r5, r3
 800789e:	bf38      	it	cc
 80078a0:	461d      	movcc	r5, r3
 80078a2:	0553      	lsls	r3, r2, #21
 80078a4:	d527      	bpl.n	80078f6 <__ssputs_r+0x8e>
 80078a6:	4629      	mov	r1, r5
 80078a8:	f7ff ff52 	bl	8007750 <_malloc_r>
 80078ac:	4606      	mov	r6, r0
 80078ae:	b360      	cbz	r0, 800790a <__ssputs_r+0xa2>
 80078b0:	464a      	mov	r2, r9
 80078b2:	6921      	ldr	r1, [r4, #16]
 80078b4:	f000 fafa 	bl	8007eac <memcpy>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	6126      	str	r6, [r4, #16]
 80078c6:	444e      	add	r6, r9
 80078c8:	6026      	str	r6, [r4, #0]
 80078ca:	463e      	mov	r6, r7
 80078cc:	6165      	str	r5, [r4, #20]
 80078ce:	eba5 0509 	sub.w	r5, r5, r9
 80078d2:	60a5      	str	r5, [r4, #8]
 80078d4:	42be      	cmp	r6, r7
 80078d6:	d900      	bls.n	80078da <__ssputs_r+0x72>
 80078d8:	463e      	mov	r6, r7
 80078da:	4632      	mov	r2, r6
 80078dc:	4641      	mov	r1, r8
 80078de:	6820      	ldr	r0, [r4, #0]
 80078e0:	f000 faac 	bl	8007e3c <memmove>
 80078e4:	2000      	movs	r0, #0
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	1b9b      	subs	r3, r3, r6
 80078ea:	60a3      	str	r3, [r4, #8]
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	4433      	add	r3, r6
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f6:	462a      	mov	r2, r5
 80078f8:	f000 fae6 	bl	8007ec8 <_realloc_r>
 80078fc:	4606      	mov	r6, r0
 80078fe:	2800      	cmp	r0, #0
 8007900:	d1e0      	bne.n	80078c4 <__ssputs_r+0x5c>
 8007902:	4650      	mov	r0, sl
 8007904:	6921      	ldr	r1, [r4, #16]
 8007906:	f7ff feb9 	bl	800767c <_free_r>
 800790a:	230c      	movs	r3, #12
 800790c:	f8ca 3000 	str.w	r3, [sl]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	e7e9      	b.n	80078f2 <__ssputs_r+0x8a>
	...

08007920 <_svfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	4698      	mov	r8, r3
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	4607      	mov	r7, r0
 800792a:	061b      	lsls	r3, r3, #24
 800792c:	460d      	mov	r5, r1
 800792e:	4614      	mov	r4, r2
 8007930:	b09d      	sub	sp, #116	@ 0x74
 8007932:	d510      	bpl.n	8007956 <_svfiprintf_r+0x36>
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	b973      	cbnz	r3, 8007956 <_svfiprintf_r+0x36>
 8007938:	2140      	movs	r1, #64	@ 0x40
 800793a:	f7ff ff09 	bl	8007750 <_malloc_r>
 800793e:	6028      	str	r0, [r5, #0]
 8007940:	6128      	str	r0, [r5, #16]
 8007942:	b930      	cbnz	r0, 8007952 <_svfiprintf_r+0x32>
 8007944:	230c      	movs	r3, #12
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	b01d      	add	sp, #116	@ 0x74
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007952:	2340      	movs	r3, #64	@ 0x40
 8007954:	616b      	str	r3, [r5, #20]
 8007956:	2300      	movs	r3, #0
 8007958:	9309      	str	r3, [sp, #36]	@ 0x24
 800795a:	2320      	movs	r3, #32
 800795c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007960:	2330      	movs	r3, #48	@ 0x30
 8007962:	f04f 0901 	mov.w	r9, #1
 8007966:	f8cd 800c 	str.w	r8, [sp, #12]
 800796a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007b04 <_svfiprintf_r+0x1e4>
 800796e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007972:	4623      	mov	r3, r4
 8007974:	469a      	mov	sl, r3
 8007976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800797a:	b10a      	cbz	r2, 8007980 <_svfiprintf_r+0x60>
 800797c:	2a25      	cmp	r2, #37	@ 0x25
 800797e:	d1f9      	bne.n	8007974 <_svfiprintf_r+0x54>
 8007980:	ebba 0b04 	subs.w	fp, sl, r4
 8007984:	d00b      	beq.n	800799e <_svfiprintf_r+0x7e>
 8007986:	465b      	mov	r3, fp
 8007988:	4622      	mov	r2, r4
 800798a:	4629      	mov	r1, r5
 800798c:	4638      	mov	r0, r7
 800798e:	f7ff ff6b 	bl	8007868 <__ssputs_r>
 8007992:	3001      	adds	r0, #1
 8007994:	f000 80a7 	beq.w	8007ae6 <_svfiprintf_r+0x1c6>
 8007998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800799a:	445a      	add	r2, fp
 800799c:	9209      	str	r2, [sp, #36]	@ 0x24
 800799e:	f89a 3000 	ldrb.w	r3, [sl]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 809f 	beq.w	8007ae6 <_svfiprintf_r+0x1c6>
 80079a8:	2300      	movs	r3, #0
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b2:	f10a 0a01 	add.w	sl, sl, #1
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	9307      	str	r3, [sp, #28]
 80079ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079be:	931a      	str	r3, [sp, #104]	@ 0x68
 80079c0:	4654      	mov	r4, sl
 80079c2:	2205      	movs	r2, #5
 80079c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c8:	484e      	ldr	r0, [pc, #312]	@ (8007b04 <_svfiprintf_r+0x1e4>)
 80079ca:	f000 fa61 	bl	8007e90 <memchr>
 80079ce:	9a04      	ldr	r2, [sp, #16]
 80079d0:	b9d8      	cbnz	r0, 8007a0a <_svfiprintf_r+0xea>
 80079d2:	06d0      	lsls	r0, r2, #27
 80079d4:	bf44      	itt	mi
 80079d6:	2320      	movmi	r3, #32
 80079d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079dc:	0711      	lsls	r1, r2, #28
 80079de:	bf44      	itt	mi
 80079e0:	232b      	movmi	r3, #43	@ 0x2b
 80079e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079e6:	f89a 3000 	ldrb.w	r3, [sl]
 80079ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ec:	d015      	beq.n	8007a1a <_svfiprintf_r+0xfa>
 80079ee:	4654      	mov	r4, sl
 80079f0:	2000      	movs	r0, #0
 80079f2:	f04f 0c0a 	mov.w	ip, #10
 80079f6:	9a07      	ldr	r2, [sp, #28]
 80079f8:	4621      	mov	r1, r4
 80079fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fe:	3b30      	subs	r3, #48	@ 0x30
 8007a00:	2b09      	cmp	r3, #9
 8007a02:	d94b      	bls.n	8007a9c <_svfiprintf_r+0x17c>
 8007a04:	b1b0      	cbz	r0, 8007a34 <_svfiprintf_r+0x114>
 8007a06:	9207      	str	r2, [sp, #28]
 8007a08:	e014      	b.n	8007a34 <_svfiprintf_r+0x114>
 8007a0a:	eba0 0308 	sub.w	r3, r0, r8
 8007a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a12:	4313      	orrs	r3, r2
 8007a14:	46a2      	mov	sl, r4
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	e7d2      	b.n	80079c0 <_svfiprintf_r+0xa0>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	9103      	str	r1, [sp, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bfbb      	ittet	lt
 8007a26:	425b      	neglt	r3, r3
 8007a28:	f042 0202 	orrlt.w	r2, r2, #2
 8007a2c:	9307      	strge	r3, [sp, #28]
 8007a2e:	9307      	strlt	r3, [sp, #28]
 8007a30:	bfb8      	it	lt
 8007a32:	9204      	strlt	r2, [sp, #16]
 8007a34:	7823      	ldrb	r3, [r4, #0]
 8007a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a38:	d10a      	bne.n	8007a50 <_svfiprintf_r+0x130>
 8007a3a:	7863      	ldrb	r3, [r4, #1]
 8007a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a3e:	d132      	bne.n	8007aa6 <_svfiprintf_r+0x186>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	3402      	adds	r4, #2
 8007a44:	1d1a      	adds	r2, r3, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	9203      	str	r2, [sp, #12]
 8007a4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007b08 <_svfiprintf_r+0x1e8>
 8007a54:	2203      	movs	r2, #3
 8007a56:	4650      	mov	r0, sl
 8007a58:	7821      	ldrb	r1, [r4, #0]
 8007a5a:	f000 fa19 	bl	8007e90 <memchr>
 8007a5e:	b138      	cbz	r0, 8007a70 <_svfiprintf_r+0x150>
 8007a60:	2240      	movs	r2, #64	@ 0x40
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	eba0 000a 	sub.w	r0, r0, sl
 8007a68:	4082      	lsls	r2, r0
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a74:	2206      	movs	r2, #6
 8007a76:	4825      	ldr	r0, [pc, #148]	@ (8007b0c <_svfiprintf_r+0x1ec>)
 8007a78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a7c:	f000 fa08 	bl	8007e90 <memchr>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d036      	beq.n	8007af2 <_svfiprintf_r+0x1d2>
 8007a84:	4b22      	ldr	r3, [pc, #136]	@ (8007b10 <_svfiprintf_r+0x1f0>)
 8007a86:	bb1b      	cbnz	r3, 8007ad0 <_svfiprintf_r+0x1b0>
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	3307      	adds	r3, #7
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	3308      	adds	r3, #8
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a96:	4433      	add	r3, r6
 8007a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a9a:	e76a      	b.n	8007972 <_svfiprintf_r+0x52>
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa4:	e7a8      	b.n	80079f8 <_svfiprintf_r+0xd8>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4619      	mov	r1, r3
 8007aae:	3401      	adds	r4, #1
 8007ab0:	9305      	str	r3, [sp, #20]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab8:	3a30      	subs	r2, #48	@ 0x30
 8007aba:	2a09      	cmp	r2, #9
 8007abc:	d903      	bls.n	8007ac6 <_svfiprintf_r+0x1a6>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0c6      	beq.n	8007a50 <_svfiprintf_r+0x130>
 8007ac2:	9105      	str	r1, [sp, #20]
 8007ac4:	e7c4      	b.n	8007a50 <_svfiprintf_r+0x130>
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2301      	movs	r3, #1
 8007aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ace:	e7f0      	b.n	8007ab2 <_svfiprintf_r+0x192>
 8007ad0:	ab03      	add	r3, sp, #12
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	462a      	mov	r2, r5
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <_svfiprintf_r+0x1f4>)
 8007ada:	a904      	add	r1, sp, #16
 8007adc:	f3af 8000 	nop.w
 8007ae0:	1c42      	adds	r2, r0, #1
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	d1d6      	bne.n	8007a94 <_svfiprintf_r+0x174>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	065b      	lsls	r3, r3, #25
 8007aea:	f53f af2d 	bmi.w	8007948 <_svfiprintf_r+0x28>
 8007aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007af0:	e72c      	b.n	800794c <_svfiprintf_r+0x2c>
 8007af2:	ab03      	add	r3, sp, #12
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	462a      	mov	r2, r5
 8007af8:	4638      	mov	r0, r7
 8007afa:	4b06      	ldr	r3, [pc, #24]	@ (8007b14 <_svfiprintf_r+0x1f4>)
 8007afc:	a904      	add	r1, sp, #16
 8007afe:	f000 f87d 	bl	8007bfc <_printf_i>
 8007b02:	e7ed      	b.n	8007ae0 <_svfiprintf_r+0x1c0>
 8007b04:	08008227 	.word	0x08008227
 8007b08:	0800822d 	.word	0x0800822d
 8007b0c:	08008231 	.word	0x08008231
 8007b10:	00000000 	.word	0x00000000
 8007b14:	08007869 	.word	0x08007869

08007b18 <_printf_common>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	4698      	mov	r8, r3
 8007b20:	688a      	ldr	r2, [r1, #8]
 8007b22:	690b      	ldr	r3, [r1, #16]
 8007b24:	4607      	mov	r7, r0
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bfb8      	it	lt
 8007b2a:	4613      	movlt	r3, r2
 8007b2c:	6033      	str	r3, [r6, #0]
 8007b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b32:	460c      	mov	r4, r1
 8007b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b38:	b10a      	cbz	r2, 8007b3e <_printf_common+0x26>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	0699      	lsls	r1, r3, #26
 8007b42:	bf42      	ittt	mi
 8007b44:	6833      	ldrmi	r3, [r6, #0]
 8007b46:	3302      	addmi	r3, #2
 8007b48:	6033      	strmi	r3, [r6, #0]
 8007b4a:	6825      	ldr	r5, [r4, #0]
 8007b4c:	f015 0506 	ands.w	r5, r5, #6
 8007b50:	d106      	bne.n	8007b60 <_printf_common+0x48>
 8007b52:	f104 0a19 	add.w	sl, r4, #25
 8007b56:	68e3      	ldr	r3, [r4, #12]
 8007b58:	6832      	ldr	r2, [r6, #0]
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dc2b      	bgt.n	8007bb8 <_printf_common+0xa0>
 8007b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	3b00      	subs	r3, #0
 8007b68:	bf18      	it	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	0692      	lsls	r2, r2, #26
 8007b6e:	d430      	bmi.n	8007bd2 <_printf_common+0xba>
 8007b70:	4641      	mov	r1, r8
 8007b72:	4638      	mov	r0, r7
 8007b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b78:	47c8      	blx	r9
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d023      	beq.n	8007bc6 <_printf_common+0xae>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	6922      	ldr	r2, [r4, #16]
 8007b82:	f003 0306 	and.w	r3, r3, #6
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	bf14      	ite	ne
 8007b8a:	2500      	movne	r5, #0
 8007b8c:	6833      	ldreq	r3, [r6, #0]
 8007b8e:	f04f 0600 	mov.w	r6, #0
 8007b92:	bf08      	it	eq
 8007b94:	68e5      	ldreq	r5, [r4, #12]
 8007b96:	f104 041a 	add.w	r4, r4, #26
 8007b9a:	bf08      	it	eq
 8007b9c:	1aed      	subeq	r5, r5, r3
 8007b9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ba2:	bf08      	it	eq
 8007ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bfc4      	itt	gt
 8007bac:	1a9b      	subgt	r3, r3, r2
 8007bae:	18ed      	addgt	r5, r5, r3
 8007bb0:	42b5      	cmp	r5, r6
 8007bb2:	d11a      	bne.n	8007bea <_printf_common+0xd2>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e008      	b.n	8007bca <_printf_common+0xb2>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4652      	mov	r2, sl
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c8      	blx	r9
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d103      	bne.n	8007bce <_printf_common+0xb6>
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bce:	3501      	adds	r5, #1
 8007bd0:	e7c1      	b.n	8007b56 <_printf_common+0x3e>
 8007bd2:	2030      	movs	r0, #48	@ 0x30
 8007bd4:	18e1      	adds	r1, r4, r3
 8007bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007be0:	4422      	add	r2, r4
 8007be2:	3302      	adds	r3, #2
 8007be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007be8:	e7c2      	b.n	8007b70 <_printf_common+0x58>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4622      	mov	r2, r4
 8007bee:	4641      	mov	r1, r8
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	47c8      	blx	r9
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d0e6      	beq.n	8007bc6 <_printf_common+0xae>
 8007bf8:	3601      	adds	r6, #1
 8007bfa:	e7d9      	b.n	8007bb0 <_printf_common+0x98>

08007bfc <_printf_i>:
 8007bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	7e0f      	ldrb	r7, [r1, #24]
 8007c02:	4691      	mov	r9, r2
 8007c04:	2f78      	cmp	r7, #120	@ 0x78
 8007c06:	4680      	mov	r8, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c12:	d807      	bhi.n	8007c24 <_printf_i+0x28>
 8007c14:	2f62      	cmp	r7, #98	@ 0x62
 8007c16:	d80a      	bhi.n	8007c2e <_printf_i+0x32>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	f000 80d3 	beq.w	8007dc4 <_printf_i+0x1c8>
 8007c1e:	2f58      	cmp	r7, #88	@ 0x58
 8007c20:	f000 80ba 	beq.w	8007d98 <_printf_i+0x19c>
 8007c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c2c:	e03a      	b.n	8007ca4 <_printf_i+0xa8>
 8007c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c32:	2b15      	cmp	r3, #21
 8007c34:	d8f6      	bhi.n	8007c24 <_printf_i+0x28>
 8007c36:	a101      	add	r1, pc, #4	@ (adr r1, 8007c3c <_printf_i+0x40>)
 8007c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007c25 	.word	0x08007c25
 8007c48:	08007c25 	.word	0x08007c25
 8007c4c:	08007c25 	.word	0x08007c25
 8007c50:	08007c25 	.word	0x08007c25
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007c25 	.word	0x08007c25
 8007c5c:	08007c25 	.word	0x08007c25
 8007c60:	08007c25 	.word	0x08007c25
 8007c64:	08007c25 	.word	0x08007c25
 8007c68:	08007dab 	.word	0x08007dab
 8007c6c:	08007cd3 	.word	0x08007cd3
 8007c70:	08007d65 	.word	0x08007d65
 8007c74:	08007c25 	.word	0x08007c25
 8007c78:	08007c25 	.word	0x08007c25
 8007c7c:	08007dcd 	.word	0x08007dcd
 8007c80:	08007c25 	.word	0x08007c25
 8007c84:	08007cd3 	.word	0x08007cd3
 8007c88:	08007c25 	.word	0x08007c25
 8007c8c:	08007c25 	.word	0x08007c25
 8007c90:	08007d6d 	.word	0x08007d6d
 8007c94:	6833      	ldr	r3, [r6, #0]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6032      	str	r2, [r6, #0]
 8007c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e09e      	b.n	8007de6 <_printf_i+0x1ea>
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	6031      	str	r1, [r6, #0]
 8007cb0:	0606      	lsls	r6, r0, #24
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_i+0xbc>
 8007cb4:	681d      	ldr	r5, [r3, #0]
 8007cb6:	e003      	b.n	8007cc0 <_printf_i+0xc4>
 8007cb8:	0645      	lsls	r5, r0, #25
 8007cba:	d5fb      	bpl.n	8007cb4 <_printf_i+0xb8>
 8007cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	da03      	bge.n	8007ccc <_printf_i+0xd0>
 8007cc4:	232d      	movs	r3, #45	@ 0x2d
 8007cc6:	426d      	negs	r5, r5
 8007cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ccc:	230a      	movs	r3, #10
 8007cce:	4859      	ldr	r0, [pc, #356]	@ (8007e34 <_printf_i+0x238>)
 8007cd0:	e011      	b.n	8007cf6 <_printf_i+0xfa>
 8007cd2:	6821      	ldr	r1, [r4, #0]
 8007cd4:	6833      	ldr	r3, [r6, #0]
 8007cd6:	0608      	lsls	r0, r1, #24
 8007cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cdc:	d402      	bmi.n	8007ce4 <_printf_i+0xe8>
 8007cde:	0649      	lsls	r1, r1, #25
 8007ce0:	bf48      	it	mi
 8007ce2:	b2ad      	uxthmi	r5, r5
 8007ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ce6:	6033      	str	r3, [r6, #0]
 8007ce8:	bf14      	ite	ne
 8007cea:	230a      	movne	r3, #10
 8007cec:	2308      	moveq	r3, #8
 8007cee:	4851      	ldr	r0, [pc, #324]	@ (8007e34 <_printf_i+0x238>)
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cf6:	6866      	ldr	r6, [r4, #4]
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	bfa8      	it	ge
 8007cfc:	6821      	ldrge	r1, [r4, #0]
 8007cfe:	60a6      	str	r6, [r4, #8]
 8007d00:	bfa4      	itt	ge
 8007d02:	f021 0104 	bicge.w	r1, r1, #4
 8007d06:	6021      	strge	r1, [r4, #0]
 8007d08:	b90d      	cbnz	r5, 8007d0e <_printf_i+0x112>
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	d04b      	beq.n	8007da6 <_printf_i+0x1aa>
 8007d0e:	4616      	mov	r6, r2
 8007d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d14:	fb03 5711 	mls	r7, r3, r1, r5
 8007d18:	5dc7      	ldrb	r7, [r0, r7]
 8007d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d1e:	462f      	mov	r7, r5
 8007d20:	42bb      	cmp	r3, r7
 8007d22:	460d      	mov	r5, r1
 8007d24:	d9f4      	bls.n	8007d10 <_printf_i+0x114>
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d10b      	bne.n	8007d42 <_printf_i+0x146>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	07df      	lsls	r7, r3, #31
 8007d2e:	d508      	bpl.n	8007d42 <_printf_i+0x146>
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	6861      	ldr	r1, [r4, #4]
 8007d34:	4299      	cmp	r1, r3
 8007d36:	bfde      	ittt	le
 8007d38:	2330      	movle	r3, #48	@ 0x30
 8007d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d42:	1b92      	subs	r2, r2, r6
 8007d44:	6122      	str	r2, [r4, #16]
 8007d46:	464b      	mov	r3, r9
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f8cd a000 	str.w	sl, [sp]
 8007d50:	aa03      	add	r2, sp, #12
 8007d52:	f7ff fee1 	bl	8007b18 <_printf_common>
 8007d56:	3001      	adds	r0, #1
 8007d58:	d14a      	bne.n	8007df0 <_printf_i+0x1f4>
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	b004      	add	sp, #16
 8007d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	f043 0320 	orr.w	r3, r3, #32
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	2778      	movs	r7, #120	@ 0x78
 8007d6e:	4832      	ldr	r0, [pc, #200]	@ (8007e38 <_printf_i+0x23c>)
 8007d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	6831      	ldr	r1, [r6, #0]
 8007d78:	061f      	lsls	r7, r3, #24
 8007d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d7e:	d402      	bmi.n	8007d86 <_printf_i+0x18a>
 8007d80:	065f      	lsls	r7, r3, #25
 8007d82:	bf48      	it	mi
 8007d84:	b2ad      	uxthmi	r5, r5
 8007d86:	6031      	str	r1, [r6, #0]
 8007d88:	07d9      	lsls	r1, r3, #31
 8007d8a:	bf44      	itt	mi
 8007d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d90:	6023      	strmi	r3, [r4, #0]
 8007d92:	b11d      	cbz	r5, 8007d9c <_printf_i+0x1a0>
 8007d94:	2310      	movs	r3, #16
 8007d96:	e7ab      	b.n	8007cf0 <_printf_i+0xf4>
 8007d98:	4826      	ldr	r0, [pc, #152]	@ (8007e34 <_printf_i+0x238>)
 8007d9a:	e7e9      	b.n	8007d70 <_printf_i+0x174>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f023 0320 	bic.w	r3, r3, #32
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e7f6      	b.n	8007d94 <_printf_i+0x198>
 8007da6:	4616      	mov	r6, r2
 8007da8:	e7bd      	b.n	8007d26 <_printf_i+0x12a>
 8007daa:	6833      	ldr	r3, [r6, #0]
 8007dac:	6825      	ldr	r5, [r4, #0]
 8007dae:	1d18      	adds	r0, r3, #4
 8007db0:	6961      	ldr	r1, [r4, #20]
 8007db2:	6030      	str	r0, [r6, #0]
 8007db4:	062e      	lsls	r6, r5, #24
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	d501      	bpl.n	8007dbe <_printf_i+0x1c2>
 8007dba:	6019      	str	r1, [r3, #0]
 8007dbc:	e002      	b.n	8007dc4 <_printf_i+0x1c8>
 8007dbe:	0668      	lsls	r0, r5, #25
 8007dc0:	d5fb      	bpl.n	8007dba <_printf_i+0x1be>
 8007dc2:	8019      	strh	r1, [r3, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4616      	mov	r6, r2
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	e7bc      	b.n	8007d46 <_printf_i+0x14a>
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	2100      	movs	r1, #0
 8007dd0:	1d1a      	adds	r2, r3, #4
 8007dd2:	6032      	str	r2, [r6, #0]
 8007dd4:	681e      	ldr	r6, [r3, #0]
 8007dd6:	6862      	ldr	r2, [r4, #4]
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 f859 	bl	8007e90 <memchr>
 8007dde:	b108      	cbz	r0, 8007de4 <_printf_i+0x1e8>
 8007de0:	1b80      	subs	r0, r0, r6
 8007de2:	6060      	str	r0, [r4, #4]
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	2300      	movs	r3, #0
 8007dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dee:	e7aa      	b.n	8007d46 <_printf_i+0x14a>
 8007df0:	4632      	mov	r2, r6
 8007df2:	4649      	mov	r1, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	47d0      	blx	sl
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d0ad      	beq.n	8007d5a <_printf_i+0x15e>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	079b      	lsls	r3, r3, #30
 8007e02:	d413      	bmi.n	8007e2c <_printf_i+0x230>
 8007e04:	68e0      	ldr	r0, [r4, #12]
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	4298      	cmp	r0, r3
 8007e0a:	bfb8      	it	lt
 8007e0c:	4618      	movlt	r0, r3
 8007e0e:	e7a6      	b.n	8007d5e <_printf_i+0x162>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4632      	mov	r2, r6
 8007e14:	4649      	mov	r1, r9
 8007e16:	4640      	mov	r0, r8
 8007e18:	47d0      	blx	sl
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d09d      	beq.n	8007d5a <_printf_i+0x15e>
 8007e1e:	3501      	adds	r5, #1
 8007e20:	68e3      	ldr	r3, [r4, #12]
 8007e22:	9903      	ldr	r1, [sp, #12]
 8007e24:	1a5b      	subs	r3, r3, r1
 8007e26:	42ab      	cmp	r3, r5
 8007e28:	dcf2      	bgt.n	8007e10 <_printf_i+0x214>
 8007e2a:	e7eb      	b.n	8007e04 <_printf_i+0x208>
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	f104 0619 	add.w	r6, r4, #25
 8007e32:	e7f5      	b.n	8007e20 <_printf_i+0x224>
 8007e34:	08008238 	.word	0x08008238
 8007e38:	08008249 	.word	0x08008249

08007e3c <memmove>:
 8007e3c:	4288      	cmp	r0, r1
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	eb01 0402 	add.w	r4, r1, r2
 8007e44:	d902      	bls.n	8007e4c <memmove+0x10>
 8007e46:	4284      	cmp	r4, r0
 8007e48:	4623      	mov	r3, r4
 8007e4a:	d807      	bhi.n	8007e5c <memmove+0x20>
 8007e4c:	1e43      	subs	r3, r0, #1
 8007e4e:	42a1      	cmp	r1, r4
 8007e50:	d008      	beq.n	8007e64 <memmove+0x28>
 8007e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e5a:	e7f8      	b.n	8007e4e <memmove+0x12>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4402      	add	r2, r0
 8007e60:	428a      	cmp	r2, r1
 8007e62:	d100      	bne.n	8007e66 <memmove+0x2a>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e6e:	e7f7      	b.n	8007e60 <memmove+0x24>

08007e70 <_sbrk_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	2300      	movs	r3, #0
 8007e74:	4d05      	ldr	r5, [pc, #20]	@ (8007e8c <_sbrk_r+0x1c>)
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	f7fa fd62 	bl	8002944 <_sbrk>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_sbrk_r+0x1a>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_sbrk_r+0x1a>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20000538 	.word	0x20000538

08007e90 <memchr>:
 8007e90:	4603      	mov	r3, r0
 8007e92:	b510      	push	{r4, lr}
 8007e94:	b2c9      	uxtb	r1, r1
 8007e96:	4402      	add	r2, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	d101      	bne.n	8007ea2 <memchr+0x12>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e003      	b.n	8007eaa <memchr+0x1a>
 8007ea2:	7804      	ldrb	r4, [r0, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	428c      	cmp	r4, r1
 8007ea8:	d1f6      	bne.n	8007e98 <memchr+0x8>
 8007eaa:	bd10      	pop	{r4, pc}

08007eac <memcpy>:
 8007eac:	440a      	add	r2, r1
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb4:	d100      	bne.n	8007eb8 <memcpy+0xc>
 8007eb6:	4770      	bx	lr
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ebe:	4291      	cmp	r1, r2
 8007ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec4:	d1f9      	bne.n	8007eba <memcpy+0xe>
 8007ec6:	bd10      	pop	{r4, pc}

08007ec8 <_realloc_r>:
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	4680      	mov	r8, r0
 8007ece:	4615      	mov	r5, r2
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	b921      	cbnz	r1, 8007ede <_realloc_r+0x16>
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	f7ff bc39 	b.w	8007750 <_malloc_r>
 8007ede:	b92a      	cbnz	r2, 8007eec <_realloc_r+0x24>
 8007ee0:	f7ff fbcc 	bl	800767c <_free_r>
 8007ee4:	2400      	movs	r4, #0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	f000 f81a 	bl	8007f24 <_malloc_usable_size_r>
 8007ef0:	4285      	cmp	r5, r0
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	d802      	bhi.n	8007efc <_realloc_r+0x34>
 8007ef6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007efa:	d8f4      	bhi.n	8007ee6 <_realloc_r+0x1e>
 8007efc:	4629      	mov	r1, r5
 8007efe:	4640      	mov	r0, r8
 8007f00:	f7ff fc26 	bl	8007750 <_malloc_r>
 8007f04:	4607      	mov	r7, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d0ec      	beq.n	8007ee4 <_realloc_r+0x1c>
 8007f0a:	42b5      	cmp	r5, r6
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	4621      	mov	r1, r4
 8007f10:	bf28      	it	cs
 8007f12:	4632      	movcs	r2, r6
 8007f14:	f7ff ffca 	bl	8007eac <memcpy>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7ff fbae 	bl	800767c <_free_r>
 8007f20:	463c      	mov	r4, r7
 8007f22:	e7e0      	b.n	8007ee6 <_realloc_r+0x1e>

08007f24 <_malloc_usable_size_r>:
 8007f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f28:	1f18      	subs	r0, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfbc      	itt	lt
 8007f2e:	580b      	ldrlt	r3, [r1, r0]
 8007f30:	18c0      	addlt	r0, r0, r3
 8007f32:	4770      	bx	lr

08007f34 <_init>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr

08007f40 <_fini>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

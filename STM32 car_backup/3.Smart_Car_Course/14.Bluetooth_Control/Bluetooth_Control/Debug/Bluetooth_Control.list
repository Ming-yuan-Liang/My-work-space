
Bluetooth_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcfc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  0800fee8  0800fee8  00010ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e40  08010e40  0001220c  2**0
                  CONTENTS
  4 .ARM          00000008  08010e40  08010e40  00011e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e48  08010e48  0001220c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e48  08010e48  00011e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e4c  08010e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08010e50  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  2000020c  0801105c  0001220c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0801105c  00012ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001916a  00000000  00000000  00012235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005862  00000000  00000000  0002b39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001376  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256ba  00000000  00000000  000338de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a88  00000000  00000000  00058f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abb74  00000000  00000000  00089a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079a8  00000000  00000000  001355d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  0013cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000020c 	.word	0x2000020c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800fecc 	.word	0x0800fecc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000210 	.word	0x20000210
 8000224:	0800fecc 	.word	0x0800fecc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	2200      	movs	r2, #0
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	f7ff fc09 	bl	8000a94 <__aeabi_dcmplt>
 8001282:	b928      	cbnz	r0, 8001290 <__aeabi_d2lz+0x1c>
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800128c:	f000 b80a 	b.w	80012a4 <__aeabi_d2ulz>
 8001290:	4620      	mov	r0, r4
 8001292:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001296:	f000 f805 	bl	80012a4 <__aeabi_d2ulz>
 800129a:	4240      	negs	r0, r0
 800129c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	bf00      	nop

080012a4 <__aeabi_d2ulz>:
 80012a4:	b5d0      	push	{r4, r6, r7, lr}
 80012a6:	2200      	movs	r2, #0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <__aeabi_d2ulz+0x34>)
 80012aa:	4606      	mov	r6, r0
 80012ac:	460f      	mov	r7, r1
 80012ae:	f7ff f97f 	bl	80005b0 <__aeabi_dmul>
 80012b2:	f7ff fc55 	bl	8000b60 <__aeabi_d2uiz>
 80012b6:	4604      	mov	r4, r0
 80012b8:	f7ff f900 	bl	80004bc <__aeabi_ui2d>
 80012bc:	2200      	movs	r2, #0
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <__aeabi_d2ulz+0x38>)
 80012c0:	f7ff f976 	bl	80005b0 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4630      	mov	r0, r6
 80012ca:	4639      	mov	r1, r7
 80012cc:	f7fe ffb8 	bl	8000240 <__aeabi_dsub>
 80012d0:	f7ff fc46 	bl	8000b60 <__aeabi_d2uiz>
 80012d4:	4621      	mov	r1, r4
 80012d6:	bdd0      	pop	{r4, r6, r7, pc}
 80012d8:	3df00000 	.word	0x3df00000
 80012dc:	41f00000 	.word	0x41f00000

080012e0 <USE_Bluetooth_Control>:

uint8_t ProtocolString[80] = {0};//备份数据区 Backup Data Area


void USE_Bluetooth_Control(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	if (newLineReceived)
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <USE_Bluetooth_Control+0x84>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <USE_Bluetooth_Control+0x16>
	{
		#if BLUEDEBUG == 0
			Get_Data();
 80012ec:	f000 f98c 	bl	8001608 <Get_Data>
		#else
			Copy_Bluetooth_Data();
			printf("%s\r\n",ProtocolString);
		#endif

		newLineReceived = 0;//确保清0 Ensure clear 0
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <USE_Bluetooth_Control+0x84>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	}
	// 切换不同功能模式, 功能模式显示 Switch between different function modes, and display the function mode
	switch (g_modeSelect)
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <USE_Bluetooth_Control+0x88>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d82e      	bhi.n	800135e <USE_Bluetooth_Control+0x7e>
 8001300:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <USE_Bluetooth_Control+0x28>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	0800135f 	.word	0x0800135f
 800130c:	08001321 	.word	0x08001321
 8001310:	08001327 	.word	0x08001327
 8001314:	08001333 	.word	0x08001333
 8001318:	0800135f 	.word	0x0800135f
 800131c:	08001351 	.word	0x08001351
	{
		case 1: break; 			//暂时保留 Temporarily reserved
		case 2: car_irtrack(); break; 			//巡线模式 Patrol mode
 8001320:	f001 fcd0 	bl	8002cc4 <car_irtrack>
 8001324:	e01c      	b.n	8001360 <USE_Bluetooth_Control+0x80>
		case 3:	Ir_Ultrasonic_avoid(20);OLED_SHOW_DIS(); break;  		//超声波避障模式 Ultrasonic obstacle avoidance mode
 8001326:	2014      	movs	r0, #20
 8001328:	f000 fc8a 	bl	8001c40 <Ir_Ultrasonic_avoid>
 800132c:	f000 f8a2 	bl	8001474 <OLED_SHOW_DIS>
 8001330:	e016      	b.n	8001360 <USE_Bluetooth_Control+0x80>
		case 4: RGB_color_water(0,200);HAL_Delay(20);RGB_color_water(1,200);HAL_Delay(20);break;
 8001332:	21c8      	movs	r1, #200	@ 0xc8
 8001334:	2000      	movs	r0, #0
 8001336:	f001 f823 	bl	8002380 <RGB_color_water>
 800133a:	2014      	movs	r0, #20
 800133c:	f004 fa72 	bl	8005824 <HAL_Delay>
 8001340:	21c8      	movs	r1, #200	@ 0xc8
 8001342:	2001      	movs	r0, #1
 8001344:	f001 f81c 	bl	8002380 <RGB_color_water>
 8001348:	2014      	movs	r0, #20
 800134a:	f004 fa6b 	bl	8005824 <HAL_Delay>
 800134e:	e007      	b.n	8001360 <USE_Bluetooth_Control+0x80>
		case 5: break;
		case 6: Ultrasonic_follow(45,20);OLED_SHOW_DIS();	break;	//跟随模式 Follow Mode
 8001350:	2114      	movs	r1, #20
 8001352:	202d      	movs	r0, #45	@ 0x2d
 8001354:	f002 fe86 	bl	8004064 <Ultrasonic_follow>
 8001358:	f000 f88c 	bl	8001474 <OLED_SHOW_DIS>
 800135c:	e000      	b.n	8001360 <USE_Bluetooth_Control+0x80>
		default:break;
 800135e:	bf00      	nop
	}


}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002d4 	.word	0x200002d4
 8001368:	20000329 	.word	0x20000329
 800136c:	00000000 	.word	0x00000000

08001370 <Send_Msg>:
char send_buf[60]={'\0'};

//函数功能:发送一些数据给上位机
//Function function: Send some data to the upper computer
void Send_Msg(void)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af04      	add	r7, sp, #16
	float CarBAT = (Adc_Get_Battery_Volotage()*1.62); //电池电量  把7.4v变成12V 因为app的电量是0-12 The battery level has changed from 7.4V to 12V because the app's battery level is 0-12
 8001376:	f001 fb57 	bl	8002a28 <Adc_Get_Battery_Volotage>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8bf 	bl	8000500 <__aeabi_f2d>
 8001382:	a31f      	add	r3, pc, #124	@ (adr r3, 8001400 <Send_Msg+0x90>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f912 	bl	80005b0 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc04 	bl	8000ba0 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]
	float CarDis = Get_distance();
 800139c:	f002 fea8 	bl	80040f0 <Get_distance>
 80013a0:	60b8      	str	r0, [r7, #8]
	int IR_State = GetLineWalking_Data();
 80013a2:	f001 fd41 	bl	8002e28 <GetLineWalking_Data>
 80013a6:	6078      	str	r0, [r7, #4]
	int IR_Dis_State = Get_Iraviod_App();
 80013a8:	f000 fcab 	bl	8001d02 <Get_Iraviod_App>
 80013ac:	6038      	str	r0, [r7, #0]

	sprintf(send_buf,"$4WD,CSB%.2f,PV%1.2f,GS255,LF%04d,HW%02d,GM00#",CarDis,CarBAT,IR_State,IR_Dis_State);
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff f8a6 	bl	8000500 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff f8a1 	bl	8000500 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	9103      	str	r1, [sp, #12]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	9102      	str	r1, [sp, #8]
 80013ca:	e9cd 2300 	strd	r2, r3, [sp]
 80013ce:	4622      	mov	r2, r4
 80013d0:	462b      	mov	r3, r5
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <Send_Msg+0x98>)
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <Send_Msg+0x9c>)
 80013d6:	f00b f9c5 	bl	800c764 <siprintf>

	USRT5_DataString((uint8_t *)send_buf,strlen(send_buf));
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <Send_Msg+0x9c>)
 80013dc:	f7fe ff24 	bl	8000228 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <Send_Msg+0x9c>)
 80013e8:	f001 fa74 	bl	80028d4 <USRT5_DataString>
	memset(send_buf,0,sizeof(send_buf));
 80013ec:	223c      	movs	r2, #60	@ 0x3c
 80013ee:	2100      	movs	r1, #0
 80013f0:	4806      	ldr	r0, [pc, #24]	@ (800140c <Send_Msg+0x9c>)
 80013f2:	f00b fa1a 	bl	800c82a <memset>

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bdb0      	pop	{r4, r5, r7, pc}
 80013fe:	bf00      	nop
 8001400:	1eb851ec 	.word	0x1eb851ec
 8001404:	3ff9eb85 	.word	0x3ff9eb85
 8001408:	0800fee8 	.word	0x0800fee8
 800140c:	20000278 	.word	0x20000278

08001410 <OLED_SHOW_BAT>:


char OLED_buf[20]={'\0'};

void OLED_SHOW_BAT(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	//oled显示小车电池电量 OLED displays the battery level of the car
	sprintf(OLED_buf,"CarBAT:%.2fV   ",Adc_Get_Battery_Volotage());
 8001414:	f001 fb08 	bl	8002a28 <Adc_Get_Battery_Volotage>
 8001418:	4603      	mov	r3, r0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f870 	bl	8000500 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4905      	ldr	r1, [pc, #20]	@ (800143c <OLED_SHOW_BAT+0x2c>)
 8001426:	4806      	ldr	r0, [pc, #24]	@ (8001440 <OLED_SHOW_BAT+0x30>)
 8001428:	f00b f99c 	bl	800c764 <siprintf>
	OLED_Draw_Line(OLED_buf, 2, false, true);
 800142c:	2301      	movs	r3, #1
 800142e:	2200      	movs	r2, #0
 8001430:	2102      	movs	r1, #2
 8001432:	4803      	ldr	r0, [pc, #12]	@ (8001440 <OLED_SHOW_BAT+0x30>)
 8001434:	f000 ff32 	bl	800229c <OLED_Draw_Line>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800ff18 	.word	0x0800ff18
 8001440:	200002b4 	.word	0x200002b4

08001444 <OLED_SHOW_Car_Speed>:

void OLED_SHOW_Car_Speed(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	//oled显示小车当前的速度 OLED displays the current speed of the car
	sprintf(OLED_buf,"car_speed:%d  ",CarSpeedControl);
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <OLED_SHOW_Car_Speed+0x24>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4907      	ldr	r1, [pc, #28]	@ (800146c <OLED_SHOW_Car_Speed+0x28>)
 8001450:	4807      	ldr	r0, [pc, #28]	@ (8001470 <OLED_SHOW_Car_Speed+0x2c>)
 8001452:	f00b f987 	bl	800c764 <siprintf>
	OLED_Draw_Line(OLED_buf, 3, false, true);
 8001456:	2301      	movs	r3, #1
 8001458:	2200      	movs	r2, #0
 800145a:	2103      	movs	r1, #3
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <OLED_SHOW_Car_Speed+0x2c>)
 800145e:	f000 ff1d 	bl	800229c <OLED_Draw_Line>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000
 800146c:	0800ff28 	.word	0x0800ff28
 8001470:	200002b4 	.word	0x200002b4

08001474 <OLED_SHOW_DIS>:

void OLED_SHOW_DIS(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	//oled显示超声波距离 OLED displays ultrasonic distance
	sprintf(OLED_buf,"dis:%.1f cm     ",Get_distance());
 8001478:	f002 fe3a 	bl	80040f0 <Get_distance>
 800147c:	4603      	mov	r3, r0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f83e 	bl	8000500 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4905      	ldr	r1, [pc, #20]	@ (80014a0 <OLED_SHOW_DIS+0x2c>)
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <OLED_SHOW_DIS+0x30>)
 800148c:	f00b f96a 	bl	800c764 <siprintf>
	OLED_Draw_Line(OLED_buf, 3, false, true);
 8001490:	2301      	movs	r3, #1
 8001492:	2200      	movs	r2, #0
 8001494:	2103      	movs	r1, #3
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <OLED_SHOW_DIS+0x30>)
 8001498:	f000 ff00 	bl	800229c <OLED_Draw_Line>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0800ff38 	.word	0x0800ff38
 80014a4:	200002b4 	.word	0x200002b4

080014a8 <Deal_Bluetooth>:
//函数功能:处理接收蓝牙的数据
//传入参数:串口的接收信息
//Function function: Process and receive Bluetooth data
//Incoming parameter: receiving information of the serial port
void Deal_Bluetooth(uint8_t msg)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	 if(msg == '$')
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b24      	cmp	r3, #36	@ 0x24
 80014b6:	d105      	bne.n	80014c4 <Deal_Bluetooth+0x1c>
		{
			startBit = 1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <Deal_Bluetooth+0x80>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
			g_num = 0;
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <Deal_Bluetooth+0x84>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
		}
		if(startBit == 1)
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <Deal_Bluetooth+0x80>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d104      	bne.n	80014d6 <Deal_Bluetooth+0x2e>
		{
			inputString[g_num] = msg;
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <Deal_Bluetooth+0x84>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4917      	ldr	r1, [pc, #92]	@ (8001530 <Deal_Bluetooth+0x88>)
 80014d2:	79fa      	ldrb	r2, [r7, #7]
 80014d4:	54ca      	strb	r2, [r1, r3]
		}
		if (startBit == 1 && msg == '#')
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <Deal_Bluetooth+0x80>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10c      	bne.n	80014f8 <Deal_Bluetooth+0x50>
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b23      	cmp	r3, #35	@ 0x23
 80014e2:	d109      	bne.n	80014f8 <Deal_Bluetooth+0x50>
		{

			newLineReceived = 1;
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <Deal_Bluetooth+0x8c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
			startBit = 0;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <Deal_Bluetooth+0x80>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
			g_packnum = g_num;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Deal_Bluetooth+0x84>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <Deal_Bluetooth+0x90>)
 80014f6:	6013      	str	r3, [r2, #0]

		}
		g_num++;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <Deal_Bluetooth+0x84>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <Deal_Bluetooth+0x84>)
 8001500:	6013      	str	r3, [r2, #0]
		if(g_num >= 80)
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <Deal_Bluetooth+0x84>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b4f      	cmp	r3, #79	@ 0x4f
 8001508:	dd08      	ble.n	800151c <Deal_Bluetooth+0x74>
		{
			g_num = 0;
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <Deal_Bluetooth+0x84>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
			startBit = 0;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <Deal_Bluetooth+0x80>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
			newLineReceived	= 0;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <Deal_Bluetooth+0x8c>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		}

}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200002cc 	.word	0x200002cc
 800152c:	200002c8 	.word	0x200002c8
 8001530:	200002d8 	.word	0x200002d8
 8001534:	200002d4 	.word	0x200002d4
 8001538:	200002d0 	.word	0x200002d0

0800153c <Copy_Bluetooth_Data>:


//串口数据拷贝到新的buf中防止处理过程中被新数据覆盖
//Copy serial data to a new BUF to prevent it from being overwritten by new data during processing
void Copy_Bluetooth_Data(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	memcpy(ProtocolString, inputString, g_packnum + 1);
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <Copy_Bluetooth_Data+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	461a      	mov	r2, r3
 8001548:	4906      	ldr	r1, [pc, #24]	@ (8001564 <Copy_Bluetooth_Data+0x28>)
 800154a:	4807      	ldr	r0, [pc, #28]	@ (8001568 <Copy_Bluetooth_Data+0x2c>)
 800154c:	f00b f9fb 	bl	800c946 <memcpy>
	memset(inputString, 0x00, sizeof(inputString));
 8001550:	2250      	movs	r2, #80	@ 0x50
 8001552:	2100      	movs	r1, #0
 8001554:	4803      	ldr	r0, [pc, #12]	@ (8001564 <Copy_Bluetooth_Data+0x28>)
 8001556:	f00b f968 	bl	800c82a <memset>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002d0 	.word	0x200002d0
 8001564:	200002d8 	.word	0x200002d8
 8001568:	20000228 	.word	0x20000228

0800156c <StringFind>:
 * pSrc:源字符串; pDst:查找的字符串; v_iStartPos:源字符串起始位置
 *Function function: String lookup
 *PSrc: Source string; PDst: The string to search for; V_ IStartPos: Source string start position
 */
int StringFind(const char *pSrc, const char *pDst, int v_iStartPos)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
    int i, j;
    for (i = v_iStartPos; pSrc[i]!='\0'; i++)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e037      	b.n	80015ee <StringFind+0x82>
    {
        if(pSrc[i]!=pDst[0])
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d12b      	bne.n	80015e6 <StringFind+0x7a>
            continue;
        j = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
        while(pDst[j] !='\0' && pSrc[i+j]!='\0')
 8001592:	e00f      	b.n	80015b4 <StringFind+0x48>
        {
            j++;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	3301      	adds	r3, #1
 8001598:	613b      	str	r3, [r7, #16]
            if(pDst[j]!=pSrc[i+j])
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	4413      	add	r3, r2
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	6979      	ldr	r1, [r7, #20]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	440b      	add	r3, r1
 80015a8:	4619      	mov	r1, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	440b      	add	r3, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10f      	bne.n	80015d4 <StringFind+0x68>
        while(pDst[j] !='\0' && pSrc[i+j]!='\0')
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00a      	beq.n	80015d6 <StringFind+0x6a>
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e0      	bne.n	8001594 <StringFind+0x28>
 80015d2:	e000      	b.n	80015d6 <StringFind+0x6a>
            break;
 80015d4:	bf00      	nop
        }
        if(pDst[j]=='\0')
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <StringFind+0x7c>
            return i;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	e00b      	b.n	80015fe <StringFind+0x92>
            continue;
 80015e6:	bf00      	nop
    for (i = v_iStartPos; pSrc[i]!='\0'; i++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1c1      	bne.n	800157e <StringFind+0x12>
    }
    return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <Get_Data>:

//函数功能,根据协议取数据
//Function function, fetching data according to protocol
void Get_Data(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	Copy_Bluetooth_Data();
 800160c:	f7ff ff96 	bl	800153c <Copy_Bluetooth_Data>
	//常用 in common use
	if (StringFind((const char *)ProtocolString, (const char *)"4WD", 0) == -1)
 8001610:	2200      	movs	r2, #0
 8001612:	492b      	ldr	r1, [pc, #172]	@ (80016c0 <Get_Data+0xb8>)
 8001614:	482b      	ldr	r0, [pc, #172]	@ (80016c4 <Get_Data+0xbc>)
 8001616:	f7ff ffa9 	bl	800156c <StringFind>
 800161a:	4603      	mov	r3, r0
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d10c      	bne.n	800163c <Get_Data+0x34>
	{
		Deal_Motor_Data();
 8001622:	f000 f859 	bl	80016d8 <Deal_Motor_Data>
		Deal_Servo_RGB_BEEP_Data();
 8001626:	f000 f8d3 	bl	80017d0 <Deal_Servo_RGB_BEEP_Data>
		newLineReceived = 0;
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <Get_Data+0xc0>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		memset(ProtocolString, 0x00, sizeof(ProtocolString));
 8001630:	2250      	movs	r2, #80	@ 0x50
 8001632:	2100      	movs	r1, #0
 8001634:	4823      	ldr	r0, [pc, #140]	@ (80016c4 <Get_Data+0xbc>)
 8001636:	f00b f8f8 	bl	800c82a <memset>
		return ;
 800163a:	e040      	b.n	80016be <Get_Data+0xb6>
	}

	//RGB的颜色-app滑动条控制 RGB color - app slider control
	 if (StringFind((const char *)ProtocolString, (const char *)"CLR", 0) > 0)
 800163c:	2200      	movs	r2, #0
 800163e:	4923      	ldr	r1, [pc, #140]	@ (80016cc <Get_Data+0xc4>)
 8001640:	4820      	ldr	r0, [pc, #128]	@ (80016c4 <Get_Data+0xbc>)
 8001642:	f7ff ff93 	bl	800156c <StringFind>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	dd0a      	ble.n	8001662 <Get_Data+0x5a>
	{
		 Deal_RGB_Data();
 800164c:	f000 f94a 	bl	80018e4 <Deal_RGB_Data>
		 newLineReceived = 0;
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <Get_Data+0xc0>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
		 memset(ProtocolString, 0x00, sizeof(ProtocolString));
 8001656:	2250      	movs	r2, #80	@ 0x50
 8001658:	2100      	movs	r1, #0
 800165a:	481a      	ldr	r0, [pc, #104]	@ (80016c4 <Get_Data+0xbc>)
 800165c:	f00b f8e5 	bl	800c82a <memset>
		 return ;
 8001660:	e02d      	b.n	80016be <Get_Data+0xb6>
	}

	 //舵机云台控制-只有左右 Steering gear pan tilt control - only left and right
	 if (StringFind((const char *)ProtocolString, (const char *)"PTZ", 0) > 0)
 8001662:	2200      	movs	r2, #0
 8001664:	491a      	ldr	r1, [pc, #104]	@ (80016d0 <Get_Data+0xc8>)
 8001666:	4817      	ldr	r0, [pc, #92]	@ (80016c4 <Get_Data+0xbc>)
 8001668:	f7ff ff80 	bl	800156c <StringFind>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd0a      	ble.n	8001688 <Get_Data+0x80>
	 {
		 Deal_PWM_Servo();
 8001672:	f000 fa41 	bl	8001af8 <Deal_PWM_Servo>
		 newLineReceived = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <Get_Data+0xc0>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
		 memset(ProtocolString, 0x00, sizeof(ProtocolString));
 800167c:	2250      	movs	r2, #80	@ 0x50
 800167e:	2100      	movs	r1, #0
 8001680:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <Get_Data+0xbc>)
 8001682:	f00b f8d2 	bl	800c82a <memset>
		 return ;
 8001686:	e01a      	b.n	80016be <Get_Data+0xb6>
	 }

	//模式处理 Mode Handler
	if(StringFind((const char *)ProtocolString, (const char *)"MODE", 0) > 0
 8001688:	2200      	movs	r2, #0
 800168a:	4912      	ldr	r1, [pc, #72]	@ (80016d4 <Get_Data+0xcc>)
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <Get_Data+0xbc>)
 800168e:	f7ff ff6d 	bl	800156c <StringFind>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd12      	ble.n	80016be <Get_Data+0xb6>
		&& StringFind((const char *)ProtocolString, (const char *)"4WD", 0) > 0)
 8001698:	2200      	movs	r2, #0
 800169a:	4909      	ldr	r1, [pc, #36]	@ (80016c0 <Get_Data+0xb8>)
 800169c:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <Get_Data+0xbc>)
 800169e:	f7ff ff65 	bl	800156c <StringFind>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dd0a      	ble.n	80016be <Get_Data+0xb6>
	{
		Deal_Mode();
 80016a8:	f000 f9aa 	bl	8001a00 <Deal_Mode>
		newLineReceived = 0;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <Get_Data+0xc0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		memset(ProtocolString, 0x00, sizeof(ProtocolString));
 80016b2:	2250      	movs	r2, #80	@ 0x50
 80016b4:	2100      	movs	r1, #0
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <Get_Data+0xbc>)
 80016b8:	f00b f8b7 	bl	800c82a <memset>
		return ;
 80016bc:	bf00      	nop
	}


}
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0800ff5c 	.word	0x0800ff5c
 80016c4:	20000228 	.word	0x20000228
 80016c8:	200002d4 	.word	0x200002d4
 80016cc:	0800ff60 	.word	0x0800ff60
 80016d0:	0800ff64 	.word	0x0800ff64
 80016d4:	0800ff68 	.word	0x0800ff68

080016d8 <Deal_Motor_Data>:

//函数功能:处理小车的运动控制
//Function function: Handle the motion control of the car
//eg:$1,0,0,0,0,0,0,0,0,0#    小车前进 Trolley forward
void Deal_Motor_Data(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	//小车左旋右旋判断 Left and right rotation judgment of the car
	if (ProtocolString[3] == '1')      //小车左旋 Left rotation of the car
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <Deal_Motor_Data+0xec>)
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	2b31      	cmp	r3, #49	@ 0x31
 80016e2:	d103      	bne.n	80016ec <Deal_Motor_Data+0x14>
	{
		g_CarState = MOTION_SPIN_LEFT;
 80016e4:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e00a      	b.n	8001702 <Deal_Motor_Data+0x2a>
	}
	else if (ProtocolString[3] == '2') //小车右旋 Car turning right
 80016ec:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <Deal_Motor_Data+0xec>)
 80016ee:	78db      	ldrb	r3, [r3, #3]
 80016f0:	2b32      	cmp	r3, #50	@ 0x32
 80016f2:	d103      	bne.n	80016fc <Deal_Motor_Data+0x24>
	{
		g_CarState = MOTION_SPIN_RIGHT;
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 80016f6:	2206      	movs	r2, #6
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e002      	b.n	8001702 <Deal_Motor_Data+0x2a>
	}
	else
	{
		g_CarState = MOTION_STOP;
 80016fc:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	}

	//小车加减速判断 Car acceleration and deceleration judgment
	if (ProtocolString[7] == '1')    //加速，每次加100 Accelerate by adding 100 each time
 8001702:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <Deal_Motor_Data+0xec>)
 8001704:	79db      	ldrb	r3, [r3, #7]
 8001706:	2b31      	cmp	r3, #49	@ 0x31
 8001708:	d10d      	bne.n	8001726 <Deal_Motor_Data+0x4e>
	{
		CarSpeedControl += 100;
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <Deal_Motor_Data+0xf4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3364      	adds	r3, #100	@ 0x64
 8001710:	4a2e      	ldr	r2, [pc, #184]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001712:	6013      	str	r3, [r2, #0]
		if (CarSpeedControl > 1000)
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171c:	dd03      	ble.n	8001726 <Deal_Motor_Data+0x4e>
		{
			CarSpeedControl = 1000;
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001720:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001724:	601a      	str	r2, [r3, #0]
		}
	}
	if (ProtocolString[7] == '2')	//减速，每次减100 Reduce speed by 100 each time
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <Deal_Motor_Data+0xec>)
 8001728:	79db      	ldrb	r3, [r3, #7]
 800172a:	2b32      	cmp	r3, #50	@ 0x32
 800172c:	d10b      	bne.n	8001746 <Deal_Motor_Data+0x6e>
	{
		CarSpeedControl -= 100;
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3b64      	subs	r3, #100	@ 0x64
 8001734:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001736:	6013      	str	r3, [r2, #0]
		if (CarSpeedControl < 100)
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <Deal_Motor_Data+0xf4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b63      	cmp	r3, #99	@ 0x63
 800173e:	dc02      	bgt.n	8001746 <Deal_Motor_Data+0x6e>
		{
			CarSpeedControl = 100;
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <Deal_Motor_Data+0xf4>)
 8001742:	2264      	movs	r2, #100	@ 0x64
 8001744:	601a      	str	r2, [r3, #0]
		}
	}

	//小车的前进,后退,左转,右转,停止动作 The forward, backward, left, right, and stop movements of the car
	if (g_CarState != MOTION_SPIN_LEFT && g_CarState != MOTION_SPIN_RIGHT)
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d02e      	beq.n	80017ac <Deal_Motor_Data+0xd4>
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b06      	cmp	r3, #6
 8001754:	d02a      	beq.n	80017ac <Deal_Motor_Data+0xd4>
	{
		switch (ProtocolString[1])
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <Deal_Motor_Data+0xec>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	3b30      	subs	r3, #48	@ 0x30
 800175c:	2b04      	cmp	r3, #4
 800175e:	d821      	bhi.n	80017a4 <Deal_Motor_Data+0xcc>
 8001760:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <Deal_Motor_Data+0x90>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	0800179d 	.word	0x0800179d
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001785 	.word	0x08001785
 8001774:	0800178d 	.word	0x0800178d
 8001778:	08001795 	.word	0x08001795
		{
			case run_car:   g_CarState = MOTION_RUN;  break;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e013      	b.n	80017ac <Deal_Motor_Data+0xd4>
			case back_car:  g_CarState = MOTION_BACK;  break;
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e00f      	b.n	80017ac <Deal_Motor_Data+0xd4>
			case left_car:  g_CarState = MOTION_LEFT;  break;
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 800178e:	2203      	movs	r2, #3
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e00b      	b.n	80017ac <Deal_Motor_Data+0xd4>
			case right_car: g_CarState = MOTION_RIGHT;  break;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 8001796:	2204      	movs	r2, #4
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e007      	b.n	80017ac <Deal_Motor_Data+0xd4>
			case stop_car:  g_CarState = MOTION_STOP;  break;
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e003      	b.n	80017ac <Deal_Motor_Data+0xd4>
			default: g_CarState = MOTION_STOP; break;
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	bf00      	nop
		}
	}
		wheel_State_YAW(g_CarState,CarSpeedControl,0);
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <Deal_Motor_Data+0xf0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <Deal_Motor_Data+0xf4>)
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	b291      	uxth	r1, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fd6f 	bl	800329c <wheel_State_YAW>

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000228 	.word	0x20000228
 80017c8:	20000328 	.word	0x20000328
 80017cc:	20000000 	.word	0x20000000

080017d0 <Deal_Servo_RGB_BEEP_Data>:

//函数功能:处理RGB和蜂鸣器的数据 Function function: Process RGB and buzzer data
//eg:$0,0,0,0,0,1,0,0,0,0#    小车鸣笛 Car whistles
void Deal_Servo_RGB_BEEP_Data(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	//小车鸣笛判断 Car whistle judgment
	if (ProtocolString[5] == '1')     //鸣笛 whistle
 80017d4:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	2b31      	cmp	r3, #49	@ 0x31
 80017da:	d101      	bne.n	80017e0 <Deal_Servo_RGB_BEEP_Data+0x10>
	{
		whistle();
 80017dc:	f000 f9c6 	bl	8001b6c <whistle>
	}
	//点灯判断 Lighting judgment
	if (ProtocolString[13] == '1')//七彩灯亮白色 Colorful light on white
 80017e0:	4b3d      	ldr	r3, [pc, #244]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80017e2:	7b5b      	ldrb	r3, [r3, #13]
 80017e4:	2b31      	cmp	r3, #49	@ 0x31
 80017e6:	d104      	bne.n	80017f2 <Deal_Servo_RGB_BEEP_Data+0x22>
	{
		Set_RGB(RGB_Max, write);
 80017e8:	2106      	movs	r1, #6
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 fe48 	bl	8002480 <Set_RGB>
 80017f0:	e057      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '2')//七彩灯亮红色 Colorful lights in red
 80017f2:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	2b32      	cmp	r3, #50	@ 0x32
 80017f8:	d104      	bne.n	8001804 <Deal_Servo_RGB_BEEP_Data+0x34>
	{
		Set_RGB(RGB_Max, red);
 80017fa:	2100      	movs	r1, #0
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 fe3f 	bl	8002480 <Set_RGB>
 8001802:	e04e      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '3')//七彩灯亮绿灯 Colorful light on green light
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 8001806:	7b5b      	ldrb	r3, [r3, #13]
 8001808:	2b33      	cmp	r3, #51	@ 0x33
 800180a:	d104      	bne.n	8001816 <Deal_Servo_RGB_BEEP_Data+0x46>
	{
		Set_RGB(RGB_Max, green);
 800180c:	2101      	movs	r1, #1
 800180e:	2003      	movs	r0, #3
 8001810:	f000 fe36 	bl	8002480 <Set_RGB>
 8001814:	e045      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '4') //七彩灯亮蓝灯 Colorful light, bright blue light
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 8001818:	7b5b      	ldrb	r3, [r3, #13]
 800181a:	2b34      	cmp	r3, #52	@ 0x34
 800181c:	d104      	bne.n	8001828 <Deal_Servo_RGB_BEEP_Data+0x58>
	{
		Set_RGB(RGB_Max, blue);
 800181e:	2102      	movs	r1, #2
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fe2d 	bl	8002480 <Set_RGB>
 8001826:	e03c      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '5') //七彩灯亮青色 Colorful light bright blue
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 800182a:	7b5b      	ldrb	r3, [r3, #13]
 800182c:	2b35      	cmp	r3, #53	@ 0x35
 800182e:	d104      	bne.n	800183a <Deal_Servo_RGB_BEEP_Data+0x6a>
	{
		Set_RGB(RGB_Max, lake);
 8001830:	2105      	movs	r1, #5
 8001832:	2003      	movs	r0, #3
 8001834:	f000 fe24 	bl	8002480 <Set_RGB>
 8001838:	e033      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '6') //七彩灯亮品红 Colorful light bright magenta
 800183a:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	2b36      	cmp	r3, #54	@ 0x36
 8001840:	d104      	bne.n	800184c <Deal_Servo_RGB_BEEP_Data+0x7c>
	{
		Set_RGB(RGB_Max, purple);
 8001842:	2104      	movs	r1, #4
 8001844:	2003      	movs	r0, #3
 8001846:	f000 fe1b 	bl	8002480 <Set_RGB>
 800184a:	e02a      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '7') //七彩灯亮黄色 Colorful light in yellow
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 800184e:	7b5b      	ldrb	r3, [r3, #13]
 8001850:	2b37      	cmp	r3, #55	@ 0x37
 8001852:	d104      	bne.n	800185e <Deal_Servo_RGB_BEEP_Data+0x8e>
	{
		Set_RGB(RGB_Max, yellow);
 8001854:	2103      	movs	r1, #3
 8001856:	2003      	movs	r0, #3
 8001858:	f000 fe12 	bl	8002480 <Set_RGB>
 800185c:	e021      	b.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	}
	else if (ProtocolString[13] == '8') //七彩灯灭 Colorful lights out
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 8001860:	7b5b      	ldrb	r3, [r3, #13]
 8001862:	2b38      	cmp	r3, #56	@ 0x38
 8001864:	d11d      	bne.n	80018a2 <Deal_Servo_RGB_BEEP_Data+0xd2>
	{
		RGB_OFF_ALL;
 8001866:	2200      	movs	r2, #0
 8001868:	2104      	movs	r1, #4
 800186a:	481c      	ldr	r0, [pc, #112]	@ (80018dc <Deal_Servo_RGB_BEEP_Data+0x10c>)
 800186c:	f005 fad0 	bl	8006e10 <HAL_GPIO_WritePin>
 8001870:	2200      	movs	r2, #0
 8001872:	2108      	movs	r1, #8
 8001874:	4819      	ldr	r0, [pc, #100]	@ (80018dc <Deal_Servo_RGB_BEEP_Data+0x10c>)
 8001876:	f005 facb 	bl	8006e10 <HAL_GPIO_WritePin>
 800187a:	2200      	movs	r2, #0
 800187c:	2110      	movs	r1, #16
 800187e:	4817      	ldr	r0, [pc, #92]	@ (80018dc <Deal_Servo_RGB_BEEP_Data+0x10c>)
 8001880:	f005 fac6 	bl	8006e10 <HAL_GPIO_WritePin>
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <Deal_Servo_RGB_BEEP_Data+0x110>)
 800188a:	f005 fac1 	bl	8006e10 <HAL_GPIO_WritePin>
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <Deal_Servo_RGB_BEEP_Data+0x10c>)
 8001894:	f005 fabc 	bl	8006e10 <HAL_GPIO_WritePin>
 8001898:	2200      	movs	r2, #0
 800189a:	2104      	movs	r1, #4
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <Deal_Servo_RGB_BEEP_Data+0x110>)
 800189e:	f005 fab7 	bl	8006e10 <HAL_GPIO_WritePin>
	}

	if (ProtocolString[9] == '1') //舵机旋转到180度 The steering gear rotates to 180 degrees
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80018a4:	7a5b      	ldrb	r3, [r3, #9]
 80018a6:	2b31      	cmp	r3, #49	@ 0x31
 80018a8:	d103      	bne.n	80018b2 <Deal_Servo_RGB_BEEP_Data+0xe2>
	{
		PwmServo_Set_Angle(S1_SERVO, 180);
 80018aa:	21b4      	movs	r1, #180	@ 0xb4
 80018ac:	2000      	movs	r0, #0
 80018ae:	f002 fab5 	bl	8003e1c <PwmServo_Set_Angle>
	}
	if (ProtocolString[9] == '2') //舵机旋转到0度 The steering gear rotates to 0 degrees
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80018b4:	7a5b      	ldrb	r3, [r3, #9]
 80018b6:	2b32      	cmp	r3, #50	@ 0x32
 80018b8:	d103      	bne.n	80018c2 <Deal_Servo_RGB_BEEP_Data+0xf2>
	{
		PwmServo_Set_Angle(S1_SERVO, 0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2000      	movs	r0, #0
 80018be:	f002 faad 	bl	8003e1c <PwmServo_Set_Angle>
	}
	if (ProtocolString[17] == '1') //舵机旋转到90度 The steering gear rotates to 90 degrees
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <Deal_Servo_RGB_BEEP_Data+0x108>)
 80018c4:	7c5b      	ldrb	r3, [r3, #17]
 80018c6:	2b31      	cmp	r3, #49	@ 0x31
 80018c8:	d103      	bne.n	80018d2 <Deal_Servo_RGB_BEEP_Data+0x102>
	{
		PwmServo_Set_Angle(S1_SERVO, 90);
 80018ca:	215a      	movs	r1, #90	@ 0x5a
 80018cc:	2000      	movs	r0, #0
 80018ce:	f002 faa5 	bl	8003e1c <PwmServo_Set_Angle>
	}

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000228 	.word	0x20000228
 80018dc:	40011800 	.word	0x40011800
 80018e0:	40012000 	.word	0x40012000

080018e4 <Deal_RGB_Data>:

//函数功能:处理RGB的数据 Function function: Processing RGB data
//eg:$4WD,CLR255,CLG0,CLB0# 七彩灯亮红色 Colorful lights in red
//只能亮颜色，颜色的亮度调节不了 Can only brighten the color, the brightness of the color cannot be adjusted
void Deal_RGB_Data(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
	uint16_t m_kp, i, ii, red, green, blue;
	static char m_skp[5] = {0};

	i = StringFind((const char *)ProtocolString, (const char *)"CLR", 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	493d      	ldr	r1, [pc, #244]	@ (80019e4 <Deal_RGB_Data+0x100>)
 80018ee:	483e      	ldr	r0, [pc, #248]	@ (80019e8 <Deal_RGB_Data+0x104>)
 80018f0:	f7ff fe3c 	bl	800156c <StringFind>
 80018f4:	4603      	mov	r3, r0
 80018f6:	813b      	strh	r3, [r7, #8]
	ii = StringFind((const char *)ProtocolString, (const char *)",", i);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	461a      	mov	r2, r3
 80018fc:	493b      	ldr	r1, [pc, #236]	@ (80019ec <Deal_RGB_Data+0x108>)
 80018fe:	483a      	ldr	r0, [pc, #232]	@ (80019e8 <Deal_RGB_Data+0x104>)
 8001900:	f7ff fe34 	bl	800156c <StringFind>
 8001904:	4603      	mov	r3, r0
 8001906:	80fb      	strh	r3, [r7, #6]
	if (ii > i)
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	429a      	cmp	r2, r3
 800190e:	d912      	bls.n	8001936 <Deal_RGB_Data+0x52>
	{
		memcpy(m_skp, ProtocolString + i + 3, ii - i -3);
 8001910:	893b      	ldrh	r3, [r7, #8]
 8001912:	3303      	adds	r3, #3
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <Deal_RGB_Data+0x104>)
 8001916:	1899      	adds	r1, r3, r2
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	3b03      	subs	r3, #3
 8001920:	461a      	mov	r2, r3
 8001922:	4833      	ldr	r0, [pc, #204]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 8001924:	f00b f80f 	bl	800c946 <memcpy>
		m_kp = atoi(m_skp);
 8001928:	4831      	ldr	r0, [pc, #196]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 800192a:	f009 ff51 	bl	800b7d0 <atoi>
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
		red =   m_kp;
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	81fb      	strh	r3, [r7, #14]
	}
	i = StringFind((const char *)ProtocolString, (const char *)"CLG", 0);
 8001936:	2200      	movs	r2, #0
 8001938:	492e      	ldr	r1, [pc, #184]	@ (80019f4 <Deal_RGB_Data+0x110>)
 800193a:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <Deal_RGB_Data+0x104>)
 800193c:	f7ff fe16 	bl	800156c <StringFind>
 8001940:	4603      	mov	r3, r0
 8001942:	813b      	strh	r3, [r7, #8]
	ii = StringFind((const char *)ProtocolString, (const char *)",", i);
 8001944:	893b      	ldrh	r3, [r7, #8]
 8001946:	461a      	mov	r2, r3
 8001948:	4928      	ldr	r1, [pc, #160]	@ (80019ec <Deal_RGB_Data+0x108>)
 800194a:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <Deal_RGB_Data+0x104>)
 800194c:	f7ff fe0e 	bl	800156c <StringFind>
 8001950:	4603      	mov	r3, r0
 8001952:	80fb      	strh	r3, [r7, #6]
	if (ii > i)
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	893b      	ldrh	r3, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	d912      	bls.n	8001982 <Deal_RGB_Data+0x9e>
	{
		memcpy(m_skp, ProtocolString + i + 3, ii - i -3);
 800195c:	893b      	ldrh	r3, [r7, #8]
 800195e:	3303      	adds	r3, #3
 8001960:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <Deal_RGB_Data+0x104>)
 8001962:	1899      	adds	r1, r3, r2
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	893b      	ldrh	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	3b03      	subs	r3, #3
 800196c:	461a      	mov	r2, r3
 800196e:	4820      	ldr	r0, [pc, #128]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 8001970:	f00a ffe9 	bl	800c946 <memcpy>
		m_kp = atoi(m_skp);
 8001974:	481e      	ldr	r0, [pc, #120]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 8001976:	f009 ff2b 	bl	800b7d0 <atoi>
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
		green =   m_kp;
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	81bb      	strh	r3, [r7, #12]
	}
	i = StringFind((const char *)ProtocolString, (const char *)"CLB", 0);
 8001982:	2200      	movs	r2, #0
 8001984:	491c      	ldr	r1, [pc, #112]	@ (80019f8 <Deal_RGB_Data+0x114>)
 8001986:	4818      	ldr	r0, [pc, #96]	@ (80019e8 <Deal_RGB_Data+0x104>)
 8001988:	f7ff fdf0 	bl	800156c <StringFind>
 800198c:	4603      	mov	r3, r0
 800198e:	813b      	strh	r3, [r7, #8]
	ii = StringFind((const char *)ProtocolString, (const char *)"#", i);
 8001990:	893b      	ldrh	r3, [r7, #8]
 8001992:	461a      	mov	r2, r3
 8001994:	4919      	ldr	r1, [pc, #100]	@ (80019fc <Deal_RGB_Data+0x118>)
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <Deal_RGB_Data+0x104>)
 8001998:	f7ff fde8 	bl	800156c <StringFind>
 800199c:	4603      	mov	r3, r0
 800199e:	80fb      	strh	r3, [r7, #6]
	if (ii > i)
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d912      	bls.n	80019ce <Deal_RGB_Data+0xea>
	{
		memcpy(m_skp, ProtocolString + i + 3, ii - i -3);
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	3303      	adds	r3, #3
 80019ac:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <Deal_RGB_Data+0x104>)
 80019ae:	1899      	adds	r1, r3, r2
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	3b03      	subs	r3, #3
 80019b8:	461a      	mov	r2, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 80019bc:	f00a ffc3 	bl	800c946 <memcpy>
		m_kp = atoi(m_skp);
 80019c0:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <Deal_RGB_Data+0x10c>)
 80019c2:	f009 ff05 	bl	800b7d0 <atoi>
 80019c6:	4603      	mov	r3, r0
 80019c8:	80bb      	strh	r3, [r7, #4]
		blue =  m_kp;
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	817b      	strh	r3, [r7, #10]
	}
	Colorful_RGB(red, green, blue);//点亮相应颜色的灯 Illuminate the corresponding colored lights
 80019ce:	897a      	ldrh	r2, [r7, #10]
 80019d0:	89b9      	ldrh	r1, [r7, #12]
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fc89 	bl	80022ec <Colorful_RGB>

}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800ff60 	.word	0x0800ff60
 80019e8:	20000228 	.word	0x20000228
 80019ec:	0800ff70 	.word	0x0800ff70
 80019f0:	2000032c 	.word	0x2000032c
 80019f4:	0800ff74 	.word	0x0800ff74
 80019f8:	0800ff78 	.word	0x0800ff78
 80019fc:	0800ff7c 	.word	0x0800ff7c

08001a00 <Deal_Mode>:

//函数功能:进行模式判断 Function function: Perform pattern judgment
void Deal_Mode(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	if (ProtocolString[10] == '0') //停止模式 STOP MODE
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <Deal_Mode+0xe4>)
 8001a06:	7a9b      	ldrb	r3, [r3, #10]
 8001a08:	2b30      	cmp	r3, #48	@ 0x30
 8001a0a:	d12b      	bne.n	8001a64 <Deal_Mode+0x64>
	{
		wheel_State_YAW(MOTION_STOP,0,0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2000      	movs	r0, #0
 8001a12:	f001 fc43 	bl	800329c <wheel_State_YAW>
		g_CarState = MOTION_STOP;
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <Deal_Mode+0xe8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
		RGB_OFF_ALL;
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4832      	ldr	r0, [pc, #200]	@ (8001aec <Deal_Mode+0xec>)
 8001a22:	f005 f9f5 	bl	8006e10 <HAL_GPIO_WritePin>
 8001a26:	2200      	movs	r2, #0
 8001a28:	2108      	movs	r1, #8
 8001a2a:	4830      	ldr	r0, [pc, #192]	@ (8001aec <Deal_Mode+0xec>)
 8001a2c:	f005 f9f0 	bl	8006e10 <HAL_GPIO_WritePin>
 8001a30:	2200      	movs	r2, #0
 8001a32:	2110      	movs	r1, #16
 8001a34:	482d      	ldr	r0, [pc, #180]	@ (8001aec <Deal_Mode+0xec>)
 8001a36:	f005 f9eb 	bl	8006e10 <HAL_GPIO_WritePin>
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	482c      	ldr	r0, [pc, #176]	@ (8001af0 <Deal_Mode+0xf0>)
 8001a40:	f005 f9e6 	bl	8006e10 <HAL_GPIO_WritePin>
 8001a44:	2200      	movs	r2, #0
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	4828      	ldr	r0, [pc, #160]	@ (8001aec <Deal_Mode+0xec>)
 8001a4a:	f005 f9e1 	bl	8006e10 <HAL_GPIO_WritePin>
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2104      	movs	r1, #4
 8001a52:	4827      	ldr	r0, [pc, #156]	@ (8001af0 <Deal_Mode+0xf0>)
 8001a54:	f005 f9dc 	bl	8006e10 <HAL_GPIO_WritePin>
		g_modeSelect = 0;
 8001a58:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <Deal_Mode+0xf4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BeepOnOffMode();
 8001a5e:	f000 f8ad 	bl	8001bbc <BeepOnOffMode>
			case '5': break;
			case '6': g_modeSelect = 6; ModeBEEP(6); break; //跟随模式 Follow Mode
			default: g_modeSelect = 0; break;
		}
	}
}
 8001a62:	e03d      	b.n	8001ae0 <Deal_Mode+0xe0>
		switch (ProtocolString[9])
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <Deal_Mode+0xe4>)
 8001a66:	7a5b      	ldrb	r3, [r3, #9]
 8001a68:	3b30      	subs	r3, #48	@ 0x30
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d833      	bhi.n	8001ad6 <Deal_Mode+0xd6>
 8001a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <Deal_Mode+0x74>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001adf 	.word	0x08001adf
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001a9f 	.word	0x08001a9f
 8001a80:	08001aad 	.word	0x08001aad
 8001a84:	08001abb 	.word	0x08001abb
 8001a88:	08001adf 	.word	0x08001adf
 8001a8c:	08001ac9 	.word	0x08001ac9
			case '1': g_modeSelect = 1; ModeBEEP(1); break; //遥控模式 Remote Control Mode
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <Deal_Mode+0xf4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 f8a6 	bl	8001be8 <ModeBEEP>
 8001a9c:	e020      	b.n	8001ae0 <Deal_Mode+0xe0>
			case '2': g_modeSelect = 2; ModeBEEP(2); break; //巡线模式 Patrol mode
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <Deal_Mode+0xf4>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f000 f89f 	bl	8001be8 <ModeBEEP>
 8001aaa:	e019      	b.n	8001ae0 <Deal_Mode+0xe0>
			case '3': g_modeSelect = 3; ModeBEEP(3); break; //避障模式 Obstacle avoidance mode
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <Deal_Mode+0xf4>)
 8001aae:	2203      	movs	r2, #3
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 f898 	bl	8001be8 <ModeBEEP>
 8001ab8:	e012      	b.n	8001ae0 <Deal_Mode+0xe0>
			case '4': g_modeSelect = 4; ModeBEEP(4); break; //7彩探照灯模式
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <Deal_Mode+0xf4>)
 8001abc:	2204      	movs	r2, #4
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f000 f891 	bl	8001be8 <ModeBEEP>
 8001ac6:	e00b      	b.n	8001ae0 <Deal_Mode+0xe0>
			case '6': g_modeSelect = 6; ModeBEEP(6); break; //跟随模式 Follow Mode
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <Deal_Mode+0xf4>)
 8001aca:	2206      	movs	r2, #6
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	2006      	movs	r0, #6
 8001ad0:	f000 f88a 	bl	8001be8 <ModeBEEP>
 8001ad4:	e004      	b.n	8001ae0 <Deal_Mode+0xe0>
			default: g_modeSelect = 0; break;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <Deal_Mode+0xf4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e000      	b.n	8001ae0 <Deal_Mode+0xe0>
			case '0': break;
 8001ade:	bf00      	nop
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	20000328 	.word	0x20000328
 8001aec:	40011800 	.word	0x40011800
 8001af0:	40012000 	.word	0x40012000
 8001af4:	20000329 	.word	0x20000329

08001af8 <Deal_PWM_Servo>:

//舵机云台控制 Steering gear pan tilt control
//eg:$4WD,PTZ180# 舵机转动到180度 The steering gear rotates to 180 degrees
void Deal_PWM_Servo(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
	int m_kp, i, ii;

	i = StringFind((const char *)ProtocolString, (const char *)"PTZ", 0); //寻找以PTZ开头,#结束中间的字符 Find characters starting with PTZ and ending with # in the middle
 8001afe:	2200      	movs	r2, #0
 8001b00:	4917      	ldr	r1, [pc, #92]	@ (8001b60 <Deal_PWM_Servo+0x68>)
 8001b02:	4818      	ldr	r0, [pc, #96]	@ (8001b64 <Deal_PWM_Servo+0x6c>)
 8001b04:	f7ff fd32 	bl	800156c <StringFind>
 8001b08:	6178      	str	r0, [r7, #20]
	ii = StringFind((const char *)ProtocolString, (const char *)"#", i);
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <Deal_PWM_Servo+0x70>)
 8001b0e:	4815      	ldr	r0, [pc, #84]	@ (8001b64 <Deal_PWM_Servo+0x6c>)
 8001b10:	f7ff fd2c 	bl	800156c <StringFind>
 8001b14:	6138      	str	r0, [r7, #16]
	if (ii > i)
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dd1b      	ble.n	8001b56 <Deal_PWM_Servo+0x5e>
	{
		char m_skp[5] = {0};
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	2300      	movs	r3, #0
 8001b24:	723b      	strb	r3, [r7, #8]
		memcpy(m_skp, ProtocolString + i + 3, ii - i -3);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <Deal_PWM_Servo+0x6c>)
 8001b2c:	1899      	adds	r1, r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	3b03      	subs	r3, #3
 8001b36:	461a      	mov	r2, r3
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00a ff03 	bl	800c946 <memcpy>

		m_kp = atoi(m_skp);        //将找到的字符串变成整型 Convert the found string to integer
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f009 fe44 	bl	800b7d0 <atoi>
 8001b48:	60f8      	str	r0, [r7, #12]
		PwmServo_Set_Angle(S1_SERVO, m_kp);//转动S1舵机 Rotate S1 steering gear
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2000      	movs	r0, #0
 8001b52:	f002 f963 	bl	8003e1c <PwmServo_Set_Angle>
	}

}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	0800ff64 	.word	0x0800ff64
 8001b64:	20000228 	.word	0x20000228
 8001b68:	0800ff7c 	.word	0x0800ff7c

08001b6c <whistle>:


//函数功能:鸣笛的特效
//Function function: special effects for honking horns
void whistle(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	  BEEP_ON;
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b76:	4810      	ldr	r0, [pc, #64]	@ (8001bb8 <whistle+0x4c>)
 8001b78:	f005 f94a 	bl	8006e10 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001b7c:	20c8      	movs	r0, #200	@ 0xc8
 8001b7e:	f003 fe51 	bl	8005824 <HAL_Delay>
	  BEEP_OFF;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b88:	480b      	ldr	r0, [pc, #44]	@ (8001bb8 <whistle+0x4c>)
 8001b8a:	f005 f941 	bl	8006e10 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001b8e:	20c8      	movs	r0, #200	@ 0xc8
 8001b90:	f003 fe48 	bl	8005824 <HAL_Delay>

	  BEEP_ON;
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b9a:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <whistle+0x4c>)
 8001b9c:	f005 f938 	bl	8006e10 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 8001ba0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001ba4:	f003 fe3e 	bl	8005824 <HAL_Delay>
	  BEEP_OFF;
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bae:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <whistle+0x4c>)
 8001bb0:	f005 f92e 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40012000 	.word	0x40012000

08001bbc <BeepOnOffMode>:


//函数功能:提示声
//Function function: prompt sound
void BeepOnOffMode(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	BEEP_ON;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <BeepOnOffMode+0x28>)
 8001bc8:	f005 f922 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bd0:	f003 fe28 	bl	8005824 <HAL_Delay>
	BEEP_OFF;
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bda:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <BeepOnOffMode+0x28>)
 8001bdc:	f005 f918 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40012000 	.word	0x40012000

08001be8 <ModeBEEP>:

//函数功能:模式提示声
//Function function: Mode prompt sound
void ModeBEEP(int mode)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < mode + 1; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e014      	b.n	8001c20 <ModeBEEP+0x38>
	{
		BEEP_ON;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bfc:	480f      	ldr	r0, [pc, #60]	@ (8001c3c <ModeBEEP+0x54>)
 8001bfe:	f005 f907 	bl	8006e10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001c02:	2064      	movs	r0, #100	@ 0x64
 8001c04:	f003 fe0e 	bl	8005824 <HAL_Delay>
		BEEP_OFF;
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c0e:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <ModeBEEP+0x54>)
 8001c10:	f005 f8fe 	bl	8006e10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001c14:	2064      	movs	r0, #100	@ 0x64
 8001c16:	f003 fe05 	bl	8005824 <HAL_Delay>
	for (i = 0; i < mode + 1; i++)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dae6      	bge.n	8001bf6 <ModeBEEP+0xe>
	}

	BEEP_OFF;
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2e:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <ModeBEEP+0x54>)
 8001c30:	f005 f8ee 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40012000 	.word	0x40012000

08001c40 <Ir_Ultrasonic_avoid>:
 * Ultrasound combined with infrared for obstacle avoidance
 * uint16_t distance obstacle avoidance distance unit: cm
 * */

void Ir_Ultrasonic_avoid(uint16_t distance)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
	uint16_t left_data = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	81bb      	strh	r3, [r7, #12]
	uint16_t right_data = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	817b      	strh	r3, [r7, #10]
	uint16_t dis;
	dis=Get_distance();
 8001c52:	f002 fa4d 	bl	80040f0 <Get_distance>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff faeb 	bl	8001234 <__aeabi_f2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	81fb      	strh	r3, [r7, #14]
	Get_Iravoid_Data(&left_data,&right_data);//串口打印采集的数据 Serial port printing of collected data
 8001c62:	f107 020a 	add.w	r2, r7, #10
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f8b3 	bl	8001dd8 <Get_Iravoid_Data>
	if((distance >2.0 && dis < distance )||(left_data <500||right_data<500))
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d903      	bls.n	8001c80 <Ir_Ultrasonic_avoid+0x40>
 8001c78:	89fa      	ldrh	r2, [r7, #14]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d307      	bcc.n	8001c90 <Ir_Ultrasonic_avoid+0x50>
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c86:	d303      	bcc.n	8001c90 <Ir_Ultrasonic_avoid+0x50>
 8001c88:	897b      	ldrh	r3, [r7, #10]
 8001c8a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c8e:	d22f      	bcs.n	8001cf0 <Ir_Ultrasonic_avoid+0xb0>
		{
			//小车停止 Car stops
			wheel_State(MOTION_STOP,0);
 8001c90:	2100      	movs	r1, #0
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 fb90 	bl	80033b8 <wheel_State>
			HAL_Delay(500);
 8001c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c9c:	f003 fdc2 	bl	8005824 <HAL_Delay>

			//小车后退 Car backs up
			wheel_State(MOTION_BACK,250);
 8001ca0:	21fa      	movs	r1, #250	@ 0xfa
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f001 fb88 	bl	80033b8 <wheel_State>
			HAL_Delay(1000);
 8001ca8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cac:	f003 fdba 	bl	8005824 <HAL_Delay>

			Get_Iravoid_Data(&left_data,&right_data);
 8001cb0:	f107 020a 	add.w	r2, r7, #10
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f88c 	bl	8001dd8 <Get_Iravoid_Data>

			if(left_data>=right_data)
 8001cc0:	89ba      	ldrh	r2, [r7, #12]
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d309      	bcc.n	8001cdc <Ir_Ultrasonic_avoid+0x9c>
			{
				//小车左转 Car left
				wheel_State(MOTION_SPIN_LEFT,500);
 8001cc8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ccc:	2005      	movs	r0, #5
 8001cce:	f001 fb73 	bl	80033b8 <wheel_State>
				HAL_Delay(500);
 8001cd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cd6:	f003 fda5 	bl	8005824 <HAL_Delay>
			if(left_data>=right_data)
 8001cda:	e00e      	b.n	8001cfa <Ir_Ultrasonic_avoid+0xba>
			}
			else
			{
				//小车右转 Car right
				wheel_State(MOTION_SPIN_RIGHT,500);
 8001cdc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f001 fb69 	bl	80033b8 <wheel_State>
				HAL_Delay(500);
 8001ce6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cea:	f003 fd9b 	bl	8005824 <HAL_Delay>
			if(left_data>=right_data)
 8001cee:	e004      	b.n	8001cfa <Ir_Ultrasonic_avoid+0xba>

		}
		else
		{
			//小车前进 The car moves forward
			wheel_State(MOTION_RUN,250);
 8001cf0:	21fa      	movs	r1, #250	@ 0xfa
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f001 fb60 	bl	80033b8 <wheel_State>
		}


}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <Get_Iraviod_App>:


int Get_Iraviod_App(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
	uint16_t IRleft_data5 = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	80bb      	strh	r3, [r7, #4]
	uint16_t IRright_data5 = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	807b      	strh	r3, [r7, #2]
	Get_Iravoid_Data(&IRleft_data5,&IRright_data5);
 8001d10:	1cba      	adds	r2, r7, #2
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f85e 	bl	8001dd8 <Get_Iravoid_Data>

	uint8_t hh = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
	if(IRleft_data5 <600)
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001d26:	d202      	bcs.n	8001d2e <Get_Iraviod_App+0x2c>
		hh += 10;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	71fb      	strb	r3, [r7, #7]
	if(IRright_data5 < 600)
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001d34:	d202      	bcs.n	8001d3c <Get_Iraviod_App+0x3a>
		hh += 1;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	71fb      	strb	r3, [r7, #7]

	return hh;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <IR_SWitch>:
//传入参数：ENABLE DISABLE

//Function function: infrared obstacle avoidance switch
//Incoming parameters :ENABLE DISABLE
void IR_SWitch(uint8_t state)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
	//打开传感器 -低电平打开
	//Open sensor - low level open
	if(state == ENABLE)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <IR_SWitch+0x1c>
		HAL_GPIO_WritePin(GPIOE, Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2160      	movs	r1, #96	@ 0x60
 8001d5c:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <IR_SWitch+0x30>)
 8001d5e:	f005 f857 	bl	8006e10 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOE, Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin, GPIO_PIN_SET);
	}

}
 8001d62:	e004      	b.n	8001d6e <IR_SWitch+0x26>
		HAL_GPIO_WritePin(GPIOE, Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2160      	movs	r1, #96	@ 0x60
 8001d68:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <IR_SWitch+0x30>)
 8001d6a:	f005 f851 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40011800 	.word	0x40011800

08001d7c <Adc_Get_Iravoid>:
 * 采集传感器的电压
 *
 *Collect the voltage of the sensor
 * */
uint16_t Adc_Get_Iravoid(uint32_t ch)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ch;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4619      	mov	r1, r3
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <Adc_Get_Iravoid+0x58>)
 8001da4:	f004 f914 	bl	8005fd0 <HAL_ADC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <Adc_Get_Iravoid+0x36>
  {
	Error_Handler();
 8001dae:	f002 fc83 	bl	80046b8 <Error_Handler>
  }

	HAL_ADC_Start(&hadc3);
 8001db2:	4808      	ldr	r0, [pc, #32]	@ (8001dd4 <Adc_Get_Iravoid+0x58>)
 8001db4:	f003 fefc 	bl	8005bb0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 500);
 8001db8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <Adc_Get_Iravoid+0x58>)
 8001dbe:	f003 ffbd 	bl	8005d3c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc3);
 8001dc2:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <Adc_Get_Iravoid+0x58>)
 8001dc4:	f004 f8dc 	bl	8005f80 <HAL_ADC_GetValue>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29b      	uxth	r3, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000684 	.word	0x20000684

08001dd8 <Get_Iravoid_Data>:
 * 串口打印采集的数据
 *
 *Serial port printing of collected data
 * */
void Get_Iravoid_Data(uint16_t *left_data,uint16_t *right_data)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]

	*left_data =  Adc_Get_Iravoid(IR_Left_CH);
 8001de2:	2007      	movs	r0, #7
 8001de4:	f7ff ffca 	bl	8001d7c <Adc_Get_Iravoid>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	801a      	strh	r2, [r3, #0]
	*right_data = Adc_Get_Iravoid(IR_Right_CH);
 8001df0:	2008      	movs	r0, #8
 8001df2:	f7ff ffc3 	bl	8001d7c <Adc_Get_Iravoid>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	801a      	strh	r2, [r3, #0]

	printf("L1:%d     R1:%d \r\n",*left_data,*right_data);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <Get_Iravoid_Data+0x40>)
 8001e0c:	f00a fc98 	bl	800c740 <iprintf>

}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	0800ff80 	.word	0x0800ff80

08001e1c <I2C_WriteByte>:
static SSD1306_t SSD1306;

// 向oled写数据  -- 使用hal库的i2c,不打开i2c的EV_IRQHandler，使用DMA会有bug，此为hal库的bug
// Write data to OLED - use i2c from the HAL library without opening EV_IRQHandler, there may be a bug when using DMA, which is a bug in the hal library
void I2C_WriteByte(unsigned char addr, unsigned char data)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
    // 不使用DMA的方式传输-阻塞型
    // Transmission without DMA - Blocking
    HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, addr, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	230a      	movs	r3, #10
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	2301      	movs	r3, #1
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	2178      	movs	r1, #120	@ 0x78
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <I2C_WriteByte+0x34>)
 8001e42:	f005 f9d3 	bl	80071ec <HAL_I2C_Mem_Write>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200006b4 	.word	0x200006b4

08001e54 <OLED_Init>:
// 函数功能:oled初始化
// 传入参数:无
// Function function: oled initialization
// Incoming parameter: None
void OLED_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8001e58:	2064      	movs	r0, #100	@ 0x64
 8001e5a:	f003 fce3 	bl	8005824 <HAL_Delay>

    SSD1306_WRITECOMMAND(0xae); // display off
 8001e5e:	21ae      	movs	r1, #174	@ 0xae
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff ffdb 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // Set Normal Display (default)
 8001e66:	21a6      	movs	r1, #166	@ 0xa6
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff ffd7 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xAE); // DISPLAYOFF
 8001e6e:	21ae      	movs	r1, #174	@ 0xae
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff ffd3 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD5); // SETDISPLAYCLOCKDIV
 8001e76:	21d5      	movs	r1, #213	@ 0xd5
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff ffcf 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x80); // the suggested ratio 0x80
 8001e7e:	2180      	movs	r1, #128	@ 0x80
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff ffcb 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xA8); // SSD1306_SETMULTIPLEX
 8001e86:	21a8      	movs	r1, #168	@ 0xa8
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff ffc7 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x1F);
 8001e8e:	211f      	movs	r1, #31
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff ffc3 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD3);       // SETDISPLAYOFFSET
 8001e96:	21d3      	movs	r1, #211	@ 0xd3
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff ffbf 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x00);       // no offset
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff ffbb 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40 | 0x0); // SETSTARTLINE
 8001ea6:	2140      	movs	r1, #64	@ 0x40
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff ffb7 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x8D);       // CHARGEPUMP
 8001eae:	218d      	movs	r1, #141	@ 0x8d
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff ffb3 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x14);       // 0x014 enable, 0x010 disable
 8001eb6:	2114      	movs	r1, #20
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff ffaf 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x20);       // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ffab 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02);       // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff ffa7 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa1);       // segment remap a0/a1
 8001ece:	21a1      	movs	r1, #161	@ 0xa1
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff ffa3 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xc8);       // c0: scan dir normal, c8: reverse
 8001ed6:	21c8      	movs	r1, #200	@ 0xc8
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff ff9f 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xda);
 8001ede:	21da      	movs	r1, #218	@ 0xda
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff ff9b 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02); // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff ff97 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x81);
 8001eee:	2181      	movs	r1, #129	@ 0x81
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff93 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xcf); // [2] set contrast control
 8001ef6:	21cf      	movs	r1, #207	@ 0xcf
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ff8f 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xd9);
 8001efe:	21d9      	movs	r1, #217	@ 0xd9
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff ff8b 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xf1); // [2] pre-charge period 0x022/f1
 8001f06:	21f1      	movs	r1, #241	@ 0xf1
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ff87 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xdb);
 8001f0e:	21db      	movs	r1, #219	@ 0xdb
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff ff83 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40); // vcomh deselect level
 8001f16:	2140      	movs	r1, #64	@ 0x40
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff ff7f 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x2e); // Disable scroll
 8001f1e:	212e      	movs	r1, #46	@ 0x2e
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff7b 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa4); // output ram to display
 8001f26:	21a4      	movs	r1, #164	@ 0xa4
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff ff77 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // none inverted normal display mode
 8001f2e:	21a6      	movs	r1, #166	@ 0xa6
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff ff73 	bl	8001e1c <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xaf); // display on
 8001f36:	21af      	movs	r1, #175	@ 0xaf
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff ff6f 	bl	8001e1c <I2C_WriteByte>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f846 	bl	8001fd0 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 8001f44:	f000 f80e 	bl	8001f64 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <OLED_Init+0x10c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <OLED_Init+0x10c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8001f54:	4b02      	ldr	r3, [pc, #8]	@ (8001f60 <OLED_Init+0x10c>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	715a      	strb	r2, [r3, #5]
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000534 	.word	0x20000534

08001f64 <SSD1306_UpdateScreen>:
// 函数功能:oled屏幕更新显示
// 传入参数:无
// Function function: OLED screen update display
// Incoming parameter: None
void SSD1306_UpdateScreen(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
    uint8_t m, n;

    for (m = 0; m < 8; m++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e025      	b.n	8001fbc <SSD1306_UpdateScreen+0x58>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	3b50      	subs	r3, #80	@ 0x50
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff ff4f 	bl	8001e1c <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x00);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ff4b 	bl	8001e1c <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x10);
 8001f86:	2110      	movs	r1, #16
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff ff47 	bl	8001e1c <I2C_WriteByte>

        for (n = 0; n < SSD1306_WIDTH; n++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71bb      	strb	r3, [r7, #6]
 8001f92:	e00c      	b.n	8001fae <SSD1306_UpdateScreen+0x4a>
        {

            SSD1306_WRITEDATA(SSD1306_Buffer[n + SSD1306_WIDTH * m]);
 8001f94:	79ba      	ldrb	r2, [r7, #6]
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	01db      	lsls	r3, r3, #7
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <SSD1306_UpdateScreen+0x68>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2040      	movs	r0, #64	@ 0x40
 8001fa4:	f7ff ff3a 	bl	8001e1c <I2C_WriteByte>
        for (n = 0; n < SSD1306_WIDTH; n++)
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	3301      	adds	r3, #1
 8001fac:	71bb      	strb	r3, [r7, #6]
 8001fae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	daee      	bge.n	8001f94 <SSD1306_UpdateScreen+0x30>
    for (m = 0; m < 8; m++)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d9d6      	bls.n	8001f70 <SSD1306_UpdateScreen+0xc>
        }
    }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000334 	.word	0x20000334

08001fd0 <SSD1306_Fill>:
// 函数功能:oled屏幕清屏，但没刷新显示
// 传入参数:color :SSD1306_COLOR_BLACK SSD1306_COLOR_WHITE
// Function function: OLED screen is cleared, but the display is not refreshed
// Incoming parameter: color: SSD1306_ COLOR_ BLACK SSD1306_ COLOR_ WHITE
void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <SSD1306_Fill+0x14>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <SSD1306_Fill+0x16>
 8001fe4:	23ff      	movs	r3, #255	@ 0xff
 8001fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fea:	4619      	mov	r1, r3
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <SSD1306_Fill+0x2c>)
 8001fee:	f00a fc1c 	bl	800c82a <memset>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000334 	.word	0x20000334

08002000 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	460b      	mov	r3, r1
 800200c:	80bb      	strh	r3, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	2b7f      	cmp	r3, #127	@ 0x7f
 8002016:	d848      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	2b1f      	cmp	r3, #31
 800201c:	d845      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
    {
        return; // Error, out of range 出错，超出范围
    }

    /* Check if pixels are inverted 检查像素是否倒置 */
    if (SSD1306.Inverted)
 800201e:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <SSD1306_DrawPixel+0xb4>)
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	70fb      	strb	r3, [r7, #3]
    }

    /* COLOR 设置颜色 */
    if (color == SSD1306_COLOR_WHITE)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d11a      	bne.n	8002070 <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	88bb      	ldrh	r3, [r7, #4]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b298      	uxth	r0, r3
 8002042:	4603      	mov	r3, r0
 8002044:	01db      	lsls	r3, r3, #7
 8002046:	4413      	add	r3, r2
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <SSD1306_DrawPixel+0xb8>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b25a      	sxtb	r2, r3
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	b25b      	sxtb	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b259      	sxtb	r1, r3
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	01db      	lsls	r3, r3, #7
 8002066:	4413      	add	r3, r2
 8002068:	b2c9      	uxtb	r1, r1
 800206a:	4a13      	ldr	r2, [pc, #76]	@ (80020b8 <SSD1306_DrawPixel+0xb8>)
 800206c:	54d1      	strb	r1, [r2, r3]
 800206e:	e01d      	b.n	80020ac <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b298      	uxth	r0, r3
 8002078:	4603      	mov	r3, r0
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	4413      	add	r3, r2
 800207e:	4a0e      	ldr	r2, [pc, #56]	@ (80020b8 <SSD1306_DrawPixel+0xb8>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	b25a      	sxtb	r2, r3
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	b25b      	sxtb	r3, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	b25b      	sxtb	r3, r3
 8002096:	4013      	ands	r3, r2
 8002098:	b259      	sxtb	r1, r3
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	4603      	mov	r3, r0
 800209e:	01db      	lsls	r3, r3, #7
 80020a0:	4413      	add	r3, r2
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <SSD1306_DrawPixel+0xb8>)
 80020a6:	54d1      	strb	r1, [r2, r3]
 80020a8:	e000      	b.n	80020ac <SSD1306_DrawPixel+0xac>
        return; // Error, out of range 出错，超出范围
 80020aa:	bf00      	nop
    }
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000534 	.word	0x20000534
 80020b8:	20000334 	.word	0x20000334

080020bc <SSD1306_GotoXY>:
// 函数功能:设置当前的光标
// 传入参数:x:横坐标 y:纵坐标
// Function function: Set the current cursor
// Incoming parameter: x: abscissa y: ordinate
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	80fb      	strh	r3, [r7, #6]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = x;
 80020cc:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <SSD1306_GotoXY+0x28>)
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 80020d2:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <SSD1306_GotoXY+0x28>)
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	8053      	strh	r3, [r2, #2]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000534 	.word	0x20000534

080020e8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <SSD1306_Putc+0xf8>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
    if (
 8002104:	2b7f      	cmp	r3, #127	@ 0x7f
 8002106:	dc07      	bgt.n	8002118 <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 8002108:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <SSD1306_Putc+0xf8>)
 800210a:	885b      	ldrh	r3, [r3, #2]
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002114:	2b1f      	cmp	r3, #31
 8002116:	dd01      	ble.n	800211c <SSD1306_Putc+0x34>
    {
        return 0; // Check if pixels are inverted 出错，超出范围
 8002118:	2300      	movs	r3, #0
 800211a:	e05d      	b.n	80021d8 <SSD1306_Putc+0xf0>
    }

    for (i = 0; i < Font->FontHeight; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e04b      	b.n	80021ba <SSD1306_Putc+0xd2>
    {
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	3b20      	subs	r3, #32
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	7849      	ldrb	r1, [r1, #1]
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4619      	mov	r1, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	440b      	add	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++)
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e030      	b.n	80021a8 <SSD1306_Putc+0xc0>
        {
            if ((b << j) & 0x8000)
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d010      	beq.n	8002178 <SSD1306_Putc+0x90>
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 8002156:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <SSD1306_Putc+0xf8>)
 8002158:	881a      	ldrh	r2, [r3, #0]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b298      	uxth	r0, r3
 8002162:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <SSD1306_Putc+0xf8>)
 8002164:	885a      	ldrh	r2, [r3, #2]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	79ba      	ldrb	r2, [r7, #6]
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff ff45 	bl	8002000 <SSD1306_DrawPixel>
 8002176:	e014      	b.n	80021a2 <SSD1306_Putc+0xba>
            }
            else
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <SSD1306_Putc+0xf8>)
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4413      	add	r3, r2
 8002182:	b298      	uxth	r0, r3
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <SSD1306_Putc+0xf8>)
 8002186:	885a      	ldrh	r2, [r3, #2]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b299      	uxth	r1, r3
 8002190:	79bb      	ldrb	r3, [r7, #6]
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	f7ff ff2f 	bl	8002000 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3301      	adds	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d3c8      	bcc.n	8002146 <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	461a      	mov	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d3ad      	bcc.n	8002122 <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SSD1306_Putc+0xf8>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <SSD1306_Putc+0xf8>)
 80021d4:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000534 	.word	0x20000534

080021e4 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 80021f2:	e012      	b.n	800221a <SSD1306_Puts+0x36>
    {
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	79fa      	ldrb	r2, [r7, #7]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff73 	bl	80020e8 <SSD1306_Putc>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d002      	beq.n	8002214 <SSD1306_Puts+0x30>
        {
            /* Return error */
            return *str;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	e008      	b.n	8002226 <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
    while (*str)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e8      	bne.n	80021f4 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	781b      	ldrb	r3, [r3, #0]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <OLED_Clear>:
    }
}

/* OLED Clear Screen OLED清除屏幕 */
void OLED_Clear(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff fecc 	bl	8001fd0 <SSD1306_Fill>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <OLED_Refresh>:

/*Refresh OLED screen 刷新OLED屏幕 */
void OLED_Refresh(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 8002240:	f7ff fe90 	bl	8001f64 <SSD1306_UpdateScreen>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <OLED_Draw_String>:

/* Write Characters 写入字符 */
void OLED_Draw_String(char *data, uint8_t x, uint8_t y, bool clear, bool refresh)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4603      	mov	r3, r0
 8002258:	70fb      	strb	r3, [r7, #3]
 800225a:	460b      	mov	r3, r1
 800225c:	70bb      	strb	r3, [r7, #2]
 800225e:	4613      	mov	r3, r2
 8002260:	707b      	strb	r3, [r7, #1]
    if (clear)
 8002262:	787b      	ldrb	r3, [r7, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <OLED_Draw_String+0x24>
        OLED_Clear();
 8002268:	f7ff ffe1 	bl	800222e <OLED_Clear>
    SSD1306_GotoXY(x, y);
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	b29b      	uxth	r3, r3
 8002270:	78ba      	ldrb	r2, [r7, #2]
 8002272:	b292      	uxth	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff20 	bl	80020bc <SSD1306_GotoXY>
    SSD1306_Puts(data, &Font_7x10, SSD1306_COLOR_WHITE);
 800227c:	2201      	movs	r2, #1
 800227e:	4906      	ldr	r1, [pc, #24]	@ (8002298 <OLED_Draw_String+0x50>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ffaf 	bl	80021e4 <SSD1306_Puts>
    if (refresh)
 8002286:	7c3b      	ldrb	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <OLED_Draw_String+0x48>
        OLED_Refresh();
 800228c:	f7ff ffd6 	bl	800223c <OLED_Refresh>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000004 	.word	0x20000004

0800229c <OLED_Draw_Line>:

/* Write a line of characters 写入一行字符 */
void OLED_Draw_Line(char *data, uint8_t line, bool clear, bool refresh)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	70fb      	strb	r3, [r7, #3]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70bb      	strb	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	707b      	strb	r3, [r7, #1]
    if (line > 0 && line <= 3)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <OLED_Draw_Line+0x46>
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d80f      	bhi.n	80022e2 <OLED_Draw_Line+0x46>
    {
        OLED_Draw_String(data, 0, 10 * (line - 1), clear, refresh);
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	461a      	mov	r2, r3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3b0a      	subs	r3, #10
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	78b9      	ldrb	r1, [r7, #2]
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	2100      	movs	r1, #0
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffb3 	bl	8002248 <OLED_Draw_String>
    }
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <Colorful_RGB>:
extern uint8_t newLineReceived;

//函数功能:点亮RGB颜色 两灯同时点亮
//Function function: Illuminate RGB color and simultaneously illuminate two lights
void Colorful_RGB(uint16_t red,uint16_t green,uint16_t blue)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	80bb      	strh	r3, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	807b      	strh	r3, [r7, #2]
	if(red >0)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <Colorful_RGB+0x1c>
	{
		red = set;
 8002304:	2301      	movs	r3, #1
 8002306:	80fb      	strh	r3, [r7, #6]
	}
	if(green >0)
 8002308:	88bb      	ldrh	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <Colorful_RGB+0x26>
	{
		green = set;
 800230e:	2301      	movs	r3, #1
 8002310:	80bb      	strh	r3, [r7, #4]
	}
	if(blue >0)
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <Colorful_RGB+0x30>
	{
		blue = set;
 8002318:	2301      	movs	r3, #1
 800231a:	807b      	strh	r3, [r7, #2]
	}
	RRGB_SET(red, green, blue);
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	2104      	movs	r1, #4
 8002324:	4814      	ldr	r0, [pc, #80]	@ (8002378 <Colorful_RGB+0x8c>)
 8002326:	f004 fd73 	bl	8006e10 <HAL_GPIO_WritePin>
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	2108      	movs	r1, #8
 8002332:	4811      	ldr	r0, [pc, #68]	@ (8002378 <Colorful_RGB+0x8c>)
 8002334:	f004 fd6c 	bl	8006e10 <HAL_GPIO_WritePin>
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	2110      	movs	r1, #16
 8002340:	480d      	ldr	r0, [pc, #52]	@ (8002378 <Colorful_RGB+0x8c>)
 8002342:	f004 fd65 	bl	8006e10 <HAL_GPIO_WritePin>
	LRGB_SET(red, green, blue);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	2102      	movs	r1, #2
 800234e:	480b      	ldr	r0, [pc, #44]	@ (800237c <Colorful_RGB+0x90>)
 8002350:	f004 fd5e 	bl	8006e10 <HAL_GPIO_WritePin>
 8002354:	88bb      	ldrh	r3, [r7, #4]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	2180      	movs	r1, #128	@ 0x80
 800235c:	4806      	ldr	r0, [pc, #24]	@ (8002378 <Colorful_RGB+0x8c>)
 800235e:	f004 fd57 	bl	8006e10 <HAL_GPIO_WritePin>
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	2104      	movs	r1, #4
 800236a:	4804      	ldr	r0, [pc, #16]	@ (800237c <Colorful_RGB+0x90>)
 800236c:	f004 fd50 	bl	8006e10 <HAL_GPIO_WritePin>

}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40011800 	.word	0x40011800
 800237c:	40012000 	.word	0x40012000

08002380 <RGB_color_water>:
//times：时间
//RGB light flowing effect
//Direction; Direction 0 from right to left 1 from left to right
//Times: time
void RGB_color_water(uint8_t direction,uint32_t times)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
	if(direction == 0)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d135      	bne.n	80023fe <RGB_color_water+0x7e>
	{
		for(RGB_Color i=red;i<Max_color;i++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e02e      	b.n	80023f6 <RGB_color_water+0x76>
		{
			Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <RGB_color_water+0xf8>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	1ad1      	subs	r1, r2, r3
 80023a2:	0849      	lsrs	r1, r1, #1
 80023a4:	440b      	add	r3, r1
 80023a6:	0899      	lsrs	r1, r3, #2
 80023a8:	460b      	mov	r3, r1
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a5b      	subs	r3, r3, r1
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4619      	mov	r1, r3
 80023b4:	2002      	movs	r0, #2
 80023b6:	f000 f863 	bl	8002480 <Set_RGB>
			if(newLineReceived == 1) break;
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <RGB_color_water+0xfc>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d053      	beq.n	800246a <RGB_color_water+0xea>
			HAL_Delay(times);
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f003 fa2e 	bl	8005824 <HAL_Delay>
			Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <RGB_color_water+0xf8>)
 80023cc:	fba3 1302 	umull	r1, r3, r3, r2
 80023d0:	1ad1      	subs	r1, r2, r3
 80023d2:	0849      	lsrs	r1, r1, #1
 80023d4:	440b      	add	r3, r1
 80023d6:	0899      	lsrs	r1, r3, #2
 80023d8:	460b      	mov	r3, r1
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 f84b 	bl	8002480 <Set_RGB>
			HAL_Delay(times);
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	f003 fa1a 	bl	8005824 <HAL_Delay>
		for(RGB_Color i=red;i<Max_color;i++)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	3301      	adds	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d9cd      	bls.n	8002398 <RGB_color_water+0x18>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
			HAL_Delay(times);
		}
	}

}
 80023fc:	e038      	b.n	8002470 <RGB_color_water+0xf0>
		for(RGB_Color i=red;i<Max_color;i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	73bb      	strb	r3, [r7, #14]
 8002402:	e02e      	b.n	8002462 <RGB_color_water+0xe2>
			Set_RGB(RGB_R,(RGB_Color)(i%Max_color));
 8002404:	7bba      	ldrb	r2, [r7, #14]
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <RGB_color_water+0xf8>)
 8002408:	fba3 1302 	umull	r1, r3, r3, r2
 800240c:	1ad1      	subs	r1, r2, r3
 800240e:	0849      	lsrs	r1, r1, #1
 8002410:	440b      	add	r3, r1
 8002412:	0899      	lsrs	r1, r3, #2
 8002414:	460b      	mov	r3, r1
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a5b      	subs	r3, r3, r1
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	2001      	movs	r0, #1
 8002422:	f000 f82d 	bl	8002480 <Set_RGB>
			if(newLineReceived == 1) break;
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <RGB_color_water+0xfc>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d01f      	beq.n	800246e <RGB_color_water+0xee>
			HAL_Delay(times);
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f003 f9f8 	bl	8005824 <HAL_Delay>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
 8002434:	7bba      	ldrb	r2, [r7, #14]
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <RGB_color_water+0xf8>)
 8002438:	fba3 1302 	umull	r1, r3, r3, r2
 800243c:	1ad1      	subs	r1, r2, r3
 800243e:	0849      	lsrs	r1, r1, #1
 8002440:	440b      	add	r3, r1
 8002442:	0899      	lsrs	r1, r3, #2
 8002444:	460b      	mov	r3, r1
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a5b      	subs	r3, r3, r1
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	2002      	movs	r0, #2
 8002452:	f000 f815 	bl	8002480 <Set_RGB>
			HAL_Delay(times);
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f003 f9e4 	bl	8005824 <HAL_Delay>
		for(RGB_Color i=red;i<Max_color;i++)
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	3301      	adds	r3, #1
 8002460:	73bb      	strb	r3, [r7, #14]
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	2b06      	cmp	r3, #6
 8002466:	d9cd      	bls.n	8002404 <RGB_color_water+0x84>
}
 8002468:	e002      	b.n	8002470 <RGB_color_water+0xf0>
			if(newLineReceived == 1) break;
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <RGB_color_water+0xf0>
			if(newLineReceived == 1) break;
 800246e:	bf00      	nop
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	24924925 	.word	0x24924925
 800247c:	200002d4 	.word	0x200002d4

08002480 <Set_RGB>:
 *color：选择需要显示的颜色 Choose the color you want to display
 *
 *
 * */
void Set_RGB(car_RGB light, RGB_Color color)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
	uint8_t Light_RGB = light;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	73fb      	strb	r3, [r7, #15]
	switch (Light_RGB)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d010      	beq.n	80024bc <Set_RGB+0x3c>
 800249a:	2b03      	cmp	r3, #3
 800249c:	dc17      	bgt.n	80024ce <Set_RGB+0x4e>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d002      	beq.n	80024a8 <Set_RGB+0x28>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d005      	beq.n	80024b2 <Set_RGB+0x32>
 80024a6:	e012      	b.n	80024ce <Set_RGB+0x4e>
	{
	case RGB_R:
		Set_color_R(color);
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f836 	bl	800251c <Set_color_R>
		break;
 80024b0:	e02c      	b.n	800250c <Set_RGB+0x8c>
	case RGB_L:
		Set_color_L(color);
 80024b2:	79bb      	ldrb	r3, [r7, #6]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f8d1 	bl	800265c <Set_color_L>
		break;
 80024ba:	e027      	b.n	800250c <Set_RGB+0x8c>
	case RGB_Max:
		Set_color_R(color);
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f82c 	bl	800251c <Set_color_R>
		Set_color_L(color);
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f8c8 	bl	800265c <Set_color_L>
		break;
 80024cc:	e01e      	b.n	800250c <Set_RGB+0x8c>
	default:
		RGB_OFF_ALL;
 80024ce:	2200      	movs	r2, #0
 80024d0:	2104      	movs	r1, #4
 80024d2:	4810      	ldr	r0, [pc, #64]	@ (8002514 <Set_RGB+0x94>)
 80024d4:	f004 fc9c 	bl	8006e10 <HAL_GPIO_WritePin>
 80024d8:	2200      	movs	r2, #0
 80024da:	2108      	movs	r1, #8
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <Set_RGB+0x94>)
 80024de:	f004 fc97 	bl	8006e10 <HAL_GPIO_WritePin>
 80024e2:	2200      	movs	r2, #0
 80024e4:	2110      	movs	r1, #16
 80024e6:	480b      	ldr	r0, [pc, #44]	@ (8002514 <Set_RGB+0x94>)
 80024e8:	f004 fc92 	bl	8006e10 <HAL_GPIO_WritePin>
 80024ec:	2200      	movs	r2, #0
 80024ee:	2102      	movs	r1, #2
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <Set_RGB+0x98>)
 80024f2:	f004 fc8d 	bl	8006e10 <HAL_GPIO_WritePin>
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	@ 0x80
 80024fa:	4806      	ldr	r0, [pc, #24]	@ (8002514 <Set_RGB+0x94>)
 80024fc:	f004 fc88 	bl	8006e10 <HAL_GPIO_WritePin>
 8002500:	2200      	movs	r2, #0
 8002502:	2104      	movs	r1, #4
 8002504:	4804      	ldr	r0, [pc, #16]	@ (8002518 <Set_RGB+0x98>)
 8002506:	f004 fc83 	bl	8006e10 <HAL_GPIO_WritePin>
	}
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40011800 	.word	0x40011800
 8002518:	40012000 	.word	0x40012000

0800251c <Set_color_R>:
/*
 * 打开右边的探照灯并显示颜色 Turn on the searchlight on the right and show the color
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b06      	cmp	r3, #6
 800252a:	f200 8081 	bhi.w	8002630 <Set_color_R+0x114>
 800252e:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <Set_color_R+0x18>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002551 	.word	0x08002551
 8002538:	08002571 	.word	0x08002571
 800253c:	08002591 	.word	0x08002591
 8002540:	080025b1 	.word	0x080025b1
 8002544:	080025d1 	.word	0x080025d1
 8002548:	080025f1 	.word	0x080025f1
 800254c:	08002611 	.word	0x08002611
	{
	case red:
		RRGB_SET(set, reset, reset);
 8002550:	2201      	movs	r2, #1
 8002552:	2104      	movs	r1, #4
 8002554:	4840      	ldr	r0, [pc, #256]	@ (8002658 <Set_color_R+0x13c>)
 8002556:	f004 fc5b 	bl	8006e10 <HAL_GPIO_WritePin>
 800255a:	2200      	movs	r2, #0
 800255c:	2108      	movs	r1, #8
 800255e:	483e      	ldr	r0, [pc, #248]	@ (8002658 <Set_color_R+0x13c>)
 8002560:	f004 fc56 	bl	8006e10 <HAL_GPIO_WritePin>
 8002564:	2200      	movs	r2, #0
 8002566:	2110      	movs	r1, #16
 8002568:	483b      	ldr	r0, [pc, #236]	@ (8002658 <Set_color_R+0x13c>)
 800256a:	f004 fc51 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800256e:	e06f      	b.n	8002650 <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 8002570:	2200      	movs	r2, #0
 8002572:	2104      	movs	r1, #4
 8002574:	4838      	ldr	r0, [pc, #224]	@ (8002658 <Set_color_R+0x13c>)
 8002576:	f004 fc4b 	bl	8006e10 <HAL_GPIO_WritePin>
 800257a:	2201      	movs	r2, #1
 800257c:	2108      	movs	r1, #8
 800257e:	4836      	ldr	r0, [pc, #216]	@ (8002658 <Set_color_R+0x13c>)
 8002580:	f004 fc46 	bl	8006e10 <HAL_GPIO_WritePin>
 8002584:	2200      	movs	r2, #0
 8002586:	2110      	movs	r1, #16
 8002588:	4833      	ldr	r0, [pc, #204]	@ (8002658 <Set_color_R+0x13c>)
 800258a:	f004 fc41 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800258e:	e05f      	b.n	8002650 <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 8002590:	2200      	movs	r2, #0
 8002592:	2104      	movs	r1, #4
 8002594:	4830      	ldr	r0, [pc, #192]	@ (8002658 <Set_color_R+0x13c>)
 8002596:	f004 fc3b 	bl	8006e10 <HAL_GPIO_WritePin>
 800259a:	2200      	movs	r2, #0
 800259c:	2108      	movs	r1, #8
 800259e:	482e      	ldr	r0, [pc, #184]	@ (8002658 <Set_color_R+0x13c>)
 80025a0:	f004 fc36 	bl	8006e10 <HAL_GPIO_WritePin>
 80025a4:	2201      	movs	r2, #1
 80025a6:	2110      	movs	r1, #16
 80025a8:	482b      	ldr	r0, [pc, #172]	@ (8002658 <Set_color_R+0x13c>)
 80025aa:	f004 fc31 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80025ae:	e04f      	b.n	8002650 <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2104      	movs	r1, #4
 80025b4:	4828      	ldr	r0, [pc, #160]	@ (8002658 <Set_color_R+0x13c>)
 80025b6:	f004 fc2b 	bl	8006e10 <HAL_GPIO_WritePin>
 80025ba:	2201      	movs	r2, #1
 80025bc:	2108      	movs	r1, #8
 80025be:	4826      	ldr	r0, [pc, #152]	@ (8002658 <Set_color_R+0x13c>)
 80025c0:	f004 fc26 	bl	8006e10 <HAL_GPIO_WritePin>
 80025c4:	2200      	movs	r2, #0
 80025c6:	2110      	movs	r1, #16
 80025c8:	4823      	ldr	r0, [pc, #140]	@ (8002658 <Set_color_R+0x13c>)
 80025ca:	f004 fc21 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80025ce:	e03f      	b.n	8002650 <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 80025d0:	2201      	movs	r2, #1
 80025d2:	2104      	movs	r1, #4
 80025d4:	4820      	ldr	r0, [pc, #128]	@ (8002658 <Set_color_R+0x13c>)
 80025d6:	f004 fc1b 	bl	8006e10 <HAL_GPIO_WritePin>
 80025da:	2200      	movs	r2, #0
 80025dc:	2108      	movs	r1, #8
 80025de:	481e      	ldr	r0, [pc, #120]	@ (8002658 <Set_color_R+0x13c>)
 80025e0:	f004 fc16 	bl	8006e10 <HAL_GPIO_WritePin>
 80025e4:	2201      	movs	r2, #1
 80025e6:	2110      	movs	r1, #16
 80025e8:	481b      	ldr	r0, [pc, #108]	@ (8002658 <Set_color_R+0x13c>)
 80025ea:	f004 fc11 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80025ee:	e02f      	b.n	8002650 <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2104      	movs	r1, #4
 80025f4:	4818      	ldr	r0, [pc, #96]	@ (8002658 <Set_color_R+0x13c>)
 80025f6:	f004 fc0b 	bl	8006e10 <HAL_GPIO_WritePin>
 80025fa:	2201      	movs	r2, #1
 80025fc:	2108      	movs	r1, #8
 80025fe:	4816      	ldr	r0, [pc, #88]	@ (8002658 <Set_color_R+0x13c>)
 8002600:	f004 fc06 	bl	8006e10 <HAL_GPIO_WritePin>
 8002604:	2201      	movs	r2, #1
 8002606:	2110      	movs	r1, #16
 8002608:	4813      	ldr	r0, [pc, #76]	@ (8002658 <Set_color_R+0x13c>)
 800260a:	f004 fc01 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800260e:	e01f      	b.n	8002650 <Set_color_R+0x134>
	case write:
		RRGB_SET(set, set, set);
 8002610:	2201      	movs	r2, #1
 8002612:	2104      	movs	r1, #4
 8002614:	4810      	ldr	r0, [pc, #64]	@ (8002658 <Set_color_R+0x13c>)
 8002616:	f004 fbfb 	bl	8006e10 <HAL_GPIO_WritePin>
 800261a:	2201      	movs	r2, #1
 800261c:	2108      	movs	r1, #8
 800261e:	480e      	ldr	r0, [pc, #56]	@ (8002658 <Set_color_R+0x13c>)
 8002620:	f004 fbf6 	bl	8006e10 <HAL_GPIO_WritePin>
 8002624:	2201      	movs	r2, #1
 8002626:	2110      	movs	r1, #16
 8002628:	480b      	ldr	r0, [pc, #44]	@ (8002658 <Set_color_R+0x13c>)
 800262a:	f004 fbf1 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800262e:	e00f      	b.n	8002650 <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 8002630:	2200      	movs	r2, #0
 8002632:	2104      	movs	r1, #4
 8002634:	4808      	ldr	r0, [pc, #32]	@ (8002658 <Set_color_R+0x13c>)
 8002636:	f004 fbeb 	bl	8006e10 <HAL_GPIO_WritePin>
 800263a:	2200      	movs	r2, #0
 800263c:	2108      	movs	r1, #8
 800263e:	4806      	ldr	r0, [pc, #24]	@ (8002658 <Set_color_R+0x13c>)
 8002640:	f004 fbe6 	bl	8006e10 <HAL_GPIO_WritePin>
 8002644:	2200      	movs	r2, #0
 8002646:	2110      	movs	r1, #16
 8002648:	4803      	ldr	r0, [pc, #12]	@ (8002658 <Set_color_R+0x13c>)
 800264a:	f004 fbe1 	bl	8006e10 <HAL_GPIO_WritePin>
	}
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40011800 	.word	0x40011800

0800265c <Set_color_L>:
/*
 * 打开左边的探照灯并显示颜色 Turn on the left searchlight and show colors
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b06      	cmp	r3, #6
 800266a:	f200 8081 	bhi.w	8002770 <Set_color_L+0x114>
 800266e:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <Set_color_L+0x18>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002691 	.word	0x08002691
 8002678:	080026b1 	.word	0x080026b1
 800267c:	080026d1 	.word	0x080026d1
 8002680:	080026f1 	.word	0x080026f1
 8002684:	08002711 	.word	0x08002711
 8002688:	08002731 	.word	0x08002731
 800268c:	08002751 	.word	0x08002751
	{
	case red:
		LRGB_SET(set, reset, reset);
 8002690:	2201      	movs	r2, #1
 8002692:	2102      	movs	r1, #2
 8002694:	4840      	ldr	r0, [pc, #256]	@ (8002798 <Set_color_L+0x13c>)
 8002696:	f004 fbbb 	bl	8006e10 <HAL_GPIO_WritePin>
 800269a:	2200      	movs	r2, #0
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	483f      	ldr	r0, [pc, #252]	@ (800279c <Set_color_L+0x140>)
 80026a0:	f004 fbb6 	bl	8006e10 <HAL_GPIO_WritePin>
 80026a4:	2200      	movs	r2, #0
 80026a6:	2104      	movs	r1, #4
 80026a8:	483b      	ldr	r0, [pc, #236]	@ (8002798 <Set_color_L+0x13c>)
 80026aa:	f004 fbb1 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80026ae:	e06f      	b.n	8002790 <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2102      	movs	r1, #2
 80026b4:	4838      	ldr	r0, [pc, #224]	@ (8002798 <Set_color_L+0x13c>)
 80026b6:	f004 fbab 	bl	8006e10 <HAL_GPIO_WritePin>
 80026ba:	2201      	movs	r2, #1
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	4837      	ldr	r0, [pc, #220]	@ (800279c <Set_color_L+0x140>)
 80026c0:	f004 fba6 	bl	8006e10 <HAL_GPIO_WritePin>
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	4833      	ldr	r0, [pc, #204]	@ (8002798 <Set_color_L+0x13c>)
 80026ca:	f004 fba1 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80026ce:	e05f      	b.n	8002790 <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2102      	movs	r1, #2
 80026d4:	4830      	ldr	r0, [pc, #192]	@ (8002798 <Set_color_L+0x13c>)
 80026d6:	f004 fb9b 	bl	8006e10 <HAL_GPIO_WritePin>
 80026da:	2200      	movs	r2, #0
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	482f      	ldr	r0, [pc, #188]	@ (800279c <Set_color_L+0x140>)
 80026e0:	f004 fb96 	bl	8006e10 <HAL_GPIO_WritePin>
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	482b      	ldr	r0, [pc, #172]	@ (8002798 <Set_color_L+0x13c>)
 80026ea:	f004 fb91 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 80026ee:	e04f      	b.n	8002790 <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 80026f0:	2201      	movs	r2, #1
 80026f2:	2102      	movs	r1, #2
 80026f4:	4828      	ldr	r0, [pc, #160]	@ (8002798 <Set_color_L+0x13c>)
 80026f6:	f004 fb8b 	bl	8006e10 <HAL_GPIO_WritePin>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2180      	movs	r1, #128	@ 0x80
 80026fe:	4827      	ldr	r0, [pc, #156]	@ (800279c <Set_color_L+0x140>)
 8002700:	f004 fb86 	bl	8006e10 <HAL_GPIO_WritePin>
 8002704:	2200      	movs	r2, #0
 8002706:	2104      	movs	r1, #4
 8002708:	4823      	ldr	r0, [pc, #140]	@ (8002798 <Set_color_L+0x13c>)
 800270a:	f004 fb81 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800270e:	e03f      	b.n	8002790 <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 8002710:	2201      	movs	r2, #1
 8002712:	2102      	movs	r1, #2
 8002714:	4820      	ldr	r0, [pc, #128]	@ (8002798 <Set_color_L+0x13c>)
 8002716:	f004 fb7b 	bl	8006e10 <HAL_GPIO_WritePin>
 800271a:	2200      	movs	r2, #0
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	481f      	ldr	r0, [pc, #124]	@ (800279c <Set_color_L+0x140>)
 8002720:	f004 fb76 	bl	8006e10 <HAL_GPIO_WritePin>
 8002724:	2201      	movs	r2, #1
 8002726:	2104      	movs	r1, #4
 8002728:	481b      	ldr	r0, [pc, #108]	@ (8002798 <Set_color_L+0x13c>)
 800272a:	f004 fb71 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800272e:	e02f      	b.n	8002790 <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 8002730:	2200      	movs	r2, #0
 8002732:	2102      	movs	r1, #2
 8002734:	4818      	ldr	r0, [pc, #96]	@ (8002798 <Set_color_L+0x13c>)
 8002736:	f004 fb6b 	bl	8006e10 <HAL_GPIO_WritePin>
 800273a:	2201      	movs	r2, #1
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	4817      	ldr	r0, [pc, #92]	@ (800279c <Set_color_L+0x140>)
 8002740:	f004 fb66 	bl	8006e10 <HAL_GPIO_WritePin>
 8002744:	2201      	movs	r2, #1
 8002746:	2104      	movs	r1, #4
 8002748:	4813      	ldr	r0, [pc, #76]	@ (8002798 <Set_color_L+0x13c>)
 800274a:	f004 fb61 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800274e:	e01f      	b.n	8002790 <Set_color_L+0x134>
	case write:
		LRGB_SET(set, set, set);
 8002750:	2201      	movs	r2, #1
 8002752:	2102      	movs	r1, #2
 8002754:	4810      	ldr	r0, [pc, #64]	@ (8002798 <Set_color_L+0x13c>)
 8002756:	f004 fb5b 	bl	8006e10 <HAL_GPIO_WritePin>
 800275a:	2201      	movs	r2, #1
 800275c:	2180      	movs	r1, #128	@ 0x80
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <Set_color_L+0x140>)
 8002760:	f004 fb56 	bl	8006e10 <HAL_GPIO_WritePin>
 8002764:	2201      	movs	r2, #1
 8002766:	2104      	movs	r1, #4
 8002768:	480b      	ldr	r0, [pc, #44]	@ (8002798 <Set_color_L+0x13c>)
 800276a:	f004 fb51 	bl	8006e10 <HAL_GPIO_WritePin>
		break;
 800276e:	e00f      	b.n	8002790 <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 8002770:	2200      	movs	r2, #0
 8002772:	2102      	movs	r1, #2
 8002774:	4808      	ldr	r0, [pc, #32]	@ (8002798 <Set_color_L+0x13c>)
 8002776:	f004 fb4b 	bl	8006e10 <HAL_GPIO_WritePin>
 800277a:	2200      	movs	r2, #0
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	4807      	ldr	r0, [pc, #28]	@ (800279c <Set_color_L+0x140>)
 8002780:	f004 fb46 	bl	8006e10 <HAL_GPIO_WritePin>
 8002784:	2200      	movs	r2, #0
 8002786:	2104      	movs	r1, #4
 8002788:	4803      	ldr	r0, [pc, #12]	@ (8002798 <Set_color_L+0x13c>)
 800278a:	f004 fb41 	bl	8006e10 <HAL_GPIO_WritePin>
	}
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40012000 	.word	0x40012000
 800279c:	40011800 	.word	0x40011800

080027a0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	2b80      	cmp	r3, #128	@ 0x80
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	@ 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	330c      	adds	r3, #12
 80027d0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	330c      	adds	r3, #12
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	61ba      	str	r2, [r7, #24]
 80027ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e7      	bne.n	80027cc <LL_USART_EnableIT_RXNE+0x8>
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	b2db      	uxtb	r3, r3
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	605a      	str	r2, [r3, #4]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <UART5_Init>:
#include "bsp_uart5.h"

void UART5_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

	LL_USART_EnableIT_RXNE(UART5); // Start receiving interrupt 启动接收中断
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <UART5_Init+0x10>)
 8002866:	f7ff ffad 	bl	80027c4 <LL_USART_EnableIT_RXNE>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40005000 	.word	0x40005000

08002874 <UART5_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
	uint8_t rx5_temp;
	if (LL_USART_IsEnabledIT_RXNE(UART5)) // Determine if there is any interruption information 判断是否有中断信息
 800287a:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <UART5_IRQHandler+0x2c>)
 800287c:	f7ff ffc4 	bl	8002808 <LL_USART_IsEnabledIT_RXNE>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <UART5_IRQHandler+0x24>
	{
		// LL_USART_ClearFlag_RXNE(UART5); //clear interrupt 清除中断
		rx5_temp = LL_USART_ReceiveData8(UART5); // Read information and clear interrupts 读取信息并清除中断
 8002886:	4806      	ldr	r0, [pc, #24]	@ (80028a0 <UART5_IRQHandler+0x2c>)
 8002888:	f7ff ffd0 	bl	800282c <LL_USART_ReceiveData8>
 800288c:	4603      	mov	r3, r0
 800288e:	71fb      	strb	r3, [r7, #7]
//		 USRT5_DataByte(rx5_temp);//send data 发送数据
		Deal_Bluetooth(rx5_temp);
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe08 	bl	80014a8 <Deal_Bluetooth>
	}
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40005000 	.word	0x40005000

080028a4 <USRT5_DataByte>:

// Send a Byte 发送一个字节
void USRT5_DataByte(uint8_t data_byte)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(UART5))
 80028ae:	bf00      	nop
 80028b0:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <USRT5_DataByte+0x2c>)
 80028b2:	f7ff ff75 	bl	80027a0 <LL_USART_IsActiveFlag_TXE>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f9      	beq.n	80028b0 <USRT5_DataByte+0xc>
	{
	};
	LL_USART_TransmitData8(UART5, data_byte);
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	4619      	mov	r1, r3
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <USRT5_DataByte+0x2c>)
 80028c2:	f7ff ffbf 	bl	8002844 <LL_USART_TransmitData8>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40005000 	.word	0x40005000

080028d4 <USRT5_DataString>:

// Set to send a string 设置发送一个字符串
void USRT5_DataString(uint8_t *data_str, uint16_t datasize)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
	for (uint8_t len = 0; len < datasize; len++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e009      	b.n	80028fa <USRT5_DataString+0x26>
	{
		USRT5_DataByte(*(data_str + len));
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ffd8 	bl	80028a4 <USRT5_DataByte>
	for (uint8_t len = 0; len < datasize; len++)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	3301      	adds	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f0      	bhi.n	80028e6 <USRT5_DataString+0x12>
	}
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&USART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF); // 阻塞方式打印,串口x
 8002918:	1d39      	adds	r1, r7, #4
 800291a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291e:	2201      	movs	r2, #1
 8002920:	4803      	ldr	r0, [pc, #12]	@ (8002930 <__io_putchar+0x20>)
 8002922:	f008 f94b 	bl	800abbc <HAL_UART_Transmit>
  return ch;
 8002926:	687b      	ldr	r3, [r7, #4]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2000094c 	.word	0x2000094c

08002934 <Get_BAT>:
#include "bsp_vol.h"

uint16_t Get_BAT(uint32_t ch)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ch;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002950:	2307      	movs	r3, #7
 8002952:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	480e      	ldr	r0, [pc, #56]	@ (8002994 <Get_BAT+0x60>)
 800295c:	f003 fb38 	bl	8005fd0 <HAL_ADC_ConfigChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <Get_BAT+0x36>
	{
		Error_Handler();
 8002966:	f001 fea7 	bl	80046b8 <Error_Handler>
	}

	HAL_ADCEx_Calibration_Start(&hadc3);//校正
 800296a:	480a      	ldr	r0, [pc, #40]	@ (8002994 <Get_BAT+0x60>)
 800296c:	f003 fd98 	bl	80064a0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc3);
 8002970:	4808      	ldr	r0, [pc, #32]	@ (8002994 <Get_BAT+0x60>)
 8002972:	f003 f91d 	bl	8005bb0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 500);
 8002976:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800297a:	4806      	ldr	r0, [pc, #24]	@ (8002994 <Get_BAT+0x60>)
 800297c:	f003 f9de 	bl	8005d3c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc3);
 8002980:	4804      	ldr	r0, [pc, #16]	@ (8002994 <Get_BAT+0x60>)
 8002982:	f003 fafd 	bl	8005f80 <HAL_ADC_GetValue>
 8002986:	4603      	mov	r3, r0
 8002988:	b29b      	uxth	r3, r3
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000684 	.word	0x20000684

08002998 <Adc_Get_Average>:

// 获得 ADC 多次测量平均值 times:测量次数
// Obtain the average of multiple ADC measurements times: number of measurements
uint16_t Adc_Get_Average(uint32_t ch, uint8_t times)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
	uint16_t temp_val = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	81fb      	strh	r3, [r7, #14]
	uint8_t t;
	for (t = 0; t < times; t++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	737b      	strb	r3, [r7, #13]
 80029ac:	e00a      	b.n	80029c4 <Adc_Get_Average+0x2c>
	{
		temp_val += Get_BAT(ch);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffc0 	bl	8002934 <Get_BAT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	4413      	add	r3, r2
 80029bc:	81fb      	strh	r3, [r7, #14]
	for (t = 0; t < times; t++)
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	3301      	adds	r3, #1
 80029c2:	737b      	strb	r3, [r7, #13]
 80029c4:	7b7a      	ldrb	r2, [r7, #13]
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d3f0      	bcc.n	80029ae <Adc_Get_Average+0x16>
	}
	if (times == 4)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d103      	bne.n	80029da <Adc_Get_Average+0x42>
	{
		temp_val = temp_val >> 2;
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	81fb      	strh	r3, [r7, #14]
 80029d8:	e004      	b.n	80029e4 <Adc_Get_Average+0x4c>
	}
	else
	{
		temp_val = temp_val / times;
 80029da:	89fa      	ldrh	r2, [r7, #14]
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	fb92 f3f3 	sdiv	r3, r2, r3
 80029e2:	81fb      	strh	r3, [r7, #14]
	}
	return temp_val;
 80029e4:	89fb      	ldrh	r3, [r7, #14]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <Adc_Get_Measure_Volotage>:

// 获得测得原始电压值
// Obtain the measured original voltage value
float Adc_Get_Measure_Volotage(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	uint16_t adcx;
	float temp;
	adcx = Adc_Get_Average(BAT_CH, 4);
 80029f6:	2104      	movs	r1, #4
 80029f8:	2005      	movs	r0, #5
 80029fa:	f7ff ffcd 	bl	8002998 <Adc_Get_Average>
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
	temp = (float)adcx * (3.30f / 4096);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f9d1 	bl	8000dac <__aeabi_ui2f>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4905      	ldr	r1, [pc, #20]	@ (8002a24 <Adc_Get_Measure_Volotage+0x34>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fa24 	bl	8000e5c <__aeabi_fmul>
 8002a14:	4603      	mov	r3, r0
 8002a16:	603b      	str	r3, [r7, #0]
	return temp;
 8002a18:	683b      	ldr	r3, [r7, #0]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	3a533333 	.word	0x3a533333

08002a28 <Adc_Get_Battery_Volotage>:

// 获得实际电池分压前电压
// Obtain the actual voltage before battery partial voltage
float Adc_Get_Battery_Volotage(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	float temp;
	temp = Adc_Get_Measure_Volotage();
 8002a2e:	f7ff ffdf 	bl	80029f0 <Adc_Get_Measure_Volotage>
 8002a32:	6078      	str	r0, [r7, #4]
	// 实际测量的值比计算得出的值低一点点。
	// The actual measured value is slightly lower than the calculated value.
	temp = temp * 4.03f; // temp*(10+3.3)/3.3;
 8002a34:	4905      	ldr	r1, [pc, #20]	@ (8002a4c <Adc_Get_Battery_Volotage+0x24>)
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fa10 	bl	8000e5c <__aeabi_fmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	607b      	str	r3, [r7, #4]
	return temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	4080f5c3 	.word	0x4080f5c3

08002a50 <BSP_Init>:
uint8_t g_servo_falg = 0;

//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	Delay_Init();
 8002a54:	f000 f83a 	bl	8002acc <Delay_Init>
	IR_SWitch(ENABLE);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7ff f975 	bl	8001d48 <IR_SWitch>

	Bsp_Tim_Init();
 8002a5e:	f001 fa5d 	bl	8003f1c <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化 Motor PID initialization
 8002a62:	f000 fe63 	bl	800372c <PID_Param_Init>

	OLED_Init();//OLED初始化 OLED initialization
 8002a66:	f7ff f9f5 	bl	8001e54 <OLED_Init>
	OLED_Draw_Line("Bluetooth Control.", 1, false, true);
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4807      	ldr	r0, [pc, #28]	@ (8002a90 <BSP_Init+0x40>)
 8002a72:	f7ff fc13 	bl	800229c <OLED_Draw_Line>

	UART5_Init();//串口5开启中断 Serial port 5 enable interrupt
 8002a76:	f7ff fef3 	bl	8002860 <UART5_Init>

	Tim_Base_Init();
 8002a7a:	f001 faa7 	bl	8003fcc <Tim_Base_Init>

	PwmServo_Set_Angle_All(90,90,90,90);//舵机归中 Steering gear centering
 8002a7e:	235a      	movs	r3, #90	@ 0x5a
 8002a80:	225a      	movs	r2, #90	@ 0x5a
 8002a82:	215a      	movs	r1, #90	@ 0x5a
 8002a84:	205a      	movs	r0, #90	@ 0x5a
 8002a86:	f001 f9f5 	bl	8003e74 <PwmServo_Set_Angle_All>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800ff94 	.word	0x0800ff94

08002a94 <BSP_Loop>:
extern int send_time;//引入中断标志 Introducing interrupt flags

//Loop Run Function
//Parameter:None
void BSP_Loop(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	OLED_SHOW_BAT();//显示电量 Display battery level
 8002a98:	f7fe fcba 	bl	8001410 <OLED_SHOW_BAT>

	if(g_modeSelect == 0 || g_modeSelect ==1 )
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <BSP_Loop+0x30>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <BSP_Loop+0x18>
 8002aa4:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <BSP_Loop+0x30>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <BSP_Loop+0x28>
	{
		OLED_SHOW_Car_Speed();
 8002aac:	f7fe fcca 	bl	8001444 <OLED_SHOW_Car_Speed>

		if(send_time ==0 )
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <BSP_Loop+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <BSP_Loop+0x28>
		{
			Send_Msg();//上报数据 10ms发一次 Report data once every 10ms
 8002ab8:	f7fe fc5a 	bl	8001370 <Send_Msg>
		}

	}

	USE_Bluetooth_Control();
 8002abc:	f7fe fc10 	bl	80012e0 <USE_Bluetooth_Control>


}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000329 	.word	0x20000329
 8002ac8:	20000034 	.word	0x20000034

08002acc <Delay_Init>:


static uint32_t g_fac_us = 0;       /* us延时倍乘数 us delay multiplier */

void Delay_Init(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

    g_fac_us = 72;//一般是72 Usually 72
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <Delay_Init+0x14>)
 8002ad2:	2248      	movs	r2, #72	@ 0x48
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000053c 	.word	0x2000053c

08002ae4 <Delay_US>:
 * Input parameters: nus
 * Output parameters: None
*/

void Delay_US(uint32_t nus)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	uint32_t told, tnow, tcnt = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
	uint32_t reload = SysTick->LOAD;        /* LOAD的值  LOAD value*/
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <Delay_US+0x74>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	617b      	str	r3, [r7, #20]
	ticks = nus * g_fac_us;                 /* 需要的节拍数  number of beats required*/
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <Delay_US+0x78>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	613b      	str	r3, [r7, #16]
	 told = SysTick->VAL;                    /* 刚进入时的计数器值  Counter value when first entered*/
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <Delay_US+0x74>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	61fb      	str	r3, [r7, #28]
	    while (1)
	    {
	        tnow = SysTick->VAL;
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <Delay_US+0x74>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60fb      	str	r3, [r7, #12]
	        if (tnow != told)
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d0f8      	beq.n	8002b08 <Delay_US+0x24>
	        {
	            if (tnow < told)
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d206      	bcs.n	8002b2c <Delay_US+0x48>
	            {
	                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 Just note here that SYSTICK is a decrementing counter. */
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e007      	b.n	8002b3c <Delay_US+0x58>
	            }
	            else
	            {
	                tcnt += reload - tnow + told;
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad2      	subs	r2, r2, r3
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
	            }
	            told = tnow;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	61fb      	str	r3, [r7, #28]
	            if (tcnt >= ticks)
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d200      	bcs.n	8002b4a <Delay_US+0x66>
	        tnow = SysTick->VAL;
 8002b48:	e7de      	b.n	8002b08 <Delay_US+0x24>
	            {
	                break;                      /* 时间超过/等于要延迟的时间,则退出 If the time exceeds/is equal to the time to be delayed, exit */
 8002b4a:	bf00      	nop
	            }
	        }
	    }
}
 8002b4c:	bf00      	nop
 8002b4e:	3724      	adds	r7, #36	@ 0x24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010
 8002b5c:	2000053c 	.word	0x2000053c

08002b60 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d841      	bhi.n	8002bf8 <Encoder_Read_CNT+0x98>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <Encoder_Read_CNT+0x1c>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002ba7 	.word	0x08002ba7
 8002b84:	08002bc5 	.word	0x08002bc5
 8002b88:	08002bdf 	.word	0x08002bdf
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <Encoder_Read_CNT+0xa8>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002b96:	337f      	adds	r3, #127	@ 0x7f
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c08 <Encoder_Read_CNT+0xa8>)
 8002b9e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002ba4:	e029      	b.n	8002bfa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8002ba6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002bb2:	337f      	adds	r3, #127	@ 0x7f
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8002bb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bbc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002bc2:	e01a      	b.n	8002bfa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <Encoder_Read_CNT+0xac>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002bce:	337f      	adds	r3, #127	@ 0x7f
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <Encoder_Read_CNT+0xac>)
 8002bd6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002bdc:	e00d      	b.n	8002bfa <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <Encoder_Read_CNT+0xb0>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002be8:	337f      	adds	r3, #127	@ 0x7f
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <Encoder_Read_CNT+0xb0>)
 8002bf0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bf4:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002bf6:	e000      	b.n	8002bfa <Encoder_Read_CNT+0x9a>
	default:
		break;
 8002bf8:	bf00      	nop
	}
	return Encoder_TIM;
 8002bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40000400 	.word	0x40000400

08002c14 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <Encoder_Get_ALL+0x38>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <Encoder_Get_ALL+0x3c>)
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3308      	adds	r3, #8
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <Encoder_Get_ALL+0x40>)
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	4a06      	ldr	r2, [pc, #24]	@ (8002c58 <Encoder_Get_ALL+0x44>)
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	20000540 	.word	0x20000540
 8002c50:	20000544 	.word	0x20000544
 8002c54:	20000548 	.word	0x20000548
 8002c58:	2000054c 	.word	0x2000054c

08002c5c <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff ff7d 	bl	8002b60 <Encoder_Read_CNT>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <Encoder_Update_Count+0x58>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <Encoder_Update_Count+0x58>)
 8002c72:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7ff ff73 	bl	8002b60 <Encoder_Read_CNT>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <Encoder_Update_Count+0x5c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb8 <Encoder_Update_Count+0x5c>)
 8002c86:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f7ff ff69 	bl	8002b60 <Encoder_Read_CNT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <Encoder_Update_Count+0x60>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <Encoder_Update_Count+0x60>)
 8002c9a:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f7ff ff5f 	bl	8002b60 <Encoder_Read_CNT>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <Encoder_Update_Count+0x64>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <Encoder_Update_Count+0x64>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000540 	.word	0x20000540
 8002cb8:	20000544 	.word	0x20000544
 8002cbc:	20000548 	.word	0x20000548
 8002cc0:	2000054c 	.word	0x2000054c

08002cc4 <car_irtrack>:
 * 简单的4路巡线
 *
 * Simple 4-way line patrol
 * */
void car_irtrack(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

	if((IN_X1 == 0 && IN_X3 == 0) && IN_X2 == 1 && IN_X4 == 1) //直走 go straight
 8002cc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ccc:	4853      	ldr	r0, [pc, #332]	@ (8002e1c <car_irtrack+0x158>)
 8002cce:	f004 f87f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d120      	bne.n	8002d1a <car_irtrack+0x56>
 8002cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cdc:	484f      	ldr	r0, [pc, #316]	@ (8002e1c <car_irtrack+0x158>)
 8002cde:	f004 f877 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d118      	bne.n	8002d1a <car_irtrack+0x56>
 8002ce8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cec:	484b      	ldr	r0, [pc, #300]	@ (8002e1c <car_irtrack+0x158>)
 8002cee:	f004 f86f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d110      	bne.n	8002d1a <car_irtrack+0x56>
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4849      	ldr	r0, [pc, #292]	@ (8002e20 <car_irtrack+0x15c>)
 8002cfc:	f004 f868 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d109      	bne.n	8002d1a <car_irtrack+0x56>
	{
		Motion_Set_Speed(300,300,300,300);
 8002d06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d0e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002d12:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002d16:	f000 f961 	bl	8002fdc <Motion_Set_Speed>
	}


	if(IN_X1 == 0 && IN_X3 == 1 && IN_X4 == 1 && IN_X2 == 1)//小幅度调整 small adjustment
 8002d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d1e:	483f      	ldr	r0, [pc, #252]	@ (8002e1c <car_irtrack+0x158>)
 8002d20:	f004 f856 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11f      	bne.n	8002d6a <car_irtrack+0xa6>
 8002d2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d2e:	483b      	ldr	r0, [pc, #236]	@ (8002e1c <car_irtrack+0x158>)
 8002d30:	f004 f84e 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d117      	bne.n	8002d6a <car_irtrack+0xa6>
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4838      	ldr	r0, [pc, #224]	@ (8002e20 <car_irtrack+0x15c>)
 8002d3e:	f004 f847 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d110      	bne.n	8002d6a <car_irtrack+0xa6>
 8002d48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d4c:	4833      	ldr	r0, [pc, #204]	@ (8002e1c <car_irtrack+0x158>)
 8002d4e:	f004 f83f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <car_irtrack+0xa6>
	{
			Motion_Set_Speed(0,0,500,500);
 8002d58:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d5c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d60:	2100      	movs	r1, #0
 8002d62:	2000      	movs	r0, #0
 8002d64:	f000 f93a 	bl	8002fdc <Motion_Set_Speed>
 8002d68:	e026      	b.n	8002db8 <car_irtrack+0xf4>
	}
	else	if(IN_X1 == 1 && IN_X3 == 0 && IN_X4 == 1 && IN_X2 == 1)
 8002d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d6e:	482b      	ldr	r0, [pc, #172]	@ (8002e1c <car_irtrack+0x158>)
 8002d70:	f004 f82e 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d11e      	bne.n	8002db8 <car_irtrack+0xf4>
 8002d7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d7e:	4827      	ldr	r0, [pc, #156]	@ (8002e1c <car_irtrack+0x158>)
 8002d80:	f004 f826 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <car_irtrack+0xf4>
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4824      	ldr	r0, [pc, #144]	@ (8002e20 <car_irtrack+0x15c>)
 8002d8e:	f004 f81f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10f      	bne.n	8002db8 <car_irtrack+0xf4>
 8002d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d9c:	481f      	ldr	r0, [pc, #124]	@ (8002e1c <car_irtrack+0x158>)
 8002d9e:	f004 f817 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <car_irtrack+0xf4>
	{
			Motion_Set_Speed(500,500,0,0);
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002db0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db4:	f000 f912 	bl	8002fdc <Motion_Set_Speed>
	}


	if(IN_X2 == 0 && IN_X3 == 1 ) //大幅度左右转 Turn left and right sharply
 8002db8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dbc:	4817      	ldr	r0, [pc, #92]	@ (8002e1c <car_irtrack+0x158>)
 8002dbe:	f004 f807 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d110      	bne.n	8002dea <car_irtrack+0x126>
 8002dc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dcc:	4813      	ldr	r0, [pc, #76]	@ (8002e1c <car_irtrack+0x158>)
 8002dce:	f003 ffff 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <car_irtrack+0x126>
	{
			Motion_Set_Speed(-500,-500,500,500);
 8002dd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ddc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002de0:	4910      	ldr	r1, [pc, #64]	@ (8002e24 <car_irtrack+0x160>)
 8002de2:	4810      	ldr	r0, [pc, #64]	@ (8002e24 <car_irtrack+0x160>)
 8002de4:	f000 f8fa 	bl	8002fdc <Motion_Set_Speed>
	{
			Motion_Set_Speed(500,500,-500,-500);
	}

	//其它情况保持不变 Other things remain unchanged
}
 8002de8:	e016      	b.n	8002e18 <car_irtrack+0x154>
	else if(IN_X4 == 0 && IN_X1 == 1 )
 8002dea:	2101      	movs	r1, #1
 8002dec:	480c      	ldr	r0, [pc, #48]	@ (8002e20 <car_irtrack+0x15c>)
 8002dee:	f003 ffef 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <car_irtrack+0x154>
 8002df8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dfc:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <car_irtrack+0x158>)
 8002dfe:	f003 ffe7 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <car_irtrack+0x154>
			Motion_Set_Speed(500,500,-500,-500);
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <car_irtrack+0x160>)
 8002e0a:	4a06      	ldr	r2, [pc, #24]	@ (8002e24 <car_irtrack+0x160>)
 8002e0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002e10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e14:	f000 f8e2 	bl	8002fdc <Motion_Set_Speed>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40011c00 	.word	0x40011c00
 8002e20:	40012000 	.word	0x40012000
 8002e24:	fffffe0c 	.word	0xfffffe0c

08002e28 <GetLineWalking_Data>:

//获取4路传感器的值
//Obtain the values of four sensors
int GetLineWalking_Data(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
	int returnValue = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
	returnValue = (IN_X2 == 1?0:1000);
 8002e32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e36:	481d      	ldr	r0, [pc, #116]	@ (8002eac <GetLineWalking_Data+0x84>)
 8002e38:	f003 ffca 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <GetLineWalking_Data+0x1e>
 8002e42:	2300      	movs	r3, #0
 8002e44:	e001      	b.n	8002e4a <GetLineWalking_Data+0x22>
 8002e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4a:	607b      	str	r3, [r7, #4]
	returnValue += (IN_X1 == 1?0:100);
 8002e4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e50:	4816      	ldr	r0, [pc, #88]	@ (8002eac <GetLineWalking_Data+0x84>)
 8002e52:	f003 ffbd 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <GetLineWalking_Data+0x38>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <GetLineWalking_Data+0x3a>
 8002e60:	2364      	movs	r3, #100	@ 0x64
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	607b      	str	r3, [r7, #4]
	returnValue += (IN_X3 == 1?0:10);
 8002e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e6c:	480f      	ldr	r0, [pc, #60]	@ (8002eac <GetLineWalking_Data+0x84>)
 8002e6e:	f003 ffaf 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <GetLineWalking_Data+0x54>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <GetLineWalking_Data+0x56>
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	607b      	str	r3, [r7, #4]
	returnValue += (IN_X4 == 1?0:1);
 8002e84:	2101      	movs	r1, #1
 8002e86:	480a      	ldr	r0, [pc, #40]	@ (8002eb0 <GetLineWalking_Data+0x88>)
 8002e88:	f003 ffa2 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	607b      	str	r3, [r7, #4]

	return returnValue;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40011c00 	.word	0x40011c00
 8002eb0:	40012000 	.word	0x40012000

08002eb4 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8002eb8:	4b02      	ldr	r3, [pc, #8]	@ (8002ec4 <Motion_Get_Circle_Pulse+0x10>)
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	44820000 	.word	0x44820000

08002ec8 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <Motion_Set_Yaw_Adjust+0x28>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e002      	b.n	8002ee6 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <Motion_Set_Yaw_Adjust+0x28>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	200005d4 	.word	0x200005d4

08002ef4 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	80fb      	strh	r3, [r7, #6]
 8002f06:	4603      	mov	r3, r0
 8002f08:	80bb      	strh	r3, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	807b      	strh	r3, [r7, #2]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 8002f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f16:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002f1a:	db0a      	blt.n	8002f32 <Motion_Set_Pwm+0x3e>
 8002f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f20:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002f24:	dc05      	bgt.n	8002f32 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f000 fe5d 	bl	8003bec <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 8002f32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f36:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002f3a:	db0a      	blt.n	8002f52 <Motion_Set_Pwm+0x5e>
 8002f3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f40:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002f44:	dc05      	bgt.n	8002f52 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8002f46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 fe4d 	bl	8003bec <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8002f52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f56:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002f5a:	db0a      	blt.n	8002f72 <Motion_Set_Pwm+0x7e>
 8002f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f60:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002f64:	dc05      	bgt.n	8002f72 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8002f66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f000 fe3d 	bl	8003bec <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8002f72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f76:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002f7a:	db0a      	blt.n	8002f92 <Motion_Set_Pwm+0x9e>
 8002f7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f80:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002f84:	dc05      	bgt.n	8002f92 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8002f86:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f000 fe2d 	bl	8003bec <Motor_Set_Pwm>
    }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
	...

08002f9c <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2000      	movs	r0, #0
 8002fae:	f000 f815 	bl	8002fdc <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8002fb2:	2004      	movs	r0, #4
 8002fb4:	f000 fcf2 	bl	800399c <PID_Clear_Motor>
    g_start_ctrl = 0;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <Motion_Stop+0x38>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <Motion_Stop+0x3c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fdc4 	bl	8003b54 <Motor_Stop>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200005a0 	.word	0x200005a0
 8002fd8:	200005d4 	.word	0x200005d4

08002fdc <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	80fb      	strh	r3, [r7, #6]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80bb      	strh	r3, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	807b      	strh	r3, [r7, #2]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	@ (800305c <Motion_Set_Speed+0x80>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8003000:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <Motion_Set_Speed+0x84>)
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 8003006:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <Motion_Set_Speed+0x84>)
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <Motion_Set_Speed+0x84>)
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8003012:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <Motion_Set_Speed+0x84>)
 8003014:	883b      	ldrh	r3, [r7, #0]
 8003016:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e016      	b.n	800304c <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <Motion_Set_Speed+0x84>)
 8003022:	3310      	adds	r3, #16
 8003024:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fa57 	bl	80004dc <__aeabi_i2d>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fdb3 	bl	8000ba0 <__aeabi_d2f>
 800303a:	4602      	mov	r2, r0
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd37 	bl	8003ab4 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	3301      	adds	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d9e5      	bls.n	800301e <Motion_Set_Speed+0x42>
    }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}
 800305c:	200005a0 	.word	0x200005a0
 8003060:	200005ac 	.word	0x200005ac

08003064 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
    int i = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 800307e:	f000 f8d3 	bl	8003228 <Motion_Get_Circle_MM>
 8003082:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8003084:	f7ff ff16 	bl	8002eb4 <Motion_Get_Circle_Pulse>
 8003088:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 800308a:	f000 f8c3 	bl	8003214 <Motion_Get_APB>
 800308e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8003090:	f000 f8d4 	bl	800323c <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
 8003098:	e01e      	b.n	80030d8 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 800309a:	4a5a      	ldr	r2, [pc, #360]	@ (8003204 <Motion_Get_Speed+0x1a0>)
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	2264      	movs	r2, #100	@ 0x64
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fe83 	bl	8000db4 <__aeabi_i2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fed2 	bl	8000e5c <__aeabi_fmul>
 80030b8:	4603      	mov	r3, r0
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd ff81 	bl	8000fc4 <__aeabi_fdiv>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3328      	adds	r3, #40	@ 0x28
 80030cc:	443b      	add	r3, r7
 80030ce:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2b03      	cmp	r3, #3
 80030dc:	dddd      	ble.n	800309a <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fdb1 	bl	8000c4c <__addsf3>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fd fdaa 	bl	8000c4c <__addsf3>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7fd fda3 	bl	8000c4c <__addsf3>
 8003106:	4603      	mov	r3, r0
 8003108:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd ff59 	bl	8000fc4 <__aeabi_fdiv>
 8003112:	4603      	mov	r3, r0
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe f867 	bl	80011e8 <__aeabi_f2iz>
 800311a:	4603      	mov	r3, r0
 800311c:	b21a      	sxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fd8d 	bl	8000c48 <__aeabi_fsub>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7fd fd86 	bl	8000c48 <__aeabi_fsub>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7fd fd81 	bl	8000c4c <__addsf3>
 800314a:	4603      	mov	r3, r0
 800314c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003150:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd ff35 	bl	8000fc4 <__aeabi_fdiv>
 800315a:	4603      	mov	r3, r0
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe f843 	bl	80011e8 <__aeabi_f2iz>
 8003162:	4603      	mov	r3, r0
 8003164:	b21a      	sxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fd6b 	bl	8000c4c <__addsf3>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fd fd62 	bl	8000c48 <__aeabi_fsub>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f7fd fd5b 	bl	8000c48 <__aeabi_fsub>
 8003192:	4603      	mov	r3, r0
 8003194:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003198:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd ff11 	bl	8000fc4 <__aeabi_fdiv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	69b9      	ldr	r1, [r7, #24]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ff0c 	bl	8000fc4 <__aeabi_fdiv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4916      	ldr	r1, [pc, #88]	@ (8003208 <Motion_Get_Speed+0x1a4>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fe53 	bl	8000e5c <__aeabi_fmul>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe f815 	bl	80011e8 <__aeabi_f2iz>
 80031be:	4603      	mov	r3, r0
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <Motion_Get_Speed+0x1a8>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d015      	beq.n	80031fa <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d2:	e00c      	b.n	80031ee <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	3328      	adds	r3, #40	@ 0x28
 80031da:	443b      	add	r3, r7
 80031dc:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80031e0:	490b      	ldr	r1, [pc, #44]	@ (8003210 <Motion_Get_Speed+0x1ac>)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	3301      	adds	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	ddef      	ble.n	80031d4 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 80031f4:	4806      	ldr	r0, [pc, #24]	@ (8003210 <Motion_Get_Speed+0x1ac>)
 80031f6:	f000 fba9 	bl	800394c <PID_Calc_Motor>
    }
}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000590 	.word	0x20000590
 8003208:	447a0000 	.word	0x447a0000
 800320c:	200005a0 	.word	0x200005a0
 8003210:	200005ac 	.word	0x200005ac

08003214 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8003218:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <Motion_Get_APB+0x10>)
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	431f0000 	.word	0x431f0000

08003228 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 800322c:	4b02      	ldr	r3, [pc, #8]	@ (8003238 <Motion_Get_Circle_MM+0x10>)
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	434c33f8 	.word	0x434c33f8

0800323c <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <Motion_Get_Encoder+0x54>)
 8003244:	f7ff fce6 	bl	8002c14 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	e017      	b.n	800327e <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4a0f      	ldr	r2, [pc, #60]	@ (8003290 <Motion_Get_Encoder+0x54>)
 8003252:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <Motion_Get_Encoder+0x58>)
 800325a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	1a8a      	subs	r2, r1, r2
 8003262:	490d      	ldr	r1, [pc, #52]	@ (8003298 <Motion_Get_Encoder+0x5c>)
 8003264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	4908      	ldr	r1, [pc, #32]	@ (8003290 <Motion_Get_Encoder+0x54>)
 800326e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003272:	4908      	ldr	r1, [pc, #32]	@ (8003294 <Motion_Get_Encoder+0x58>)
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	3301      	adds	r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d9e4      	bls.n	800324e <Motion_Get_Encoder+0x12>
    }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000570 	.word	0x20000570
 8003294:	20000580 	.word	0x20000580
 8003298:	20000590 	.word	0x20000590

0800329c <wheel_State_YAW>:
// 偏航角调节运动：adjust=1开启，=0不开启。
//Control the movement status of the car.
//Speed control: speed=0-1000.
//Yaw angle adjustment motion: adjust=1 on,=0 not on.
void wheel_State_YAW(uint8_t state, uint16_t speed, uint8_t adjust)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
 80032a6:	460b      	mov	r3, r1
 80032a8:	80bb      	strh	r3, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	71bb      	strb	r3, [r7, #6]
    Motion_Set_Yaw_Adjust(adjust);
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe09 	bl	8002ec8 <Motion_Set_Yaw_Adjust>
    g_speed_setup = speed;
 80032b6:	4a3f      	ldr	r2, [pc, #252]	@ (80033b4 <wheel_State_YAW+0x118>)
 80032b8:	88bb      	ldrh	r3, [r7, #4]
 80032ba:	8013      	strh	r3, [r2, #0]
    switch (state)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d872      	bhi.n	80033a8 <wheel_State_YAW+0x10c>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <wheel_State_YAW+0x2c>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032e9 	.word	0x080032e9
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003313 	.word	0x08003313
 80032d4:	08003327 	.word	0x08003327
 80032d8:	08003347 	.word	0x08003347
 80032dc:	08003361 	.word	0x08003361
 80032e0:	08003383 	.word	0x08003383
 80032e4:	080033a1 	.word	0x080033a1
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 80032e8:	4b32      	ldr	r3, [pc, #200]	@ (80033b4 <wheel_State_YAW+0x118>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe4e 	bl	8002f9c <Motion_Stop>
        break;
 8003300:	e053      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8003302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f8de 	bl	80034cc <wheel_Ctrl>
        break;
 8003310:	e04b      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8003312:	88bb      	ldrh	r3, [r7, #4]
 8003314:	425b      	negs	r3, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	b21b      	sxth	r3, r3
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f8d4 	bl	80034cc <wheel_Ctrl>
        break;
 8003324:	e041      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8003326:	88bb      	ldrh	r3, [r7, #4]
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	b218      	sxth	r0, r3
 800332e:	88bb      	ldrh	r3, [r7, #4]
 8003330:	461a      	mov	r2, r3
 8003332:	03d2      	lsls	r2, r2, #15
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	b21b      	sxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	2100      	movs	r1, #0
 8003340:	f000 f8c4 	bl	80034cc <wheel_Ctrl>
        break;
 8003344:	e031      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8003346:	88bb      	ldrh	r3, [r7, #4]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	b218      	sxth	r0, r3
 800334e:	88bb      	ldrh	r3, [r7, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	b29b      	uxth	r3, r3
 8003354:	b21b      	sxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	2100      	movs	r1, #0
 800335a:	f000 f8b7 	bl	80034cc <wheel_Ctrl>

        break;
 800335e:	e024      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8003360:	2000      	movs	r0, #0
 8003362:	f7ff fdb1 	bl	8002ec8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8003366:	88bb      	ldrh	r3, [r7, #4]
 8003368:	461a      	mov	r2, r3
 800336a:	0392      	lsls	r2, r2, #14
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	b21b      	sxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	2100      	movs	r1, #0
 800337a:	2000      	movs	r0, #0
 800337c:	f000 f8a6 	bl	80034cc <wheel_Ctrl>
        break;
 8003380:	e013      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8003382:	2000      	movs	r0, #0
 8003384:	f7ff fda0 	bl	8002ec8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8003388:	88bb      	ldrh	r3, [r7, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	4413      	add	r3, r2
 8003390:	b29b      	uxth	r3, r3
 8003392:	b21b      	sxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	2000      	movs	r0, #0
 800339a:	f000 f897 	bl	80034cc <wheel_Ctrl>
        break;
 800339e:	e004      	b.n	80033aa <wheel_State_YAW+0x10e>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 80033a0:	2001      	movs	r0, #1
 80033a2:	f7ff fdfb 	bl	8002f9c <Motion_Stop>
        break;
 80033a6:	e000      	b.n	80033aa <wheel_State_YAW+0x10e>
    default:
        break;
 80033a8:	bf00      	nop
    }
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000056c 	.word	0x2000056c

080033b8 <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	460a      	mov	r2, r1
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 80033c8:	4a3f      	ldr	r2, [pc, #252]	@ (80034c8 <wheel_State+0x110>)
 80033ca:	88bb      	ldrh	r3, [r7, #4]
 80033cc:	8013      	strh	r3, [r2, #0]
    switch (state)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	d873      	bhi.n	80034bc <wheel_State+0x104>
 80033d4:	a201      	add	r2, pc, #4	@ (adr r2, 80033dc <wheel_State+0x24>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	08003417 	.word	0x08003417
 80033e4:	08003427 	.word	0x08003427
 80033e8:	0800343b 	.word	0x0800343b
 80033ec:	08003455 	.word	0x08003455
 80033f0:	08003475 	.word	0x08003475
 80033f4:	08003497 	.word	0x08003497
 80033f8:	080034b5 	.word	0x080034b5
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 80033fc:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <wheel_State+0x110>)
 80033fe:	2200      	movs	r2, #0
 8003400:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8003402:	88bb      	ldrh	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fdc4 	bl	8002f9c <Motion_Stop>
        break;
 8003414:	e053      	b.n	80034be <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8003416:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f854 	bl	80034cc <wheel_Ctrl>
        break;
 8003424:	e04b      	b.n	80034be <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8003426:	88bb      	ldrh	r3, [r7, #4]
 8003428:	425b      	negs	r3, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	b21b      	sxth	r3, r3
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f84a 	bl	80034cc <wheel_Ctrl>
        break;
 8003438:	e041      	b.n	80034be <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 800343a:	88bb      	ldrh	r3, [r7, #4]
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	b29b      	uxth	r3, r3
 8003440:	b218      	sxth	r0, r3
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	b21b      	sxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	2100      	movs	r1, #0
 800344e:	f000 f83d 	bl	80034cc <wheel_Ctrl>
        break;
 8003452:	e034      	b.n	80034be <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8003454:	88bb      	ldrh	r3, [r7, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	b218      	sxth	r0, r3
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	03d2      	lsls	r2, r2, #15
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	b29b      	uxth	r3, r3
 8003468:	b21b      	sxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	2100      	movs	r1, #0
 800346e:	f000 f82d 	bl	80034cc <wheel_Ctrl>

        break;
 8003472:	e024      	b.n	80034be <wheel_State+0x106>
    case MOTION_SPIN_LEFT :
        Motion_Set_Yaw_Adjust(0);
 8003474:	2000      	movs	r0, #0
 8003476:	f7ff fd27 	bl	8002ec8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 800347a:	88bb      	ldrh	r3, [r7, #4]
 800347c:	461a      	mov	r2, r3
 800347e:	0392      	lsls	r2, r2, #14
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	b21b      	sxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	2100      	movs	r1, #0
 800348e:	2000      	movs	r0, #0
 8003490:	f000 f81c 	bl	80034cc <wheel_Ctrl>
        break;
 8003494:	e013      	b.n	80034be <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8003496:	2000      	movs	r0, #0
 8003498:	f7ff fd16 	bl	8002ec8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 800349c:	88bb      	ldrh	r3, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	2000      	movs	r0, #0
 80034ae:	f000 f80d 	bl	80034cc <wheel_Ctrl>
        break;
 80034b2:	e004      	b.n	80034be <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f7ff fd71 	bl	8002f9c <Motion_Stop>
        break;
 80034ba:	e000      	b.n	80034be <wheel_State+0x106>
    default:
        break;
 80034bc:	bf00      	nop
    }
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000056c 	.word	0x2000056c

080034cc <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
 80034d6:	460b      	mov	r3, r1
 80034d8:	80bb      	strh	r3, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 80034de:	f7ff fe99 	bl	8003214 <Motion_Get_APB>
 80034e2:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 80034e4:	4b6f      	ldr	r3, [pc, #444]	@ (80036a4 <wheel_Ctrl+0x1d8>)
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 80034ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fc5f 	bl	8000db4 <__aeabi_i2f>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a6b      	ldr	r2, [pc, #428]	@ (80036a8 <wheel_Ctrl+0x1dc>)
 80034fa:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 80034fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fc57 	bl	8000db4 <__aeabi_i2f>
 8003506:	4603      	mov	r3, r0
 8003508:	4968      	ldr	r1, [pc, #416]	@ (80036ac <wheel_Ctrl+0x1e0>)
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fd5a 	bl	8000fc4 <__aeabi_fdiv>
 8003510:	4603      	mov	r3, r0
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fca1 	bl	8000e5c <__aeabi_fmul>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	4b64      	ldr	r3, [pc, #400]	@ (80036b0 <wheel_Ctrl+0x1e4>)
 8003520:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <wheel_Ctrl+0x76>
 800352a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d107      	bne.n	8003542 <wheel_Ctrl+0x76>
 8003532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 800353a:	2001      	movs	r0, #1
 800353c:	f7ff fd2e 	bl	8002f9c <Motion_Stop>
        return;
 8003540:	e0ad      	b.n	800369e <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8003542:	4b59      	ldr	r3, [pc, #356]	@ (80036a8 <wheel_Ctrl+0x1dc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a57      	ldr	r2, [pc, #348]	@ (80036a4 <wheel_Ctrl+0x1d8>)
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd fb7d 	bl	8000c4c <__addsf3>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b56      	ldr	r3, [pc, #344]	@ (80036b0 <wheel_Ctrl+0x1e4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fd fb75 	bl	8000c4c <__addsf3>
 8003562:	4603      	mov	r3, r0
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fe3f 	bl	80011e8 <__aeabi_f2iz>
 800356a:	4603      	mov	r3, r0
 800356c:	4a51      	ldr	r2, [pc, #324]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 800356e:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8003570:	4b4d      	ldr	r3, [pc, #308]	@ (80036a8 <wheel_Ctrl+0x1dc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4b      	ldr	r2, [pc, #300]	@ (80036a4 <wheel_Ctrl+0x1d8>)
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fb64 	bl	8000c48 <__aeabi_fsub>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4b4a      	ldr	r3, [pc, #296]	@ (80036b0 <wheel_Ctrl+0x1e4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f7fd fb5e 	bl	8000c4c <__addsf3>
 8003590:	4603      	mov	r3, r0
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fe28 	bl	80011e8 <__aeabi_f2iz>
 8003598:	4603      	mov	r3, r0
 800359a:	4a47      	ldr	r2, [pc, #284]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 800359c:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 800359e:	4b42      	ldr	r3, [pc, #264]	@ (80036a8 <wheel_Ctrl+0x1dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a40      	ldr	r2, [pc, #256]	@ (80036a4 <wheel_Ctrl+0x1d8>)
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fb4d 	bl	8000c48 <__aeabi_fsub>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b3f      	ldr	r3, [pc, #252]	@ (80036b0 <wheel_Ctrl+0x1e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fd fb45 	bl	8000c48 <__aeabi_fsub>
 80035be:	4603      	mov	r3, r0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fe11 	bl	80011e8 <__aeabi_f2iz>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a3c      	ldr	r2, [pc, #240]	@ (80036bc <wheel_Ctrl+0x1f0>)
 80035ca:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 80035cc:	4b36      	ldr	r3, [pc, #216]	@ (80036a8 <wheel_Ctrl+0x1dc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <wheel_Ctrl+0x1d8>)
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fb38 	bl	8000c4c <__addsf3>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	4b33      	ldr	r3, [pc, #204]	@ (80036b0 <wheel_Ctrl+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fd fb2e 	bl	8000c48 <__aeabi_fsub>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fdfa 	bl	80011e8 <__aeabi_f2iz>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4a32      	ldr	r2, [pc, #200]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 80035f8:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 80035fa:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003602:	dd03      	ble.n	800360c <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 8003606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800360a:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 800360c:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003614:	da02      	bge.n	800361c <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 8003618:	4a2a      	ldr	r2, [pc, #168]	@ (80036c4 <wheel_Ctrl+0x1f8>)
 800361a:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 800361c:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003624:	dd03      	ble.n	800362e <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 8003628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800362c:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 800362e:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003636:	da02      	bge.n	800363e <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8003638:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 800363a:	4a22      	ldr	r2, [pc, #136]	@ (80036c4 <wheel_Ctrl+0x1f8>)
 800363c:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 800363e:	4b1f      	ldr	r3, [pc, #124]	@ (80036bc <wheel_Ctrl+0x1f0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003646:	dd03      	ble.n	8003650 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8003648:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <wheel_Ctrl+0x1f0>)
 800364a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800364e:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <wheel_Ctrl+0x1f0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003658:	da02      	bge.n	8003660 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 800365a:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <wheel_Ctrl+0x1f0>)
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <wheel_Ctrl+0x1f8>)
 800365e:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8003660:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003668:	dd03      	ble.n	8003672 <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 800366c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003670:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8003672:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800367a:	da02      	bge.n	8003682 <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 800367c:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 800367e:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <wheel_Ctrl+0x1f8>)
 8003680:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <wheel_Ctrl+0x1e8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	b218      	sxth	r0, r3
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <wheel_Ctrl+0x1ec>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	b219      	sxth	r1, r3
 800368e:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <wheel_Ctrl+0x1f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b21a      	sxth	r2, r3
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <wheel_Ctrl+0x1f4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b21b      	sxth	r3, r3
 800369a:	f7ff fc9f 	bl	8002fdc <Motion_Set_Speed>
}
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000550 	.word	0x20000550
 80036a8:	20000554 	.word	0x20000554
 80036ac:	447a0000 	.word	0x447a0000
 80036b0:	20000558 	.word	0x20000558
 80036b4:	2000055c 	.word	0x2000055c
 80036b8:	20000560 	.word	0x20000560
 80036bc:	20000564 	.word	0x20000564
 80036c0:	20000568 	.word	0x20000568
 80036c4:	fffffc18 	.word	0xfffffc18

080036c8 <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 80036cc:	4814      	ldr	r0, [pc, #80]	@ (8003720 <Motion_Handle+0x58>)
 80036ce:	f7ff fcc9 	bl	8003064 <Motion_Get_Speed>

    if (g_start_ctrl)
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <Motion_Handle+0x5c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 80036da:	4b13      	ldr	r3, [pc, #76]	@ (8003728 <Motion_Handle+0x60>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fd82 	bl	80011e8 <__aeabi_f2iz>
 80036e4:	4603      	mov	r3, r0
 80036e6:	b21c      	sxth	r4, r3
 80036e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003728 <Motion_Handle+0x60>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fd7b 	bl	80011e8 <__aeabi_f2iz>
 80036f2:	4603      	mov	r3, r0
 80036f4:	b21d      	sxth	r5, r3
 80036f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <Motion_Handle+0x60>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fd74 	bl	80011e8 <__aeabi_f2iz>
 8003700:	4603      	mov	r3, r0
 8003702:	b21e      	sxth	r6, r3
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <Motion_Handle+0x60>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fd6d 	bl	80011e8 <__aeabi_f2iz>
 800370e:	4603      	mov	r3, r0
 8003710:	b21b      	sxth	r3, r3
 8003712:	4632      	mov	r2, r6
 8003714:	4629      	mov	r1, r5
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff fbec 	bl	8002ef4 <Motion_Set_Pwm>
    }
}
 800371c:	bf00      	nop
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003720:	200005a4 	.word	0x200005a4
 8003724:	200005a0 	.word	0x200005a0
 8003728:	200005ac 	.word	0x200005ac

0800372c <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e062      	b.n	80037fe <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8003738:	493a      	ldr	r1, [pc, #232]	@ (8003824 <PID_Param_Init+0xf8>)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 800374c:	4935      	ldr	r1, [pc, #212]	@ (8003824 <PID_Param_Init+0xf8>)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	440b      	add	r3, r1
 800375a:	3308      	adds	r3, #8
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8003762:	4930      	ldr	r1, [pc, #192]	@ (8003824 <PID_Param_Init+0xf8>)
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	3318      	adds	r3, #24
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8003778:	492a      	ldr	r1, [pc, #168]	@ (8003824 <PID_Param_Init+0xf8>)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	331c      	adds	r3, #28
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 800378e:	4925      	ldr	r1, [pc, #148]	@ (8003824 <PID_Param_Init+0xf8>)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	3320      	adds	r3, #32
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 80037a4:	491f      	ldr	r1, [pc, #124]	@ (8003824 <PID_Param_Init+0xf8>)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	3324      	adds	r3, #36	@ 0x24
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 80037ba:	491a      	ldr	r1, [pc, #104]	@ (8003824 <PID_Param_Init+0xf8>)
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	330c      	adds	r3, #12
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <PID_Param_Init+0xfc>)
 80037cc:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 80037ce:	4915      	ldr	r1, [pc, #84]	@ (8003824 <PID_Param_Init+0xf8>)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	3310      	adds	r3, #16
 80037de:	4a13      	ldr	r2, [pc, #76]	@ (800382c <PID_Param_Init+0x100>)
 80037e0:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 80037e2:	4910      	ldr	r1, [pc, #64]	@ (8003824 <PID_Param_Init+0xf8>)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	3314      	adds	r3, #20
 80037f2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80037f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3301      	adds	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b03      	cmp	r3, #3
 8003802:	dd99      	ble.n	8003738 <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <PID_Param_Init+0x104>)
 8003806:	4a0b      	ldr	r2, [pc, #44]	@ (8003834 <PID_Param_Init+0x108>)
 8003808:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <PID_Param_Init+0x104>)
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <PID_Param_Init+0x104>)
 8003814:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <PID_Param_Init+0x10c>)
 8003816:	60da      	str	r2, [r3, #12]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	200005d8 	.word	0x200005d8
 8003828:	3f4ccccd 	.word	0x3f4ccccd
 800382c:	3d75c28f 	.word	0x3d75c28f
 8003830:	2000000c 	.word	0x2000000c
 8003834:	3ecccccd 	.word	0x3ecccccd
 8003838:	3dcccccd 	.word	0x3dcccccd

0800383c <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 800383c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd f9fa 	bl	8000c48 <__aeabi_fsub>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689c      	ldr	r4, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68dd      	ldr	r5, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f7fd f9ea 	bl	8000c48 <__aeabi_fsub>
 8003874:	4603      	mov	r3, r0
 8003876:	4619      	mov	r1, r3
 8003878:	4628      	mov	r0, r5
 800387a:	f7fd faef 	bl	8000e5c <__aeabi_fmul>
 800387e:	4603      	mov	r3, r0
 8003880:	461d      	mov	r5, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7fd fae5 	bl	8000e5c <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
 8003894:	4619      	mov	r1, r3
 8003896:	4628      	mov	r0, r5
 8003898:	f7fd f9d8 	bl	8000c4c <__addsf3>
 800389c:	4603      	mov	r3, r0
 800389e:	4698      	mov	r8, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695d      	ldr	r5, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699e      	ldr	r6, [r3, #24]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4619      	mov	r1, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd f9cc 	bl	8000c4c <__addsf3>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4619      	mov	r1, r3
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7fd f9c5 	bl	8000c48 <__aeabi_fsub>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fd f9bf 	bl	8000c4c <__addsf3>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4619      	mov	r1, r3
 80038d2:	4628      	mov	r0, r5
 80038d4:	f7fd fac2 	bl	8000e5c <__aeabi_fmul>
 80038d8:	4603      	mov	r3, r0
 80038da:	4619      	mov	r1, r3
 80038dc:	4640      	mov	r0, r8
 80038de:	f7fd f9b5 	bl	8000c4c <__addsf3>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4619      	mov	r1, r3
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7fd f9b0 	bl	8000c4c <__addsf3>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	490e      	ldr	r1, [pc, #56]	@ (8003944 <PID_Incre_Calc+0x108>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fc62 	bl	80011d4 <__aeabi_fcmpgt>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <PID_Incre_Calc+0x108>)
 800391a:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4909      	ldr	r1, [pc, #36]	@ (8003948 <PID_Incre_Calc+0x10c>)
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fc38 	bl	8001198 <__aeabi_fcmplt>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <PID_Incre_Calc+0x10c>)
 8003932:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003942:	bf00      	nop
 8003944:	44c80000 	.word	0x44c80000
 8003948:	c4c80000 	.word	0xc4c80000

0800394c <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e016      	b.n	8003988 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <PID_Calc_Motor+0x4c>)
 8003966:	1898      	adds	r0, r3, r2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	4619      	mov	r1, r3
 8003972:	f7ff ff63 	bl	800383c <PID_Incre_Calc>
 8003976:	4601      	mov	r1, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	3204      	adds	r2, #4
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b03      	cmp	r3, #3
 800398c:	dde5      	ble.n	800395a <PID_Calc_Motor+0xe>
    }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200005d8 	.word	0x200005d8

0800399c <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d87b      	bhi.n	8003aa4 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d140      	bne.n	8003a34 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e039      	b.n	8003a2c <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 80039b8:	493d      	ldr	r1, [pc, #244]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	3308      	adds	r3, #8
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 80039ce:	4938      	ldr	r1, [pc, #224]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	3318      	adds	r3, #24
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 80039e4:	4932      	ldr	r1, [pc, #200]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	331c      	adds	r3, #28
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 80039fa:	492d      	ldr	r1, [pc, #180]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	3320      	adds	r3, #32
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8003a10:	4927      	ldr	r1, [pc, #156]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3324      	adds	r3, #36	@ 0x24
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	ddc2      	ble.n	80039b8 <PID_Clear_Motor+0x1c>
 8003a32:	e038      	b.n	8003aa6 <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8003a34:	79fa      	ldrb	r2, [r7, #7]
 8003a36:	491e      	ldr	r1, [pc, #120]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	3308      	adds	r3, #8
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8003a4a:	79fa      	ldrb	r2, [r7, #7]
 8003a4c:	4918      	ldr	r1, [pc, #96]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	3318      	adds	r3, #24
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8003a60:	79fa      	ldrb	r2, [r7, #7]
 8003a62:	4913      	ldr	r1, [pc, #76]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	331c      	adds	r3, #28
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	490d      	ldr	r1, [pc, #52]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	3320      	adds	r3, #32
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8003a8c:	79fa      	ldrb	r2, [r7, #7]
 8003a8e:	4908      	ldr	r1, [pc, #32]	@ (8003ab0 <PID_Clear_Motor+0x114>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	3324      	adds	r3, #36	@ 0x24
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e000      	b.n	8003aa6 <PID_Clear_Motor+0x10a>
        return;
 8003aa4:	bf00      	nop
    }
}
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200005d8 	.word	0x200005d8

08003ab4 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d81f      	bhi.n	8003b06 <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d112      	bne.n	8003af2 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e00b      	b.n	8003aea <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8003ad2:	490f      	ldr	r1, [pc, #60]	@ (8003b10 <PID_Set_Motor_Target+0x5c>)
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	440b      	add	r3, r1
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	ddf0      	ble.n	8003ad2 <PID_Set_Motor_Target+0x1e>
 8003af0:	e00a      	b.n	8003b08 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8003af2:	79fa      	ldrb	r2, [r7, #7]
 8003af4:	4906      	ldr	r1, [pc, #24]	@ (8003b10 <PID_Set_Motor_Target+0x5c>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e000      	b.n	8003b08 <PID_Set_Motor_Target+0x54>
        return;
 8003b06:	bf00      	nop
    }
}
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	200005d8 	.word	0x200005d8

08003b14 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8003b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	dd05      	ble.n	8003b32 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	e00a      	b.n	8003b48 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 8003b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da05      	bge.n	8003b46 <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	e000      	b.n	8003b48 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
	...

08003b54 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <Motor_Stop+0x14>
        brake = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b6e:	fb03 f202 	mul.w	r2, r3, r2
 8003b72:	4b1c      	ldr	r3, [pc, #112]	@ (8003be4 <Motor_Stop+0x90>)
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b7c:	fb03 f202 	mul.w	r2, r3, r2
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <Motor_Stop+0x90>)
 8003b82:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b8a:	fb03 f202 	mul.w	r2, r3, r2
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <Motor_Stop+0x90>)
 8003b90:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b98:	fb03 f202 	mul.w	r2, r3, r2
 8003b9c:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <Motor_Stop+0x90>)
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <Motor_Stop+0x94>)
 8003bac:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bb4:	fb03 f202 	mul.w	r2, r3, r2
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <Motor_Stop+0x94>)
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <Motor_Stop+0x94>)
 8003bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bd0:	fb03 f202 	mul.w	r2, r3, r2
 8003bd4:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <Motor_Stop+0x94>)
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40012c00 	.word	0x40012c00

08003bec <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	71fb      	strb	r3, [r7, #7]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8003bfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff87 	bl	8003b14 <Motor_Ignore_Dead_Zone>
 8003c06:	4603      	mov	r3, r0
 8003c08:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8003c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c0e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003c12:	db02      	blt.n	8003c1a <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8003c14:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003c18:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8003c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c1e:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8003c22:	dc02      	bgt.n	8003c2a <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8003c24:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8003c28:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d867      	bhi.n	8003d00 <Motor_Set_Pwm+0x114>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <Motor_Set_Pwm+0x4c>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c7b 	.word	0x08003c7b
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	08003cd7 	.word	0x08003cd7
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8003c48:	89fb      	ldrh	r3, [r7, #14]
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8003c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db07      	blt.n	8003c68 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8003c58:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c5e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8003c60:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 8003c66:	e04c      	b.n	8003d02 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8003c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c72:	425a      	negs	r2, r3
 8003c74:	4b25      	ldr	r3, [pc, #148]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003c78:	e043      	b.n	8003d02 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8003c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	db07      	blt.n	8003c9a <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 8003c8a:	4a20      	ldr	r2, [pc, #128]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c90:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8003c92:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 8003c98:	e033      	b.n	8003d02 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8003ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ca4:	425a      	negs	r2, r3
 8003ca6:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <Motor_Set_Pwm+0x120>)
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003caa:	e02a      	b.n	8003d02 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8003cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db07      	blt.n	8003cc4 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cba:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8003cc2:	e01e      	b.n	8003d02 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8003cc4:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 8003cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cce:	425a      	negs	r2, r3
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cd2:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003cd4:	e015      	b.n	8003d02 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 8003cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db07      	blt.n	8003cee <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8003cde:	4a0c      	ldr	r2, [pc, #48]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ce4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8003cec:	e009      	b.n	8003d02 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8003cf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cf8:	425a      	negs	r2, r3
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <Motor_Set_Pwm+0x124>)
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003cfe:	e000      	b.n	8003d02 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8003d00:	bf00      	nop
    }
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40012c00 	.word	0x40012c00

08003d14 <PwmServo_Angle_To_Pulse>:
uint16_t g_angle_num[MAX_PWM_SERVO] = {149, 149, 149, 149};

// 角度转化为脉冲数, angle= [0, 180]
// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 8003d1e:	79fa      	ldrb	r2, [r7, #7]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003d2e:	4a06      	ldr	r2, [pc, #24]	@ (8003d48 <PwmServo_Angle_To_Pulse+0x34>)
 8003d30:	fb82 1203 	smull	r1, r2, r2, r3
 8003d34:	1092      	asrs	r2, r2, #2
 8003d36:	17db      	asrs	r3, r3, #31
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	81fb      	strh	r3, [r7, #14]
	return pulse;
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	66666667 	.word	0x66666667

08003d4c <PwmServo_Handle>:

// PWM舵机控制，在定时器中调用，模拟输出PWM信号
// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
	g_pwm_pulse++;
 8003d50:	4b2d      	ldr	r3, [pc, #180]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003d5a:	801a      	strh	r2, [r3, #0]

#ifdef USE_SERVO_J1
	if (g_pwm_pulse <= g_angle_num[0])
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <PwmServo_Handle+0xc0>)
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	4b29      	ldr	r3, [pc, #164]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d305      	bcc.n	8003d74 <PwmServo_Handle+0x28>
		SERVO_1_HIGH();
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4828      	ldr	r0, [pc, #160]	@ (8003e10 <PwmServo_Handle+0xc4>)
 8003d6e:	f003 f84f 	bl	8006e10 <HAL_GPIO_WritePin>
 8003d72:	e004      	b.n	8003d7e <PwmServo_Handle+0x32>
	else
		SERVO_1_LOW();
 8003d74:	2200      	movs	r2, #0
 8003d76:	2101      	movs	r1, #1
 8003d78:	4825      	ldr	r0, [pc, #148]	@ (8003e10 <PwmServo_Handle+0xc4>)
 8003d7a:	f003 f849 	bl	8006e10 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J2
	if (g_pwm_pulse <= g_angle_num[1])
 8003d7e:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <PwmServo_Handle+0xc0>)
 8003d80:	885a      	ldrh	r2, [r3, #2]
 8003d82:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d305      	bcc.n	8003d96 <PwmServo_Handle+0x4a>
		SERVO_2_HIGH();
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4820      	ldr	r0, [pc, #128]	@ (8003e10 <PwmServo_Handle+0xc4>)
 8003d90:	f003 f83e 	bl	8006e10 <HAL_GPIO_WritePin>
 8003d94:	e004      	b.n	8003da0 <PwmServo_Handle+0x54>
	else
		SERVO_2_LOW();
 8003d96:	2200      	movs	r2, #0
 8003d98:	2102      	movs	r1, #2
 8003d9a:	481d      	ldr	r0, [pc, #116]	@ (8003e10 <PwmServo_Handle+0xc4>)
 8003d9c:	f003 f838 	bl	8006e10 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J3
	if (g_pwm_pulse <= g_angle_num[2])
 8003da0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <PwmServo_Handle+0xc0>)
 8003da2:	889a      	ldrh	r2, [r3, #4]
 8003da4:	4b18      	ldr	r3, [pc, #96]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d306      	bcc.n	8003dba <PwmServo_Handle+0x6e>
		SERVO_3_HIGH();
 8003dac:	2201      	movs	r2, #1
 8003dae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003db2:	4818      	ldr	r0, [pc, #96]	@ (8003e14 <PwmServo_Handle+0xc8>)
 8003db4:	f003 f82c 	bl	8006e10 <HAL_GPIO_WritePin>
 8003db8:	e005      	b.n	8003dc6 <PwmServo_Handle+0x7a>
	else
		SERVO_3_LOW();
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dc0:	4814      	ldr	r0, [pc, #80]	@ (8003e14 <PwmServo_Handle+0xc8>)
 8003dc2:	f003 f825 	bl	8006e10 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J4
	if (g_pwm_pulse <= g_angle_num[3])
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <PwmServo_Handle+0xc0>)
 8003dc8:	88da      	ldrh	r2, [r3, #6]
 8003dca:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d306      	bcc.n	8003de0 <PwmServo_Handle+0x94>
		SERVO_4_HIGH();
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dd8:	480e      	ldr	r0, [pc, #56]	@ (8003e14 <PwmServo_Handle+0xc8>)
 8003dda:	f003 f819 	bl	8006e10 <HAL_GPIO_WritePin>
 8003dde:	e005      	b.n	8003dec <PwmServo_Handle+0xa0>
	else
		SERVO_4_LOW();
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003de6:	480b      	ldr	r0, [pc, #44]	@ (8003e14 <PwmServo_Handle+0xc8>)
 8003de8:	f003 f812 	bl	8006e10 <HAL_GPIO_WritePin>
#endif

	if (g_pwm_pulse >= 2000)//操作完一次
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003df4:	d305      	bcc.n	8003e02 <PwmServo_Handle+0xb6>
	{
		g_pwm_pulse = 0;
 8003df6:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <PwmServo_Handle+0xbc>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	801a      	strh	r2, [r3, #0]
		g_servo_falg = 0;//取消进去标志
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <PwmServo_Handle+0xcc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	}

}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000678 	.word	0x20000678
 8003e0c:	2000002c 	.word	0x2000002c
 8003e10:	40010c00 	.word	0x40010c00
 8003e14:	40011400 	.word	0x40011400
 8003e18:	2000053a 	.word	0x2000053a

08003e1c <PwmServo_Set_Angle>:
}

// 设置pwm舵机角度，index=0~MAX_PWM_SERVO-1，angle为0-180
// Set the PWM servo Angle, index=0~MAX_PWM_SERVO, Angle to 0-180
void PwmServo_Set_Angle(uint8_t index, uint8_t angle)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	460a      	mov	r2, r1
 8003e26:	71fb      	strb	r3, [r7, #7]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71bb      	strb	r3, [r7, #6]
	if (index >= MAX_PWM_SERVO)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d814      	bhi.n	8003e5c <PwmServo_Set_Angle+0x40>
		return;
	if (angle > 180)
 8003e32:	79bb      	ldrb	r3, [r7, #6]
 8003e34:	2bb4      	cmp	r3, #180	@ 0xb4
 8003e36:	d813      	bhi.n	8003e60 <PwmServo_Set_Angle+0x44>
		return;
	g_pwm_angle[index] = angle;
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	490b      	ldr	r1, [pc, #44]	@ (8003e68 <PwmServo_Set_Angle+0x4c>)
 8003e3c:	79ba      	ldrb	r2, [r7, #6]
 8003e3e:	54ca      	strb	r2, [r1, r3]
	g_angle_num[index] = PwmServo_Angle_To_Pulse(angle);
 8003e40:	79fc      	ldrb	r4, [r7, #7]
 8003e42:	79bb      	ldrb	r3, [r7, #6]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff65 	bl	8003d14 <PwmServo_Angle_To_Pulse>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <PwmServo_Set_Angle+0x50>)
 8003e50:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	g_servo_falg = 1;//赋值完,再调整 After assignment, adjust again
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <PwmServo_Set_Angle+0x54>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e002      	b.n	8003e62 <PwmServo_Set_Angle+0x46>
		return;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <PwmServo_Set_Angle+0x46>
		return;
 8003e60:	bf00      	nop
}
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	20000028 	.word	0x20000028
 8003e6c:	2000002c 	.word	0x2000002c
 8003e70:	2000053a 	.word	0x2000053a

08003e74 <PwmServo_Set_Angle_All>:

// 设置全部pwm舵机的角度
// Set the Angle of all PWM steering gear
void PwmServo_Set_Angle_All(uint8_t angle_s1, uint8_t angle_s2, uint8_t angle_s3, uint8_t angle_s4)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	4603      	mov	r3, r0
 8003e88:	71bb      	strb	r3, [r7, #6]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	717b      	strb	r3, [r7, #5]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	713b      	strb	r3, [r7, #4]
	if (angle_s1 <= 180)
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2bb4      	cmp	r3, #180	@ 0xb4
 8003e96:	d80a      	bhi.n	8003eae <PwmServo_Set_Angle_All+0x3a>
	{
		g_pwm_angle[0] = angle_s1;
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <PwmServo_Set_Angle_All+0x9c>)
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	7013      	strb	r3, [r2, #0]
		g_angle_num[0] = PwmServo_Angle_To_Pulse(angle_s1);
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff37 	bl	8003d14 <PwmServo_Angle_To_Pulse>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <PwmServo_Set_Angle_All+0xa0>)
 8003eac:	801a      	strh	r2, [r3, #0]
	}

	if (angle_s2 <= 180)
 8003eae:	79bb      	ldrb	r3, [r7, #6]
 8003eb0:	2bb4      	cmp	r3, #180	@ 0xb4
 8003eb2:	d80a      	bhi.n	8003eca <PwmServo_Set_Angle_All+0x56>
	{
		g_pwm_angle[1] = angle_s2;
 8003eb4:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <PwmServo_Set_Angle_All+0x9c>)
 8003eb6:	79bb      	ldrb	r3, [r7, #6]
 8003eb8:	7053      	strb	r3, [r2, #1]
		g_angle_num[1] = PwmServo_Angle_To_Pulse(angle_s2);
 8003eba:	79bb      	ldrb	r3, [r7, #6]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff29 	bl	8003d14 <PwmServo_Angle_To_Pulse>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b13      	ldr	r3, [pc, #76]	@ (8003f14 <PwmServo_Set_Angle_All+0xa0>)
 8003ec8:	805a      	strh	r2, [r3, #2]
	}

	if (angle_s3 <= 180)
 8003eca:	797b      	ldrb	r3, [r7, #5]
 8003ecc:	2bb4      	cmp	r3, #180	@ 0xb4
 8003ece:	d80a      	bhi.n	8003ee6 <PwmServo_Set_Angle_All+0x72>
	{
		g_pwm_angle[2] = angle_s3;
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f10 <PwmServo_Set_Angle_All+0x9c>)
 8003ed2:	797b      	ldrb	r3, [r7, #5]
 8003ed4:	7093      	strb	r3, [r2, #2]
		g_angle_num[2] = PwmServo_Angle_To_Pulse(angle_s3);
 8003ed6:	797b      	ldrb	r3, [r7, #5]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff1b 	bl	8003d14 <PwmServo_Angle_To_Pulse>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <PwmServo_Set_Angle_All+0xa0>)
 8003ee4:	809a      	strh	r2, [r3, #4]
	}

	if (angle_s4 <= 180)
 8003ee6:	793b      	ldrb	r3, [r7, #4]
 8003ee8:	2bb4      	cmp	r3, #180	@ 0xb4
 8003eea:	d80a      	bhi.n	8003f02 <PwmServo_Set_Angle_All+0x8e>
	{
		g_pwm_angle[3] = angle_s4;
 8003eec:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <PwmServo_Set_Angle_All+0x9c>)
 8003eee:	793b      	ldrb	r3, [r7, #4]
 8003ef0:	70d3      	strb	r3, [r2, #3]
		g_angle_num[3] = PwmServo_Angle_To_Pulse(angle_s4);
 8003ef2:	793b      	ldrb	r3, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff0d 	bl	8003d14 <PwmServo_Angle_To_Pulse>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <PwmServo_Set_Angle_All+0xa0>)
 8003f00:	80da      	strh	r2, [r3, #6]
	}
	g_servo_falg = 1;//赋值完,再调整 After assignment, adjust again
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <PwmServo_Set_Angle_All+0xa4>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	20000028 	.word	0x20000028
 8003f14:	2000002c 	.word	0x2000002c
 8003f18:	2000053a 	.word	0x2000053a

08003f1c <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f20:	2100      	movs	r1, #0
 8003f22:	4821      	ldr	r0, [pc, #132]	@ (8003fa8 <Bsp_Tim_Init+0x8c>)
 8003f24:	f004 feca 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003f28:	2104      	movs	r1, #4
 8003f2a:	481f      	ldr	r0, [pc, #124]	@ (8003fa8 <Bsp_Tim_Init+0x8c>)
 8003f2c:	f004 fec6 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003f30:	2108      	movs	r1, #8
 8003f32:	481d      	ldr	r0, [pc, #116]	@ (8003fa8 <Bsp_Tim_Init+0x8c>)
 8003f34:	f004 fec2 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003f38:	210c      	movs	r1, #12
 8003f3a:	481b      	ldr	r0, [pc, #108]	@ (8003fa8 <Bsp_Tim_Init+0x8c>)
 8003f3c:	f004 febe 	bl	8008cbc <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003f40:	2100      	movs	r1, #0
 8003f42:	481a      	ldr	r0, [pc, #104]	@ (8003fac <Bsp_Tim_Init+0x90>)
 8003f44:	f004 feba 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4818      	ldr	r0, [pc, #96]	@ (8003fac <Bsp_Tim_Init+0x90>)
 8003f4c:	f004 feb6 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003f50:	2108      	movs	r1, #8
 8003f52:	4816      	ldr	r0, [pc, #88]	@ (8003fac <Bsp_Tim_Init+0x90>)
 8003f54:	f004 feb2 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8003f58:	210c      	movs	r1, #12
 8003f5a:	4814      	ldr	r0, [pc, #80]	@ (8003fac <Bsp_Tim_Init+0x90>)
 8003f5c:	f004 feae 	bl	8008cbc <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 8003f60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f64:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4810      	ldr	r0, [pc, #64]	@ (8003fb0 <Bsp_Tim_Init+0x94>)
 8003f6e:	f005 f971 	bl	8009254 <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 8003f72:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <Bsp_Tim_Init+0x98>)
 8003f74:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	480e      	ldr	r0, [pc, #56]	@ (8003fb8 <Bsp_Tim_Init+0x9c>)
 8003f7e:	f005 f969 	bl	8009254 <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <Bsp_Tim_Init+0xa0>)
 8003f84:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	480c      	ldr	r0, [pc, #48]	@ (8003fc0 <Bsp_Tim_Init+0xa4>)
 8003f8e:	f005 f961 	bl	8009254 <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <Bsp_Tim_Init+0xa8>)
 8003f94:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	480a      	ldr	r0, [pc, #40]	@ (8003fc8 <Bsp_Tim_Init+0xac>)
 8003f9e:	f005 f959 	bl	8009254 <HAL_TIM_Encoder_Start>

}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000070c 	.word	0x2000070c
 8003fac:	20000904 	.word	0x20000904
 8003fb0:	20000754 	.word	0x20000754
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	2000079c 	.word	0x2000079c
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	200007e4 	.word	0x200007e4
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	2000082c 	.word	0x2000082c

08003fcc <Tim_Base_Init>:

//基本定时器中断启动 Basic timer interrupt start
void Tim_Base_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
	//启动定时6中断 Start timing 6 interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8003fd0:	4803      	ldr	r0, [pc, #12]	@ (8003fe0 <Tim_Base_Init+0x14>)
 8003fd2:	f004 fd03 	bl	80089dc <HAL_TIM_Base_Start_IT>

	//启动定时7中断 Start timing 7 interrupt
	HAL_TIM_Base_Start_IT(&htim7);
 8003fd6:	4803      	ldr	r0, [pc, #12]	@ (8003fe4 <Tim_Base_Init+0x18>)
 8003fd8:	f004 fd00 	bl	80089dc <HAL_TIM_Base_Start_IT>
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000874 	.word	0x20000874
 8003fe4:	200008bc 	.word	0x200008bc

08003fe8 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t ultrasonic_flag;

int send_time = 1;//发送计时变量 Sending timing variables
//基本定时器中断回调函数 Basic timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	@ (800404c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d110      	bne.n	800401c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		Encoder_Update_Count();//10ms测速 10ms speed measurement
 8003ffa:	f7fe fe2f 	bl	8002c5c <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度 Calling PID control speed
 8003ffe:	f7ff fb63 	bl	80036c8 <Motion_Handle>

		if(send_time>0)
 8004002:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	dd05      	ble.n	8004016 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			send_time --;
 800400a:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a0f      	ldr	r2, [pc, #60]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e002      	b.n	800401c <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		else
		{
			send_time = 1;
 8004016:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]


	}


	if (htim->Instance == TIM7)//10us
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(g_servo_falg == 1)
 8004026:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			PwmServo_Handle();//舵机控制 Steering gear control
 800402e:	f7ff fe8d 	bl	8003d4c <PwmServo_Handle>
		}


		if(ultrasonic_flag) //开始测距--超声波 Start ranging - ultrasonic
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			ultrasonic_num++;
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	4a07      	ldr	r2, [pc, #28]	@ (8004060 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004042:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40001000 	.word	0x40001000
 8004050:	20000034 	.word	0x20000034
 8004054:	40001400 	.word	0x40001400
 8004058:	2000053a 	.word	0x2000053a
 800405c:	20000680 	.word	0x20000680
 8004060:	2000067c 	.word	0x2000067c

08004064 <Ultrasonic_follow>:
 * uint16_t Max_distance: The maximum distance to follow. Greater than this distance, the car will no longer follow
 * uint16_t Min_distance: The minimum distance maintained by following. If the distance is less than this distance, the car will move backward.
 * */

void Ultrasonic_follow(uint16_t Max_distance,uint16_t Min_distance)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	460a      	mov	r2, r1
 800406e:	80fb      	strh	r3, [r7, #6]
 8004070:	4613      	mov	r3, r2
 8004072:	80bb      	strh	r3, [r7, #4]
	uint16_t dis;
	uint16_t speed;
	dis=Get_distance();
 8004074:	f000 f83c 	bl	80040f0 <Get_distance>
 8004078:	4603      	mov	r3, r0
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd f8da 	bl	8001234 <__aeabi_f2uiz>
 8004080:	4603      	mov	r3, r0
 8004082:	81bb      	strh	r3, [r7, #12]

	if(CarSpeedControl >500)
 8004084:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <Ultrasonic_follow+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800408c:	dd03      	ble.n	8004096 <Ultrasonic_follow+0x32>
	{
		speed = 500;
 800408e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004092:	81fb      	strh	r3, [r7, #14]
 8004094:	e002      	b.n	800409c <Ultrasonic_follow+0x38>
	}
	else
	{
		speed = CarSpeedControl;
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <Ultrasonic_follow+0x88>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	81fb      	strh	r3, [r7, #14]
	}

	uint16_t middle_dis =(Max_distance+Min_distance)/2;
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	88bb      	ldrh	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	0fda      	lsrs	r2, r3, #31
 80040a4:	4413      	add	r3, r2
 80040a6:	105b      	asrs	r3, r3, #1
 80040a8:	817b      	strh	r3, [r7, #10]

	if(dis < Min_distance )
 80040aa:	89ba      	ldrh	r2, [r7, #12]
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d205      	bcs.n	80040be <Ultrasonic_follow+0x5a>
	{
		wheel_State(MOTION_BACK,speed);
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	4619      	mov	r1, r3
 80040b6:	2002      	movs	r0, #2
 80040b8:	f7ff f97e 	bl	80033b8 <wheel_State>
	{
		wheel_State(MOTION_STOP,0);
	}


}
 80040bc:	e011      	b.n	80040e2 <Ultrasonic_follow+0x7e>
	else if(dis >middle_dis && dis < Max_distance )
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d909      	bls.n	80040da <Ultrasonic_follow+0x76>
 80040c6:	89ba      	ldrh	r2, [r7, #12]
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d205      	bcs.n	80040da <Ultrasonic_follow+0x76>
		wheel_State(MOTION_RUN,speed);
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	4619      	mov	r1, r3
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7ff f970 	bl	80033b8 <wheel_State>
}
 80040d8:	e003      	b.n	80040e2 <Ultrasonic_follow+0x7e>
		wheel_State(MOTION_STOP,0);
 80040da:	2100      	movs	r1, #0
 80040dc:	2000      	movs	r0, #0
 80040de:	f7ff f96b 	bl	80033b8 <wheel_State>
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <Get_distance>:
 * 得到测5次平均值
 *
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
	float distance = 0,aveg = 0;
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
	uint16_t tim,count;
	uint8_t i = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	72fb      	strb	r3, [r7, #11]

	while(i != 5)
 8004106:	e061      	b.n	80041cc <Get_distance+0xdc>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_SET);
 8004108:	2201      	movs	r2, #1
 800410a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800410e:	4836      	ldr	r0, [pc, #216]	@ (80041e8 <Get_distance+0xf8>)
 8004110:	f002 fe7e 	bl	8006e10 <HAL_GPIO_WritePin>
		Delay_US(20);
 8004114:	2014      	movs	r0, #20
 8004116:	f7fe fce5 	bl	8002ae4 <Delay_US>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin,GPIO_PIN_RESET);
 800411a:	2200      	movs	r2, #0
 800411c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004120:	4831      	ldr	r0, [pc, #196]	@ (80041e8 <Get_distance+0xf8>)
 8004122:	f002 fe75 	bl	8006e10 <HAL_GPIO_WritePin>


		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8004126:	bf00      	nop
 8004128:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800412c:	482e      	ldr	r0, [pc, #184]	@ (80041e8 <Get_distance+0xf8>)
 800412e:	f002 fe4f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f7      	beq.n	8004128 <Get_distance+0x38>

		ultrasonic_flag = 1;
 8004138:	4b2c      	ldr	r3, [pc, #176]	@ (80041ec <Get_distance+0xfc>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]

		i+=1;
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	3301      	adds	r3, #1
 8004142:	72fb      	strb	r3, [r7, #11]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8004144:	e010      	b.n	8004168 <Get_distance+0x78>
	{
			count = ultrasonic_num;
 8004146:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <Get_distance+0x100>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	803b      	strh	r3, [r7, #0]
		if(count >= 10000)
 800414c:	883b      	ldrh	r3, [r7, #0]
 800414e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004152:	4293      	cmp	r3, r2
 8004154:	d908      	bls.n	8004168 <Get_distance+0x78>
		{
			ultrasonic_flag = 0;
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <Get_distance+0xfc>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
			ultrasonic_num = 0;
 800415c:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <Get_distance+0x100>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
			return 0;
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e03b      	b.n	80041e0 <Get_distance+0xf0>
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8004168:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800416c:	481e      	ldr	r0, [pc, #120]	@ (80041e8 <Get_distance+0xf8>)
 800416e:	f002 fe2f 	bl	8006dd0 <HAL_GPIO_ReadPin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d0e6      	beq.n	8004146 <Get_distance+0x56>
		}

	}

		ultrasonic_flag = 0;
 8004178:	4b1c      	ldr	r3, [pc, #112]	@ (80041ec <Get_distance+0xfc>)
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <Get_distance+0x104>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	807b      	strh	r3, [r7, #2]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 8004184:	8879      	ldrh	r1, [r7, #2]
 8004186:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <Get_distance+0x100>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	440b      	add	r3, r1
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc f991 	bl	80004bc <__aeabi_ui2d>
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	4b16      	ldr	r3, [pc, #88]	@ (80041f8 <Get_distance+0x108>)
 80041a0:	f7fc fb30 	bl	8000804 <__aeabi_ddiv>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fc fcf8 	bl	8000ba0 <__aeabi_d2f>
 80041b0:	4603      	mov	r3, r0
 80041b2:	607b      	str	r3, [r7, #4]
		aveg = distance + aveg;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7fc fd48 	bl	8000c4c <__addsf3>
 80041bc:	4603      	mov	r3, r0
 80041be:	60fb      	str	r3, [r7, #12]
		ultrasonic_num = 0;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <Get_distance+0x100>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 80041c6:	200a      	movs	r0, #10
 80041c8:	f001 fb2c 	bl	8005824 <HAL_Delay>
	while(i != 5)
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d19a      	bne.n	8004108 <Get_distance+0x18>

	}
	distance = aveg / 5;
 80041d2:	490a      	ldr	r1, [pc, #40]	@ (80041fc <Get_distance+0x10c>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7fc fef5 	bl	8000fc4 <__aeabi_fdiv>
 80041da:	4603      	mov	r3, r0
 80041dc:	607b      	str	r3, [r7, #4]
	return distance;
 80041de:	687b      	ldr	r3, [r7, #4]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40011c00 	.word	0x40011c00
 80041ec:	20000680 	.word	0x20000680
 80041f0:	2000067c 	.word	0x2000067c
 80041f4:	40001400 	.word	0x40001400
 80041f8:	404d4000 	.word	0x404d4000
 80041fc:	40a00000 	.word	0x40a00000

08004200 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8004210:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <MX_ADC3_Init+0x74>)
 8004212:	4a19      	ldr	r2, [pc, #100]	@ (8004278 <MX_ADC3_Init+0x78>)
 8004214:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004216:	4b17      	ldr	r3, [pc, #92]	@ (8004274 <MX_ADC3_Init+0x74>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800421c:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <MX_ADC3_Init+0x74>)
 800421e:	2200      	movs	r2, #0
 8004220:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004222:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <MX_ADC3_Init+0x74>)
 8004224:	2200      	movs	r2, #0
 8004226:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <MX_ADC3_Init+0x74>)
 800422a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800422e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <MX_ADC3_Init+0x74>)
 8004232:	2200      	movs	r2, #0
 8004234:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8004236:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <MX_ADC3_Init+0x74>)
 8004238:	2201      	movs	r2, #1
 800423a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800423c:	480d      	ldr	r0, [pc, #52]	@ (8004274 <MX_ADC3_Init+0x74>)
 800423e:	f001 fb15 	bl	800586c <HAL_ADC_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8004248:	f000 fa36 	bl	80046b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800424c:	2305      	movs	r3, #5
 800424e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004250:	2301      	movs	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004254:	2307      	movs	r3, #7
 8004256:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4805      	ldr	r0, [pc, #20]	@ (8004274 <MX_ADC3_Init+0x74>)
 800425e:	f001 feb7 	bl	8005fd0 <HAL_ADC_ConfigChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8004268:	f000 fa26 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000684 	.word	0x20000684
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <HAL_ADC_MspInit+0x70>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d122      	bne.n	80042e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a6:	6193      	str	r3, [r2, #24]
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 80042ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042be:	6193      	str	r3, [r2, #24]
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_ADC_MspInit+0x74>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    PF9     ------> ADC3_IN7
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = BAT_IO_Pin|Left_SIG_Pin|Right_SIG_Pin;
 80042cc:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 80042d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042d2:	2303      	movs	r3, #3
 80042d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <HAL_ADC_MspInit+0x78>)
 80042de:	f002 fae3 	bl	80068a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80042e2:	bf00      	nop
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40013c00 	.word	0x40013c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40011c00 	.word	0x40011c00

080042f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fe:	f107 0320 	add.w	r3, r7, #32
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800430c:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	4a6c      	ldr	r2, [pc, #432]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004316:	6193      	str	r3, [r2, #24]
 8004318:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004324:	4b67      	ldr	r3, [pc, #412]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4a66      	ldr	r2, [pc, #408]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800432a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432e:	6193      	str	r3, [r2, #24]
 8004330:	4b64      	ldr	r3, [pc, #400]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800433c:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4a60      	ldr	r2, [pc, #384]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6193      	str	r3, [r2, #24]
 8004348:	4b5e      	ldr	r3, [pc, #376]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004354:	4b5b      	ldr	r3, [pc, #364]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4a5a      	ldr	r2, [pc, #360]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6193      	str	r3, [r2, #24]
 8004360:	4b58      	ldr	r3, [pc, #352]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800436c:	4b55      	ldr	r3, [pc, #340]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a54      	ldr	r2, [pc, #336]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004376:	6193      	str	r3, [r2, #24]
 8004378:	4b52      	ldr	r3, [pc, #328]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004384:	4b4f      	ldr	r3, [pc, #316]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	4a4e      	ldr	r2, [pc, #312]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	6193      	str	r3, [r2, #24]
 8004390:	4b4c      	ldr	r3, [pc, #304]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800439c:	4b49      	ldr	r3, [pc, #292]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	4a48      	ldr	r2, [pc, #288]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 80043a2:	f043 0310 	orr.w	r3, r3, #16
 80043a6:	6193      	str	r3, [r2, #24]
 80043a8:	4b46      	ldr	r3, [pc, #280]	@ (80044c4 <MX_GPIO_Init+0x1cc>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 80043b4:	2200      	movs	r2, #0
 80043b6:	219c      	movs	r1, #156	@ 0x9c
 80043b8:	4843      	ldr	r0, [pc, #268]	@ (80044c8 <MX_GPIO_Init+0x1d0>)
 80043ba:	f002 fd29 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Left_Switch_Iravoid_Pin|Right_Switch_Iravoid_Pin, GPIO_PIN_SET);
 80043be:	2201      	movs	r2, #1
 80043c0:	2160      	movs	r1, #96	@ 0x60
 80043c2:	4841      	ldr	r0, [pc, #260]	@ (80044c8 <MX_GPIO_Init+0x1d0>)
 80043c4:	f002 fd24 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_Pin|S2_Pin, GPIO_PIN_RESET);
 80043c8:	2200      	movs	r2, #0
 80043ca:	2103      	movs	r1, #3
 80043cc:	483f      	ldr	r0, [pc, #252]	@ (80044cc <MX_GPIO_Init+0x1d4>)
 80043ce:	f002 fd1f 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80043d2:	2200      	movs	r2, #0
 80043d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043d8:	483d      	ldr	r0, [pc, #244]	@ (80044d0 <MX_GPIO_Init+0x1d8>)
 80043da:	f002 fd19 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin|BEEP_Pin, GPIO_PIN_RESET);
 80043de:	2200      	movs	r2, #0
 80043e0:	f241 0106 	movw	r1, #4102	@ 0x1006
 80043e4:	483b      	ldr	r0, [pc, #236]	@ (80044d4 <MX_GPIO_Init+0x1dc>)
 80043e6:	f002 fd13 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S3_Pin|S4_Pin, GPIO_PIN_RESET);
 80043ea:	2200      	movs	r2, #0
 80043ec:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80043f0:	4839      	ldr	r0, [pc, #228]	@ (80044d8 <MX_GPIO_Init+0x1e0>)
 80043f2:	f002 fd0d 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|Left_Switch_Iravoid_Pin
 80043f6:	23fc      	movs	r3, #252	@ 0xfc
 80043f8:	623b      	str	r3, [r7, #32]
                          |Right_Switch_Iravoid_Pin|LRGB_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043fa:	2301      	movs	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004406:	f107 0320 	add.w	r3, r7, #32
 800440a:	4619      	mov	r1, r3
 800440c:	482e      	ldr	r0, [pc, #184]	@ (80044c8 <MX_GPIO_Init+0x1d0>)
 800440e:	f002 fa4b 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8004412:	2303      	movs	r3, #3
 8004414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004416:	2301      	movs	r3, #1
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800441e:	2303      	movs	r3, #3
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004422:	f107 0320 	add.w	r3, r7, #32
 8004426:	4619      	mov	r1, r3
 8004428:	4828      	ldr	r0, [pc, #160]	@ (80044cc <MX_GPIO_Init+0x1d4>)
 800442a:	f002 fa3d 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800442e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004434:	2301      	movs	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800443c:	2301      	movs	r3, #1
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8004440:	f107 0320 	add.w	r3, r7, #32
 8004444:	4619      	mov	r1, r3
 8004446:	4822      	ldr	r0, [pc, #136]	@ (80044d0 <MX_GPIO_Init+0x1d8>)
 8004448:	f002 fa2e 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ECHO_Pin|X1_Pin|X2_Pin|X3_Pin;
 800444c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800445a:	f107 0320 	add.w	r3, r7, #32
 800445e:	4619      	mov	r1, r3
 8004460:	481b      	ldr	r0, [pc, #108]	@ (80044d0 <MX_GPIO_Init+0x1d8>)
 8004462:	f002 fa21 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X4_Pin;
 8004466:	2301      	movs	r3, #1
 8004468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(X4_GPIO_Port, &GPIO_InitStruct);
 8004472:	f107 0320 	add.w	r3, r7, #32
 8004476:	4619      	mov	r1, r3
 8004478:	4816      	ldr	r0, [pc, #88]	@ (80044d4 <MX_GPIO_Init+0x1dc>)
 800447a:	f002 fa15 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin|BEEP_Pin;
 800447e:	f241 0306 	movw	r3, #4102	@ 0x1006
 8004482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004484:	2301      	movs	r3, #1
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004490:	f107 0320 	add.w	r3, r7, #32
 8004494:	4619      	mov	r1, r3
 8004496:	480f      	ldr	r0, [pc, #60]	@ (80044d4 <MX_GPIO_Init+0x1dc>)
 8004498:	f002 fa06 	bl	80068a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 800449c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80044a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a2:	2301      	movs	r3, #1
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044aa:	2303      	movs	r3, #3
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ae:	f107 0320 	add.w	r3, r7, #32
 80044b2:	4619      	mov	r1, r3
 80044b4:	4808      	ldr	r0, [pc, #32]	@ (80044d8 <MX_GPIO_Init+0x1e0>)
 80044b6:	f002 f9f7 	bl	80068a8 <HAL_GPIO_Init>

}
 80044ba:	bf00      	nop
 80044bc:	3730      	adds	r7, #48	@ 0x30
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40011800 	.word	0x40011800
 80044cc:	40010c00 	.word	0x40010c00
 80044d0:	40011c00 	.word	0x40011c00
 80044d4:	40012000 	.word	0x40012000
 80044d8:	40011400 	.word	0x40011400

080044dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <MX_I2C1_Init+0x50>)
 80044e2:	4a13      	ldr	r2, [pc, #76]	@ (8004530 <MX_I2C1_Init+0x54>)
 80044e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80044e6:	4b11      	ldr	r3, [pc, #68]	@ (800452c <MX_I2C1_Init+0x50>)
 80044e8:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <MX_I2C1_Init+0x58>)
 80044ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044ec:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <MX_I2C1_Init+0x50>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <MX_I2C1_Init+0x50>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <MX_I2C1_Init+0x50>)
 80044fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <MX_I2C1_Init+0x50>)
 8004502:	2200      	movs	r2, #0
 8004504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004506:	4b09      	ldr	r3, [pc, #36]	@ (800452c <MX_I2C1_Init+0x50>)
 8004508:	2200      	movs	r2, #0
 800450a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800450c:	4b07      	ldr	r3, [pc, #28]	@ (800452c <MX_I2C1_Init+0x50>)
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <MX_I2C1_Init+0x50>)
 8004514:	2200      	movs	r2, #0
 8004516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004518:	4804      	ldr	r0, [pc, #16]	@ (800452c <MX_I2C1_Init+0x50>)
 800451a:	f002 fca5 	bl	8006e68 <HAL_I2C_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004524:	f000 f8c8 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200006b4 	.word	0x200006b4
 8004530:	40005400 	.word	0x40005400
 8004534:	00061a80 	.word	0x00061a80

08004538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a15      	ldr	r2, [pc, #84]	@ (80045a8 <HAL_I2C_MspInit+0x70>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d123      	bne.n	80045a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a13      	ldr	r2, [pc, #76]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8004570:	23c0      	movs	r3, #192	@ 0xc0
 8004572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004574:	2312      	movs	r3, #18
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	4619      	mov	r1, r3
 8004582:	480b      	ldr	r0, [pc, #44]	@ (80045b0 <HAL_I2C_MspInit+0x78>)
 8004584:	f002 f990 	bl	80068a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004588:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4a07      	ldr	r2, [pc, #28]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 800458e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004592:	61d3      	str	r3, [r2, #28]
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_I2C_MspInit+0x74>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80045a0:	bf00      	nop
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40005400 	.word	0x40005400
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40010c00 	.word	0x40010c00

080045b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045b8:	f001 f8d2 	bl	8005760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045bc:	f000 f81f 	bl	80045fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045c0:	f7ff fe9a 	bl	80042f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80045c4:	f000 f9c4 	bl	8004950 <MX_TIM1_Init>
  MX_TIM2_Init();
 80045c8:	f000 fa86 	bl	8004ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80045cc:	f000 fad8 	bl	8004b80 <MX_TIM3_Init>
  MX_TIM4_Init();
 80045d0:	f000 fb2a 	bl	8004c28 <MX_TIM4_Init>
  MX_TIM5_Init();
 80045d4:	f000 fb7c 	bl	8004cd0 <MX_TIM5_Init>
  MX_TIM6_Init();
 80045d8:	f000 fbce 	bl	8004d78 <MX_TIM6_Init>
  MX_TIM8_Init();
 80045dc:	f000 fc36 	bl	8004e4c <MX_TIM8_Init>
  MX_UART5_Init();
 80045e0:	f000 ffb8 	bl	8005554 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80045e4:	f001 f820 	bl	8005628 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80045e8:	f7ff ff78 	bl	80044dc <MX_I2C1_Init>
  MX_ADC3_Init();
 80045ec:	f7ff fe08 	bl	8004200 <MX_ADC3_Init>
  MX_TIM7_Init();
 80045f0:	f000 fbf8 	bl	8004de4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 80045f4:	f7fe fa2c 	bl	8002a50 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 80045f8:	f7fe fa4c 	bl	8002a94 <BSP_Loop>
 80045fc:	e7fc      	b.n	80045f8 <main+0x44>

080045fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b096      	sub	sp, #88	@ 0x58
 8004602:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004604:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004608:	2228      	movs	r2, #40	@ 0x28
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f008 f90c 	bl	800c82a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004612:	f107 031c 	add.w	r3, r7, #28
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
 8004630:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004632:	2301      	movs	r3, #1
 8004634:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800463c:	2300      	movs	r3, #0
 800463e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004640:	2301      	movs	r3, #1
 8004642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004644:	2302      	movs	r3, #2
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800464c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800464e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004652:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004654:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004658:	4618      	mov	r0, r3
 800465a:	f003 f93b 	bl	80078d4 <HAL_RCC_OscConfig>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004664:	f000 f828 	bl	80046b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004668:	230f      	movs	r3, #15
 800466a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800466c:	2302      	movs	r3, #2
 800466e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004670:	2300      	movs	r3, #0
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004678:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800467a:	2300      	movs	r3, #0
 800467c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800467e:	f107 031c 	add.w	r3, r7, #28
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fc93 	bl	8007fb0 <HAL_RCC_ClockConfig>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004690:	f000 f812 	bl	80046b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004694:	2302      	movs	r3, #2
 8004696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 feb9 	bl	8008418 <HAL_RCCEx_PeriphCLKConfig>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80046ac:	f000 f804 	bl	80046b8 <Error_Handler>
  }
}
 80046b0:	bf00      	nop
 80046b2:	3758      	adds	r7, #88	@ 0x58
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80046bc:	b672      	cpsid	i
}
 80046be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <Error_Handler+0x8>

080046c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046de:	4b16      	ldr	r3, [pc, #88]	@ (8004738 <HAL_MspInit+0x60>)
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	4a15      	ldr	r2, [pc, #84]	@ (8004738 <HAL_MspInit+0x60>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6193      	str	r3, [r2, #24]
 80046ea:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <HAL_MspInit+0x60>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <HAL_MspInit+0x60>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004738 <HAL_MspInit+0x60>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004700:	61d3      	str	r3, [r2, #28]
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_MspInit+0x60>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800470e:	2005      	movs	r0, #5
 8004710:	f002 f85a 	bl	80067c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004714:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_MspInit+0x64>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	4a04      	ldr	r2, [pc, #16]	@ (800473c <HAL_MspInit+0x64>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	40010000 	.word	0x40010000

08004740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004744:	bf00      	nop
 8004746:	e7fd      	b.n	8004744 <NMI_Handler+0x4>

08004748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <HardFault_Handler+0x4>

08004750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <MemManage_Handler+0x4>

08004758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <BusFault_Handler+0x4>

08004760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <UsageFault_Handler+0x4>

08004768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004790:	f001 f82c 	bl	80057ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}

08004798 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800479c:	4802      	ldr	r0, [pc, #8]	@ (80047a8 <TIM6_IRQHandler+0x10>)
 800479e:	f004 fe17 	bl	80093d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000874 	.word	0x20000874

080047ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80047b0:	4802      	ldr	r0, [pc, #8]	@ (80047bc <TIM7_IRQHandler+0x10>)
 80047b2:	f004 fe0d 	bl	80093d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	200008bc 	.word	0x200008bc

080047c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
	return 1;
 80047c4:	2301      	movs	r3, #1
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <_kill>:

int _kill(int pid, int sig)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047d8:	f008 f87a 	bl	800c8d0 <__errno>
 80047dc:	4603      	mov	r3, r0
 80047de:	2216      	movs	r2, #22
 80047e0:	601a      	str	r2, [r3, #0]
	return -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_exit>:

void _exit (int status)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047f6:	f04f 31ff 	mov.w	r1, #4294967295
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ffe7 	bl	80047ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <_exit+0x12>

08004804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e00a      	b.n	800482c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004816:	f3af 8000 	nop.w
 800481a:	4601      	mov	r1, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	60ba      	str	r2, [r7, #8]
 8004822:	b2ca      	uxtb	r2, r1
 8004824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3301      	adds	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	dbf0      	blt.n	8004816 <_read+0x12>
	}

return len;
 8004834:	687b      	ldr	r3, [r7, #4]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e009      	b.n	8004864 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	60ba      	str	r2, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe f859 	bl	8002910 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3301      	adds	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	dbf1      	blt.n	8004850 <_write+0x12>
	}
	return len;
 800486c:	687b      	ldr	r3, [r7, #4]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_close>:

int _close(int file)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	return -1;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800489c:	605a      	str	r2, [r3, #4]
	return 0;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <_isatty>:

int _isatty(int file)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	return 1;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
	return 0;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
	...

080048d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048e0:	4a14      	ldr	r2, [pc, #80]	@ (8004934 <_sbrk+0x5c>)
 80048e2:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <_sbrk+0x60>)
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <_sbrk+0x64>)
 80048f6:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <_sbrk+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <_sbrk+0x64>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d207      	bcs.n	8004918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004908:	f007 ffe2 	bl	800c8d0 <__errno>
 800490c:	4603      	mov	r3, r0
 800490e:	220c      	movs	r2, #12
 8004910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	e009      	b.n	800492c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004918:	4b08      	ldr	r3, [pc, #32]	@ (800493c <_sbrk+0x64>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <_sbrk+0x64>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	4a05      	ldr	r2, [pc, #20]	@ (800493c <_sbrk+0x64>)
 8004928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20010000 	.word	0x20010000
 8004938:	00000400 	.word	0x00000400
 800493c:	20000708 	.word	0x20000708
 8004940:	20000ae8 	.word	0x20000ae8

08004944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b096      	sub	sp, #88	@ 0x58
 8004954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004956:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004964:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800496e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	615a      	str	r2, [r3, #20]
 8004980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	2220      	movs	r2, #32
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f007 ff4e 	bl	800c82a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800498e:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004990:	4a50      	ldr	r2, [pc, #320]	@ (8004ad4 <MX_TIM1_Init+0x184>)
 8004992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004994:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800499a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 800499c:	2200      	movs	r2, #0
 800499e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 80049a0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049a2:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80049a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a8:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049ae:	4b48      	ldr	r3, [pc, #288]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049b4:	4b46      	ldr	r3, [pc, #280]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049ba:	4845      	ldr	r0, [pc, #276]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049bc:	f003 ff3a 	bl	8008834 <HAL_TIM_Base_Init>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80049c6:	f7ff fe77 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80049d4:	4619      	mov	r1, r3
 80049d6:	483e      	ldr	r0, [pc, #248]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049d8:	f004 ffa4 	bl	8009924 <HAL_TIM_ConfigClockSource>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80049e2:	f7ff fe69 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049e6:	483a      	ldr	r0, [pc, #232]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 80049e8:	f004 f88a 	bl	8008b00 <HAL_TIM_PWM_Init>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80049f2:	f7ff fe61 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004a02:	4619      	mov	r1, r3
 8004a04:	4832      	ldr	r0, [pc, #200]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004a06:	f005 fe71 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004a10:	f7ff fe52 	bl	80046b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a14:	2360      	movs	r3, #96	@ 0x60
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a20:	2300      	movs	r3, #0
 8004a22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a34:	2200      	movs	r2, #0
 8004a36:	4619      	mov	r1, r3
 8004a38:	4825      	ldr	r0, [pc, #148]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004a3a:	f004 fdd1 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004a44:	f7ff fe38 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	481f      	ldr	r0, [pc, #124]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004a52:	f004 fdc5 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004a5c:	f7ff fe2c 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a64:	2208      	movs	r2, #8
 8004a66:	4619      	mov	r1, r3
 8004a68:	4819      	ldr	r0, [pc, #100]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004a6a:	f004 fdb9 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004a74:	f7ff fe20 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a7c:	220c      	movs	r2, #12
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4813      	ldr	r0, [pc, #76]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004a82:	f004 fdad 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004a8c:	f7ff fe14 	bl	80046b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4807      	ldr	r0, [pc, #28]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004ab4:	f005 feea 	bl	800a88c <HAL_TIMEx_ConfigBreakDeadTime>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004abe:	f7ff fdfb 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ac2:	4803      	ldr	r0, [pc, #12]	@ (8004ad0 <MX_TIM1_Init+0x180>)
 8004ac4:	f000 fc02 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8004ac8:	bf00      	nop
 8004aca:	3758      	adds	r7, #88	@ 0x58
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000070c 	.word	0x2000070c
 8004ad4:	40012c00 	.word	0x40012c00

08004ad8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	@ 0x30
 8004adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ade:	f107 030c 	add.w	r3, r7, #12
 8004ae2:	2224      	movs	r2, #36	@ 0x24
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f007 fe9f 	bl	800c82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004af4:	4b21      	ldr	r3, [pc, #132]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004afc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b02:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004b08:	4b1c      	ldr	r3, [pc, #112]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b10:	4b1a      	ldr	r3, [pc, #104]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b16:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b24:	2301      	movs	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b30:	2300      	movs	r3, #0
 8004b32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	4619      	mov	r1, r3
 8004b46:	480d      	ldr	r0, [pc, #52]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b48:	f004 f9e0 	bl	8008f0c <HAL_TIM_Encoder_Init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004b52:	f7ff fdb1 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4806      	ldr	r0, [pc, #24]	@ (8004b7c <MX_TIM2_Init+0xa4>)
 8004b64:	f005 fdc2 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004b6e:	f7ff fda3 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b72:	bf00      	nop
 8004b74:	3730      	adds	r7, #48	@ 0x30
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000754 	.word	0x20000754

08004b80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	2224      	movs	r2, #36	@ 0x24
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f007 fe4b 	bl	800c82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b9c:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004b9e:	4a21      	ldr	r2, [pc, #132]	@ (8004c24 <MX_TIM3_Init+0xa4>)
 8004ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bbc:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004bde:	2300      	movs	r3, #0
 8004be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004be6:	f107 030c 	add.w	r3, r7, #12
 8004bea:	4619      	mov	r1, r3
 8004bec:	480c      	ldr	r0, [pc, #48]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004bee:	f004 f98d 	bl	8008f0c <HAL_TIM_Encoder_Init>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004bf8:	f7ff fd5e 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4805      	ldr	r0, [pc, #20]	@ (8004c20 <MX_TIM3_Init+0xa0>)
 8004c0a:	f005 fd6f 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004c14:	f7ff fd50 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004c18:	bf00      	nop
 8004c1a:	3730      	adds	r7, #48	@ 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	2000079c 	.word	0x2000079c
 8004c24:	40000400 	.word	0x40000400

08004c28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	@ 0x30
 8004c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	2224      	movs	r2, #36	@ 0x24
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f007 fdf7 	bl	800c82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c44:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c46:	4a21      	ldr	r2, [pc, #132]	@ (8004ccc <MX_TIM4_Init+0xa4>)
 8004c48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c64:	4b18      	ldr	r3, [pc, #96]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c82:	2301      	movs	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004c8e:	f107 030c 	add.w	r3, r7, #12
 8004c92:	4619      	mov	r1, r3
 8004c94:	480c      	ldr	r0, [pc, #48]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004c96:	f004 f939 	bl	8008f0c <HAL_TIM_Encoder_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004ca0:	f7ff fd0a 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4805      	ldr	r0, [pc, #20]	@ (8004cc8 <MX_TIM4_Init+0xa0>)
 8004cb2:	f005 fd1b 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004cbc:	f7ff fcfc 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004cc0:	bf00      	nop
 8004cc2:	3730      	adds	r7, #48	@ 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	200007e4 	.word	0x200007e4
 8004ccc:	40000800 	.word	0x40000800

08004cd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	@ 0x30
 8004cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cd6:	f107 030c 	add.w	r3, r7, #12
 8004cda:	2224      	movs	r2, #36	@ 0x24
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f007 fda3 	bl	800c82a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004cec:	4b20      	ldr	r3, [pc, #128]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004cee:	4a21      	ldr	r2, [pc, #132]	@ (8004d74 <MX_TIM5_Init+0xa4>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d0c:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d12:	2303      	movs	r3, #3
 8004d14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d26:	2300      	movs	r3, #0
 8004d28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	480c      	ldr	r0, [pc, #48]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004d3e:	f004 f8e5 	bl	8008f0c <HAL_TIM_Encoder_Init>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004d48:	f7ff fcb6 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4805      	ldr	r0, [pc, #20]	@ (8004d70 <MX_TIM5_Init+0xa0>)
 8004d5a:	f005 fcc7 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004d64:	f7ff fca8 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004d68:	bf00      	nop
 8004d6a:	3730      	adds	r7, #48	@ 0x30
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	2000082c 	.word	0x2000082c
 8004d74:	40000c00 	.word	0x40000c00

08004d78 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d7e:	463b      	mov	r3, r7
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004d88:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <MX_TIM6_Init+0x68>)
 8004d8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004d8e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8004d92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d94:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004d9c:	2263      	movs	r2, #99	@ 0x63
 8004d9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004da6:	480d      	ldr	r0, [pc, #52]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004da8:	f003 fd44 	bl	8008834 <HAL_TIM_Base_Init>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004db2:	f7ff fc81 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db6:	2300      	movs	r3, #0
 8004db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4806      	ldr	r0, [pc, #24]	@ (8004ddc <MX_TIM6_Init+0x64>)
 8004dc4:	f005 fc92 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004dce:	f7ff fc73 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000874 	.word	0x20000874
 8004de0:	40001000 	.word	0x40001000

08004de4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dea:	463b      	mov	r3, r7
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004df2:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004df4:	4a14      	ldr	r2, [pc, #80]	@ (8004e48 <MX_TIM7_Init+0x64>)
 8004df6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004df8:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004dfa:	2247      	movs	r2, #71	@ 0x47
 8004dfc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dfe:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004e04:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004e06:	2209      	movs	r2, #9
 8004e08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e10:	480c      	ldr	r0, [pc, #48]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004e12:	f003 fd0f 	bl	8008834 <HAL_TIM_Base_Init>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004e1c:	f7ff fc4c 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e28:	463b      	mov	r3, r7
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4805      	ldr	r0, [pc, #20]	@ (8004e44 <MX_TIM7_Init+0x60>)
 8004e2e:	f005 fc5d 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004e38:	f7ff fc3e 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200008bc 	.word	0x200008bc
 8004e48:	40001400 	.word	0x40001400

08004e4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b096      	sub	sp, #88	@ 0x58
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	611a      	str	r2, [r3, #16]
 8004e7a:	615a      	str	r2, [r3, #20]
 8004e7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e7e:	1d3b      	adds	r3, r7, #4
 8004e80:	2220      	movs	r2, #32
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f007 fcd0 	bl	800c82a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e8a:	4b50      	ldr	r3, [pc, #320]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004e8c:	4a50      	ldr	r2, [pc, #320]	@ (8004fd0 <MX_TIM8_Init+0x184>)
 8004e8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004e90:	4b4e      	ldr	r3, [pc, #312]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e96:	4b4d      	ldr	r3, [pc, #308]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004e9e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8004ea2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea4:	4b49      	ldr	r3, [pc, #292]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004eaa:	4b48      	ldr	r3, [pc, #288]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eb0:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004eb2:	2280      	movs	r2, #128	@ 0x80
 8004eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004eb6:	4845      	ldr	r0, [pc, #276]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004eb8:	f003 fcbc 	bl	8008834 <HAL_TIM_Base_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8004ec2:	f7ff fbf9 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004ecc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	483e      	ldr	r0, [pc, #248]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004ed4:	f004 fd26 	bl	8009924 <HAL_TIM_ConfigClockSource>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004ede:	f7ff fbeb 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004ee2:	483a      	ldr	r0, [pc, #232]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004ee4:	f003 fe0c 	bl	8008b00 <HAL_TIM_PWM_Init>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004eee:	f7ff fbe3 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004efa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004efe:	4619      	mov	r1, r3
 8004f00:	4832      	ldr	r0, [pc, #200]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004f02:	f005 fbf3 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004f0c:	f7ff fbd4 	bl	80046b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f10:	2360      	movs	r3, #96	@ 0x60
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f30:	2200      	movs	r2, #0
 8004f32:	4619      	mov	r1, r3
 8004f34:	4825      	ldr	r0, [pc, #148]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004f36:	f004 fb53 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004f40:	f7ff fbba 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f48:	2204      	movs	r2, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	481f      	ldr	r0, [pc, #124]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004f4e:	f004 fb47 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004f58:	f7ff fbae 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f60:	2208      	movs	r2, #8
 8004f62:	4619      	mov	r1, r3
 8004f64:	4819      	ldr	r0, [pc, #100]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004f66:	f004 fb3b 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004f70:	f7ff fba2 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f78:	220c      	movs	r2, #12
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4813      	ldr	r0, [pc, #76]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004f7e:	f004 fb2f 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004f88:	f7ff fb96 	bl	80046b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4807      	ldr	r0, [pc, #28]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004fb0:	f005 fc6c 	bl	800a88c <HAL_TIMEx_ConfigBreakDeadTime>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8004fba:	f7ff fb7d 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004fbe:	4803      	ldr	r0, [pc, #12]	@ (8004fcc <MX_TIM8_Init+0x180>)
 8004fc0:	f000 f984 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8004fc4:	bf00      	nop
 8004fc6:	3758      	adds	r7, #88	@ 0x58
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000904 	.word	0x20000904
 8004fd0:	40013400 	.word	0x40013400

08004fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <HAL_TIM_Base_MspInit+0xc0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10c      	bne.n	8005000 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8004fec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ff0:	6193      	str	r3, [r2, #24]
 8004ff2:	4b29      	ldr	r3, [pc, #164]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004ffe:	e044      	b.n	800508a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a25      	ldr	r2, [pc, #148]	@ (800509c <HAL_TIM_Base_MspInit+0xc8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d114      	bne.n	8005034 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800500a:	4b23      	ldr	r3, [pc, #140]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4a22      	ldr	r2, [pc, #136]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005010:	f043 0310 	orr.w	r3, r3, #16
 8005014:	61d3      	str	r3, [r2, #28]
 8005016:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 1);
 8005022:	2201      	movs	r2, #1
 8005024:	2102      	movs	r1, #2
 8005026:	2036      	movs	r0, #54	@ 0x36
 8005028:	f001 fbee 	bl	8006808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800502c:	2036      	movs	r0, #54	@ 0x36
 800502e:	f001 fc17 	bl	8006860 <HAL_NVIC_EnableIRQ>
}
 8005032:	e02a      	b.n	800508a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <HAL_TIM_Base_MspInit+0xcc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d114      	bne.n	8005068 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	61d3      	str	r3, [r2, #28]
 800504a:	4b13      	ldr	r3, [pc, #76]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 2);
 8005056:	2202      	movs	r2, #2
 8005058:	2102      	movs	r1, #2
 800505a:	2037      	movs	r0, #55	@ 0x37
 800505c:	f001 fbd4 	bl	8006808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005060:	2037      	movs	r0, #55	@ 0x37
 8005062:	f001 fbfd 	bl	8006860 <HAL_NVIC_EnableIRQ>
}
 8005066:	e010      	b.n	800508a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0d      	ldr	r2, [pc, #52]	@ (80050a4 <HAL_TIM_Base_MspInit+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10b      	bne.n	800508a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005078:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800507c:	6193      	str	r3, [r2, #24]
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <HAL_TIM_Base_MspInit+0xc4>)
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40021000 	.word	0x40021000
 800509c:	40001000 	.word	0x40001000
 80050a0:	40001400 	.word	0x40001400
 80050a4:	40013400 	.word	0x40013400

080050a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b092      	sub	sp, #72	@ 0x48
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c6:	d14f      	bne.n	8005168 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050c8:	4b78      	ldr	r3, [pc, #480]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	4a77      	ldr	r2, [pc, #476]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	61d3      	str	r3, [r2, #28]
 80050d4:	4b75      	ldr	r3, [pc, #468]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e0:	4b72      	ldr	r3, [pc, #456]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4a71      	ldr	r2, [pc, #452]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6193      	str	r3, [r2, #24]
 80050ec:	4b6f      	ldr	r3, [pc, #444]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f8:	4b6c      	ldr	r3, [pc, #432]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	4a6b      	ldr	r2, [pc, #428]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80050fe:	f043 0308 	orr.w	r3, r3, #8
 8005102:	6193      	str	r3, [r2, #24]
 8005104:	4b69      	ldr	r3, [pc, #420]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 8005110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005116:	2300      	movs	r3, #0
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 800511e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005122:	4619      	mov	r1, r3
 8005124:	4862      	ldr	r0, [pc, #392]	@ (80052b0 <HAL_TIM_Encoder_MspInit+0x208>)
 8005126:	f001 fbbf 	bl	80068a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 800512a:	2308      	movs	r3, #8
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800512e:	2300      	movs	r3, #0
 8005130:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 8005136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800513a:	4619      	mov	r1, r3
 800513c:	485d      	ldr	r0, [pc, #372]	@ (80052b4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800513e:	f001 fbb3 	bl	80068a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005142:	4b5d      	ldr	r3, [pc, #372]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005152:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005160:	4a55      	ldr	r2, [pc, #340]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005166:	e09d      	b.n	80052a4 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a53      	ldr	r2, [pc, #332]	@ (80052bc <HAL_TIM_Encoder_MspInit+0x214>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d136      	bne.n	80051e0 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005172:	4b4e      	ldr	r3, [pc, #312]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4a4d      	ldr	r2, [pc, #308]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	61d3      	str	r3, [r2, #28]
 800517e:	4b4b      	ldr	r3, [pc, #300]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800518a:	4b48      	ldr	r3, [pc, #288]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	4a47      	ldr	r2, [pc, #284]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005190:	f043 0308 	orr.w	r3, r3, #8
 8005194:	6193      	str	r3, [r2, #24]
 8005196:	4b45      	ldr	r3, [pc, #276]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80051a2:	2330      	movs	r3, #48	@ 0x30
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051a6:	2300      	movs	r3, #0
 80051a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051b2:	4619      	mov	r1, r3
 80051b4:	483f      	ldr	r0, [pc, #252]	@ (80052b4 <HAL_TIM_Encoder_MspInit+0x20c>)
 80051b6:	f001 fb77 	bl	80068a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80051ba:	4b3f      	ldr	r3, [pc, #252]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80051c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ca:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80051d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80051d8:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 80051da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051dc:	6053      	str	r3, [r2, #4]
}
 80051de:	e061      	b.n	80052a4 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <HAL_TIM_Encoder_MspInit+0x218>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d133      	bne.n	8005252 <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051ea:	4b30      	ldr	r3, [pc, #192]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4a2f      	ldr	r2, [pc, #188]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	61d3      	str	r3, [r2, #28]
 80051f6:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005202:	4b2a      	ldr	r3, [pc, #168]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	4a29      	ldr	r2, [pc, #164]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005208:	f043 0320 	orr.w	r3, r3, #32
 800520c:	6193      	str	r3, [r2, #24]
 800520e:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 800521a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005220:	2300      	movs	r3, #0
 8005222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800522c:	4619      	mov	r1, r3
 800522e:	4825      	ldr	r0, [pc, #148]	@ (80052c4 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005230:	f001 fb3a 	bl	80068a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8005234:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	647b      	str	r3, [r7, #68]	@ 0x44
 800523a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <HAL_TIM_Encoder_MspInit+0x210>)
 800524c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524e:	6053      	str	r3, [r2, #4]
}
 8005250:	e028      	b.n	80052a4 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1c      	ldr	r2, [pc, #112]	@ (80052c8 <HAL_TIM_Encoder_MspInit+0x220>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d123      	bne.n	80052a4 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800525c:	4b13      	ldr	r3, [pc, #76]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	4a12      	ldr	r2, [pc, #72]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005262:	f043 0308 	orr.w	r3, r3, #8
 8005266:	61d3      	str	r3, [r2, #28]
 8005268:	4b10      	ldr	r3, [pc, #64]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005274:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	6193      	str	r3, [r2, #24]
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_TIM_Encoder_MspInit+0x204>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 800528c:	2303      	movs	r3, #3
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005290:	2300      	movs	r3, #0
 8005292:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005294:	2300      	movs	r3, #0
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800529c:	4619      	mov	r1, r3
 800529e:	4804      	ldr	r0, [pc, #16]	@ (80052b0 <HAL_TIM_Encoder_MspInit+0x208>)
 80052a0:	f001 fb02 	bl	80068a8 <HAL_GPIO_Init>
}
 80052a4:	bf00      	nop
 80052a6:	3748      	adds	r7, #72	@ 0x48
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40010800 	.word	0x40010800
 80052b4:	40010c00 	.word	0x40010c00
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40011400 	.word	0x40011400
 80052c8:	40000c00 	.word	0x40000c00

080052cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	@ 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a28      	ldr	r2, [pc, #160]	@ (8005388 <HAL_TIM_MspPostInit+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d12b      	bne.n	8005344 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ec:	4b27      	ldr	r3, [pc, #156]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	4a26      	ldr	r2, [pc, #152]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 80052f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f6:	6193      	str	r3, [r2, #24]
 80052f8:	4b24      	ldr	r3, [pc, #144]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 8005304:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530e:	2302      	movs	r3, #2
 8005310:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	4619      	mov	r1, r3
 8005318:	481d      	ldr	r0, [pc, #116]	@ (8005390 <HAL_TIM_MspPostInit+0xc4>)
 800531a:	f001 fac5 	bl	80068a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800531e:	4b1d      	ldr	r3, [pc, #116]	@ (8005394 <HAL_TIM_MspPostInit+0xc8>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
 800533c:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <HAL_TIM_MspPostInit+0xc8>)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005342:	e01d      	b.n	8005380 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <HAL_TIM_MspPostInit+0xcc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d118      	bne.n	8005380 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	4a0e      	ldr	r2, [pc, #56]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 8005354:	f043 0310 	orr.w	r3, r3, #16
 8005358:	6193      	str	r3, [r2, #24]
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <HAL_TIM_MspPostInit+0xc0>)
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 8005366:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800536a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536c:	2302      	movs	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005370:	2302      	movs	r3, #2
 8005372:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4619      	mov	r1, r3
 800537a:	4808      	ldr	r0, [pc, #32]	@ (800539c <HAL_TIM_MspPostInit+0xd0>)
 800537c:	f001 fa94 	bl	80068a8 <HAL_GPIO_Init>
}
 8005380:	bf00      	nop
 8005382:	3728      	adds	r7, #40	@ 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40021000 	.word	0x40021000
 8005390:	40011800 	.word	0x40011800
 8005394:	40010000 	.word	0x40010000
 8005398:	40013400 	.word	0x40013400
 800539c:	40011000 	.word	0x40011000

080053a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a4:	4b04      	ldr	r3, [pc, #16]	@ (80053b8 <__NVIC_GetPriorityGrouping+0x18>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 0307 	and.w	r3, r3, #7
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	db0b      	blt.n	80053e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	f003 021f 	and.w	r2, r3, #31
 80053d4:	4906      	ldr	r1, [pc, #24]	@ (80053f0 <__NVIC_EnableIRQ+0x34>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2001      	movs	r0, #1
 80053de:	fa00 f202 	lsl.w	r2, r0, r2
 80053e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr
 80053f0:	e000e100 	.word	0xe000e100

080053f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	6039      	str	r1, [r7, #0]
 80053fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	2b00      	cmp	r3, #0
 8005406:	db0a      	blt.n	800541e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	490c      	ldr	r1, [pc, #48]	@ (8005440 <__NVIC_SetPriority+0x4c>)
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	0112      	lsls	r2, r2, #4
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	440b      	add	r3, r1
 8005418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800541c:	e00a      	b.n	8005434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4908      	ldr	r1, [pc, #32]	@ (8005444 <__NVIC_SetPriority+0x50>)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	3b04      	subs	r3, #4
 800542c:	0112      	lsls	r2, r2, #4
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	440b      	add	r3, r1
 8005432:	761a      	strb	r2, [r3, #24]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e100 	.word	0xe000e100
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	@ 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f1c3 0307 	rsb	r3, r3, #7
 8005462:	2b04      	cmp	r3, #4
 8005464:	bf28      	it	cs
 8005466:	2304      	movcs	r3, #4
 8005468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3304      	adds	r3, #4
 800546e:	2b06      	cmp	r3, #6
 8005470:	d902      	bls.n	8005478 <NVIC_EncodePriority+0x30>
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3b03      	subs	r3, #3
 8005476:	e000      	b.n	800547a <NVIC_EncodePriority+0x32>
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43da      	mvns	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	401a      	ands	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005490:	f04f 31ff 	mov.w	r1, #4294967295
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	43d9      	mvns	r1, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	4313      	orrs	r3, r2
         );
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	@ 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <LL_USART_Enable>:
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <LL_USART_ConfigAsyncMode>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	615a      	str	r2, [r3, #20]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80054fc:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <LL_APB1_GRP1_EnableClock+0x2c>)
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	4907      	ldr	r1, [pc, #28]	@ (8005520 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4313      	orrs	r3, r2
 8005506:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <LL_APB1_GRP1_EnableClock+0x2c>)
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4013      	ands	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005512:	68fb      	ldr	r3, [r7, #12]
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000

08005524 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <LL_APB2_GRP1_EnableClock+0x2c>)
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	4907      	ldr	r1, [pc, #28]	@ (8005550 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4313      	orrs	r3, r2
 8005536:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <LL_APB2_GRP1_EnableClock+0x2c>)
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <MX_UART5_Init>:

UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	@ 0x30
 8005558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	611a      	str	r2, [r3, #16]
 800556a:	615a      	str	r2, [r3, #20]
 800556c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556e:	463b      	mov	r3, r7
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800557c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005580:	f7ff ffb8 	bl	80054f4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8005584:	2010      	movs	r0, #16
 8005586:	f7ff ffcd 	bl	8005524 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800558a:	2020      	movs	r0, #32
 800558c:	f7ff ffca 	bl	8005524 <LL_APB2_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8005590:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <MX_UART5_Init+0xc4>)
 8005592:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005594:	2309      	movs	r3, #9
 8005596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005598:	2303      	movs	r3, #3
 800559a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055a0:	463b      	mov	r3, r7
 80055a2:	4619      	mov	r1, r3
 80055a4:	481d      	ldr	r0, [pc, #116]	@ (800561c <MX_UART5_Init+0xc8>)
 80055a6:	f005 fd81 	bl	800b0ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80055aa:	f240 4304 	movw	r3, #1028	@ 0x404
 80055ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80055b0:	2304      	movs	r3, #4
 80055b2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055b4:	463b      	mov	r3, r7
 80055b6:	4619      	mov	r1, r3
 80055b8:	4819      	ldr	r0, [pc, #100]	@ (8005620 <MX_UART5_Init+0xcc>)
 80055ba:	f005 fd77 	bl	800b0ac <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80055be:	f7ff feef 	bl	80053a0 <__NVIC_GetPriorityGrouping>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2200      	movs	r2, #0
 80055c6:	2101      	movs	r1, #1
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ff3d 	bl	8005448 <NVIC_EncodePriority>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4619      	mov	r1, r3
 80055d2:	2035      	movs	r0, #53	@ 0x35
 80055d4:	f7ff ff0e 	bl	80053f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80055d8:	2035      	movs	r0, #53	@ 0x35
 80055da:	f7ff feef 	bl	80053bc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80055de:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80055e2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80055f0:	230c      	movs	r3, #12
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_USART_Init(UART5, &USART_InitStruct);
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	4619      	mov	r1, r3
 80055fe:	4809      	ldr	r0, [pc, #36]	@ (8005624 <MX_UART5_Init+0xd0>)
 8005600:	f005 ffe4 	bl	800b5cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8005604:	4807      	ldr	r0, [pc, #28]	@ (8005624 <MX_UART5_Init+0xd0>)
 8005606:	f7ff ff60 	bl	80054ca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800560a:	4806      	ldr	r0, [pc, #24]	@ (8005624 <MX_UART5_Init+0xd0>)
 800560c:	f7ff ff4e 	bl	80054ac <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005610:	bf00      	nop
 8005612:	3730      	adds	r7, #48	@ 0x30
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	04100010 	.word	0x04100010
 800561c:	40011000 	.word	0x40011000
 8005620:	40011400 	.word	0x40011400
 8005624:	40005000 	.word	0x40005000

08005628 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800562c:	4b11      	ldr	r3, [pc, #68]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <MX_USART1_UART_Init+0x50>)
 8005630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 8005634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800563a:	4b0e      	ldr	r3, [pc, #56]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 800563c:	2200      	movs	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005640:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 8005642:	2200      	movs	r2, #0
 8005644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 8005648:	2200      	movs	r2, #0
 800564a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800564c:	4b09      	ldr	r3, [pc, #36]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 800564e:	220c      	movs	r2, #12
 8005650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005652:	4b08      	ldr	r3, [pc, #32]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 8005654:	2200      	movs	r2, #0
 8005656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 800565a:	2200      	movs	r2, #0
 800565c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800565e:	4805      	ldr	r0, [pc, #20]	@ (8005674 <MX_USART1_UART_Init+0x4c>)
 8005660:	f005 f9f2 	bl	800aa48 <HAL_UART_Init>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800566a:	f7ff f825 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000094c 	.word	0x2000094c
 8005678:	40013800 	.word	0x40013800

0800567c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <HAL_UART_MspInit+0x8c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d131      	bne.n	8005700 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <HAL_UART_MspInit+0x90>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4a1a      	ldr	r2, [pc, #104]	@ (800570c <HAL_UART_MspInit+0x90>)
 80056a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056a6:	6193      	str	r3, [r2, #24]
 80056a8:	4b18      	ldr	r3, [pc, #96]	@ (800570c <HAL_UART_MspInit+0x90>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <HAL_UART_MspInit+0x90>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	4a14      	ldr	r2, [pc, #80]	@ (800570c <HAL_UART_MspInit+0x90>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	6193      	str	r3, [r2, #24]
 80056c0:	4b12      	ldr	r3, [pc, #72]	@ (800570c <HAL_UART_MspInit+0x90>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2302      	movs	r3, #2
 80056d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056d6:	2303      	movs	r3, #3
 80056d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	480b      	ldr	r0, [pc, #44]	@ (8005710 <HAL_UART_MspInit+0x94>)
 80056e2:	f001 f8e1 	bl	80068a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4619      	mov	r1, r3
 80056fa:	4805      	ldr	r0, [pc, #20]	@ (8005710 <HAL_UART_MspInit+0x94>)
 80056fc:	f001 f8d4 	bl	80068a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005700:	bf00      	nop
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40013800 	.word	0x40013800
 800570c:	40021000 	.word	0x40021000
 8005710:	40010800 	.word	0x40010800

08005714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005714:	f7ff f916 	bl	8004944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005718:	480b      	ldr	r0, [pc, #44]	@ (8005748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800571a:	490c      	ldr	r1, [pc, #48]	@ (800574c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800571c:	4a0c      	ldr	r2, [pc, #48]	@ (8005750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800571e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005720:	e002      	b.n	8005728 <LoopCopyDataInit>

08005722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005726:	3304      	adds	r3, #4

08005728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800572a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800572c:	d3f9      	bcc.n	8005722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800572e:	4a09      	ldr	r2, [pc, #36]	@ (8005754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005730:	4c09      	ldr	r4, [pc, #36]	@ (8005758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005734:	e001      	b.n	800573a <LoopFillZerobss>

08005736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005738:	3204      	adds	r2, #4

0800573a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800573a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800573c:	d3fb      	bcc.n	8005736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800573e:	f007 f8cd 	bl	800c8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005742:	f7fe ff37 	bl	80045b4 <main>
  bx lr
 8005746:	4770      	bx	lr
  ldr r0, =_sdata
 8005748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800574c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8005750:	08010e50 	.word	0x08010e50
  ldr r2, =_sbss
 8005754:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8005758:	20000ae4 	.word	0x20000ae4

0800575c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800575c:	e7fe      	b.n	800575c <ADC1_2_IRQHandler>
	...

08005760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005764:	4b08      	ldr	r3, [pc, #32]	@ (8005788 <HAL_Init+0x28>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a07      	ldr	r2, [pc, #28]	@ (8005788 <HAL_Init+0x28>)
 800576a:	f043 0310 	orr.w	r3, r3, #16
 800576e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005770:	2003      	movs	r0, #3
 8005772:	f001 f829 	bl	80067c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005776:	2003      	movs	r0, #3
 8005778:	f000 f808 	bl	800578c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800577c:	f7fe ffac 	bl	80046d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40022000 	.word	0x40022000

0800578c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005794:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <HAL_InitTick+0x54>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_InitTick+0x58>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4619      	mov	r1, r3
 800579e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f870 	bl	8006890 <HAL_SYSTICK_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e00e      	b.n	80057d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b0f      	cmp	r3, #15
 80057be:	d80a      	bhi.n	80057d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057c0:	2200      	movs	r2, #0
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	f001 f81e 	bl	8006808 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057cc:	4a06      	ldr	r2, [pc, #24]	@ (80057e8 <HAL_InitTick+0x5c>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20000038 	.word	0x20000038
 80057e4:	20000040 	.word	0x20000040
 80057e8:	2000003c 	.word	0x2000003c

080057ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_IncTick+0x1c>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_IncTick+0x20>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4413      	add	r3, r2
 80057fc:	4a03      	ldr	r2, [pc, #12]	@ (800580c <HAL_IncTick+0x20>)
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	20000040 	.word	0x20000040
 800580c:	20000994 	.word	0x20000994

08005810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return uwTick;
 8005814:	4b02      	ldr	r3, [pc, #8]	@ (8005820 <HAL_GetTick+0x10>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	20000994 	.word	0x20000994

08005824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff fff0 	bl	8005810 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d005      	beq.n	800584a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800583e:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <HAL_Delay+0x44>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800584a:	bf00      	nop
 800584c:	f7ff ffe0 	bl	8005810 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d8f7      	bhi.n	800584c <HAL_Delay+0x28>
  {
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000040 	.word	0x20000040

0800586c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e188      	b.n	8005ba0 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a8c      	ldr	r2, [pc, #560]	@ (8005ac4 <HAL_ADC_Init+0x258>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_ADC_Init+0x4a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a8a      	ldr	r2, [pc, #552]	@ (8005ac8 <HAL_ADC_Init+0x25c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_ADC_Init+0x4a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a89      	ldr	r2, [pc, #548]	@ (8005acc <HAL_ADC_Init+0x260>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_ADC_Init+0x4a>
 80058ac:	f240 11a9 	movw	r1, #425	@ 0x1a9
 80058b0:	4887      	ldr	r0, [pc, #540]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80058b2:	f7fe ff07 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_ADC_Init+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c6:	d004      	beq.n	80058d2 <HAL_ADC_Init+0x66>
 80058c8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80058cc:	4880      	ldr	r0, [pc, #512]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80058ce:	f7fe fef9 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_ADC_Init+0x82>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e2:	d004      	beq.n	80058ee <HAL_ADC_Init+0x82>
 80058e4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80058e8:	4879      	ldr	r0, [pc, #484]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80058ea:	f7fe feeb 	bl	80046c4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7b1b      	ldrb	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_ADC_Init+0x9c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7b1b      	ldrb	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d004      	beq.n	8005908 <HAL_ADC_Init+0x9c>
 80058fe:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005902:	4873      	ldr	r0, [pc, #460]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 8005904:	f7fe fede 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d044      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005918:	d03f      	beq.n	800599a <HAL_ADC_Init+0x12e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005922:	d03a      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800592c:	d035      	beq.n	800599a <HAL_ADC_Init+0x12e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8005936:	d030      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005940:	d02b      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d027      	beq.n	800599a <HAL_ADC_Init+0x12e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005952:	d022      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800595c:	d01d      	beq.n	800599a <HAL_ADC_Init+0x12e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8005966:	d018      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005970:	d013      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800597a:	d00e      	beq.n	800599a <HAL_ADC_Init+0x12e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005984:	d009      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800598e:	d004      	beq.n	800599a <HAL_ADC_Init+0x12e>
 8005990:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8005994:	484e      	ldr	r0, [pc, #312]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 8005996:	f7fe fe95 	bl	80046c4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d02a      	beq.n	80059f8 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_ADC_Init+0x146>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d904      	bls.n	80059bc <HAL_ADC_Init+0x150>
 80059b2:	f240 11b1 	movw	r1, #433	@ 0x1b1
 80059b6:	4846      	ldr	r0, [pc, #280]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80059b8:	f7fe fe84 	bl	80046c4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7d1b      	ldrb	r3, [r3, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_ADC_Init+0x16a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d004      	beq.n	80059d6 <HAL_ADC_Init+0x16a>
 80059cc:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80059d0:	483f      	ldr	r0, [pc, #252]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80059d2:	f7fe fe77 	bl	80046c4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	7d1b      	ldrb	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_ADC_Init+0x182>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d904      	bls.n	80059f8 <HAL_ADC_Init+0x18c>
 80059ee:	f240 11b5 	movw	r1, #437	@ 0x1b5
 80059f2:	4837      	ldr	r0, [pc, #220]	@ (8005ad0 <HAL_ADC_Init+0x264>)
 80059f4:	f7fe fe66 	bl	80046c4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fe fc34 	bl	800427c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fd01 	bl	800641c <ADC_ConversionStop_Disable>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 80b1 	bne.w	8005b8e <HAL_ADC_Init+0x322>
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 80ad 	bne.w	8005b8e <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a3c:	f023 0302 	bic.w	r3, r3, #2
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	491e      	ldr	r1, [pc, #120]	@ (8005acc <HAL_ADC_Init+0x260>)
 8005a52:	428b      	cmp	r3, r1
 8005a54:	d10a      	bne.n	8005a6c <HAL_ADC_Init+0x200>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a5e:	d002      	beq.n	8005a66 <HAL_ADC_Init+0x1fa>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	e004      	b.n	8005a70 <HAL_ADC_Init+0x204>
 8005a66:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a6a:	e001      	b.n	8005a70 <HAL_ADC_Init+0x204>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7b1b      	ldrb	r3, [r3, #12]
 8005a76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a88:	d003      	beq.n	8005a92 <HAL_ADC_Init+0x226>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_ADC_Init+0x22c>
 8005a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a96:	e000      	b.n	8005a9a <HAL_ADC_Init+0x22e>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7d1b      	ldrb	r3, [r3, #20]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d121      	bne.n	8005aec <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7b1b      	ldrb	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d111      	bne.n	8005ad4 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	035a      	lsls	r2, r3, #13
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e013      	b.n	8005aec <HAL_ADC_Init+0x280>
 8005ac4:	40012400 	.word	0x40012400
 8005ac8:	40012800 	.word	0x40012800
 8005acc:	40013c00 	.word	0x40013c00
 8005ad0:	0800ffa8 	.word	0x0800ffa8
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	4b28      	ldr	r3, [pc, #160]	@ (8005ba8 <HAL_ADC_Init+0x33c>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1c:	d003      	beq.n	8005b26 <HAL_ADC_Init+0x2ba>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d104      	bne.n	8005b30 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	051b      	lsls	r3, r3, #20
 8005b2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	4b18      	ldr	r3, [pc, #96]	@ (8005bac <HAL_ADC_Init+0x340>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d10b      	bne.n	8005b6c <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b6a:	e018      	b.n	8005b9e <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	f023 0312 	bic.w	r3, r3, #18
 8005b74:	f043 0210 	orr.w	r2, r3, #16
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f043 0201 	orr.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b8c:	e007      	b.n	8005b9e <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	f043 0210 	orr.w	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	ffe1f7fd 	.word	0xffe1f7fd
 8005bac:	ff1f0efe 	.word	0xff1f0efe

08005bb0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8005d2c <HAL_ADC_Start+0x17c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00e      	beq.n	8005be4 <HAL_ADC_Start+0x34>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a59      	ldr	r2, [pc, #356]	@ (8005d30 <HAL_ADC_Start+0x180>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d009      	beq.n	8005be4 <HAL_ADC_Start+0x34>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a57      	ldr	r2, [pc, #348]	@ (8005d34 <HAL_ADC_Start+0x184>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_ADC_Start+0x34>
 8005bda:	f240 4111 	movw	r1, #1041	@ 0x411
 8005bde:	4856      	ldr	r0, [pc, #344]	@ (8005d38 <HAL_ADC_Start+0x188>)
 8005be0:	f7fe fd70 	bl	80046c4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_ADC_Start+0x42>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e098      	b.n	8005d24 <HAL_ADC_Start+0x174>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fbb4 	bl	8006368 <ADC_Enable>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 8087 	bne.w	8005d1a <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a42      	ldr	r2, [pc, #264]	@ (8005d30 <HAL_ADC_Start+0x180>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d105      	bne.n	8005c36 <HAL_ADC_Start+0x86>
 8005c2a:	4b40      	ldr	r3, [pc, #256]	@ (8005d2c <HAL_ADC_Start+0x17c>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d115      	bne.n	8005c62 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d026      	beq.n	8005c9e <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c60:	e01d      	b.n	8005c9e <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <HAL_ADC_Start+0x17c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_ADC_Start+0xd2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <HAL_ADC_Start+0x180>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10d      	bne.n	8005c9e <HAL_ADC_Start+0xee>
 8005c82:	4b2a      	ldr	r3, [pc, #168]	@ (8005d2c <HAL_ADC_Start+0x17c>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d006      	beq.n	8005cb8 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	f023 0206 	bic.w	r2, r3, #6
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cb6:	e002      	b.n	8005cbe <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0202 	mvn.w	r2, #2
 8005cce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005cda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005cde:	d113      	bne.n	8005d08 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005ce4:	4a12      	ldr	r2, [pc, #72]	@ (8005d30 <HAL_ADC_Start+0x180>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d105      	bne.n	8005cf6 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005cea:	4b10      	ldr	r3, [pc, #64]	@ (8005d2c <HAL_ADC_Start+0x17c>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d108      	bne.n	8005d08 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	e00c      	b.n	8005d22 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005d16:	609a      	str	r2, [r3, #8]
 8005d18:	e003      	b.n	8005d22 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40012400 	.word	0x40012400
 8005d30:	40012800 	.word	0x40012800
 8005d34:	40013c00 	.word	0x40013c00
 8005d38:	0800ffa8 	.word	0x0800ffa8

08005d3c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a80      	ldr	r2, [pc, #512]	@ (8005f58 <HAL_ADC_PollForConversion+0x21c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_ADC_PollForConversion+0x3e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7e      	ldr	r2, [pc, #504]	@ (8005f5c <HAL_ADC_PollForConversion+0x220>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_ADC_PollForConversion+0x3e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f60 <HAL_ADC_PollForConversion+0x224>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_ADC_PollForConversion+0x3e>
 8005d70:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 8005d74:	487b      	ldr	r0, [pc, #492]	@ (8005f64 <HAL_ADC_PollForConversion+0x228>)
 8005d76:	f7fe fca5 	bl	80046c4 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005d7a:	f7ff fd49 	bl	8005810 <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0d3      	b.n	8005f4e <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d131      	bne.n	8005e18 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d12a      	bne.n	8005e18 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005dc2:	e021      	b.n	8005e08 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d01d      	beq.n	8005e08 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_ADC_PollForConversion+0xa6>
 8005dd2:	f7ff fd1d 	bl	8005810 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d212      	bcs.n	8005e08 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0a2      	b.n	8005f4e <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0d6      	beq.n	8005dc4 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005e16:	e070      	b.n	8005efa <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005e18:	4b53      	ldr	r3, [pc, #332]	@ (8005f68 <HAL_ADC_PollForConversion+0x22c>)
 8005e1a:	681c      	ldr	r4, [r3, #0]
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	f002 fc11 	bl	8008644 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e22:	4603      	mov	r3, r0
 8005e24:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6919      	ldr	r1, [r3, #16]
 8005e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f6c <HAL_ADC_PollForConversion+0x230>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d118      	bne.n	8005e68 <HAL_ADC_PollForConversion+0x12c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f70 <HAL_ADC_PollForConversion+0x234>)
 8005e3e:	400b      	ands	r3, r1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d111      	bne.n	8005e68 <HAL_ADC_PollForConversion+0x12c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6919      	ldr	r1, [r3, #16]
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f74 <HAL_ADC_PollForConversion+0x238>)
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <HAL_ADC_PollForConversion+0x128>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68d9      	ldr	r1, [r3, #12]
 8005e58:	4b47      	ldr	r3, [pc, #284]	@ (8005f78 <HAL_ADC_PollForConversion+0x23c>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_ADC_PollForConversion+0x128>
 8005e60:	2314      	movs	r3, #20
 8005e62:	e020      	b.n	8005ea6 <HAL_ADC_PollForConversion+0x16a>
 8005e64:	2329      	movs	r3, #41	@ 0x29
 8005e66:	e01e      	b.n	8005ea6 <HAL_ADC_PollForConversion+0x16a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6919      	ldr	r1, [r3, #16]
 8005e6e:	4b41      	ldr	r3, [pc, #260]	@ (8005f74 <HAL_ADC_PollForConversion+0x238>)
 8005e70:	400b      	ands	r3, r1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_ADC_PollForConversion+0x148>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68d9      	ldr	r1, [r3, #12]
 8005e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f78 <HAL_ADC_PollForConversion+0x23c>)
 8005e7e:	400b      	ands	r3, r1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <HAL_ADC_PollForConversion+0x164>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6919      	ldr	r1, [r3, #16]
 8005e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f7c <HAL_ADC_PollForConversion+0x240>)
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <HAL_ADC_PollForConversion+0x168>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68d9      	ldr	r1, [r3, #12]
 8005e98:	4b38      	ldr	r3, [pc, #224]	@ (8005f7c <HAL_ADC_PollForConversion+0x240>)
 8005e9a:	400b      	ands	r3, r1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_ADC_PollForConversion+0x168>
 8005ea0:	2354      	movs	r3, #84	@ 0x54
 8005ea2:	e000      	b.n	8005ea6 <HAL_ADC_PollForConversion+0x16a>
 8005ea4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005eac:	e021      	b.n	8005ef2 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d01a      	beq.n	8005eec <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_ADC_PollForConversion+0x190>
 8005ebc:	f7ff fca8 	bl	8005810 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d20f      	bcs.n	8005eec <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d90b      	bls.n	8005eec <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	f043 0204 	orr.w	r2, r3, #4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e030      	b.n	8005f4e <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d8d9      	bhi.n	8005eae <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0212 	mvn.w	r2, #18
 8005f02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005f1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005f1e:	d115      	bne.n	8005f4c <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d111      	bne.n	8005f4c <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40012400 	.word	0x40012400
 8005f5c:	40012800 	.word	0x40012800
 8005f60:	40013c00 	.word	0x40013c00
 8005f64:	0800ffa8 	.word	0x0800ffa8
 8005f68:	20000038 	.word	0x20000038
 8005f6c:	24924924 	.word	0x24924924
 8005f70:	00924924 	.word	0x00924924
 8005f74:	12492492 	.word	0x12492492
 8005f78:	00492492 	.word	0x00492492
 8005f7c:	00249249 	.word	0x00249249

08005f80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc0 <HAL_ADC_GetValue+0x40>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_ADC_GetValue+0x30>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc4 <HAL_ADC_GetValue+0x44>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_ADC_GetValue+0x30>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <HAL_ADC_GetValue+0x48>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_ADC_GetValue+0x30>
 8005fa6:	f240 61e5 	movw	r1, #1765	@ 0x6e5
 8005faa:	4808      	ldr	r0, [pc, #32]	@ (8005fcc <HAL_ADC_GetValue+0x4c>)
 8005fac:	f7fe fb8a 	bl	80046c4 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40012400 	.word	0x40012400
 8005fc4:	40012800 	.word	0x40012800
 8005fc8:	40013c00 	.word	0x40013c00
 8005fcc:	0800ffa8 	.word	0x0800ffa8

08005fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a8b      	ldr	r2, [pc, #556]	@ (8006214 <HAL_ADC_ConfigChannel+0x244>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00e      	beq.n	800600a <HAL_ADC_ConfigChannel+0x3a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a89      	ldr	r2, [pc, #548]	@ (8006218 <HAL_ADC_ConfigChannel+0x248>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_ADC_ConfigChannel+0x3a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a88      	ldr	r2, [pc, #544]	@ (800621c <HAL_ADC_ConfigChannel+0x24c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_ADC_ConfigChannel+0x3a>
 8006000:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8006004:	4886      	ldr	r0, [pc, #536]	@ (8006220 <HAL_ADC_ConfigChannel+0x250>)
 8006006:	f7fe fb5d 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d048      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d044      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d040      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d03c      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d038      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b05      	cmp	r3, #5
 8006038:	d034      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b06      	cmp	r3, #6
 8006040:	d030      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b07      	cmp	r3, #7
 8006048:	d02c      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d028      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b09      	cmp	r3, #9
 8006058:	d024      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b0a      	cmp	r3, #10
 8006060:	d020      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b0b      	cmp	r3, #11
 8006068:	d01c      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d018      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b0d      	cmp	r3, #13
 8006078:	d014      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b0e      	cmp	r3, #14
 8006080:	d010      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d00c      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b10      	cmp	r3, #16
 8006090:	d008      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b11      	cmp	r3, #17
 8006098:	d004      	beq.n	80060a4 <HAL_ADC_ConfigChannel+0xd4>
 800609a:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 800609e:	4860      	ldr	r0, [pc, #384]	@ (8006220 <HAL_ADC_ConfigChannel+0x250>)
 80060a0:	f7fe fb10 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d040      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d03c      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d038      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d034      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d030      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d02c      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b07      	cmp	r3, #7
 80060da:	d028      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d024      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d020      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b0a      	cmp	r3, #10
 80060f2:	d01c      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	d018      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d014      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b0d      	cmp	r3, #13
 800610a:	d010      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b0e      	cmp	r3, #14
 8006112:	d00c      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d008      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b10      	cmp	r3, #16
 8006122:	d004      	beq.n	800612e <HAL_ADC_ConfigChannel+0x15e>
 8006124:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 8006128:	483d      	ldr	r0, [pc, #244]	@ (8006220 <HAL_ADC_ConfigChannel+0x250>)
 800612a:	f7fe facb 	bl	80046c4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d020      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d01c      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d018      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b03      	cmp	r3, #3
 800614c:	d014      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d010      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b05      	cmp	r3, #5
 800615c:	d00c      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d008      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b07      	cmp	r3, #7
 800616c:	d004      	beq.n	8006178 <HAL_ADC_ConfigChannel+0x1a8>
 800616e:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8006172:	482b      	ldr	r0, [pc, #172]	@ (8006220 <HAL_ADC_ConfigChannel+0x250>)
 8006174:	f7fe faa6 	bl	80046c4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x1b6>
 8006182:	2302      	movs	r3, #2
 8006184:	e0e5      	b.n	8006352 <HAL_ADC_ConfigChannel+0x382>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b06      	cmp	r3, #6
 8006194:	d81c      	bhi.n	80061d0 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	3b05      	subs	r3, #5
 80061a8:	221f      	movs	r2, #31
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	4019      	ands	r1, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	3b05      	subs	r3, #5
 80061c2:	fa00 f203 	lsl.w	r2, r0, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ce:	e045      	b.n	800625c <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b0c      	cmp	r3, #12
 80061d6:	d825      	bhi.n	8006224 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	3b23      	subs	r3, #35	@ 0x23
 80061ea:	221f      	movs	r2, #31
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	4019      	ands	r1, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	3b23      	subs	r3, #35	@ 0x23
 8006204:	fa00 f203 	lsl.w	r2, r0, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006210:	e024      	b.n	800625c <HAL_ADC_ConfigChannel+0x28c>
 8006212:	bf00      	nop
 8006214:	40012400 	.word	0x40012400
 8006218:	40012800 	.word	0x40012800
 800621c:	40013c00 	.word	0x40013c00
 8006220:	0800ffa8 	.word	0x0800ffa8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	3b41      	subs	r3, #65	@ 0x41
 8006236:	221f      	movs	r2, #31
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	43db      	mvns	r3, r3
 800623e:	4019      	ands	r1, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	3b41      	subs	r3, #65	@ 0x41
 8006250:	fa00 f203 	lsl.w	r2, r0, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b09      	cmp	r3, #9
 8006262:	d91c      	bls.n	800629e <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	3b1e      	subs	r3, #30
 8006276:	2207      	movs	r2, #7
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	4019      	ands	r1, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6898      	ldr	r0, [r3, #8]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	3b1e      	subs	r3, #30
 8006290:	fa00 f203 	lsl.w	r2, r0, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	60da      	str	r2, [r3, #12]
 800629c:	e019      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6919      	ldr	r1, [r3, #16]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	2207      	movs	r2, #7
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	4019      	ands	r1, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6898      	ldr	r0, [r3, #8]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	4413      	add	r3, r2
 80062c6:	fa00 f203 	lsl.w	r2, r0, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d003      	beq.n	80062e2 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062de:	2b11      	cmp	r3, #17
 80062e0:	d132      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <HAL_ADC_ConfigChannel+0x38c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d125      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d126      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006308:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b10      	cmp	r3, #16
 8006310:	d11a      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006312:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <HAL_ADC_ConfigChannel+0x390>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a13      	ldr	r2, [pc, #76]	@ (8006364 <HAL_ADC_ConfigChannel+0x394>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	0c9a      	lsrs	r2, r3, #18
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006328:	e002      	b.n	8006330 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3b01      	subs	r3, #1
 800632e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f9      	bne.n	800632a <HAL_ADC_ConfigChannel+0x35a>
 8006336:	e007      	b.n	8006348 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40012400 	.word	0x40012400
 8006360:	20000038 	.word	0x20000038
 8006364:	431bde83 	.word	0x431bde83

08006368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d040      	beq.n	8006408 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006396:	4b1f      	ldr	r3, [pc, #124]	@ (8006414 <ADC_Enable+0xac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <ADC_Enable+0xb0>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	0c9b      	lsrs	r3, r3, #18
 80063a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80063a4:	e002      	b.n	80063ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f9      	bne.n	80063a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063b2:	f7ff fa2d 	bl	8005810 <HAL_GetTick>
 80063b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80063b8:	e01f      	b.n	80063fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063ba:	f7ff fa29 	bl	8005810 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d918      	bls.n	80063fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d011      	beq.n	80063fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	f043 0210 	orr.w	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	f043 0201 	orr.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e007      	b.n	800640a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d1d8      	bne.n	80063ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000038 	.word	0x20000038
 8006418:	431bde83 	.word	0x431bde83

0800641c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d12e      	bne.n	8006494 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006446:	f7ff f9e3 	bl	8005810 <HAL_GetTick>
 800644a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800644c:	e01b      	b.n	8006486 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800644e:	f7ff f9df 	bl	8005810 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d914      	bls.n	8006486 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10d      	bne.n	8006486 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	f043 0210 	orr.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	f043 0201 	orr.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e007      	b.n	8006496 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d0dc      	beq.n	800644e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a59      	ldr	r2, [pc, #356]	@ (800661c <HAL_ADCEx_Calibration_Start+0x17c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00d      	beq.n	80064d6 <HAL_ADCEx_Calibration_Start+0x36>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a58      	ldr	r2, [pc, #352]	@ (8006620 <HAL_ADCEx_Calibration_Start+0x180>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d008      	beq.n	80064d6 <HAL_ADCEx_Calibration_Start+0x36>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a56      	ldr	r2, [pc, #344]	@ (8006624 <HAL_ADCEx_Calibration_Start+0x184>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <HAL_ADCEx_Calibration_Start+0x36>
 80064ce:	217e      	movs	r1, #126	@ 0x7e
 80064d0:	4855      	ldr	r0, [pc, #340]	@ (8006628 <HAL_ADCEx_Calibration_Start+0x188>)
 80064d2:	f7fe f8f7 	bl	80046c4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_ADCEx_Calibration_Start+0x44>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e097      	b.n	8006614 <HAL_ADCEx_Calibration_Start+0x174>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff ff95 	bl	800641c <ADC_ConversionStop_Disable>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff36 	bl	8006368 <ADC_Enable>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8081 	bne.w	800660a <HAL_ADCEx_Calibration_Start+0x16a>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006510:	f023 0302 	bic.w	r3, r3, #2
 8006514:	f043 0202 	orr.w	r2, r3, #2
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800651c:	4b43      	ldr	r3, [pc, #268]	@ (800662c <HAL_ADCEx_Calibration_Start+0x18c>)
 800651e:	681c      	ldr	r4, [r3, #0]
 8006520:	2002      	movs	r0, #2
 8006522:	f002 f88f 	bl	8008644 <HAL_RCCEx_GetPeriphCLKFreq>
 8006526:	4603      	mov	r3, r0
 8006528:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800652c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800652e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8006530:	e002      	b.n	8006538 <HAL_ADCEx_Calibration_Start+0x98>
    {
      wait_loop_index--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3b01      	subs	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f9      	bne.n	8006532 <HAL_ADCEx_Calibration_Start+0x92>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0208 	orr.w	r2, r2, #8
 800654c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800654e:	f7ff f95f 	bl	8005810 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006554:	e01b      	b.n	800658e <HAL_ADCEx_Calibration_Start+0xee>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006556:	f7ff f95b 	bl	8005810 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b0a      	cmp	r3, #10
 8006562:	d914      	bls.n	800658e <HAL_ADCEx_Calibration_Start+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <HAL_ADCEx_Calibration_Start+0xee>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	f023 0312 	bic.w	r3, r3, #18
 800657a:	f043 0210 	orr.w	r2, r3, #16
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e042      	b.n	8006614 <HAL_ADCEx_Calibration_Start+0x174>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1dc      	bne.n	8006556 <HAL_ADCEx_Calibration_Start+0xb6>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0204 	orr.w	r2, r2, #4
 80065aa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80065ac:	f7ff f930 	bl	8005810 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80065b2:	e01b      	b.n	80065ec <HAL_ADCEx_Calibration_Start+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80065b4:	f7ff f92c 	bl	8005810 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b0a      	cmp	r3, #10
 80065c0:	d914      	bls.n	80065ec <HAL_ADCEx_Calibration_Start+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <HAL_ADCEx_Calibration_Start+0x14c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f023 0312 	bic.w	r3, r3, #18
 80065d8:	f043 0210 	orr.w	r2, r3, #16
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e013      	b.n	8006614 <HAL_ADCEx_Calibration_Start+0x174>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1dc      	bne.n	80065b4 <HAL_ADCEx_Calibration_Start+0x114>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd90      	pop	{r4, r7, pc}
 800661c:	40012400 	.word	0x40012400
 8006620:	40012800 	.word	0x40012800
 8006624:	40013c00 	.word	0x40013c00
 8006628:	0800ffe0 	.word	0x0800ffe0
 800662c:	20000038 	.word	0x20000038

08006630 <__NVIC_SetPriorityGrouping>:
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <__NVIC_SetPriorityGrouping+0x44>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800664c:	4013      	ands	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800665c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006662:	4a04      	ldr	r2, [pc, #16]	@ (8006674 <__NVIC_SetPriorityGrouping+0x44>)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	60d3      	str	r3, [r2, #12]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <__NVIC_GetPriorityGrouping>:
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800667c:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__NVIC_GetPriorityGrouping+0x18>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 0307 	and.w	r3, r3, #7
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <__NVIC_EnableIRQ>:
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	db0b      	blt.n	80066be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	f003 021f 	and.w	r2, r3, #31
 80066ac:	4906      	ldr	r1, [pc, #24]	@ (80066c8 <__NVIC_EnableIRQ+0x34>)
 80066ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2001      	movs	r0, #1
 80066b6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	e000e100 	.word	0xe000e100

080066cc <__NVIC_SetPriority>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db0a      	blt.n	80066f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	490c      	ldr	r1, [pc, #48]	@ (8006718 <__NVIC_SetPriority+0x4c>)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	440b      	add	r3, r1
 80066f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80066f4:	e00a      	b.n	800670c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4908      	ldr	r1, [pc, #32]	@ (800671c <__NVIC_SetPriority+0x50>)
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	3b04      	subs	r3, #4
 8006704:	0112      	lsls	r2, r2, #4
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	440b      	add	r3, r1
 800670a:	761a      	strb	r2, [r3, #24]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	e000e100 	.word	0xe000e100
 800671c:	e000ed00 	.word	0xe000ed00

08006720 <NVIC_EncodePriority>:
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	@ 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f1c3 0307 	rsb	r3, r3, #7
 800673a:	2b04      	cmp	r3, #4
 800673c:	bf28      	it	cs
 800673e:	2304      	movcs	r3, #4
 8006740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3304      	adds	r3, #4
 8006746:	2b06      	cmp	r3, #6
 8006748:	d902      	bls.n	8006750 <NVIC_EncodePriority+0x30>
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3b03      	subs	r3, #3
 800674e:	e000      	b.n	8006752 <NVIC_EncodePriority+0x32>
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43da      	mvns	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	401a      	ands	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006768:	f04f 31ff 	mov.w	r1, #4294967295
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43d9      	mvns	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006778:	4313      	orrs	r3, r2
}
 800677a:	4618      	mov	r0, r3
 800677c:	3724      	adds	r7, #36	@ 0x24
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3b01      	subs	r3, #1
 8006790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006794:	d301      	bcc.n	800679a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006796:	2301      	movs	r3, #1
 8006798:	e00f      	b.n	80067ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800679a:	4a0a      	ldr	r2, [pc, #40]	@ (80067c4 <SysTick_Config+0x40>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3b01      	subs	r3, #1
 80067a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067a2:	210f      	movs	r1, #15
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	f7ff ff90 	bl	80066cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <SysTick_Config+0x40>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067b2:	4b04      	ldr	r3, [pc, #16]	@ (80067c4 <SysTick_Config+0x40>)
 80067b4:	2207      	movs	r2, #7
 80067b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	e000e010 	.word	0xe000e010

080067c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b07      	cmp	r3, #7
 80067d4:	d00f      	beq.n	80067f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b06      	cmp	r3, #6
 80067da:	d00c      	beq.n	80067f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d009      	beq.n	80067f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d006      	beq.n	80067f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d003      	beq.n	80067f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80067ee:	2191      	movs	r1, #145	@ 0x91
 80067f0:	4804      	ldr	r0, [pc, #16]	@ (8006804 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80067f2:	f7fd ff67 	bl	80046c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff1a 	bl	8006630 <__NVIC_SetPriorityGrouping>
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	0801001c 	.word	0x0801001c

08006808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b0f      	cmp	r3, #15
 800681e:	d903      	bls.n	8006828 <HAL_NVIC_SetPriority+0x20>
 8006820:	21a9      	movs	r1, #169	@ 0xa9
 8006822:	480e      	ldr	r0, [pc, #56]	@ (800685c <HAL_NVIC_SetPriority+0x54>)
 8006824:	f7fd ff4e 	bl	80046c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d903      	bls.n	8006836 <HAL_NVIC_SetPriority+0x2e>
 800682e:	21aa      	movs	r1, #170	@ 0xaa
 8006830:	480a      	ldr	r0, [pc, #40]	@ (800685c <HAL_NVIC_SetPriority+0x54>)
 8006832:	f7fd ff47 	bl	80046c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006836:	f7ff ff1f 	bl	8006678 <__NVIC_GetPriorityGrouping>
 800683a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	6978      	ldr	r0, [r7, #20]
 8006842:	f7ff ff6d 	bl	8006720 <NVIC_EncodePriority>
 8006846:	4602      	mov	r2, r0
 8006848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800684c:	4611      	mov	r1, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ff3c 	bl	80066cc <__NVIC_SetPriority>
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	0801001c 	.word	0x0801001c

08006860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800686a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	da03      	bge.n	800687a <HAL_NVIC_EnableIRQ+0x1a>
 8006872:	21bd      	movs	r1, #189	@ 0xbd
 8006874:	4805      	ldr	r0, [pc, #20]	@ (800688c <HAL_NVIC_EnableIRQ+0x2c>)
 8006876:	f7fd ff25 	bl	80046c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800687a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff08 	bl	8006694 <__NVIC_EnableIRQ>
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	0801001c 	.word	0x0801001c

08006890 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff73 	bl	8006784 <SysTick_Config>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	@ 0x28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068b2:	2300      	movs	r3, #0
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80068b6:	2300      	movs	r3, #0
 80068b8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a94      	ldr	r2, [pc, #592]	@ (8006b10 <HAL_GPIO_Init+0x268>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a93      	ldr	r2, [pc, #588]	@ (8006b14 <HAL_GPIO_Init+0x26c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d017      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a92      	ldr	r2, [pc, #584]	@ (8006b18 <HAL_GPIO_Init+0x270>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a91      	ldr	r2, [pc, #580]	@ (8006b1c <HAL_GPIO_Init+0x274>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a90      	ldr	r2, [pc, #576]	@ (8006b20 <HAL_GPIO_Init+0x278>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a8f      	ldr	r2, [pc, #572]	@ (8006b24 <HAL_GPIO_Init+0x27c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a8e      	ldr	r2, [pc, #568]	@ (8006b28 <HAL_GPIO_Init+0x280>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <HAL_GPIO_Init+0x52>
 80068f2:	21bd      	movs	r1, #189	@ 0xbd
 80068f4:	488d      	ldr	r0, [pc, #564]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 80068f6:	f7fd fee5 	bl	80046c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <HAL_GPIO_Init+0x66>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690c:	d303      	bcc.n	8006916 <HAL_GPIO_Init+0x6e>
 800690e:	21be      	movs	r1, #190	@ 0xbe
 8006910:	4886      	ldr	r0, [pc, #536]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 8006912:	f7fd fed7 	bl	80046c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8236 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b01      	cmp	r3, #1
 8006926:	f000 8231 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b11      	cmp	r3, #17
 8006930:	f000 822c 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b02      	cmp	r3, #2
 800693a:	f000 8227 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b12      	cmp	r3, #18
 8006944:	f000 8222 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a78      	ldr	r2, [pc, #480]	@ (8006b30 <HAL_GPIO_Init+0x288>)
 800694e:	4293      	cmp	r3, r2
 8006950:	f000 821c 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a76      	ldr	r2, [pc, #472]	@ (8006b34 <HAL_GPIO_Init+0x28c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	f000 8216 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4a74      	ldr	r2, [pc, #464]	@ (8006b38 <HAL_GPIO_Init+0x290>)
 8006966:	4293      	cmp	r3, r2
 8006968:	f000 8210 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a72      	ldr	r2, [pc, #456]	@ (8006b3c <HAL_GPIO_Init+0x294>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f000 820a 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4a70      	ldr	r2, [pc, #448]	@ (8006b40 <HAL_GPIO_Init+0x298>)
 800697e:	4293      	cmp	r3, r2
 8006980:	f000 8204 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a6e      	ldr	r2, [pc, #440]	@ (8006b44 <HAL_GPIO_Init+0x29c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	f000 81fe 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b03      	cmp	r3, #3
 8006996:	f000 81f9 	beq.w	8006d8c <HAL_GPIO_Init+0x4e4>
 800699a:	21bf      	movs	r1, #191	@ 0xbf
 800699c:	4863      	ldr	r0, [pc, #396]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 800699e:	f7fd fe91 	bl	80046c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069a2:	e1f3      	b.n	8006d8c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069a4:	2201      	movs	r2, #1
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	4013      	ands	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 81e2 	bne.w	8006d86 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a52      	ldr	r2, [pc, #328]	@ (8006b10 <HAL_GPIO_Init+0x268>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01b      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a51      	ldr	r2, [pc, #324]	@ (8006b14 <HAL_GPIO_Init+0x26c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d017      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a50      	ldr	r2, [pc, #320]	@ (8006b18 <HAL_GPIO_Init+0x270>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a4f      	ldr	r2, [pc, #316]	@ (8006b1c <HAL_GPIO_Init+0x274>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006b20 <HAL_GPIO_Init+0x278>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a4d      	ldr	r2, [pc, #308]	@ (8006b24 <HAL_GPIO_Init+0x27c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006b28 <HAL_GPIO_Init+0x280>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_Init+0x15a>
 80069fa:	21cd      	movs	r1, #205	@ 0xcd
 80069fc:	484b      	ldr	r0, [pc, #300]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 80069fe:	f7fd fe61 	bl	80046c4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4a4f      	ldr	r2, [pc, #316]	@ (8006b44 <HAL_GPIO_Init+0x29c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	f000 80c7 	beq.w	8006b9c <HAL_GPIO_Init+0x2f4>
 8006a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8006b44 <HAL_GPIO_Init+0x29c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f200 80ed 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a16:	4a48      	ldr	r2, [pc, #288]	@ (8006b38 <HAL_GPIO_Init+0x290>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	f000 80bf 	beq.w	8006b9c <HAL_GPIO_Init+0x2f4>
 8006a1e:	4a46      	ldr	r2, [pc, #280]	@ (8006b38 <HAL_GPIO_Init+0x290>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	f200 80e5 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a26:	4a46      	ldr	r2, [pc, #280]	@ (8006b40 <HAL_GPIO_Init+0x298>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	f000 80b7 	beq.w	8006b9c <HAL_GPIO_Init+0x2f4>
 8006a2e:	4a44      	ldr	r2, [pc, #272]	@ (8006b40 <HAL_GPIO_Init+0x298>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	f200 80dd 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a36:	4a3f      	ldr	r2, [pc, #252]	@ (8006b34 <HAL_GPIO_Init+0x28c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f000 80af 	beq.w	8006b9c <HAL_GPIO_Init+0x2f4>
 8006a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8006b34 <HAL_GPIO_Init+0x28c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	f200 80d5 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a46:	4a3d      	ldr	r2, [pc, #244]	@ (8006b3c <HAL_GPIO_Init+0x294>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	f000 80a7 	beq.w	8006b9c <HAL_GPIO_Init+0x2f4>
 8006a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8006b3c <HAL_GPIO_Init+0x294>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	f200 80cd 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a56:	2b12      	cmp	r3, #18
 8006a58:	d82c      	bhi.n	8006ab4 <HAL_GPIO_Init+0x20c>
 8006a5a:	2b12      	cmp	r3, #18
 8006a5c:	f200 80c8 	bhi.w	8006bf0 <HAL_GPIO_Init+0x348>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <HAL_GPIO_Init+0x1c0>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006b9d 	.word	0x08006b9d
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006b49 	.word	0x08006b49
 8006a74:	08006beb 	.word	0x08006beb
 8006a78:	08006bf1 	.word	0x08006bf1
 8006a7c:	08006bf1 	.word	0x08006bf1
 8006a80:	08006bf1 	.word	0x08006bf1
 8006a84:	08006bf1 	.word	0x08006bf1
 8006a88:	08006bf1 	.word	0x08006bf1
 8006a8c:	08006bf1 	.word	0x08006bf1
 8006a90:	08006bf1 	.word	0x08006bf1
 8006a94:	08006bf1 	.word	0x08006bf1
 8006a98:	08006bf1 	.word	0x08006bf1
 8006a9c:	08006bf1 	.word	0x08006bf1
 8006aa0:	08006bf1 	.word	0x08006bf1
 8006aa4:	08006bf1 	.word	0x08006bf1
 8006aa8:	08006bf1 	.word	0x08006bf1
 8006aac:	08006ae5 	.word	0x08006ae5
 8006ab0:	08006b73 	.word	0x08006b73
 8006ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b30 <HAL_GPIO_Init+0x288>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d070      	beq.n	8006b9c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006aba:	e099      	b.n	8006bf0 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d00b      	beq.n	8006adc <HAL_GPIO_Init+0x234>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d007      	beq.n	8006adc <HAL_GPIO_Init+0x234>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d003      	beq.n	8006adc <HAL_GPIO_Init+0x234>
 8006ad4:	21d5      	movs	r1, #213	@ 0xd5
 8006ad6:	4815      	ldr	r0, [pc, #84]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 8006ad8:	f7fd fdf4 	bl	80046c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	623b      	str	r3, [r7, #32]
          break;
 8006ae2:	e086      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d00b      	beq.n	8006b04 <HAL_GPIO_Init+0x25c>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d007      	beq.n	8006b04 <HAL_GPIO_Init+0x25c>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d003      	beq.n	8006b04 <HAL_GPIO_Init+0x25c>
 8006afc:	21dc      	movs	r1, #220	@ 0xdc
 8006afe:	480b      	ldr	r0, [pc, #44]	@ (8006b2c <HAL_GPIO_Init+0x284>)
 8006b00:	f7fd fde0 	bl	80046c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	623b      	str	r3, [r7, #32]
          break;
 8006b0c:	e071      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
 8006b0e:	bf00      	nop
 8006b10:	40010800 	.word	0x40010800
 8006b14:	40010c00 	.word	0x40010c00
 8006b18:	40011000 	.word	0x40011000
 8006b1c:	40011400 	.word	0x40011400
 8006b20:	40011800 	.word	0x40011800
 8006b24:	40011c00 	.word	0x40011c00
 8006b28:	40012000 	.word	0x40012000
 8006b2c:	08010058 	.word	0x08010058
 8006b30:	10110000 	.word	0x10110000
 8006b34:	10210000 	.word	0x10210000
 8006b38:	10310000 	.word	0x10310000
 8006b3c:	10120000 	.word	0x10120000
 8006b40:	10220000 	.word	0x10220000
 8006b44:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d00b      	beq.n	8006b68 <HAL_GPIO_Init+0x2c0>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d007      	beq.n	8006b68 <HAL_GPIO_Init+0x2c0>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d003      	beq.n	8006b68 <HAL_GPIO_Init+0x2c0>
 8006b60:	21e3      	movs	r1, #227	@ 0xe3
 8006b62:	4891      	ldr	r0, [pc, #580]	@ (8006da8 <HAL_GPIO_Init+0x500>)
 8006b64:	f7fd fdae 	bl	80046c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	623b      	str	r3, [r7, #32]
          break;
 8006b70:	e03f      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d00b      	beq.n	8006b92 <HAL_GPIO_Init+0x2ea>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d007      	beq.n	8006b92 <HAL_GPIO_Init+0x2ea>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d003      	beq.n	8006b92 <HAL_GPIO_Init+0x2ea>
 8006b8a:	21ea      	movs	r1, #234	@ 0xea
 8006b8c:	4886      	ldr	r0, [pc, #536]	@ (8006da8 <HAL_GPIO_Init+0x500>)
 8006b8e:	f7fd fd99 	bl	80046c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	330c      	adds	r3, #12
 8006b98:	623b      	str	r3, [r7, #32]
          break;
 8006b9a:	e02a      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_GPIO_Init+0x314>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d007      	beq.n	8006bbc <HAL_GPIO_Init+0x314>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d003      	beq.n	8006bbc <HAL_GPIO_Init+0x314>
 8006bb4:	21f7      	movs	r1, #247	@ 0xf7
 8006bb6:	487c      	ldr	r0, [pc, #496]	@ (8006da8 <HAL_GPIO_Init+0x500>)
 8006bb8:	f7fd fd84 	bl	80046c4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	623b      	str	r3, [r7, #32]
          break;
 8006bc8:	e013      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	611a      	str	r2, [r3, #16]
          break;
 8006bdc:	e009      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bde:	2308      	movs	r3, #8
 8006be0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	615a      	str	r2, [r3, #20]
          break;
 8006be8:	e003      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006bea:	2300      	movs	r3, #0
 8006bec:	623b      	str	r3, [r7, #32]
          break;
 8006bee:	e000      	b.n	8006bf2 <HAL_GPIO_Init+0x34a>
          break;
 8006bf0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2bff      	cmp	r3, #255	@ 0xff
 8006bf6:	d801      	bhi.n	8006bfc <HAL_GPIO_Init+0x354>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	e001      	b.n	8006c00 <HAL_GPIO_Init+0x358>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2bff      	cmp	r3, #255	@ 0xff
 8006c06:	d802      	bhi.n	8006c0e <HAL_GPIO_Init+0x366>
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	e002      	b.n	8006c14 <HAL_GPIO_Init+0x36c>
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	3b08      	subs	r3, #8
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	210f      	movs	r1, #15
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	401a      	ands	r2, r3
 8006c26:	6a39      	ldr	r1, [r7, #32]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80a2 	beq.w	8006d86 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c42:	4b5a      	ldr	r3, [pc, #360]	@ (8006dac <HAL_GPIO_Init+0x504>)
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	4a59      	ldr	r2, [pc, #356]	@ (8006dac <HAL_GPIO_Init+0x504>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	6193      	str	r3, [r2, #24]
 8006c4e:	4b57      	ldr	r3, [pc, #348]	@ (8006dac <HAL_GPIO_Init+0x504>)
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c5a:	4a55      	ldr	r2, [pc, #340]	@ (8006db0 <HAL_GPIO_Init+0x508>)
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	3302      	adds	r3, #2
 8006c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	220f      	movs	r2, #15
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a4c      	ldr	r2, [pc, #304]	@ (8006db4 <HAL_GPIO_Init+0x50c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01f      	beq.n	8006cc6 <HAL_GPIO_Init+0x41e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a4b      	ldr	r2, [pc, #300]	@ (8006db8 <HAL_GPIO_Init+0x510>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d019      	beq.n	8006cc2 <HAL_GPIO_Init+0x41a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a4a      	ldr	r2, [pc, #296]	@ (8006dbc <HAL_GPIO_Init+0x514>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_GPIO_Init+0x416>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a49      	ldr	r2, [pc, #292]	@ (8006dc0 <HAL_GPIO_Init+0x518>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00d      	beq.n	8006cba <HAL_GPIO_Init+0x412>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a48      	ldr	r2, [pc, #288]	@ (8006dc4 <HAL_GPIO_Init+0x51c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <HAL_GPIO_Init+0x40e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a47      	ldr	r2, [pc, #284]	@ (8006dc8 <HAL_GPIO_Init+0x520>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <HAL_GPIO_Init+0x40a>
 8006cae:	2305      	movs	r3, #5
 8006cb0:	e00a      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cb2:	2306      	movs	r3, #6
 8006cb4:	e008      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cb6:	2304      	movs	r3, #4
 8006cb8:	e006      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e004      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e002      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_GPIO_Init+0x420>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cca:	f002 0203 	and.w	r2, r2, #3
 8006cce:	0092      	lsls	r2, r2, #2
 8006cd0:	4093      	lsls	r3, r2
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006cd8:	4935      	ldr	r1, [pc, #212]	@ (8006db0 <HAL_GPIO_Init+0x508>)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	089b      	lsrs	r3, r3, #2
 8006cde:	3302      	adds	r3, #2
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006cf2:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4935      	ldr	r1, [pc, #212]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
 8006cfe:	e006      	b.n	8006d0e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d00:	4b32      	ldr	r3, [pc, #200]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	43db      	mvns	r3, r3
 8006d08:	4930      	ldr	r1, [pc, #192]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	492b      	ldr	r1, [pc, #172]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60cb      	str	r3, [r1, #12]
 8006d26:	e006      	b.n	8006d36 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d28:	4b28      	ldr	r3, [pc, #160]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	4926      	ldr	r1, [pc, #152]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d42:	4b22      	ldr	r3, [pc, #136]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4921      	ldr	r1, [pc, #132]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	604b      	str	r3, [r1, #4]
 8006d4e:	e006      	b.n	8006d5e <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d50:	4b1e      	ldr	r3, [pc, #120]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	43db      	mvns	r3, r3
 8006d58:	491c      	ldr	r1, [pc, #112]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006d6a:	4b18      	ldr	r3, [pc, #96]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4917      	ldr	r1, [pc, #92]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]
 8006d76:	e006      	b.n	8006d86 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d78:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	4912      	ldr	r1, [pc, #72]	@ (8006dcc <HAL_GPIO_Init+0x524>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	3301      	adds	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f ae04 	bne.w	80069a4 <HAL_GPIO_Init+0xfc>
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	3728      	adds	r7, #40	@ 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	08010058 	.word	0x08010058
 8006dac:	40021000 	.word	0x40021000
 8006db0:	40010000 	.word	0x40010000
 8006db4:	40010800 	.word	0x40010800
 8006db8:	40010c00 	.word	0x40010c00
 8006dbc:	40011000 	.word	0x40011000
 8006dc0:	40011400 	.word	0x40011400
 8006dc4:	40011800 	.word	0x40011800
 8006dc8:	40011c00 	.word	0x40011c00
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <HAL_GPIO_ReadPin+0x1c>
 8006de2:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8006de6:	4809      	ldr	r0, [pc, #36]	@ (8006e0c <HAL_GPIO_ReadPin+0x3c>)
 8006de8:	f7fd fc6c 	bl	80046c4 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	887b      	ldrh	r3, [r7, #2]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08010058 	.word	0x08010058

08006e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <HAL_GPIO_WritePin+0x20>
 8006e26:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8006e2a:	480e      	ldr	r0, [pc, #56]	@ (8006e64 <HAL_GPIO_WritePin+0x54>)
 8006e2c:	f7fd fc4a 	bl	80046c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006e30:	787b      	ldrb	r3, [r7, #1]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d007      	beq.n	8006e46 <HAL_GPIO_WritePin+0x36>
 8006e36:	787b      	ldrb	r3, [r7, #1]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d004      	beq.n	8006e46 <HAL_GPIO_WritePin+0x36>
 8006e3c:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8006e40:	4808      	ldr	r0, [pc, #32]	@ (8006e64 <HAL_GPIO_WritePin+0x54>)
 8006e42:	f7fd fc3f 	bl	80046c4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8006e46:	787b      	ldrb	r3, [r7, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e52:	e003      	b.n	8006e5c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	041a      	lsls	r2, r3, #16
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	611a      	str	r2, [r3, #16]
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	08010058 	.word	0x08010058

08006e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e1b4      	b.n	80071e4 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a9b      	ldr	r2, [pc, #620]	@ (80070ec <HAL_I2C_Init+0x284>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_I2C_Init+0x30>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a99      	ldr	r2, [pc, #612]	@ (80070f0 <HAL_I2C_Init+0x288>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_I2C_Init+0x30>
 8006e8e:	f240 11db 	movw	r1, #475	@ 0x1db
 8006e92:	4898      	ldr	r0, [pc, #608]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006e94:	f7fd fc16 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <HAL_I2C_Init+0x42>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a94      	ldr	r2, [pc, #592]	@ (80070f8 <HAL_I2C_Init+0x290>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d904      	bls.n	8006eb4 <HAL_I2C_Init+0x4c>
 8006eaa:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8006eae:	4891      	ldr	r0, [pc, #580]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006eb0:	f7fd fc08 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d009      	beq.n	8006ed0 <HAL_I2C_Init+0x68>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec4:	d004      	beq.n	8006ed0 <HAL_I2C_Init+0x68>
 8006ec6:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8006eca:	488a      	ldr	r0, [pc, #552]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006ecc:	f7fd fbfa 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed8:	d304      	bcc.n	8006ee4 <HAL_I2C_Init+0x7c>
 8006eda:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ede:	4885      	ldr	r0, [pc, #532]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006ee0:	f7fd fbf0 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eec:	d009      	beq.n	8006f02 <HAL_I2C_Init+0x9a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ef6:	d004      	beq.n	8006f02 <HAL_I2C_Init+0x9a>
 8006ef8:	f240 11df 	movw	r1, #479	@ 0x1df
 8006efc:	487d      	ldr	r0, [pc, #500]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006efe:	f7fd fbe1 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <HAL_I2C_Init+0xb4>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d004      	beq.n	8006f1c <HAL_I2C_Init+0xb4>
 8006f12:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006f16:	4877      	ldr	r0, [pc, #476]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006f18:	f7fd fbd4 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_I2C_Init+0xca>
 8006f28:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8006f2c:	4871      	ldr	r0, [pc, #452]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006f2e:	f7fd fbc9 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_I2C_Init+0xe4>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	2b40      	cmp	r3, #64	@ 0x40
 8006f40:	d004      	beq.n	8006f4c <HAL_I2C_Init+0xe4>
 8006f42:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8006f46:	486b      	ldr	r0, [pc, #428]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006f48:	f7fd fbbc 	bl	80046c4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_I2C_Init+0xfe>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b80      	cmp	r3, #128	@ 0x80
 8006f5a:	d004      	beq.n	8006f66 <HAL_I2C_Init+0xfe>
 8006f5c:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8006f60:	4864      	ldr	r0, [pc, #400]	@ (80070f4 <HAL_I2C_Init+0x28c>)
 8006f62:	f7fd fbaf 	bl	80046c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fd fadc 	bl	8004538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	@ 0x24
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f001 f9e8 	bl	800838c <HAL_RCC_GetPCLK1Freq>
 8006fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80070fc <HAL_I2C_Init+0x294>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d807      	bhi.n	8006fd8 <HAL_I2C_Init+0x170>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a4d      	ldr	r2, [pc, #308]	@ (8007100 <HAL_I2C_Init+0x298>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bf94      	ite	ls
 8006fd0:	2301      	movls	r3, #1
 8006fd2:	2300      	movhi	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e006      	b.n	8006fe6 <HAL_I2C_Init+0x17e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a4a      	ldr	r2, [pc, #296]	@ (8007104 <HAL_I2C_Init+0x29c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	bf94      	ite	ls
 8006fe0:	2301      	movls	r3, #1
 8006fe2:	2300      	movhi	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0fa      	b.n	80071e4 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a45      	ldr	r2, [pc, #276]	@ (8007108 <HAL_I2C_Init+0x2a0>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	0c9b      	lsrs	r3, r3, #18
 8006ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a37      	ldr	r2, [pc, #220]	@ (80070fc <HAL_I2C_Init+0x294>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d802      	bhi.n	8007028 <HAL_I2C_Init+0x1c0>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3301      	adds	r3, #1
 8007026:	e009      	b.n	800703c <HAL_I2C_Init+0x1d4>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	4a36      	ldr	r2, [pc, #216]	@ (800710c <HAL_I2C_Init+0x2a4>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	3301      	adds	r3, #1
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	430b      	orrs	r3, r1
 8007042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800704e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4929      	ldr	r1, [pc, #164]	@ (80070fc <HAL_I2C_Init+0x294>)
 8007058:	428b      	cmp	r3, r1
 800705a:	d819      	bhi.n	8007090 <HAL_I2C_Init+0x228>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e59      	subs	r1, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	fbb1 f3f3 	udiv	r3, r1, r3
 800706a:	1c59      	adds	r1, r3, #1
 800706c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007070:	400b      	ands	r3, r1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_I2C_Init+0x224>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1e59      	subs	r1, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fbb1 f3f3 	udiv	r3, r1, r3
 8007084:	3301      	adds	r3, #1
 8007086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800708a:	e064      	b.n	8007156 <HAL_I2C_Init+0x2ee>
 800708c:	2304      	movs	r3, #4
 800708e:	e062      	b.n	8007156 <HAL_I2C_Init+0x2ee>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d111      	bne.n	80070bc <HAL_I2C_Init+0x254>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1e58      	subs	r0, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	440b      	add	r3, r1
 80070a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070aa:	3301      	adds	r3, #1
 80070ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e012      	b.n	80070e2 <HAL_I2C_Init+0x27a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1e58      	subs	r0, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	0099      	lsls	r1, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80070d2:	3301      	adds	r3, #1
 80070d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf0c      	ite	eq
 80070dc:	2301      	moveq	r3, #1
 80070de:	2300      	movne	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <HAL_I2C_Init+0x2a8>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e035      	b.n	8007156 <HAL_I2C_Init+0x2ee>
 80070ea:	bf00      	nop
 80070ec:	40005400 	.word	0x40005400
 80070f0:	40005800 	.word	0x40005800
 80070f4:	08010094 	.word	0x08010094
 80070f8:	00061a80 	.word	0x00061a80
 80070fc:	000186a0 	.word	0x000186a0
 8007100:	001e847f 	.word	0x001e847f
 8007104:	003d08ff 	.word	0x003d08ff
 8007108:	431bde83 	.word	0x431bde83
 800710c:	10624dd3 	.word	0x10624dd3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <HAL_I2C_Init+0x2ce>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1e58      	subs	r0, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6859      	ldr	r1, [r3, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	440b      	add	r3, r1
 8007126:	fbb0 f3f3 	udiv	r3, r0, r3
 800712a:	3301      	adds	r3, #1
 800712c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007134:	e00f      	b.n	8007156 <HAL_I2C_Init+0x2ee>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1e58      	subs	r0, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6859      	ldr	r1, [r3, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	0099      	lsls	r1, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	fbb0 f3f3 	udiv	r3, r0, r3
 800714c:	3301      	adds	r3, #1
 800714e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007152:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	6809      	ldr	r1, [r1, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007184:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6911      	ldr	r1, [r2, #16]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68d2      	ldr	r2, [r2, #12]
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	430b      	orrs	r3, r1
 8007198:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	817b      	strh	r3, [r7, #10]
 80071fe:	460b      	mov	r3, r1
 8007200:	813b      	strh	r3, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007206:	f7fe fb03 	bl	8005810 <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d007      	beq.n	8007222 <HAL_I2C_Mem_Write+0x36>
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b10      	cmp	r3, #16
 8007216:	d004      	beq.n	8007222 <HAL_I2C_Mem_Write+0x36>
 8007218:	f640 2106 	movw	r1, #2566	@ 0xa06
 800721c:	4873      	ldr	r0, [pc, #460]	@ (80073ec <HAL_I2C_Mem_Write+0x200>)
 800721e:	f7fd fa51 	bl	80046c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 80d9 	bne.w	80073e2 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2319      	movs	r3, #25
 8007236:	2201      	movs	r2, #1
 8007238:	496d      	ldr	r1, [pc, #436]	@ (80073f0 <HAL_I2C_Mem_Write+0x204>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f972 	bl	8007524 <I2C_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
 8007248:	e0cc      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_I2C_Mem_Write+0x6c>
 8007254:	2302      	movs	r3, #2
 8007256:	e0c5      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d007      	beq.n	800727e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800728c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2221      	movs	r2, #33	@ 0x21
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2240      	movs	r2, #64	@ 0x40
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a3a      	ldr	r2, [r7, #32]
 80072a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a4d      	ldr	r2, [pc, #308]	@ (80073f4 <HAL_I2C_Mem_Write+0x208>)
 80072be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072c0:	88f8      	ldrh	r0, [r7, #6]
 80072c2:	893a      	ldrh	r2, [r7, #8]
 80072c4:	8979      	ldrh	r1, [r7, #10]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4603      	mov	r3, r0
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f891 	bl	80073f8 <I2C_RequestMemoryWrite>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d052      	beq.n	8007382 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e081      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa37 	bl	8007758 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d107      	bne.n	8007308 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007306:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e06b      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b04      	cmp	r3, #4
 8007348:	d11b      	bne.n	8007382 <HAL_I2C_Mem_Write+0x196>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d017      	beq.n	8007382 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1aa      	bne.n	80072e0 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fa2a 	bl	80077e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d107      	bne.n	80073b2 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e016      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e000      	b.n	80073e4 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80073e2:	2302      	movs	r3, #2
  }
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	08010094 	.word	0x08010094
 80073f0:	00100002 	.word	0x00100002
 80073f4:	ffff0000 	.word	0xffff0000

080073f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4603      	mov	r3, r0
 8007408:	817b      	strh	r3, [r7, #10]
 800740a:	460b      	mov	r3, r1
 800740c:	813b      	strh	r3, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	2200      	movs	r2, #0
 800742a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f878 	bl	8007524 <I2C_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007448:	d103      	bne.n	8007452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e05f      	b.n	8007516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007456:	897b      	ldrh	r3, [r7, #10]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	6a3a      	ldr	r2, [r7, #32]
 800746a:	492d      	ldr	r1, [pc, #180]	@ (8007520 <I2C_RequestMemoryWrite+0x128>)
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f8d3 	bl	8007618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e04c      	b.n	8007516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007494:	6a39      	ldr	r1, [r7, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f95e 	bl	8007758 <I2C_WaitOnTXEFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d107      	bne.n	80074ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e02b      	b.n	8007516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d105      	bne.n	80074d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074c4:	893b      	ldrh	r3, [r7, #8]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	611a      	str	r2, [r3, #16]
 80074ce:	e021      	b.n	8007514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074d0:	893b      	ldrh	r3, [r7, #8]
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e0:	6a39      	ldr	r1, [r7, #32]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f938 	bl	8007758 <I2C_WaitOnTXEFlagUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00d      	beq.n	800750a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d107      	bne.n	8007506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e005      	b.n	8007516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800750a:	893b      	ldrh	r3, [r7, #8]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	00010002 	.word	0x00010002

08007524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4613      	mov	r3, r2
 8007532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007534:	e048      	b.n	80075c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d044      	beq.n	80075c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753e:	f7fe f967 	bl	8005810 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d139      	bne.n	80075c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d10d      	bne.n	800757a <I2C_WaitOnFlagUntilTimeout+0x56>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	43da      	mvns	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4013      	ands	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	e00c      	b.n	8007594 <I2C_WaitOnFlagUntilTimeout+0x70>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	43da      	mvns	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4013      	ands	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf0c      	ite	eq
 800758c:	2301      	moveq	r3, #1
 800758e:	2300      	movne	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	429a      	cmp	r2, r3
 8007598:	d116      	bne.n	80075c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b4:	f043 0220 	orr.w	r2, r3, #32
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e023      	b.n	8007610 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d10d      	bne.n	80075ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	43da      	mvns	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4013      	ands	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf0c      	ite	eq
 80075e4:	2301      	moveq	r3, #1
 80075e6:	2300      	movne	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	e00c      	b.n	8007608 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	43da      	mvns	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	429a      	cmp	r2, r3
 800760c:	d093      	beq.n	8007536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007626:	e071      	b.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007636:	d123      	bne.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007646:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	f043 0204 	orr.w	r2, r3, #4
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e067      	b.n	8007750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d041      	beq.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007688:	f7fe f8c2 	bl	8005810 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d302      	bcc.n	800769e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d136      	bne.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d10c      	bne.n	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	43da      	mvns	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4013      	ands	r3, r2
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	e00b      	b.n	80076da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	43da      	mvns	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4013      	ands	r3, r2
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	f043 0220 	orr.w	r2, r3, #32
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e021      	b.n	8007750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	0c1b      	lsrs	r3, r3, #16
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d10c      	bne.n	8007730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	43da      	mvns	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4013      	ands	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	bf14      	ite	ne
 8007728:	2301      	movne	r3, #1
 800772a:	2300      	moveq	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	e00b      	b.n	8007748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	43da      	mvns	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4013      	ands	r3, r2
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	bf14      	ite	ne
 8007742:	2301      	movne	r3, #1
 8007744:	2300      	moveq	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	f47f af6d 	bne.w	8007628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007764:	e034      	b.n	80077d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f886 	bl	8007878 <I2C_IsAcknowledgeFailed>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e034      	b.n	80077e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d028      	beq.n	80077d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777e:	f7fe f847 	bl	8005810 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11d      	bne.n	80077d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d016      	beq.n	80077d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e007      	b.n	80077e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077da:	2b80      	cmp	r3, #128	@ 0x80
 80077dc:	d1c3      	bne.n	8007766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077f4:	e034      	b.n	8007860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f83e 	bl	8007878 <I2C_IsAcknowledgeFailed>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e034      	b.n	8007870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d028      	beq.n	8007860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780e:	f7fd ffff 	bl	8005810 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11d      	bne.n	8007860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b04      	cmp	r3, #4
 8007830:	d016      	beq.n	8007860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2220      	movs	r2, #32
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	f043 0220 	orr.w	r2, r3, #32
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e007      	b.n	8007870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b04      	cmp	r3, #4
 800786c:	d1c3      	bne.n	80077f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800788a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788e:	d11b      	bne.n	80078c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	f043 0204 	orr.w	r2, r3, #4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e35a      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01c      	beq.n	8007928 <HAL_RCC_OscConfig+0x54>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d116      	bne.n	8007928 <HAL_RCC_OscConfig+0x54>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d110      	bne.n	8007928 <HAL_RCC_OscConfig+0x54>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <HAL_RCC_OscConfig+0x54>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_RCC_OscConfig+0x54>
 800791e:	f240 1165 	movw	r1, #357	@ 0x165
 8007922:	488f      	ldr	r0, [pc, #572]	@ (8007b60 <HAL_RCC_OscConfig+0x28c>)
 8007924:	f7fc fece 	bl	80046c4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 809a 	beq.w	8007a6a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <HAL_RCC_OscConfig+0x88>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007946:	d009      	beq.n	800795c <HAL_RCC_OscConfig+0x88>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007950:	d004      	beq.n	800795c <HAL_RCC_OscConfig+0x88>
 8007952:	f240 116b 	movw	r1, #363	@ 0x16b
 8007956:	4882      	ldr	r0, [pc, #520]	@ (8007b60 <HAL_RCC_OscConfig+0x28c>)
 8007958:	f7fc feb4 	bl	80046c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800795c:	4b81      	ldr	r3, [pc, #516]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b04      	cmp	r3, #4
 8007966:	d00c      	beq.n	8007982 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007968:	4b7e      	ldr	r3, [pc, #504]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 030c 	and.w	r3, r3, #12
 8007970:	2b08      	cmp	r3, #8
 8007972:	d112      	bne.n	800799a <HAL_RCC_OscConfig+0xc6>
 8007974:	4b7b      	ldr	r3, [pc, #492]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007980:	d10b      	bne.n	800799a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007982:	4b78      	ldr	r3, [pc, #480]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d06c      	beq.n	8007a68 <HAL_RCC_OscConfig+0x194>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d168      	bne.n	8007a68 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e300      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a2:	d106      	bne.n	80079b2 <HAL_RCC_OscConfig+0xde>
 80079a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e02e      	b.n	8007a10 <HAL_RCC_OscConfig+0x13c>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10c      	bne.n	80079d4 <HAL_RCC_OscConfig+0x100>
 80079ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a69      	ldr	r2, [pc, #420]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4b67      	ldr	r3, [pc, #412]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a66      	ldr	r2, [pc, #408]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e01d      	b.n	8007a10 <HAL_RCC_OscConfig+0x13c>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079dc:	d10c      	bne.n	80079f8 <HAL_RCC_OscConfig+0x124>
 80079de:	4b61      	ldr	r3, [pc, #388]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a60      	ldr	r2, [pc, #384]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4b5e      	ldr	r3, [pc, #376]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a5d      	ldr	r2, [pc, #372]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e00b      	b.n	8007a10 <HAL_RCC_OscConfig+0x13c>
 80079f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a59      	ldr	r2, [pc, #356]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 80079fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4b57      	ldr	r3, [pc, #348]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a56      	ldr	r2, [pc, #344]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d013      	beq.n	8007a40 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a18:	f7fd fefa 	bl	8005810 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a20:	f7fd fef6 	bl	8005810 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b64      	cmp	r3, #100	@ 0x64
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e2b4      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a32:	4b4c      	ldr	r3, [pc, #304]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x14c>
 8007a3e:	e014      	b.n	8007a6a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a40:	f7fd fee6 	bl	8005810 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a48:	f7fd fee2 	bl	8005810 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e2a0      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a5a:	4b42      	ldr	r3, [pc, #264]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f0      	bne.n	8007a48 <HAL_RCC_OscConfig+0x174>
 8007a66:	e000      	b.n	8007a6a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8080 	beq.w	8007b78 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_RCC_OscConfig+0x1be>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d004      	beq.n	8007a92 <HAL_RCC_OscConfig+0x1be>
 8007a88:	f240 119f 	movw	r1, #415	@ 0x19f
 8007a8c:	4834      	ldr	r0, [pc, #208]	@ (8007b60 <HAL_RCC_OscConfig+0x28c>)
 8007a8e:	f7fc fe19 	bl	80046c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	2b1f      	cmp	r3, #31
 8007a98:	d904      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x1d0>
 8007a9a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8007a9e:	4830      	ldr	r0, [pc, #192]	@ (8007b60 <HAL_RCC_OscConfig+0x28c>)
 8007aa0:	f7fc fe10 	bl	80046c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f003 030c 	and.w	r3, r3, #12
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f003 030c 	and.w	r3, r3, #12
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11c      	bne.n	8007af6 <HAL_RCC_OscConfig+0x222>
 8007abc:	4b29      	ldr	r3, [pc, #164]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d116      	bne.n	8007af6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ac8:	4b26      	ldr	r3, [pc, #152]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x20c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d001      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e25d      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	491d      	ldr	r1, [pc, #116]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af4:	e040      	b.n	8007b78 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d020      	beq.n	8007b40 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007afe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b68 <HAL_RCC_OscConfig+0x294>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b04:	f7fd fe84 	bl	8005810 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b0c:	f7fd fe80 	bl	8005810 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e23e      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b1e:	4b11      	ldr	r3, [pc, #68]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	490a      	ldr	r1, [pc, #40]	@ (8007b64 <HAL_RCC_OscConfig+0x290>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	600b      	str	r3, [r1, #0]
 8007b3e:	e01b      	b.n	8007b78 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b40:	4b09      	ldr	r3, [pc, #36]	@ (8007b68 <HAL_RCC_OscConfig+0x294>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b46:	f7fd fe63 	bl	8005810 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4c:	e00e      	b.n	8007b6c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b4e:	f7fd fe5f 	bl	8005810 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d907      	bls.n	8007b6c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e21d      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
 8007b60:	080100cc 	.word	0x080100cc
 8007b64:	40021000 	.word	0x40021000
 8007b68:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ea      	bne.n	8007b4e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d040      	beq.n	8007c06 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCC_OscConfig+0x2ca>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d004      	beq.n	8007b9e <HAL_RCC_OscConfig+0x2ca>
 8007b94:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007b98:	4873      	ldr	r0, [pc, #460]	@ (8007d68 <HAL_RCC_OscConfig+0x494>)
 8007b9a:	f7fc fd93 	bl	80046c4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d019      	beq.n	8007bda <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ba6:	4b71      	ldr	r3, [pc, #452]	@ (8007d6c <HAL_RCC_OscConfig+0x498>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bac:	f7fd fe30 	bl	8005810 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb4:	f7fd fe2c 	bl	8005810 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e1ea      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc6:	4b67      	ldr	r3, [pc, #412]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0f0      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	f000 fc02 	bl	80083dc <RCC_Delay>
 8007bd8:	e015      	b.n	8007c06 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bda:	4b64      	ldr	r3, [pc, #400]	@ (8007d6c <HAL_RCC_OscConfig+0x498>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be0:	f7fd fe16 	bl	8005810 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007be8:	f7fd fe12 	bl	8005810 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e1d0      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80bf 	beq.w	8007d92 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c14:	2300      	movs	r3, #0
 8007c16:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <HAL_RCC_OscConfig+0x366>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d008      	beq.n	8007c3a <HAL_RCC_OscConfig+0x366>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	d004      	beq.n	8007c3a <HAL_RCC_OscConfig+0x366>
 8007c30:	f240 210f 	movw	r1, #527	@ 0x20f
 8007c34:	484c      	ldr	r0, [pc, #304]	@ (8007d68 <HAL_RCC_OscConfig+0x494>)
 8007c36:	f7fc fd45 	bl	80046c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10d      	bne.n	8007c62 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c46:	4b47      	ldr	r3, [pc, #284]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	4a46      	ldr	r2, [pc, #280]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c50:	61d3      	str	r3, [r2, #28]
 8007c52:	4b44      	ldr	r3, [pc, #272]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c5a:	60bb      	str	r3, [r7, #8]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c62:	4b43      	ldr	r3, [pc, #268]	@ (8007d70 <HAL_RCC_OscConfig+0x49c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d118      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c6e:	4b40      	ldr	r3, [pc, #256]	@ (8007d70 <HAL_RCC_OscConfig+0x49c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a3f      	ldr	r2, [pc, #252]	@ (8007d70 <HAL_RCC_OscConfig+0x49c>)
 8007c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c7a:	f7fd fdc9 	bl	8005810 <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c82:	f7fd fdc5 	bl	8005810 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b64      	cmp	r3, #100	@ 0x64
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e183      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c94:	4b36      	ldr	r3, [pc, #216]	@ (8007d70 <HAL_RCC_OscConfig+0x49c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x3e2>
 8007ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	4a2d      	ldr	r2, [pc, #180]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	6213      	str	r3, [r2, #32]
 8007cb4:	e02d      	b.n	8007d12 <HAL_RCC_OscConfig+0x43e>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10c      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x404>
 8007cbe:	4b29      	ldr	r3, [pc, #164]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	4a28      	ldr	r2, [pc, #160]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	6213      	str	r3, [r2, #32]
 8007cca:	4b26      	ldr	r3, [pc, #152]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	4a25      	ldr	r2, [pc, #148]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	6213      	str	r3, [r2, #32]
 8007cd6:	e01c      	b.n	8007d12 <HAL_RCC_OscConfig+0x43e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d10c      	bne.n	8007cfa <HAL_RCC_OscConfig+0x426>
 8007ce0:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007ce6:	f043 0304 	orr.w	r3, r3, #4
 8007cea:	6213      	str	r3, [r2, #32]
 8007cec:	4b1d      	ldr	r3, [pc, #116]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	6213      	str	r3, [r2, #32]
 8007cf8:	e00b      	b.n	8007d12 <HAL_RCC_OscConfig+0x43e>
 8007cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	4a19      	ldr	r2, [pc, #100]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	6213      	str	r3, [r2, #32]
 8007d06:	4b17      	ldr	r3, [pc, #92]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	4a16      	ldr	r2, [pc, #88]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007d0c:	f023 0304 	bic.w	r3, r3, #4
 8007d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d1a:	f7fd fd79 	bl	8005810 <HAL_GetTick>
 8007d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d20:	e00a      	b.n	8007d38 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d22:	f7fd fd75 	bl	8005810 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e131      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d38:	4b0a      	ldr	r3, [pc, #40]	@ (8007d64 <HAL_RCC_OscConfig+0x490>)
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0ee      	beq.n	8007d22 <HAL_RCC_OscConfig+0x44e>
 8007d44:	e01c      	b.n	8007d80 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d46:	f7fd fd63 	bl	8005810 <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4c:	e012      	b.n	8007d74 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4e:	f7fd fd5f 	bl	8005810 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d909      	bls.n	8007d74 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e11b      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
 8007d64:	40021000 	.word	0x40021000
 8007d68:	080100cc 	.word	0x080100cc
 8007d6c:	42420480 	.word	0x42420480
 8007d70:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d74:	4b8b      	ldr	r3, [pc, #556]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e6      	bne.n	8007d4e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d105      	bne.n	8007d92 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d86:	4b87      	ldr	r3, [pc, #540]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	4a86      	ldr	r2, [pc, #536]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d90:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00c      	beq.n	8007db4 <HAL_RCC_OscConfig+0x4e0>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d008      	beq.n	8007db4 <HAL_RCC_OscConfig+0x4e0>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d004      	beq.n	8007db4 <HAL_RCC_OscConfig+0x4e0>
 8007daa:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8007dae:	487e      	ldr	r0, [pc, #504]	@ (8007fa8 <HAL_RCC_OscConfig+0x6d4>)
 8007db0:	f7fc fc88 	bl	80046c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80ee 	beq.w	8007f9a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dbe:	4b79      	ldr	r3, [pc, #484]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	f000 80ce 	beq.w	8007f68 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f040 80b2 	bne.w	8007f3a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <HAL_RCC_OscConfig+0x51e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de6:	d004      	beq.n	8007df2 <HAL_RCC_OscConfig+0x51e>
 8007de8:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8007dec:	486e      	ldr	r0, [pc, #440]	@ (8007fa8 <HAL_RCC_OscConfig+0x6d4>)
 8007dee:	f7fc fc69 	bl	80046c4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d04a      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e02:	d045      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e0c:	d040      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007e16:	d03b      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e20:	d036      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007e2a:	d031      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e34:	d02c      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8007e3e:	d027      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e48:	d022      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8007e52:	d01d      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007e5c:	d018      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e62:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8007e66:	d013      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e70:	d00e      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8007e7a:	d009      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8007e84:	d004      	beq.n	8007e90 <HAL_RCC_OscConfig+0x5bc>
 8007e86:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8007e8a:	4847      	ldr	r0, [pc, #284]	@ (8007fa8 <HAL_RCC_OscConfig+0x6d4>)
 8007e8c:	f7fc fc1a 	bl	80046c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e90:	4b46      	ldr	r3, [pc, #280]	@ (8007fac <HAL_RCC_OscConfig+0x6d8>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e96:	f7fd fcbb 	bl	8005810 <HAL_GetTick>
 8007e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e9c:	e008      	b.n	8007eb0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9e:	f7fd fcb7 	bl	8005810 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d901      	bls.n	8007eb0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e075      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1f0      	bne.n	8007e9e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec4:	d116      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x60e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ed6:	d004      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x60e>
 8007ed8:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8007edc:	4832      	ldr	r0, [pc, #200]	@ (8007fa8 <HAL_RCC_OscConfig+0x6d4>)
 8007ede:	f7fc fbf1 	bl	80046c4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007ee2:	4b30      	ldr	r3, [pc, #192]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	492d      	ldr	r1, [pc, #180]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a19      	ldr	r1, [r3, #32]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	430b      	orrs	r3, r1
 8007f06:	4927      	ldr	r1, [pc, #156]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f0c:	4b27      	ldr	r3, [pc, #156]	@ (8007fac <HAL_RCC_OscConfig+0x6d8>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f12:	f7fd fc7d 	bl	8005810 <HAL_GetTick>
 8007f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1a:	f7fd fc79 	bl	8005810 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e037      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0f0      	beq.n	8007f1a <HAL_RCC_OscConfig+0x646>
 8007f38:	e02f      	b.n	8007f9a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fac <HAL_RCC_OscConfig+0x6d8>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f40:	f7fd fc66 	bl	8005810 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fd fc62 	bl	8005810 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e020      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f5a:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f0      	bne.n	8007f48 <HAL_RCC_OscConfig+0x674>
 8007f66:	e018      	b.n	8007f9a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e013      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f74:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <HAL_RCC_OscConfig+0x6d0>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d106      	bne.n	8007f96 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d001      	beq.n	8007f9a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	080100cc 	.word	0x080100cc
 8007fac:	42420060 	.word	0x42420060

08007fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e176      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d116      	bne.n	8007ffe <HAL_RCC_ClockConfig+0x4e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d110      	bne.n	8007ffe <HAL_RCC_ClockConfig+0x4e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <HAL_RCC_ClockConfig+0x4e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <HAL_RCC_ClockConfig+0x4e>
 8007ff4:	f240 3136 	movw	r1, #822	@ 0x336
 8007ff8:	4874      	ldr	r0, [pc, #464]	@ (80081cc <HAL_RCC_ClockConfig+0x21c>)
 8007ffa:	f7fc fb63 	bl	80046c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_RCC_ClockConfig+0x6a>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d007      	beq.n	800801a <HAL_RCC_ClockConfig+0x6a>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d004      	beq.n	800801a <HAL_RCC_ClockConfig+0x6a>
 8008010:	f240 3137 	movw	r1, #823	@ 0x337
 8008014:	486d      	ldr	r0, [pc, #436]	@ (80081cc <HAL_RCC_ClockConfig+0x21c>)
 8008016:	f7fc fb55 	bl	80046c4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800801a:	4b6d      	ldr	r3, [pc, #436]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d910      	bls.n	800804a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008028:	4b69      	ldr	r3, [pc, #420]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f023 0207 	bic.w	r2, r3, #7
 8008030:	4967      	ldr	r1, [pc, #412]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	4313      	orrs	r3, r2
 8008036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008038:	4b65      	ldr	r3, [pc, #404]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d001      	beq.n	800804a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e133      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d049      	beq.n	80080ea <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008062:	4b5c      	ldr	r3, [pc, #368]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	4a5b      	ldr	r2, [pc, #364]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 8008068:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800806c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800807a:	4b56      	ldr	r3, [pc, #344]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4a55      	ldr	r2, [pc, #340]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 8008080:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008084:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d024      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b80      	cmp	r3, #128	@ 0x80
 8008094:	d020      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2b90      	cmp	r3, #144	@ 0x90
 800809c:	d01c      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80080a4:	d018      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	2bb0      	cmp	r3, #176	@ 0xb0
 80080ac:	d014      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080b4:	d010      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2bd0      	cmp	r3, #208	@ 0xd0
 80080bc:	d00c      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2be0      	cmp	r3, #224	@ 0xe0
 80080c4:	d008      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80080cc:	d004      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x128>
 80080ce:	f240 315d 	movw	r1, #861	@ 0x35d
 80080d2:	483e      	ldr	r0, [pc, #248]	@ (80081cc <HAL_RCC_ClockConfig+0x21c>)
 80080d4:	f7fc faf6 	bl	80046c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d8:	4b3e      	ldr	r3, [pc, #248]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	493b      	ldr	r1, [pc, #236]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d051      	beq.n	800819a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <HAL_RCC_ClockConfig+0x168>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d008      	beq.n	8008118 <HAL_RCC_ClockConfig+0x168>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d004      	beq.n	8008118 <HAL_RCC_ClockConfig+0x168>
 800810e:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8008112:	482e      	ldr	r0, [pc, #184]	@ (80081cc <HAL_RCC_ClockConfig+0x21c>)
 8008114:	f7fc fad6 	bl	80046c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d107      	bne.n	8008130 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008120:	4b2c      	ldr	r3, [pc, #176]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d115      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e0c0      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d107      	bne.n	8008148 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008138:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0b4      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008148:	4b22      	ldr	r3, [pc, #136]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0ac      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008158:	4b1e      	ldr	r3, [pc, #120]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f023 0203 	bic.w	r2, r3, #3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	491b      	ldr	r1, [pc, #108]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800816a:	f7fd fb51 	bl	8005810 <HAL_GetTick>
 800816e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008170:	e00a      	b.n	8008188 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008172:	f7fd fb4d 	bl	8005810 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008180:	4293      	cmp	r3, r2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e094      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008188:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <HAL_RCC_ClockConfig+0x224>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f003 020c 	and.w	r2, r3, #12
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	429a      	cmp	r2, r3
 8008198:	d1eb      	bne.n	8008172 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d217      	bcs.n	80081d8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a8:	4b09      	ldr	r3, [pc, #36]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f023 0207 	bic.w	r2, r3, #7
 80081b0:	4907      	ldr	r1, [pc, #28]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b8:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_ClockConfig+0x220>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d008      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e073      	b.n	80082b2 <HAL_RCC_ClockConfig+0x302>
 80081ca:	bf00      	nop
 80081cc:	080100cc 	.word	0x080100cc
 80081d0:	40022000 	.word	0x40022000
 80081d4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d025      	beq.n	8008230 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d018      	beq.n	800821e <HAL_RCC_ClockConfig+0x26e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f4:	d013      	beq.n	800821e <HAL_RCC_ClockConfig+0x26e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80081fe:	d00e      	beq.n	800821e <HAL_RCC_ClockConfig+0x26e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008208:	d009      	beq.n	800821e <HAL_RCC_ClockConfig+0x26e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008212:	d004      	beq.n	800821e <HAL_RCC_ClockConfig+0x26e>
 8008214:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8008218:	4828      	ldr	r0, [pc, #160]	@ (80082bc <HAL_RCC_ClockConfig+0x30c>)
 800821a:	f7fc fa53 	bl	80046c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800821e:	4b28      	ldr	r3, [pc, #160]	@ (80082c0 <HAL_RCC_ClockConfig+0x310>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	4925      	ldr	r1, [pc, #148]	@ (80082c0 <HAL_RCC_ClockConfig+0x310>)
 800822c:	4313      	orrs	r3, r2
 800822e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d026      	beq.n	800828a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d018      	beq.n	8008276 <HAL_RCC_ClockConfig+0x2c6>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800824c:	d013      	beq.n	8008276 <HAL_RCC_ClockConfig+0x2c6>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008256:	d00e      	beq.n	8008276 <HAL_RCC_ClockConfig+0x2c6>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008260:	d009      	beq.n	8008276 <HAL_RCC_ClockConfig+0x2c6>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800826a:	d004      	beq.n	8008276 <HAL_RCC_ClockConfig+0x2c6>
 800826c:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8008270:	4812      	ldr	r0, [pc, #72]	@ (80082bc <HAL_RCC_ClockConfig+0x30c>)
 8008272:	f7fc fa27 	bl	80046c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008276:	4b12      	ldr	r3, [pc, #72]	@ (80082c0 <HAL_RCC_ClockConfig+0x310>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	490e      	ldr	r1, [pc, #56]	@ (80082c0 <HAL_RCC_ClockConfig+0x310>)
 8008286:	4313      	orrs	r3, r2
 8008288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800828a:	f000 f821 	bl	80082d0 <HAL_RCC_GetSysClockFreq>
 800828e:	4602      	mov	r2, r0
 8008290:	4b0b      	ldr	r3, [pc, #44]	@ (80082c0 <HAL_RCC_ClockConfig+0x310>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	091b      	lsrs	r3, r3, #4
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	490a      	ldr	r1, [pc, #40]	@ (80082c4 <HAL_RCC_ClockConfig+0x314>)
 800829c:	5ccb      	ldrb	r3, [r1, r3]
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	4a09      	ldr	r2, [pc, #36]	@ (80082c8 <HAL_RCC_ClockConfig+0x318>)
 80082a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <HAL_RCC_ClockConfig+0x31c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd fa6e 	bl	800578c <HAL_InitTick>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	080100cc 	.word	0x080100cc
 80082c0:	40021000 	.word	0x40021000
 80082c4:	080109d0 	.word	0x080109d0
 80082c8:	20000038 	.word	0x20000038
 80082cc:	2000003c 	.word	0x2000003c

080082d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	2300      	movs	r3, #0
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	2300      	movs	r3, #0
 80082e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80082ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008364 <HAL_RCC_GetSysClockFreq+0x94>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f003 030c 	and.w	r3, r3, #12
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d002      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0x30>
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d003      	beq.n	8008306 <HAL_RCC_GetSysClockFreq+0x36>
 80082fe:	e027      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008300:	4b19      	ldr	r3, [pc, #100]	@ (8008368 <HAL_RCC_GetSysClockFreq+0x98>)
 8008302:	613b      	str	r3, [r7, #16]
      break;
 8008304:	e027      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	0c9b      	lsrs	r3, r3, #18
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	4a17      	ldr	r2, [pc, #92]	@ (800836c <HAL_RCC_GetSysClockFreq+0x9c>)
 8008310:	5cd3      	ldrb	r3, [r2, r3]
 8008312:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d010      	beq.n	8008340 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800831e:	4b11      	ldr	r3, [pc, #68]	@ (8008364 <HAL_RCC_GetSysClockFreq+0x94>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	0c5b      	lsrs	r3, r3, #17
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	4a11      	ldr	r2, [pc, #68]	@ (8008370 <HAL_RCC_GetSysClockFreq+0xa0>)
 800832a:	5cd3      	ldrb	r3, [r2, r3]
 800832c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a0d      	ldr	r2, [pc, #52]	@ (8008368 <HAL_RCC_GetSysClockFreq+0x98>)
 8008332:	fb03 f202 	mul.w	r2, r3, r2
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	fbb2 f3f3 	udiv	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e004      	b.n	800834a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a0c      	ldr	r2, [pc, #48]	@ (8008374 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008344:	fb02 f303 	mul.w	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	613b      	str	r3, [r7, #16]
      break;
 800834e:	e002      	b.n	8008356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <HAL_RCC_GetSysClockFreq+0x98>)
 8008352:	613b      	str	r3, [r7, #16]
      break;
 8008354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008356:	693b      	ldr	r3, [r7, #16]
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40021000 	.word	0x40021000
 8008368:	007a1200 	.word	0x007a1200
 800836c:	080109e8 	.word	0x080109e8
 8008370:	080109f8 	.word	0x080109f8
 8008374:	003d0900 	.word	0x003d0900

08008378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800837c:	4b02      	ldr	r3, [pc, #8]	@ (8008388 <HAL_RCC_GetHCLKFreq+0x10>)
 800837e:	681b      	ldr	r3, [r3, #0]
}
 8008380:	4618      	mov	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr
 8008388:	20000038 	.word	0x20000038

0800838c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008390:	f7ff fff2 	bl	8008378 <HAL_RCC_GetHCLKFreq>
 8008394:	4602      	mov	r2, r0
 8008396:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	4903      	ldr	r1, [pc, #12]	@ (80083b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083a2:	5ccb      	ldrb	r3, [r1, r3]
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40021000 	.word	0x40021000
 80083b0:	080109e0 	.word	0x080109e0

080083b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083b8:	f7ff ffde 	bl	8008378 <HAL_RCC_GetHCLKFreq>
 80083bc:	4602      	mov	r2, r0
 80083be:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	0adb      	lsrs	r3, r3, #11
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	4903      	ldr	r1, [pc, #12]	@ (80083d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083ca:	5ccb      	ldrb	r3, [r1, r3]
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40021000 	.word	0x40021000
 80083d8:	080109e0 	.word	0x080109e0

080083dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80083e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008410 <RCC_Delay+0x34>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008414 <RCC_Delay+0x38>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	0a5b      	lsrs	r3, r3, #9
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
 80083f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80083f8:	bf00      	nop
  }
  while (Delay --);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1e5a      	subs	r2, r3, #1
 80083fe:	60fa      	str	r2, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f9      	bne.n	80083f8 <RCC_Delay+0x1c>
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr
 8008410:	20000038 	.word	0x20000038
 8008414:	10624dd3 	.word	0x10624dd3

08008418 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11b      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d115      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0310 	and.w	r3, r3, #16
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008464:	216a      	movs	r1, #106	@ 0x6a
 8008466:	4873      	ldr	r0, [pc, #460]	@ (8008634 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8008468:	f7fc f92c 	bl	80046c4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8095 	beq.w	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 800847a:	2300      	movs	r3, #0
 800847c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d012      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800848e:	d00d      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008498:	d008      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 80084a4:	2172      	movs	r1, #114	@ 0x72
 80084a6:	4863      	ldr	r0, [pc, #396]	@ (8008634 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80084a8:	f7fc f90c 	bl	80046c4 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ac:	4b62      	ldr	r3, [pc, #392]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10d      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084b8:	4b5f      	ldr	r3, [pc, #380]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	4a5e      	ldr	r2, [pc, #376]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80084be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084c2:	61d3      	str	r3, [r2, #28]
 80084c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d4:	4b59      	ldr	r3, [pc, #356]	@ (800863c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d118      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084e0:	4b56      	ldr	r3, [pc, #344]	@ (800863c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a55      	ldr	r2, [pc, #340]	@ (800863c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80084e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ec:	f7fd f990 	bl	8005810 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f2:	e008      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084f4:	f7fd f98c 	bl	8005810 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b64      	cmp	r3, #100	@ 0x64
 8008500:	d901      	bls.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e092      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008506:	4b4d      	ldr	r3, [pc, #308]	@ (800863c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008512:	4b49      	ldr	r3, [pc, #292]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d02e      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	429a      	cmp	r2, r3
 800852e:	d027      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008530:	4b41      	ldr	r3, [pc, #260]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800853a:	4b41      	ldr	r3, [pc, #260]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008540:	4b3f      	ldr	r3, [pc, #252]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008546:	4a3c      	ldr	r2, [pc, #240]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d014      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008556:	f7fd f95b 	bl	8005810 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855c:	e00a      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800855e:	f7fd f957 	bl	8005810 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e05b      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008574:	4b30      	ldr	r3, [pc, #192]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0ee      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008580:	4b2d      	ldr	r3, [pc, #180]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	492a      	ldr	r1, [pc, #168]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800858e:	4313      	orrs	r3, r2
 8008590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d105      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008598:	4b27      	ldr	r3, [pc, #156]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	4a26      	ldr	r2, [pc, #152]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800859e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01f      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085c0:	d00d      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ca:	d008      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085d4:	d003      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80085d6:	21b7      	movs	r1, #183	@ 0xb7
 80085d8:	4816      	ldr	r0, [pc, #88]	@ (8008634 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80085da:	f7fc f873 	bl	80046c4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085de:	4b16      	ldr	r3, [pc, #88]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4913      	ldr	r1, [pc, #76]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d016      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008604:	d008      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800860e:	f240 1113 	movw	r1, #275	@ 0x113
 8008612:	4808      	ldr	r0, [pc, #32]	@ (8008634 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8008614:	f7fc f856 	bl	80046c4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008618:	4b07      	ldr	r3, [pc, #28]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	4904      	ldr	r1, [pc, #16]	@ (8008638 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8008626:	4313      	orrs	r3, r2
 8008628:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	08010104 	.word	0x08010104
 8008638:	40021000 	.word	0x40021000
 800863c:	40007000 	.word	0x40007000
 8008640:	42420440 	.word	0x42420440

08008644 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	2300      	movs	r3, #0
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d118      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d113      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10e      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008692:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8008696:	4860      	ldr	r0, [pc, #384]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8008698:	f7fc f814 	bl	80046c4 <assert_failed>

  switch (PeriphClk)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3b01      	subs	r3, #1
 80086a0:	2b0f      	cmp	r3, #15
 80086a2:	f200 80af 	bhi.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80086a6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	08008783 	.word	0x08008783
 80086b0:	080087e9 	.word	0x080087e9
 80086b4:	08008805 	.word	0x08008805
 80086b8:	08008773 	.word	0x08008773
 80086bc:	08008805 	.word	0x08008805
 80086c0:	08008805 	.word	0x08008805
 80086c4:	08008805 	.word	0x08008805
 80086c8:	0800877b 	.word	0x0800877b
 80086cc:	08008805 	.word	0x08008805
 80086d0:	08008805 	.word	0x08008805
 80086d4:	08008805 	.word	0x08008805
 80086d8:	08008805 	.word	0x08008805
 80086dc:	08008805 	.word	0x08008805
 80086e0:	08008805 	.word	0x08008805
 80086e4:	08008805 	.word	0x08008805
 80086e8:	080086ed 	.word	0x080086ed
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80086ec:	4b4b      	ldr	r3, [pc, #300]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80086f2:	4b4a      	ldr	r3, [pc, #296]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 8084 	beq.w	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0c9b      	lsrs	r3, r3, #18
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	4a45      	ldr	r2, [pc, #276]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800870a:	5cd3      	ldrb	r3, [r2, r3]
 800870c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d015      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008718:	4b40      	ldr	r3, [pc, #256]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	0c5b      	lsrs	r3, r3, #17
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	4a40      	ldr	r2, [pc, #256]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008732:	4a3d      	ldr	r2, [pc, #244]	@ (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	fbb2 f2f3 	udiv	r2, r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e004      	b.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4a39      	ldr	r2, [pc, #228]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 8008748:	fb02 f303 	mul.w	r3, r2, r3
 800874c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800874e:	4b33      	ldr	r3, [pc, #204]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800875a:	d102      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008760:	e052      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = (pllclk * 2) / 3;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4a32      	ldr	r2, [pc, #200]	@ (8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	61bb      	str	r3, [r7, #24]
      break;
 8008770:	e04a      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008772:	f7ff fdad 	bl	80082d0 <HAL_RCC_GetSysClockFreq>
 8008776:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008778:	e049      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800877a:	f7ff fda9 	bl	80082d0 <HAL_RCC_GetSysClockFreq>
 800877e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008780:	e045      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008782:	4b26      	ldr	r3, [pc, #152]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800878e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008792:	d108      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e01f      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b0:	d109      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80087b2:	4b1a      	ldr	r3, [pc, #104]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSI_VALUE;
 80087be:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	e00f      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d0:	d11c      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80087d2:	4b12      	ldr	r3, [pc, #72]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d016      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
      {
        frequency = HSE_VALUE / 128U;
 80087de:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80087e2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80087e4:	e012      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80087e6:	e011      	b.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80087e8:	f7ff fde4 	bl	80083b4 <HAL_RCC_GetPCLK2Freq>
 80087ec:	4602      	mov	r2, r0
 80087ee:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	0b9b      	lsrs	r3, r3, #14
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	3301      	adds	r3, #1
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	61bb      	str	r3, [r7, #24]
      break;
 8008802:	e004      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
    }
    default:
    {
      break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      break;
 800880c:	bf00      	nop
    }
  }
  return (frequency);
 800880e:	69bb      	ldr	r3, [r7, #24]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	08010104 	.word	0x08010104
 800881c:	40021000 	.word	0x40021000
 8008820:	080109fc 	.word	0x080109fc
 8008824:	08010a0c 	.word	0x08010a0c
 8008828:	007a1200 	.word	0x007a1200
 800882c:	003d0900 	.word	0x003d0900
 8008830:	aaaaaaab 	.word	0xaaaaaaab

08008834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e0b5      	b.n	80089b2 <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a5c      	ldr	r2, [pc, #368]	@ (80089bc <HAL_TIM_Base_Init+0x188>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d027      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a5a      	ldr	r2, [pc, #360]	@ (80089c0 <HAL_TIM_Base_Init+0x18c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d022      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008862:	d01d      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a56      	ldr	r2, [pc, #344]	@ (80089c4 <HAL_TIM_Base_Init+0x190>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d018      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a55      	ldr	r2, [pc, #340]	@ (80089c8 <HAL_TIM_Base_Init+0x194>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d013      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a53      	ldr	r2, [pc, #332]	@ (80089cc <HAL_TIM_Base_Init+0x198>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00e      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a52      	ldr	r2, [pc, #328]	@ (80089d0 <HAL_TIM_Base_Init+0x19c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d009      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a50      	ldr	r2, [pc, #320]	@ (80089d4 <HAL_TIM_Base_Init+0x1a0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d004      	beq.n	80088a0 <HAL_TIM_Base_Init+0x6c>
 8008896:	f240 1113 	movw	r1, #275	@ 0x113
 800889a:	484f      	ldr	r0, [pc, #316]	@ (80089d8 <HAL_TIM_Base_Init+0x1a4>)
 800889c:	f7fb ff12 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d014      	beq.n	80088d2 <HAL_TIM_Base_Init+0x9e>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	d010      	beq.n	80088d2 <HAL_TIM_Base_Init+0x9e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d00c      	beq.n	80088d2 <HAL_TIM_Base_Init+0x9e>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b40      	cmp	r3, #64	@ 0x40
 80088be:	d008      	beq.n	80088d2 <HAL_TIM_Base_Init+0x9e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b60      	cmp	r3, #96	@ 0x60
 80088c6:	d004      	beq.n	80088d2 <HAL_TIM_Base_Init+0x9e>
 80088c8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80088cc:	4842      	ldr	r0, [pc, #264]	@ (80089d8 <HAL_TIM_Base_Init+0x1a4>)
 80088ce:	f7fb fef9 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00e      	beq.n	80088f8 <HAL_TIM_Base_Init+0xc4>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e2:	d009      	beq.n	80088f8 <HAL_TIM_Base_Init+0xc4>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ec:	d004      	beq.n	80088f8 <HAL_TIM_Base_Init+0xc4>
 80088ee:	f240 1115 	movw	r1, #277	@ 0x115
 80088f2:	4839      	ldr	r0, [pc, #228]	@ (80089d8 <HAL_TIM_Base_Init+0x1a4>)
 80088f4:	f7fb fee6 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <HAL_TIM_Base_Init+0xd6>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008908:	d304      	bcc.n	8008914 <HAL_TIM_Base_Init+0xe0>
 800890a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800890e:	4832      	ldr	r0, [pc, #200]	@ (80089d8 <HAL_TIM_Base_Init+0x1a4>)
 8008910:	f7fb fed8 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d008      	beq.n	800892e <HAL_TIM_Base_Init+0xfa>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	2b80      	cmp	r3, #128	@ 0x80
 8008922:	d004      	beq.n	800892e <HAL_TIM_Base_Init+0xfa>
 8008924:	f240 1117 	movw	r1, #279	@ 0x117
 8008928:	482b      	ldr	r0, [pc, #172]	@ (80089d8 <HAL_TIM_Base_Init+0x1a4>)
 800892a:	f7fb fecb 	bl	80046c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fc fb46 	bl	8004fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f001 fb1c 	bl	8009f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	40012c00 	.word	0x40012c00
 80089c0:	40013400 	.word	0x40013400
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00
 80089d0:	40001000 	.word	0x40001000
 80089d4:	40001400 	.word	0x40001400
 80089d8:	08010140 	.word	0x08010140

080089dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a3d      	ldr	r2, [pc, #244]	@ (8008ae0 <HAL_TIM_Base_Start_IT+0x104>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d027      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a3c      	ldr	r2, [pc, #240]	@ (8008ae4 <HAL_TIM_Base_Start_IT+0x108>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d022      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a00:	d01d      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a38      	ldr	r2, [pc, #224]	@ (8008ae8 <HAL_TIM_Base_Start_IT+0x10c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d018      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a36      	ldr	r2, [pc, #216]	@ (8008aec <HAL_TIM_Base_Start_IT+0x110>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d013      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a35      	ldr	r2, [pc, #212]	@ (8008af0 <HAL_TIM_Base_Start_IT+0x114>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00e      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a33      	ldr	r2, [pc, #204]	@ (8008af4 <HAL_TIM_Base_Start_IT+0x118>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d009      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a32      	ldr	r2, [pc, #200]	@ (8008af8 <HAL_TIM_Base_Start_IT+0x11c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d004      	beq.n	8008a3e <HAL_TIM_Base_Start_IT+0x62>
 8008a34:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8008a38:	4830      	ldr	r0, [pc, #192]	@ (8008afc <HAL_TIM_Base_Start_IT+0x120>)
 8008a3a:	f7fb fe43 	bl	80046c4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d001      	beq.n	8008a4e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e044      	b.n	8008ad8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae0 <HAL_TIM_Base_Start_IT+0x104>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <HAL_TIM_Base_Start_IT+0xc6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae4 <HAL_TIM_Base_Start_IT+0x108>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <HAL_TIM_Base_Start_IT+0xc6>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a82:	d00e      	beq.n	8008aa2 <HAL_TIM_Base_Start_IT+0xc6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a17      	ldr	r2, [pc, #92]	@ (8008ae8 <HAL_TIM_Base_Start_IT+0x10c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <HAL_TIM_Base_Start_IT+0xc6>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a16      	ldr	r2, [pc, #88]	@ (8008aec <HAL_TIM_Base_Start_IT+0x110>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <HAL_TIM_Base_Start_IT+0xc6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a14      	ldr	r2, [pc, #80]	@ (8008af0 <HAL_TIM_Base_Start_IT+0x114>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d111      	bne.n	8008ac6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	d010      	beq.n	8008ad6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac4:	e007      	b.n	8008ad6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0201 	orr.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40013400 	.word	0x40013400
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40001000 	.word	0x40001000
 8008af8:	40001400 	.word	0x40001400
 8008afc:	08010140 	.word	0x08010140

08008b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0b5      	b.n	8008c7e <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a5c      	ldr	r2, [pc, #368]	@ (8008c88 <HAL_TIM_PWM_Init+0x188>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d027      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a5a      	ldr	r2, [pc, #360]	@ (8008c8c <HAL_TIM_PWM_Init+0x18c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d022      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b2e:	d01d      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a56      	ldr	r2, [pc, #344]	@ (8008c90 <HAL_TIM_PWM_Init+0x190>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d018      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a55      	ldr	r2, [pc, #340]	@ (8008c94 <HAL_TIM_PWM_Init+0x194>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d013      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a53      	ldr	r2, [pc, #332]	@ (8008c98 <HAL_TIM_PWM_Init+0x198>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00e      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a52      	ldr	r2, [pc, #328]	@ (8008c9c <HAL_TIM_PWM_Init+0x19c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a50      	ldr	r2, [pc, #320]	@ (8008ca0 <HAL_TIM_PWM_Init+0x1a0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d004      	beq.n	8008b6c <HAL_TIM_PWM_Init+0x6c>
 8008b62:	f240 512c 	movw	r1, #1324	@ 0x52c
 8008b66:	484f      	ldr	r0, [pc, #316]	@ (8008ca4 <HAL_TIM_PWM_Init+0x1a4>)
 8008b68:	f7fb fdac 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d014      	beq.n	8008b9e <HAL_TIM_PWM_Init+0x9e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d010      	beq.n	8008b9e <HAL_TIM_PWM_Init+0x9e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d00c      	beq.n	8008b9e <HAL_TIM_PWM_Init+0x9e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d008      	beq.n	8008b9e <HAL_TIM_PWM_Init+0x9e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b60      	cmp	r3, #96	@ 0x60
 8008b92:	d004      	beq.n	8008b9e <HAL_TIM_PWM_Init+0x9e>
 8008b94:	f240 512d 	movw	r1, #1325	@ 0x52d
 8008b98:	4842      	ldr	r0, [pc, #264]	@ (8008ca4 <HAL_TIM_PWM_Init+0x1a4>)
 8008b9a:	f7fb fd93 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_TIM_PWM_Init+0xc4>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bae:	d009      	beq.n	8008bc4 <HAL_TIM_PWM_Init+0xc4>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIM_PWM_Init+0xc4>
 8008bba:	f240 512e 	movw	r1, #1326	@ 0x52e
 8008bbe:	4839      	ldr	r0, [pc, #228]	@ (8008ca4 <HAL_TIM_PWM_Init+0x1a4>)
 8008bc0:	f7fb fd80 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_TIM_PWM_Init+0xd6>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bd4:	d304      	bcc.n	8008be0 <HAL_TIM_PWM_Init+0xe0>
 8008bd6:	f240 512f 	movw	r1, #1327	@ 0x52f
 8008bda:	4832      	ldr	r0, [pc, #200]	@ (8008ca4 <HAL_TIM_PWM_Init+0x1a4>)
 8008bdc:	f7fb fd72 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <HAL_TIM_PWM_Init+0xfa>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	2b80      	cmp	r3, #128	@ 0x80
 8008bee:	d004      	beq.n	8008bfa <HAL_TIM_PWM_Init+0xfa>
 8008bf0:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8008bf4:	482b      	ldr	r0, [pc, #172]	@ (8008ca4 <HAL_TIM_PWM_Init+0x1a4>)
 8008bf6:	f7fb fd65 	bl	80046c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f84a 	bl	8008ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f001 f9b6 	bl	8009f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40000800 	.word	0x40000800
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	40001000 	.word	0x40001000
 8008ca0:	40001400 	.word	0x40001400
 8008ca4:	08010140 	.word	0x08010140

08008ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr
	...

08008cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a8a      	ldr	r2, [pc, #552]	@ (8008ef4 <HAL_TIM_PWM_Start+0x238>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10b      	bne.n	8008ce8 <HAL_TIM_PWM_Start+0x2c>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d062      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d05f      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b08      	cmp	r3, #8
 8008ce0:	d05c      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b0c      	cmp	r3, #12
 8008ce6:	d059      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a82      	ldr	r2, [pc, #520]	@ (8008ef8 <HAL_TIM_PWM_Start+0x23c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10b      	bne.n	8008d0a <HAL_TIM_PWM_Start+0x4e>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d051      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d04e      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d04b      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b0c      	cmp	r3, #12
 8008d08:	d048      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d12:	d10b      	bne.n	8008d2c <HAL_TIM_PWM_Start+0x70>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d040      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d03d      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d03a      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b0c      	cmp	r3, #12
 8008d2a:	d037      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a72      	ldr	r2, [pc, #456]	@ (8008efc <HAL_TIM_PWM_Start+0x240>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d10b      	bne.n	8008d4e <HAL_TIM_PWM_Start+0x92>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d02f      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d02c      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d029      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b0c      	cmp	r3, #12
 8008d4c:	d026      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a6b      	ldr	r2, [pc, #428]	@ (8008f00 <HAL_TIM_PWM_Start+0x244>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d10b      	bne.n	8008d70 <HAL_TIM_PWM_Start+0xb4>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01e      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d01b      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d018      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b0c      	cmp	r3, #12
 8008d6e:	d015      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a63      	ldr	r2, [pc, #396]	@ (8008f04 <HAL_TIM_PWM_Start+0x248>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d10b      	bne.n	8008d92 <HAL_TIM_PWM_Start+0xd6>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00d      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d00a      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d007      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b0c      	cmp	r3, #12
 8008d90:	d004      	beq.n	8008d9c <HAL_TIM_PWM_Start+0xe0>
 8008d92:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8008d96:	485c      	ldr	r0, [pc, #368]	@ (8008f08 <HAL_TIM_PWM_Start+0x24c>)
 8008d98:	f7fb fc94 	bl	80046c4 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <HAL_TIM_PWM_Start+0xfa>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	bf14      	ite	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	2300      	moveq	r3, #0
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	e022      	b.n	8008dfc <HAL_TIM_PWM_Start+0x140>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d109      	bne.n	8008dd0 <HAL_TIM_PWM_Start+0x114>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	bf14      	ite	ne
 8008dc8:	2301      	movne	r3, #1
 8008dca:	2300      	moveq	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	e015      	b.n	8008dfc <HAL_TIM_PWM_Start+0x140>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d109      	bne.n	8008dea <HAL_TIM_PWM_Start+0x12e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	bf14      	ite	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	2300      	moveq	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e008      	b.n	8008dfc <HAL_TIM_PWM_Start+0x140>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	bf14      	ite	ne
 8008df6:	2301      	movne	r3, #1
 8008df8:	2300      	moveq	r3, #0
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e072      	b.n	8008eea <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_TIM_PWM_Start+0x158>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e12:	e013      	b.n	8008e3c <HAL_TIM_PWM_Start+0x180>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d104      	bne.n	8008e24 <HAL_TIM_PWM_Start+0x168>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e22:	e00b      	b.n	8008e3c <HAL_TIM_PWM_Start+0x180>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b08      	cmp	r3, #8
 8008e28:	d104      	bne.n	8008e34 <HAL_TIM_PWM_Start+0x178>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e32:	e003      	b.n	8008e3c <HAL_TIM_PWM_Start+0x180>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2201      	movs	r2, #1
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 fbf1 	bl	800a62c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a29      	ldr	r2, [pc, #164]	@ (8008ef4 <HAL_TIM_PWM_Start+0x238>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d004      	beq.n	8008e5e <HAL_TIM_PWM_Start+0x1a2>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a27      	ldr	r2, [pc, #156]	@ (8008ef8 <HAL_TIM_PWM_Start+0x23c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d101      	bne.n	8008e62 <HAL_TIM_PWM_Start+0x1a6>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e000      	b.n	8008e64 <HAL_TIM_PWM_Start+0x1a8>
 8008e62:	2300      	movs	r3, #0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef4 <HAL_TIM_PWM_Start+0x238>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d018      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1f8>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef8 <HAL_TIM_PWM_Start+0x23c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d013      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1f8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e94:	d00e      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1f8>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a18      	ldr	r2, [pc, #96]	@ (8008efc <HAL_TIM_PWM_Start+0x240>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d009      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1f8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a16      	ldr	r2, [pc, #88]	@ (8008f00 <HAL_TIM_PWM_Start+0x244>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d004      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1f8>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a15      	ldr	r2, [pc, #84]	@ (8008f04 <HAL_TIM_PWM_Start+0x248>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d111      	bne.n	8008ed8 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b06      	cmp	r3, #6
 8008ec4:	d010      	beq.n	8008ee8 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed6:	e007      	b.n	8008ee8 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	08010140 	.word	0x08010140

08008f0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e194      	b.n	800924a <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a7f      	ldr	r2, [pc, #508]	@ (8009124 <HAL_TIM_Encoder_Init+0x218>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d01d      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009128 <HAL_TIM_Encoder_Init+0x21c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d018      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3c:	d013      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a7a      	ldr	r2, [pc, #488]	@ (800912c <HAL_TIM_Encoder_Init+0x220>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00e      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a78      	ldr	r2, [pc, #480]	@ (8009130 <HAL_TIM_Encoder_Init+0x224>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d009      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a77      	ldr	r2, [pc, #476]	@ (8009134 <HAL_TIM_Encoder_Init+0x228>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d004      	beq.n	8008f66 <HAL_TIM_Encoder_Init+0x5a>
 8008f5c:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8008f60:	4875      	ldr	r0, [pc, #468]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8008f62:	f7fb fbaf 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d014      	beq.n	8008f98 <HAL_TIM_Encoder_Init+0x8c>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	d010      	beq.n	8008f98 <HAL_TIM_Encoder_Init+0x8c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d00c      	beq.n	8008f98 <HAL_TIM_Encoder_Init+0x8c>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2b40      	cmp	r3, #64	@ 0x40
 8008f84:	d008      	beq.n	8008f98 <HAL_TIM_Encoder_Init+0x8c>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	2b60      	cmp	r3, #96	@ 0x60
 8008f8c:	d004      	beq.n	8008f98 <HAL_TIM_Encoder_Init+0x8c>
 8008f8e:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 8008f92:	4869      	ldr	r0, [pc, #420]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8008f94:	f7fb fb96 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00e      	beq.n	8008fbe <HAL_TIM_Encoder_Init+0xb2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa8:	d009      	beq.n	8008fbe <HAL_TIM_Encoder_Init+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb2:	d004      	beq.n	8008fbe <HAL_TIM_Encoder_Init+0xb2>
 8008fb4:	f640 31da 	movw	r1, #3034	@ 0xbda
 8008fb8:	485f      	ldr	r0, [pc, #380]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8008fba:	f7fb fb83 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_TIM_Encoder_Init+0xcc>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	2b80      	cmp	r3, #128	@ 0x80
 8008fcc:	d004      	beq.n	8008fd8 <HAL_TIM_Encoder_Init+0xcc>
 8008fce:	f640 31db 	movw	r1, #3035	@ 0xbdb
 8008fd2:	4859      	ldr	r0, [pc, #356]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8008fd4:	f7fb fb76 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d00c      	beq.n	8008ffa <HAL_TIM_Encoder_Init+0xee>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d008      	beq.n	8008ffa <HAL_TIM_Encoder_Init+0xee>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d004      	beq.n	8008ffa <HAL_TIM_Encoder_Init+0xee>
 8008ff0:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8008ff4:	4850      	ldr	r0, [pc, #320]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8008ff6:	f7fb fb65 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d00c      	beq.n	800901c <HAL_TIM_Encoder_Init+0x110>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d008      	beq.n	800901c <HAL_TIM_Encoder_Init+0x110>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b03      	cmp	r3, #3
 8009010:	d004      	beq.n	800901c <HAL_TIM_Encoder_Init+0x110>
 8009012:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 8009016:	4848      	ldr	r0, [pc, #288]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8009018:	f7fb fb54 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d00c      	beq.n	800903e <HAL_TIM_Encoder_Init+0x132>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d008      	beq.n	800903e <HAL_TIM_Encoder_Init+0x132>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d004      	beq.n	800903e <HAL_TIM_Encoder_Init+0x132>
 8009034:	f640 31de 	movw	r1, #3038	@ 0xbde
 8009038:	483f      	ldr	r0, [pc, #252]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 800903a:	f7fb fb43 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HAL_TIM_Encoder_Init+0x14c>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d004      	beq.n	8009058 <HAL_TIM_Encoder_Init+0x14c>
 800904e:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8009052:	4839      	ldr	r0, [pc, #228]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8009054:	f7fb fb36 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_TIM_Encoder_Init+0x166>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d004      	beq.n	8009072 <HAL_TIM_Encoder_Init+0x166>
 8009068:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 800906c:	4832      	ldr	r0, [pc, #200]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 800906e:	f7fb fb29 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d010      	beq.n	800909c <HAL_TIM_Encoder_Init+0x190>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	2b04      	cmp	r3, #4
 8009080:	d00c      	beq.n	800909c <HAL_TIM_Encoder_Init+0x190>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b08      	cmp	r3, #8
 8009088:	d008      	beq.n	800909c <HAL_TIM_Encoder_Init+0x190>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b0c      	cmp	r3, #12
 8009090:	d004      	beq.n	800909c <HAL_TIM_Encoder_Init+0x190>
 8009092:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 8009096:	4828      	ldr	r0, [pc, #160]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8009098:	f7fb fb14 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d010      	beq.n	80090c6 <HAL_TIM_Encoder_Init+0x1ba>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d00c      	beq.n	80090c6 <HAL_TIM_Encoder_Init+0x1ba>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d008      	beq.n	80090c6 <HAL_TIM_Encoder_Init+0x1ba>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	2b0c      	cmp	r3, #12
 80090ba:	d004      	beq.n	80090c6 <HAL_TIM_Encoder_Init+0x1ba>
 80090bc:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 80090c0:	481d      	ldr	r0, [pc, #116]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 80090c2:	f7fb faff 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	d904      	bls.n	80090d8 <HAL_TIM_Encoder_Init+0x1cc>
 80090ce:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80090d2:	4819      	ldr	r0, [pc, #100]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 80090d4:	f7fb faf6 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	d904      	bls.n	80090ea <HAL_TIM_Encoder_Init+0x1de>
 80090e0:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80090e4:	4814      	ldr	r0, [pc, #80]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 80090e6:	f7fb faed 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <HAL_TIM_Encoder_Init+0x1f0>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fa:	d304      	bcc.n	8009106 <HAL_TIM_Encoder_Init+0x1fa>
 80090fc:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8009100:	480d      	ldr	r0, [pc, #52]	@ (8009138 <HAL_TIM_Encoder_Init+0x22c>)
 8009102:	f7fb fadf 	bl	80046c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d114      	bne.n	800913c <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fb ffc4 	bl	80050a8 <HAL_TIM_Encoder_MspInit>
 8009120:	e00c      	b.n	800913c <HAL_TIM_Encoder_Init+0x230>
 8009122:	bf00      	nop
 8009124:	40012c00 	.word	0x40012c00
 8009128:	40013400 	.word	0x40013400
 800912c:	40000400 	.word	0x40000400
 8009130:	40000800 	.word	0x40000800
 8009134:	40000c00 	.word	0x40000c00
 8009138:	08010140 	.word	0x08010140
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009152:	f023 0307 	bic.w	r3, r3, #7
 8009156:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f000 ff18 	bl	8009f98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	4313      	orrs	r3, r2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80091ae:	f023 030c 	bic.w	r3, r3, #12
 80091b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	4313      	orrs	r3, r2
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	011a      	lsls	r2, r3, #4
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	031b      	lsls	r3, r3, #12
 80091de:	4313      	orrs	r3, r2
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80091ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	4313      	orrs	r3, r2
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009264:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800926c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009274:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800927c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a4d      	ldr	r2, [pc, #308]	@ (80093b8 <HAL_TIM_Encoder_Start+0x164>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d01d      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a4b      	ldr	r2, [pc, #300]	@ (80093bc <HAL_TIM_Encoder_Start+0x168>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d018      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800929a:	d013      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a47      	ldr	r2, [pc, #284]	@ (80093c0 <HAL_TIM_Encoder_Start+0x16c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00e      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a46      	ldr	r2, [pc, #280]	@ (80093c4 <HAL_TIM_Encoder_Start+0x170>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d009      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a44      	ldr	r2, [pc, #272]	@ (80093c8 <HAL_TIM_Encoder_Start+0x174>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_TIM_Encoder_Start+0x70>
 80092ba:	f640 4195 	movw	r1, #3221	@ 0xc95
 80092be:	4843      	ldr	r0, [pc, #268]	@ (80093cc <HAL_TIM_Encoder_Start+0x178>)
 80092c0:	f7fb fa00 	bl	80046c4 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d102      	bne.n	80092d6 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d001      	beq.n	80092da <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e069      	b.n	80093ae <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2202      	movs	r2, #2
 80092de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092ea:	e031      	b.n	8009350 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d110      	bne.n	8009314 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d102      	bne.n	80092fe <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f8:	7b3b      	ldrb	r3, [r7, #12]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d001      	beq.n	8009302 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e055      	b.n	80093ae <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009312:	e01d      	b.n	8009350 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d108      	bne.n	800932c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d105      	bne.n	800932c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009320:	7b7b      	ldrb	r3, [r7, #13]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d102      	bne.n	800932c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009326:	7b3b      	ldrb	r3, [r7, #12]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d001      	beq.n	8009330 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e03e      	b.n	80093ae <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_Encoder_Start+0x10a>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d008      	beq.n	800936e <HAL_TIM_Encoder_Start+0x11a>
 800935c:	e00f      	b.n	800937e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2201      	movs	r2, #1
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f960 	bl	800a62c <TIM_CCxChannelCmd>
      break;
 800936c:	e016      	b.n	800939c <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2201      	movs	r2, #1
 8009374:	2104      	movs	r1, #4
 8009376:	4618      	mov	r0, r3
 8009378:	f001 f958 	bl	800a62c <TIM_CCxChannelCmd>
      break;
 800937c:	e00e      	b.n	800939c <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2201      	movs	r2, #1
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f001 f950 	bl	800a62c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2201      	movs	r2, #1
 8009392:	2104      	movs	r1, #4
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f949 	bl	800a62c <TIM_CCxChannelCmd>
      break;
 800939a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	40012c00 	.word	0x40012c00
 80093bc:	40013400 	.word	0x40013400
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40000c00 	.word	0x40000c00
 80093cc:	08010140 	.word	0x08010140

080093d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d122      	bne.n	800942c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d11b      	bne.n	800942c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0202 	mvn.w	r2, #2
 80093fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fda5 	bl	8009f62 <HAL_TIM_IC_CaptureCallback>
 8009418:	e005      	b.n	8009426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fd98 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fda7 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b04      	cmp	r3, #4
 8009438:	d122      	bne.n	8009480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b04      	cmp	r3, #4
 8009446:	d11b      	bne.n	8009480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0204 	mvn.w	r2, #4
 8009450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fd7b 	bl	8009f62 <HAL_TIM_IC_CaptureCallback>
 800946c:	e005      	b.n	800947a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fd6e 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fd7d 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	2b08      	cmp	r3, #8
 800948c:	d122      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b08      	cmp	r3, #8
 800949a:	d11b      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0208 	mvn.w	r2, #8
 80094a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2204      	movs	r2, #4
 80094aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fd51 	bl	8009f62 <HAL_TIM_IC_CaptureCallback>
 80094c0:	e005      	b.n	80094ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fd44 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fd53 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0310 	and.w	r3, r3, #16
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d122      	bne.n	8009528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d11b      	bne.n	8009528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0210 	mvn.w	r2, #16
 80094f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2208      	movs	r2, #8
 80094fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd27 	bl	8009f62 <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fd1a 	bl	8009f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fd29 	bl	8009f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b01      	cmp	r3, #1
 8009534:	d10e      	bne.n	8009554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d107      	bne.n	8009554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f06f 0201 	mvn.w	r2, #1
 800954c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7fa fd4a 	bl	8003fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955e:	2b80      	cmp	r3, #128	@ 0x80
 8009560:	d10e      	bne.n	8009580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956c:	2b80      	cmp	r3, #128	@ 0x80
 800956e:	d107      	bne.n	8009580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fa5b 	bl	800aa36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800958a:	2b40      	cmp	r3, #64	@ 0x40
 800958c:	d10e      	bne.n	80095ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	d107      	bne.n	80095ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80095a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fced 	bl	8009f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d10e      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d107      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0220 	mvn.w	r2, #32
 80095d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fa26 	bl	800aa24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x38>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d00d      	beq.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x38>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b08      	cmp	r3, #8
 8009600:	d00a      	beq.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b0c      	cmp	r3, #12
 8009606:	d007      	beq.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b3c      	cmp	r3, #60	@ 0x3c
 800960c:	d004      	beq.n	8009618 <HAL_TIM_PWM_ConfigChannel+0x38>
 800960e:	f241 017e 	movw	r1, #4222	@ 0x107e
 8009612:	4890      	ldr	r0, [pc, #576]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009614:	f7fb f856 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b60      	cmp	r3, #96	@ 0x60
 800961e:	d008      	beq.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b70      	cmp	r3, #112	@ 0x70
 8009626:	d004      	beq.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009628:	f241 017f 	movw	r1, #4223	@ 0x107f
 800962c:	4889      	ldr	r0, [pc, #548]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800962e:	f7fb f849 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <HAL_TIM_PWM_ConfigChannel+0x6c>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d004      	beq.n	800964c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009642:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8009646:	4883      	ldr	r0, [pc, #524]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009648:	f7fb f83c 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d008      	beq.n	8009666 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b04      	cmp	r3, #4
 800965a:	d004      	beq.n	8009666 <HAL_TIM_PWM_ConfigChannel+0x86>
 800965c:	f241 0181 	movw	r1, #4225	@ 0x1081
 8009660:	487c      	ldr	r0, [pc, #496]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009662:	f7fb f82f 	bl	80046c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x94>
 8009670:	2302      	movs	r3, #2
 8009672:	e147      	b.n	8009904 <HAL_TIM_PWM_ConfigChannel+0x324>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b0c      	cmp	r3, #12
 8009680:	f200 8138 	bhi.w	80098f4 <HAL_TIM_PWM_ConfigChannel+0x314>
 8009684:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	080096c1 	.word	0x080096c1
 8009690:	080098f5 	.word	0x080098f5
 8009694:	080098f5 	.word	0x080098f5
 8009698:	080098f5 	.word	0x080098f5
 800969c:	08009747 	.word	0x08009747
 80096a0:	080098f5 	.word	0x080098f5
 80096a4:	080098f5 	.word	0x080098f5
 80096a8:	080098f5 	.word	0x080098f5
 80096ac:	080097cf 	.word	0x080097cf
 80096b0:	080098f5 	.word	0x080098f5
 80096b4:	080098f5 	.word	0x080098f5
 80096b8:	080098f5 	.word	0x080098f5
 80096bc:	0800986d 	.word	0x0800986d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a64      	ldr	r2, [pc, #400]	@ (8009858 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01d      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a63      	ldr	r2, [pc, #396]	@ (800985c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d018      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096dc:	d013      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a5f      	ldr	r2, [pc, #380]	@ (8009860 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00e      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a5d      	ldr	r2, [pc, #372]	@ (8009864 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a5c      	ldr	r2, [pc, #368]	@ (8009868 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d004      	beq.n	8009706 <HAL_TIM_PWM_ConfigChannel+0x126>
 80096fc:	f241 018b 	movw	r1, #4235	@ 0x108b
 8009700:	4854      	ldr	r0, [pc, #336]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009702:	f7fa ffdf 	bl	80046c4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fcbd 	bl	800a08c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699a      	ldr	r2, [r3, #24]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f042 0208 	orr.w	r2, r2, #8
 8009720:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0204 	bic.w	r2, r2, #4
 8009730:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6999      	ldr	r1, [r3, #24]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	619a      	str	r2, [r3, #24]
      break;
 8009744:	e0d9      	b.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a43      	ldr	r2, [pc, #268]	@ (8009858 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d01d      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a41      	ldr	r2, [pc, #260]	@ (800985c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d018      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009762:	d013      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a3d      	ldr	r2, [pc, #244]	@ (8009860 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00e      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a3c      	ldr	r2, [pc, #240]	@ (8009864 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d009      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a3a      	ldr	r2, [pc, #232]	@ (8009868 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d004      	beq.n	800978c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8009782:	f241 019c 	movw	r1, #4252	@ 0x109c
 8009786:	4833      	ldr	r0, [pc, #204]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009788:	f7fa ff9c 	bl	80046c4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fd14 	bl	800a1c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6999      	ldr	r1, [r3, #24]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	021a      	lsls	r2, r3, #8
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	619a      	str	r2, [r3, #24]
      break;
 80097cc:	e095      	b.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a21      	ldr	r2, [pc, #132]	@ (8009858 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d01d      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a1f      	ldr	r2, [pc, #124]	@ (800985c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d018      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ea:	d013      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009860 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00e      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009864 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d009      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a18      	ldr	r2, [pc, #96]	@ (8009868 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x234>
 800980a:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 800980e:	4811      	ldr	r0, [pc, #68]	@ (8009854 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009810:	f7fa ff58 	bl	80046c4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fd6e 	bl	800a2fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69da      	ldr	r2, [r3, #28]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0208 	orr.w	r2, r2, #8
 800982e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69da      	ldr	r2, [r3, #28]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0204 	bic.w	r2, r2, #4
 800983e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69d9      	ldr	r1, [r3, #28]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	61da      	str	r2, [r3, #28]
      break;
 8009852:	e052      	b.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8009854:	08010140 	.word	0x08010140
 8009858:	40012c00 	.word	0x40012c00
 800985c:	40013400 	.word	0x40013400
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a26      	ldr	r2, [pc, #152]	@ (800990c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d01d      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a25      	ldr	r2, [pc, #148]	@ (8009910 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d018      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009888:	d013      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a21      	ldr	r2, [pc, #132]	@ (8009914 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00e      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1f      	ldr	r2, [pc, #124]	@ (8009918 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d009      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1e      	ldr	r2, [pc, #120]	@ (800991c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d004      	beq.n	80098b2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80098a8:	f241 01be 	movw	r1, #4286	@ 0x10be
 80098ac:	481c      	ldr	r0, [pc, #112]	@ (8009920 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80098ae:	f7fa ff09 	bl	80046c4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fdbd 	bl	800a438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69da      	ldr	r2, [r3, #28]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69d9      	ldr	r1, [r3, #28]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	021a      	lsls	r2, r3, #8
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	61da      	str	r2, [r3, #28]
      break;
 80098f2:	e002      	b.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
      break;
 80098f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	40012c00 	.word	0x40012c00
 8009910:	40013400 	.word	0x40013400
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40000c00 	.word	0x40000c00
 8009920:	08010140 	.word	0x08010140

08009924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIM_ConfigClockSource+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e2f6      	b.n	8009f2e <HAL_TIM_ConfigClockSource+0x60a>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009958:	d029      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b70      	cmp	r3, #112	@ 0x70
 8009960:	d025      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800996a:	d020      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b40      	cmp	r3, #64	@ 0x40
 8009972:	d01c      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b50      	cmp	r3, #80	@ 0x50
 800997a:	d018      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b60      	cmp	r3, #96	@ 0x60
 8009982:	d014      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d010      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b10      	cmp	r3, #16
 8009992:	d00c      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b20      	cmp	r3, #32
 800999a:	d008      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b30      	cmp	r3, #48	@ 0x30
 80099a2:	d004      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x8a>
 80099a4:	f241 41be 	movw	r1, #5310	@ 0x14be
 80099a8:	487c      	ldr	r0, [pc, #496]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 80099aa:	f7fa fe8b 	bl	80046c4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80099bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d6:	f000 80f1 	beq.w	8009bbc <HAL_TIM_ConfigClockSource+0x298>
 80099da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099de:	f200 8299 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e6:	d02d      	beq.n	8009a44 <HAL_TIM_ConfigClockSource+0x120>
 80099e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ec:	f200 8292 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 80099f0:	2b70      	cmp	r3, #112	@ 0x70
 80099f2:	d05d      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0x18c>
 80099f4:	2b70      	cmp	r3, #112	@ 0x70
 80099f6:	f200 828d 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 80099fa:	2b60      	cmp	r3, #96	@ 0x60
 80099fc:	f000 81a5 	beq.w	8009d4a <HAL_TIM_ConfigClockSource+0x426>
 8009a00:	2b60      	cmp	r3, #96	@ 0x60
 8009a02:	f200 8287 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 8009a06:	2b50      	cmp	r3, #80	@ 0x50
 8009a08:	f000 8149 	beq.w	8009c9e <HAL_TIM_ConfigClockSource+0x37a>
 8009a0c:	2b50      	cmp	r3, #80	@ 0x50
 8009a0e:	f200 8281 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 8009a12:	2b40      	cmp	r3, #64	@ 0x40
 8009a14:	f000 81fc 	beq.w	8009e10 <HAL_TIM_ConfigClockSource+0x4ec>
 8009a18:	2b40      	cmp	r3, #64	@ 0x40
 8009a1a:	f200 827b 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 8009a1e:	2b30      	cmp	r3, #48	@ 0x30
 8009a20:	f000 824c 	beq.w	8009ebc <HAL_TIM_ConfigClockSource+0x598>
 8009a24:	2b30      	cmp	r3, #48	@ 0x30
 8009a26:	f200 8275 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	f000 8246 	beq.w	8009ebc <HAL_TIM_ConfigClockSource+0x598>
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	f200 826f 	bhi.w	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 8240 	beq.w	8009ebc <HAL_TIM_ConfigClockSource+0x598>
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	f000 823d 	beq.w	8009ebc <HAL_TIM_ConfigClockSource+0x598>
 8009a42:	e267      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a55      	ldr	r2, [pc, #340]	@ (8009ba0 <HAL_TIM_ConfigClockSource+0x27c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	f000 8265 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a53      	ldr	r2, [pc, #332]	@ (8009ba4 <HAL_TIM_ConfigClockSource+0x280>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	f000 825f 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a64:	f000 8259 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8009ba8 <HAL_TIM_ConfigClockSource+0x284>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	f000 8253 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a4c      	ldr	r2, [pc, #304]	@ (8009bac <HAL_TIM_ConfigClockSource+0x288>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	f000 824d 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a4a      	ldr	r2, [pc, #296]	@ (8009bb0 <HAL_TIM_ConfigClockSource+0x28c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	f000 8247 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a48      	ldr	r2, [pc, #288]	@ (8009bb4 <HAL_TIM_ConfigClockSource+0x290>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	f000 8241 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a46      	ldr	r2, [pc, #280]	@ (8009bb8 <HAL_TIM_ConfigClockSource+0x294>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f000 823b 	beq.w	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
 8009aa4:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8009aa8:	483c      	ldr	r0, [pc, #240]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 8009aaa:	f7fa fe0b 	bl	80046c4 <assert_failed>
      break;
 8009aae:	e234      	b.n	8009f1a <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8009ba0 <HAL_TIM_ConfigClockSource+0x27c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d01d      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a39      	ldr	r2, [pc, #228]	@ (8009ba4 <HAL_TIM_ConfigClockSource+0x280>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d018      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009acc:	d013      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a35      	ldr	r2, [pc, #212]	@ (8009ba8 <HAL_TIM_ConfigClockSource+0x284>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d00e      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a33      	ldr	r2, [pc, #204]	@ (8009bac <HAL_TIM_ConfigClockSource+0x288>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a32      	ldr	r2, [pc, #200]	@ (8009bb0 <HAL_TIM_ConfigClockSource+0x28c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d004      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009aec:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8009af0:	482a      	ldr	r0, [pc, #168]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 8009af2:	f7fa fde7 	bl	80046c4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d013      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x202>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b06:	d00e      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x202>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b10:	d009      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x202>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b1a:	d004      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x202>
 8009b1c:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8009b20:	481e      	ldr	r0, [pc, #120]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 8009b22:	f7fa fdcf 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b2e:	d014      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x236>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d010      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x236>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x236>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d008      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x236>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2b0a      	cmp	r3, #10
 8009b4e:	d004      	beq.n	8009b5a <HAL_TIM_ConfigClockSource+0x236>
 8009b50:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8009b54:	4811      	ldr	r0, [pc, #68]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 8009b56:	f7fa fdb5 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b0f      	cmp	r3, #15
 8009b60:	d904      	bls.n	8009b6c <HAL_TIM_ConfigClockSource+0x248>
 8009b62:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8009b66:	480d      	ldr	r0, [pc, #52]	@ (8009b9c <HAL_TIM_ConfigClockSource+0x278>)
 8009b68:	f7fa fdac 	bl	80046c4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b7c:	f000 fd37 	bl	800a5ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	609a      	str	r2, [r3, #8]
      break;
 8009b98:	e1c0      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
 8009b9a:	bf00      	nop
 8009b9c:	08010140 	.word	0x08010140
 8009ba0:	40012c00 	.word	0x40012c00
 8009ba4:	40013400 	.word	0x40013400
 8009ba8:	40000400 	.word	0x40000400
 8009bac:	40000800 	.word	0x40000800
 8009bb0:	40000c00 	.word	0x40000c00
 8009bb4:	40001000 	.word	0x40001000
 8009bb8:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a8d      	ldr	r2, [pc, #564]	@ (8009df8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d01d      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a8c      	ldr	r2, [pc, #560]	@ (8009dfc <HAL_TIM_ConfigClockSource+0x4d8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d018      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd8:	d013      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a88      	ldr	r2, [pc, #544]	@ (8009e00 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00e      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a86      	ldr	r2, [pc, #536]	@ (8009e04 <HAL_TIM_ConfigClockSource+0x4e0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d009      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a85      	ldr	r2, [pc, #532]	@ (8009e08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d004      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x2de>
 8009bf8:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8009bfc:	4883      	ldr	r0, [pc, #524]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009bfe:	f7fa fd61 	bl	80046c4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d013      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x30e>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c12:	d00e      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x30e>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c1c:	d009      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x30e>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c26:	d004      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x30e>
 8009c28:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8009c2c:	4877      	ldr	r0, [pc, #476]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009c2e:	f7fa fd49 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c3a:	d014      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x342>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d010      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x342>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00c      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x342>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d008      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x342>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	2b0a      	cmp	r3, #10
 8009c5a:	d004      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x342>
 8009c5c:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8009c60:	486a      	ldr	r0, [pc, #424]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009c62:	f7fa fd2f 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	2b0f      	cmp	r3, #15
 8009c6c:	d904      	bls.n	8009c78 <HAL_TIM_ConfigClockSource+0x354>
 8009c6e:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8009c72:	4866      	ldr	r0, [pc, #408]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009c74:	f7fa fd26 	bl	80046c4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c88:	f000 fcb1 	bl	800a5ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c9a:	609a      	str	r2, [r3, #8]
      break;
 8009c9c:	e13e      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a55      	ldr	r2, [pc, #340]	@ (8009df8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d01d      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a53      	ldr	r2, [pc, #332]	@ (8009dfc <HAL_TIM_ConfigClockSource+0x4d8>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d018      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cba:	d013      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a4f      	ldr	r2, [pc, #316]	@ (8009e00 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00e      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a4e      	ldr	r2, [pc, #312]	@ (8009e04 <HAL_TIM_ConfigClockSource+0x4e0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d009      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8009e08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d004      	beq.n	8009ce4 <HAL_TIM_ConfigClockSource+0x3c0>
 8009cda:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8009cde:	484b      	ldr	r0, [pc, #300]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009ce0:	f7fa fcf0 	bl	80046c4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cec:	d014      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x3f4>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d010      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x3f4>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00c      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x3f4>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d008      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x3f4>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b0a      	cmp	r3, #10
 8009d0c:	d004      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x3f4>
 8009d0e:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8009d12:	483e      	ldr	r0, [pc, #248]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009d14:	f7fa fcd6 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	2b0f      	cmp	r3, #15
 8009d1e:	d904      	bls.n	8009d2a <HAL_TIM_ConfigClockSource+0x406>
 8009d20:	f241 5101 	movw	r1, #5377	@ 0x1501
 8009d24:	4839      	ldr	r0, [pc, #228]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009d26:	f7fa fccd 	bl	80046c4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d36:	461a      	mov	r2, r3
 8009d38:	f000 fbe2 	bl	800a500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2150      	movs	r1, #80	@ 0x50
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fc39 	bl	800a5ba <TIM_ITRx_SetConfig>
      break;
 8009d48:	e0e8      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009df8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d01d      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a28      	ldr	r2, [pc, #160]	@ (8009dfc <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d018      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d66:	d013      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a24      	ldr	r2, [pc, #144]	@ (8009e00 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00e      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a23      	ldr	r2, [pc, #140]	@ (8009e04 <HAL_TIM_ConfigClockSource+0x4e0>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d009      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a21      	ldr	r2, [pc, #132]	@ (8009e08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d004      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0x46c>
 8009d86:	f241 510d 	movw	r1, #5389	@ 0x150d
 8009d8a:	4820      	ldr	r0, [pc, #128]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009d8c:	f7fa fc9a 	bl	80046c4 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d98:	d014      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x4a0>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d010      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x4a0>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00c      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x4a0>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d008      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x4a0>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b0a      	cmp	r3, #10
 8009db8:	d004      	beq.n	8009dc4 <HAL_TIM_ConfigClockSource+0x4a0>
 8009dba:	f241 5110 	movw	r1, #5392	@ 0x1510
 8009dbe:	4813      	ldr	r0, [pc, #76]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009dc0:	f7fa fc80 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	2b0f      	cmp	r3, #15
 8009dca:	d904      	bls.n	8009dd6 <HAL_TIM_ConfigClockSource+0x4b2>
 8009dcc:	f241 5111 	movw	r1, #5393	@ 0x1511
 8009dd0:	480e      	ldr	r0, [pc, #56]	@ (8009e0c <HAL_TIM_ConfigClockSource+0x4e8>)
 8009dd2:	f7fa fc77 	bl	80046c4 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009de2:	461a      	mov	r2, r3
 8009de4:	f000 fbba 	bl	800a55c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2160      	movs	r1, #96	@ 0x60
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fbe3 	bl	800a5ba <TIM_ITRx_SetConfig>
      break;
 8009df4:	e092      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
 8009df6:	bf00      	nop
 8009df8:	40012c00 	.word	0x40012c00
 8009dfc:	40013400 	.word	0x40013400
 8009e00:	40000400 	.word	0x40000400
 8009e04:	40000800 	.word	0x40000800
 8009e08:	40000c00 	.word	0x40000c00
 8009e0c:	08010140 	.word	0x08010140
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a48      	ldr	r2, [pc, #288]	@ (8009f38 <HAL_TIM_ConfigClockSource+0x614>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01d      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a47      	ldr	r2, [pc, #284]	@ (8009f3c <HAL_TIM_ConfigClockSource+0x618>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d018      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2c:	d013      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a43      	ldr	r2, [pc, #268]	@ (8009f40 <HAL_TIM_ConfigClockSource+0x61c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a41      	ldr	r2, [pc, #260]	@ (8009f44 <HAL_TIM_ConfigClockSource+0x620>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a40      	ldr	r2, [pc, #256]	@ (8009f48 <HAL_TIM_ConfigClockSource+0x624>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x532>
 8009e4c:	f241 511d 	movw	r1, #5405	@ 0x151d
 8009e50:	483e      	ldr	r0, [pc, #248]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x628>)
 8009e52:	f7fa fc37 	bl	80046c4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e5e:	d014      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x566>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d010      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x566>
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x566>
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d008      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x566>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b0a      	cmp	r3, #10
 8009e7e:	d004      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x566>
 8009e80:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8009e84:	4831      	ldr	r0, [pc, #196]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x628>)
 8009e86:	f7fa fc1d 	bl	80046c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	2b0f      	cmp	r3, #15
 8009e90:	d904      	bls.n	8009e9c <HAL_TIM_ConfigClockSource+0x578>
 8009e92:	f241 5121 	movw	r1, #5409	@ 0x1521
 8009e96:	482d      	ldr	r0, [pc, #180]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x628>)
 8009e98:	f7fa fc14 	bl	80046c4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	f000 fb29 	bl	800a500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2140      	movs	r1, #64	@ 0x40
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fb80 	bl	800a5ba <TIM_ITRx_SetConfig>
      break;
 8009eba:	e02f      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f38 <HAL_TIM_ConfigClockSource+0x614>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01d      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1c      	ldr	r2, [pc, #112]	@ (8009f3c <HAL_TIM_ConfigClockSource+0x618>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d018      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed8:	d013      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a18      	ldr	r2, [pc, #96]	@ (8009f40 <HAL_TIM_ConfigClockSource+0x61c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00e      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a16      	ldr	r2, [pc, #88]	@ (8009f44 <HAL_TIM_ConfigClockSource+0x620>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d009      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <HAL_TIM_ConfigClockSource+0x624>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d004      	beq.n	8009f02 <HAL_TIM_ConfigClockSource+0x5de>
 8009ef8:	f241 5130 	movw	r1, #5424	@ 0x1530
 8009efc:	4813      	ldr	r0, [pc, #76]	@ (8009f4c <HAL_TIM_ConfigClockSource+0x628>)
 8009efe:	f7fa fbe1 	bl	80046c4 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f000 fb54 	bl	800a5ba <TIM_ITRx_SetConfig>
      break;
 8009f12:	e003      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
      break;
 8009f18:	e000      	b.n	8009f1c <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 8009f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40012c00 	.word	0x40012c00
 8009f3c:	40013400 	.word	0x40013400
 8009f40:	40000400 	.word	0x40000400
 8009f44:	40000800 	.word	0x40000800
 8009f48:	40000c00 	.word	0x40000c00
 8009f4c:	08010140 	.word	0x08010140

08009f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr

08009f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a33      	ldr	r2, [pc, #204]	@ (800a078 <TIM_Base_SetConfig+0xe0>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d013      	beq.n	8009fd8 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a32      	ldr	r2, [pc, #200]	@ (800a07c <TIM_Base_SetConfig+0xe4>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00f      	beq.n	8009fd8 <TIM_Base_SetConfig+0x40>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fbe:	d00b      	beq.n	8009fd8 <TIM_Base_SetConfig+0x40>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a2f      	ldr	r2, [pc, #188]	@ (800a080 <TIM_Base_SetConfig+0xe8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d007      	beq.n	8009fd8 <TIM_Base_SetConfig+0x40>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a2e      	ldr	r2, [pc, #184]	@ (800a084 <TIM_Base_SetConfig+0xec>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_Base_SetConfig+0x40>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a2d      	ldr	r2, [pc, #180]	@ (800a088 <TIM_Base_SetConfig+0xf0>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d108      	bne.n	8009fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a22      	ldr	r2, [pc, #136]	@ (800a078 <TIM_Base_SetConfig+0xe0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d013      	beq.n	800a01a <TIM_Base_SetConfig+0x82>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a21      	ldr	r2, [pc, #132]	@ (800a07c <TIM_Base_SetConfig+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d00f      	beq.n	800a01a <TIM_Base_SetConfig+0x82>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a000:	d00b      	beq.n	800a01a <TIM_Base_SetConfig+0x82>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a1e      	ldr	r2, [pc, #120]	@ (800a080 <TIM_Base_SetConfig+0xe8>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d007      	beq.n	800a01a <TIM_Base_SetConfig+0x82>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a1d      	ldr	r2, [pc, #116]	@ (800a084 <TIM_Base_SetConfig+0xec>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d003      	beq.n	800a01a <TIM_Base_SetConfig+0x82>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a1c      	ldr	r2, [pc, #112]	@ (800a088 <TIM_Base_SetConfig+0xf0>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d108      	bne.n	800a02c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a09      	ldr	r2, [pc, #36]	@ (800a078 <TIM_Base_SetConfig+0xe0>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <TIM_Base_SetConfig+0xc8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a08      	ldr	r2, [pc, #32]	@ (800a07c <TIM_Base_SetConfig+0xe4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d103      	bne.n	800a068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	691a      	ldr	r2, [r3, #16]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	615a      	str	r2, [r3, #20]
}
 800a06e:	bf00      	nop
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	bc80      	pop	{r7}
 800a076:	4770      	bx	lr
 800a078:	40012c00 	.word	0x40012c00
 800a07c:	40013400 	.word	0x40013400
 800a080:	40000400 	.word	0x40000400
 800a084:	40000800 	.word	0x40000800
 800a088:	40000c00 	.word	0x40000c00

0800a08c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	f023 0201 	bic.w	r2, r3, #1
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0303 	bic.w	r3, r3, #3
 800a0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 0302 	bic.w	r3, r3, #2
 800a0d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a34      	ldr	r2, [pc, #208]	@ (800a1b4 <TIM_OC1_SetConfig+0x128>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_OC1_SetConfig+0x64>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a33      	ldr	r2, [pc, #204]	@ (800a1b8 <TIM_OC1_SetConfig+0x12c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d119      	bne.n	800a124 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d008      	beq.n	800a10a <TIM_OC1_SetConfig+0x7e>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d004      	beq.n	800a10a <TIM_OC1_SetConfig+0x7e>
 800a100:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 800a104:	482d      	ldr	r0, [pc, #180]	@ (800a1bc <TIM_OC1_SetConfig+0x130>)
 800a106:	f7fa fadd 	bl	80046c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f023 0308 	bic.w	r3, r3, #8
 800a110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0304 	bic.w	r3, r3, #4
 800a122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a23      	ldr	r2, [pc, #140]	@ (800a1b4 <TIM_OC1_SetConfig+0x128>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d003      	beq.n	800a134 <TIM_OC1_SetConfig+0xa8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a22      	ldr	r2, [pc, #136]	@ (800a1b8 <TIM_OC1_SetConfig+0x12c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d12d      	bne.n	800a190 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a13c:	d008      	beq.n	800a150 <TIM_OC1_SetConfig+0xc4>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <TIM_OC1_SetConfig+0xc4>
 800a146:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 800a14a:	481c      	ldr	r0, [pc, #112]	@ (800a1bc <TIM_OC1_SetConfig+0x130>)
 800a14c:	f7fa faba 	bl	80046c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a158:	d008      	beq.n	800a16c <TIM_OC1_SetConfig+0xe0>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <TIM_OC1_SetConfig+0xe0>
 800a162:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800a166:	4815      	ldr	r0, [pc, #84]	@ (800a1bc <TIM_OC1_SetConfig+0x130>)
 800a168:	f7fa faac 	bl	80046c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a17a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	621a      	str	r2, [r3, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40012c00 	.word	0x40012c00
 800a1b8:	40013400 	.word	0x40013400
 800a1bc:	08010140 	.word	0x08010140

0800a1c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f023 0210 	bic.w	r2, r3, #16
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f023 0320 	bic.w	r3, r3, #32
 800a20a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4313      	orrs	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a35      	ldr	r2, [pc, #212]	@ (800a2f0 <TIM_OC2_SetConfig+0x130>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_OC2_SetConfig+0x68>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a34      	ldr	r2, [pc, #208]	@ (800a2f4 <TIM_OC2_SetConfig+0x134>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d11a      	bne.n	800a25e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d008      	beq.n	800a242 <TIM_OC2_SetConfig+0x82>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	2b08      	cmp	r3, #8
 800a236:	d004      	beq.n	800a242 <TIM_OC2_SetConfig+0x82>
 800a238:	f641 3110 	movw	r1, #6928	@ 0x1b10
 800a23c:	482e      	ldr	r0, [pc, #184]	@ (800a2f8 <TIM_OC2_SetConfig+0x138>)
 800a23e:	f7fa fa41 	bl	80046c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a25c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a23      	ldr	r2, [pc, #140]	@ (800a2f0 <TIM_OC2_SetConfig+0x130>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d003      	beq.n	800a26e <TIM_OC2_SetConfig+0xae>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a22      	ldr	r2, [pc, #136]	@ (800a2f4 <TIM_OC2_SetConfig+0x134>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d12f      	bne.n	800a2ce <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a276:	d008      	beq.n	800a28a <TIM_OC2_SetConfig+0xca>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <TIM_OC2_SetConfig+0xca>
 800a280:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 800a284:	481c      	ldr	r0, [pc, #112]	@ (800a2f8 <TIM_OC2_SetConfig+0x138>)
 800a286:	f7fa fa1d 	bl	80046c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a292:	d008      	beq.n	800a2a6 <TIM_OC2_SetConfig+0xe6>
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <TIM_OC2_SetConfig+0xe6>
 800a29c:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 800a2a0:	4815      	ldr	r0, [pc, #84]	@ (800a2f8 <TIM_OC2_SetConfig+0x138>)
 800a2a2:	f7fa fa0f 	bl	80046c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	621a      	str	r2, [r3, #32]
}
 800a2e8:	bf00      	nop
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	40012c00 	.word	0x40012c00
 800a2f4:	40013400 	.word	0x40013400
 800a2f8:	08010140 	.word	0x08010140

0800a2fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a35      	ldr	r2, [pc, #212]	@ (800a42c <TIM_OC3_SetConfig+0x130>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d003      	beq.n	800a362 <TIM_OC3_SetConfig+0x66>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a34      	ldr	r2, [pc, #208]	@ (800a430 <TIM_OC3_SetConfig+0x134>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d11a      	bne.n	800a398 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d008      	beq.n	800a37c <TIM_OC3_SetConfig+0x80>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d004      	beq.n	800a37c <TIM_OC3_SetConfig+0x80>
 800a372:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 800a376:	482f      	ldr	r0, [pc, #188]	@ (800a434 <TIM_OC3_SetConfig+0x138>)
 800a378:	f7fa f9a4 	bl	80046c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <TIM_OC3_SetConfig+0x130>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_OC3_SetConfig+0xac>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	@ (800a430 <TIM_OC3_SetConfig+0x134>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d12f      	bne.n	800a408 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3b0:	d008      	beq.n	800a3c4 <TIM_OC3_SetConfig+0xc8>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d004      	beq.n	800a3c4 <TIM_OC3_SetConfig+0xc8>
 800a3ba:	f641 3169 	movw	r1, #7017	@ 0x1b69
 800a3be:	481d      	ldr	r0, [pc, #116]	@ (800a434 <TIM_OC3_SetConfig+0x138>)
 800a3c0:	f7fa f980 	bl	80046c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3cc:	d008      	beq.n	800a3e0 <TIM_OC3_SetConfig+0xe4>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <TIM_OC3_SetConfig+0xe4>
 800a3d6:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 800a3da:	4816      	ldr	r0, [pc, #88]	@ (800a434 <TIM_OC3_SetConfig+0x138>)
 800a3dc:	f7fa f972 	bl	80046c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	621a      	str	r2, [r3, #32]
}
 800a422:	bf00      	nop
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40012c00 	.word	0x40012c00
 800a430:	40013400 	.word	0x40013400
 800a434:	08010140 	.word	0x08010140

0800a438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	031b      	lsls	r3, r3, #12
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a18      	ldr	r2, [pc, #96]	@ (800a4f4 <TIM_OC4_SetConfig+0xbc>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_OC4_SetConfig+0x68>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a17      	ldr	r2, [pc, #92]	@ (800a4f8 <TIM_OC4_SetConfig+0xc0>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d117      	bne.n	800a4d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4a8:	d008      	beq.n	800a4bc <TIM_OC4_SetConfig+0x84>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <TIM_OC4_SetConfig+0x84>
 800a4b2:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 800a4b6:	4811      	ldr	r0, [pc, #68]	@ (800a4fc <TIM_OC4_SetConfig+0xc4>)
 800a4b8:	f7fa f904 	bl	80046c4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	019b      	lsls	r3, r3, #6
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	621a      	str	r2, [r3, #32]
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40012c00 	.word	0x40012c00
 800a4f8:	40013400 	.word	0x40013400
 800a4fc:	08010140 	.word	0x08010140

0800a500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f023 0201 	bic.w	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	4313      	orrs	r3, r2
 800a534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f023 030a 	bic.w	r3, r3, #10
 800a53c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	4313      	orrs	r3, r2
 800a544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	bc80      	pop	{r7}
 800a55a:	4770      	bx	lr

0800a55c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f023 0210 	bic.w	r2, r3, #16
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	031b      	lsls	r3, r3, #12
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	011b      	lsls	r3, r3, #4
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	621a      	str	r2, [r3, #32]
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bc80      	pop	{r7}
 800a5b8:	4770      	bx	lr

0800a5ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	f043 0307 	orr.w	r3, r3, #7
 800a5dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	609a      	str	r2, [r3, #8]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr

0800a5ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b087      	sub	sp, #28
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	607a      	str	r2, [r7, #4]
 800a5fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a608:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	021a      	lsls	r2, r3, #8
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	431a      	orrs	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4313      	orrs	r3, r2
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4313      	orrs	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	609a      	str	r2, [r3, #8]
}
 800a622:	bf00      	nop
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr

0800a62c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4a26      	ldr	r2, [pc, #152]	@ (800a6d4 <TIM_CCxChannelCmd+0xa8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d018      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a25      	ldr	r2, [pc, #148]	@ (800a6d8 <TIM_CCxChannelCmd+0xac>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d014      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64e:	d010      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a22      	ldr	r2, [pc, #136]	@ (800a6dc <TIM_CCxChannelCmd+0xb0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d00c      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a21      	ldr	r2, [pc, #132]	@ (800a6e0 <TIM_CCxChannelCmd+0xb4>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d008      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4a20      	ldr	r2, [pc, #128]	@ (800a6e4 <TIM_CCxChannelCmd+0xb8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d004      	beq.n	800a672 <TIM_CCxChannelCmd+0x46>
 800a668:	f641 5192 	movw	r1, #7570	@ 0x1d92
 800a66c:	481e      	ldr	r0, [pc, #120]	@ (800a6e8 <TIM_CCxChannelCmd+0xbc>)
 800a66e:	f7fa f829 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d010      	beq.n	800a69a <TIM_CCxChannelCmd+0x6e>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	d00d      	beq.n	800a69a <TIM_CCxChannelCmd+0x6e>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b08      	cmp	r3, #8
 800a682:	d00a      	beq.n	800a69a <TIM_CCxChannelCmd+0x6e>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b0c      	cmp	r3, #12
 800a688:	d007      	beq.n	800a69a <TIM_CCxChannelCmd+0x6e>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a68e:	d004      	beq.n	800a69a <TIM_CCxChannelCmd+0x6e>
 800a690:	f641 5193 	movw	r1, #7571	@ 0x1d93
 800a694:	4814      	ldr	r0, [pc, #80]	@ (800a6e8 <TIM_CCxChannelCmd+0xbc>)
 800a696:	f7fa f815 	bl	80046c4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a1a      	ldr	r2, [r3, #32]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	43db      	mvns	r3, r3
 800a6b0:	401a      	ands	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f003 031f 	and.w	r3, r3, #31
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]
}
 800a6cc:	bf00      	nop
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40012c00 	.word	0x40012c00
 800a6d8:	40013400 	.word	0x40013400
 800a6dc:	40000400 	.word	0x40000400
 800a6e0:	40000800 	.word	0x40000800
 800a6e4:	40000c00 	.word	0x40000c00
 800a6e8:	08010140 	.word	0x08010140

0800a6ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a5c      	ldr	r2, [pc, #368]	@ (800a86c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d027      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a5a      	ldr	r2, [pc, #360]	@ (800a870 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d022      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a712:	d01d      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a56      	ldr	r2, [pc, #344]	@ (800a874 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d018      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a55      	ldr	r2, [pc, #340]	@ (800a878 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d013      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a53      	ldr	r2, [pc, #332]	@ (800a87c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d00e      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a52      	ldr	r2, [pc, #328]	@ (800a880 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d009      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a50      	ldr	r2, [pc, #320]	@ (800a884 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d004      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a746:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 800a74a:	484f      	ldr	r0, [pc, #316]	@ (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a74c:	f7f9 ffba 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d020      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b10      	cmp	r3, #16
 800a75e:	d01c      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b20      	cmp	r3, #32
 800a766:	d018      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b30      	cmp	r3, #48	@ 0x30
 800a76e:	d014      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b40      	cmp	r3, #64	@ 0x40
 800a776:	d010      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b50      	cmp	r3, #80	@ 0x50
 800a77e:	d00c      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b60      	cmp	r3, #96	@ 0x60
 800a786:	d008      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b70      	cmp	r3, #112	@ 0x70
 800a78e:	d004      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a790:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 800a794:	483c      	ldr	r0, [pc, #240]	@ (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a796:	f7f9 ff95 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b80      	cmp	r3, #128	@ 0x80
 800a7a0:	d008      	beq.n	800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7aa:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 800a7ae:	4836      	ldr	r0, [pc, #216]	@ (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a7b0:	f7f9 ff88 	bl	80046c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e050      	b.n	800a864 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a1a      	ldr	r2, [pc, #104]	@ (800a86c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d018      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a19      	ldr	r2, [pc, #100]	@ (800a870 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d013      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a818:	d00e      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a15      	ldr	r2, [pc, #84]	@ (800a874 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d009      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a13      	ldr	r2, [pc, #76]	@ (800a878 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a12      	ldr	r2, [pc, #72]	@ (800a87c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d10c      	bne.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a83e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	4313      	orrs	r3, r2
 800a848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	40012c00 	.word	0x40012c00
 800a870:	40013400 	.word	0x40013400
 800a874:	40000400 	.word	0x40000400
 800a878:	40000800 	.word	0x40000800
 800a87c:	40000c00 	.word	0x40000c00
 800a880:	40001000 	.word	0x40001000
 800a884:	40001400 	.word	0x40001400
 800a888:	08010178 	.word	0x08010178

0800a88c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a5e      	ldr	r2, [pc, #376]	@ (800aa18 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d009      	beq.n	800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a5c      	ldr	r2, [pc, #368]	@ (800aa1c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d004      	beq.n	800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800a8ae:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 800a8b2:	485b      	ldr	r0, [pc, #364]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a8b4:	f7f9 ff06 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8c0:	d008      	beq.n	800a8d4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800a8ca:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 800a8ce:	4854      	ldr	r0, [pc, #336]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a8d0:	f7f9 fef8 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8dc:	d008      	beq.n	800a8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a8e6:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 800a8ea:	484d      	ldr	r0, [pc, #308]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a8ec:	f7f9 feea 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d013      	beq.n	800a920 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a900:	d00e      	beq.n	800a920 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a90a:	d009      	beq.n	800a920 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a914:	d004      	beq.n	800a920 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800a916:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 800a91a:	4841      	ldr	r0, [pc, #260]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a91c:	f7f9 fed2 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2bff      	cmp	r3, #255	@ 0xff
 800a926:	d904      	bls.n	800a932 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800a928:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800a92c:	483c      	ldr	r0, [pc, #240]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a92e:	f7f9 fec9 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a93a:	d008      	beq.n	800a94e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a944:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800a948:	4835      	ldr	r0, [pc, #212]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a94a:	f7f9 febb 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a95e:	d004      	beq.n	800a96a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a960:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800a964:	482e      	ldr	r0, [pc, #184]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a966:	f7f9 fead 	bl	80046c4 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a972:	d008      	beq.n	800a986 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a97c:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800a980:	4827      	ldr	r0, [pc, #156]	@ (800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800a982:	f7f9 fe9f 	bl	80046c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d101      	bne.n	800a994 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800a990:	2302      	movs	r3, #2
 800a992:	e03d      	b.n	800aa10 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	40012c00 	.word	0x40012c00
 800aa1c:	40013400 	.word	0x40013400
 800aa20:	08010178 	.word	0x08010178

0800aa24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bc80      	pop	{r7}
 800aa46:	4770      	bx	lr

0800aa48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e09f      	b.n	800ab9a <HAL_UART_Init+0x152>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d02c      	beq.n	800aabc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a4f      	ldr	r2, [pc, #316]	@ (800aba4 <HAL_UART_Init+0x15c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00e      	beq.n	800aa8a <HAL_UART_Init+0x42>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a4d      	ldr	r2, [pc, #308]	@ (800aba8 <HAL_UART_Init+0x160>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d009      	beq.n	800aa8a <HAL_UART_Init+0x42>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a4c      	ldr	r2, [pc, #304]	@ (800abac <HAL_UART_Init+0x164>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d004      	beq.n	800aa8a <HAL_UART_Init+0x42>
 800aa80:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800aa84:	484a      	ldr	r0, [pc, #296]	@ (800abb0 <HAL_UART_Init+0x168>)
 800aa86:	f7f9 fe1d 	bl	80046c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d032      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa9a:	d02d      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaa4:	d028      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaae:	d023      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aab0:	f240 116f 	movw	r1, #367	@ 0x16f
 800aab4:	483e      	ldr	r0, [pc, #248]	@ (800abb0 <HAL_UART_Init+0x168>)
 800aab6:	f7f9 fe05 	bl	80046c4 <assert_failed>
 800aaba:	e01d      	b.n	800aaf8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a38      	ldr	r2, [pc, #224]	@ (800aba4 <HAL_UART_Init+0x15c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d018      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a37      	ldr	r2, [pc, #220]	@ (800aba8 <HAL_UART_Init+0x160>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d013      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a35      	ldr	r2, [pc, #212]	@ (800abac <HAL_UART_Init+0x164>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00e      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a35      	ldr	r2, [pc, #212]	@ (800abb4 <HAL_UART_Init+0x16c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d009      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a33      	ldr	r2, [pc, #204]	@ (800abb8 <HAL_UART_Init+0x170>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d004      	beq.n	800aaf8 <HAL_UART_Init+0xb0>
 800aaee:	f240 1173 	movw	r1, #371	@ 0x173
 800aaf2:	482f      	ldr	r0, [pc, #188]	@ (800abb0 <HAL_UART_Init+0x168>)
 800aaf4:	f7f9 fde6 	bl	80046c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <HAL_UART_Init+0xcc>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab08:	d004      	beq.n	800ab14 <HAL_UART_Init+0xcc>
 800ab0a:	f240 1175 	movw	r1, #373	@ 0x175
 800ab0e:	4828      	ldr	r0, [pc, #160]	@ (800abb0 <HAL_UART_Init+0x168>)
 800ab10:	f7f9 fdd8 	bl	80046c4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fa fda7 	bl	800567c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2224      	movs	r2, #36	@ 0x24
 800ab32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ab44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f92a 	bl	800ada0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691a      	ldr	r2, [r3, #16]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	40013800 	.word	0x40013800
 800aba8:	40004400 	.word	0x40004400
 800abac:	40004800 	.word	0x40004800
 800abb0:	080101b4 	.word	0x080101b4
 800abb4:	40004c00 	.word	0x40004c00
 800abb8:	40005000 	.word	0x40005000

0800abbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08a      	sub	sp, #40	@ 0x28
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	4613      	mov	r3, r2
 800abca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d16d      	bne.n	800acb8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d002      	beq.n	800abe8 <HAL_UART_Transmit+0x2c>
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e066      	b.n	800acba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2221      	movs	r2, #33	@ 0x21
 800abf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abfa:	f7fa fe09 	bl	8005810 <HAL_GetTick>
 800abfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	88fa      	ldrh	r2, [r7, #6]
 800ac04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	88fa      	ldrh	r2, [r7, #6]
 800ac0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac14:	d108      	bne.n	800ac28 <HAL_UART_Transmit+0x6c>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d104      	bne.n	800ac28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	61bb      	str	r3, [r7, #24]
 800ac26:	e003      	b.n	800ac30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac30:	e02a      	b.n	800ac88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2180      	movs	r1, #128	@ 0x80
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 f840 	bl	800acc2 <UART_WaitOnFlagUntilTimeout>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e036      	b.n	800acba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10b      	bne.n	800ac6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	3302      	adds	r3, #2
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e007      	b.n	800ac7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	3301      	adds	r3, #1
 800ac78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1cf      	bne.n	800ac32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2140      	movs	r1, #64	@ 0x40
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f810 	bl	800acc2 <UART_WaitOnFlagUntilTimeout>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e006      	b.n	800acba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e000      	b.n	800acba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800acb8:	2302      	movs	r3, #2
  }
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b090      	sub	sp, #64	@ 0x40
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	4613      	mov	r3, r2
 800acd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd2:	e050      	b.n	800ad76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d04c      	beq.n	800ad76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d007      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ace2:	f7fa fd95 	bl	8005810 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acee:	429a      	cmp	r2, r3
 800acf0:	d241      	bcs.n	800ad76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	330c      	adds	r3, #12
 800acf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ad08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	330c      	adds	r3, #12
 800ad10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad12:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad14:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	613b      	str	r3, [r7, #16]
   return(result);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	f023 0301 	bic.w	r3, r3, #1
 800ad3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3314      	adds	r3, #20
 800ad44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad46:	623a      	str	r2, [r7, #32]
 800ad48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	69f9      	ldr	r1, [r7, #28]
 800ad4c:	6a3a      	ldr	r2, [r7, #32]
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e00f      	b.n	800ad96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	bf0c      	ite	eq
 800ad86:	2301      	moveq	r3, #1
 800ad88:	2300      	movne	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d09f      	beq.n	800acd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3740      	adds	r7, #64	@ 0x40
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	4a5f      	ldr	r2, [pc, #380]	@ (800af2c <UART_SetConfig+0x18c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d904      	bls.n	800adbc <UART_SetConfig+0x1c>
 800adb2:	f640 6166 	movw	r1, #3686	@ 0xe66
 800adb6:	485e      	ldr	r0, [pc, #376]	@ (800af30 <UART_SetConfig+0x190>)
 800adb8:	f7f9 fc84 	bl	80046c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <UART_SetConfig+0x38>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adcc:	d004      	beq.n	800add8 <UART_SetConfig+0x38>
 800adce:	f640 6167 	movw	r1, #3687	@ 0xe67
 800add2:	4857      	ldr	r0, [pc, #348]	@ (800af30 <UART_SetConfig+0x190>)
 800add4:	f7f9 fc76 	bl	80046c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00e      	beq.n	800adfe <UART_SetConfig+0x5e>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ade8:	d009      	beq.n	800adfe <UART_SetConfig+0x5e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800adf2:	d004      	beq.n	800adfe <UART_SetConfig+0x5e>
 800adf4:	f640 6168 	movw	r1, #3688	@ 0xe68
 800adf8:	484d      	ldr	r0, [pc, #308]	@ (800af30 <UART_SetConfig+0x190>)
 800adfa:	f7f9 fc63 	bl	80046c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	695a      	ldr	r2, [r3, #20]
 800ae02:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800ae06:	4013      	ands	r3, r2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <UART_SetConfig+0x74>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d104      	bne.n	800ae1e <UART_SetConfig+0x7e>
 800ae14:	f640 6169 	movw	r1, #3689	@ 0xe69
 800ae18:	4845      	ldr	r0, [pc, #276]	@ (800af30 <UART_SetConfig+0x190>)
 800ae1a:	f7f9 fc53 	bl	80046c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689a      	ldr	r2, [r3, #8]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	431a      	orrs	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ae50:	f023 030c 	bic.w	r3, r3, #12
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	6812      	ldr	r2, [r2, #0]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	430b      	orrs	r3, r1
 800ae5c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	699a      	ldr	r2, [r3, #24]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a2e      	ldr	r2, [pc, #184]	@ (800af34 <UART_SetConfig+0x194>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d103      	bne.n	800ae86 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ae7e:	f7fd fa99 	bl	80083b4 <HAL_RCC_GetPCLK2Freq>
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	e002      	b.n	800ae8c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ae86:	f7fd fa81 	bl	800838c <HAL_RCC_GetPCLK1Freq>
 800ae8a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	009a      	lsls	r2, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea2:	4a25      	ldr	r2, [pc, #148]	@ (800af38 <UART_SetConfig+0x198>)
 800aea4:	fba2 2303 	umull	r2, r3, r2, r3
 800aea8:	095b      	lsrs	r3, r3, #5
 800aeaa:	0119      	lsls	r1, r3, #4
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009a      	lsls	r2, r3, #2
 800aeb6:	441a      	add	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	fbb2 f2f3 	udiv	r2, r2, r3
 800aec2:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <UART_SetConfig+0x198>)
 800aec4:	fba3 0302 	umull	r0, r3, r3, r2
 800aec8:	095b      	lsrs	r3, r3, #5
 800aeca:	2064      	movs	r0, #100	@ 0x64
 800aecc:	fb00 f303 	mul.w	r3, r0, r3
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	3332      	adds	r3, #50	@ 0x32
 800aed6:	4a18      	ldr	r2, [pc, #96]	@ (800af38 <UART_SetConfig+0x198>)
 800aed8:	fba2 2303 	umull	r2, r3, r2, r3
 800aedc:	095b      	lsrs	r3, r3, #5
 800aede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aee2:	4419      	add	r1, r3
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009a      	lsls	r2, r3, #2
 800aeee:	441a      	add	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	fbb2 f2f3 	udiv	r2, r2, r3
 800aefa:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <UART_SetConfig+0x198>)
 800aefc:	fba3 0302 	umull	r0, r3, r3, r2
 800af00:	095b      	lsrs	r3, r3, #5
 800af02:	2064      	movs	r0, #100	@ 0x64
 800af04:	fb00 f303 	mul.w	r3, r0, r3
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	3332      	adds	r3, #50	@ 0x32
 800af0e:	4a0a      	ldr	r2, [pc, #40]	@ (800af38 <UART_SetConfig+0x198>)
 800af10:	fba2 2303 	umull	r2, r3, r2, r3
 800af14:	095b      	lsrs	r3, r3, #5
 800af16:	f003 020f 	and.w	r2, r3, #15
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	440a      	add	r2, r1
 800af20:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800af22:	bf00      	nop
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	0044aa20 	.word	0x0044aa20
 800af30:	080101b4 	.word	0x080101b4
 800af34:	40013800 	.word	0x40013800
 800af38:	51eb851f 	.word	0x51eb851f

0800af3c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800af3c:	b490      	push	{r4, r7}
 800af3e:	b088      	sub	sp, #32
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	461a      	mov	r2, r3
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	0e1b      	lsrs	r3, r3, #24
 800af50:	4413      	add	r3, r2
 800af52:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800af54:	6822      	ldr	r2, [r4, #0]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	fa93 f3a3 	rbit	r3, r3
 800af60:	613b      	str	r3, [r7, #16]
  return result;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	fab3 f383 	clz	r3, r3
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	210f      	movs	r1, #15
 800af6e:	fa01 f303 	lsl.w	r3, r1, r3
 800af72:	43db      	mvns	r3, r3
 800af74:	401a      	ands	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	fa93 f3a3 	rbit	r3, r3
 800af80:	61bb      	str	r3, [r7, #24]
  return result;
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	fab3 f383 	clz	r3, r3
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	fa01 f303 	lsl.w	r3, r1, r3
 800af92:	4313      	orrs	r3, r2
 800af94:	6023      	str	r3, [r4, #0]
}
 800af96:	bf00      	nop
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bc90      	pop	{r4, r7}
 800af9e:	4770      	bx	lr

0800afa0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800afa0:	b490      	push	{r4, r7}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	461a      	mov	r2, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	0e1b      	lsrs	r3, r3, #24
 800afb4:	4413      	add	r3, r2
 800afb6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800afb8:	6822      	ldr	r2, [r4, #0]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	fa93 f3a3 	rbit	r3, r3
 800afc4:	613b      	str	r3, [r7, #16]
  return result;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	fab3 f383 	clz	r3, r3
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	2103      	movs	r1, #3
 800afd2:	fa01 f303 	lsl.w	r3, r1, r3
 800afd6:	43db      	mvns	r3, r3
 800afd8:	401a      	ands	r2, r3
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	fa93 f3a3 	rbit	r3, r3
 800afe4:	61bb      	str	r3, [r7, #24]
  return result;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	fab3 f383 	clz	r3, r3
 800afec:	b2db      	uxtb	r3, r3
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	fa01 f303 	lsl.w	r3, r1, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800affa:	bf00      	nop
 800affc:	3720      	adds	r7, #32
 800affe:	46bd      	mov	sp, r7
 800b000:	bc90      	pop	{r4, r7}
 800b002:	4770      	bx	lr

0800b004 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800b004:	b490      	push	{r4, r7}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	461a      	mov	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	0e1b      	lsrs	r3, r3, #24
 800b018:	4413      	add	r3, r2
 800b01a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800b01c:	6822      	ldr	r2, [r4, #0]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	fa93 f3a3 	rbit	r3, r3
 800b028:	613b      	str	r3, [r7, #16]
  return result;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	fab3 f383 	clz	r3, r3
 800b030:	b2db      	uxtb	r3, r3
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	2104      	movs	r1, #4
 800b036:	fa01 f303 	lsl.w	r3, r1, r3
 800b03a:	43db      	mvns	r3, r3
 800b03c:	401a      	ands	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	fa93 f3a3 	rbit	r3, r3
 800b048:	61bb      	str	r3, [r7, #24]
  return result;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	fab3 f383 	clz	r3, r3
 800b050:	b2db      	uxtb	r3, r3
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	6879      	ldr	r1, [r7, #4]
 800b056:	fa01 f303 	lsl.w	r3, r1, r3
 800b05a:	4313      	orrs	r3, r2
 800b05c:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800b05e:	bf00      	nop
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bc90      	pop	{r4, r7}
 800b066:	4770      	bx	lr

0800b068 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	0a1b      	lsrs	r3, r3, #8
 800b07c:	43db      	mvns	r3, r3
 800b07e:	401a      	ands	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	0a1b      	lsrs	r3, r3, #8
 800b084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	fa93 f3a3 	rbit	r3, r3
 800b08c:	613b      	str	r3, [r7, #16]
  return result;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	fab3 f383 	clz	r3, r3
 800b094:	b2db      	uxtb	r3, r3
 800b096:	4619      	mov	r1, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	408b      	lsls	r3, r1
 800b09c:	431a      	orrs	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	60da      	str	r2, [r3, #12]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr

0800b0ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a68      	ldr	r2, [pc, #416]	@ (800b25c <LL_GPIO_Init+0x1b0>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d01b      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a67      	ldr	r2, [pc, #412]	@ (800b260 <LL_GPIO_Init+0x1b4>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d017      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a66      	ldr	r2, [pc, #408]	@ (800b264 <LL_GPIO_Init+0x1b8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d013      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a65      	ldr	r2, [pc, #404]	@ (800b268 <LL_GPIO_Init+0x1bc>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00f      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a64      	ldr	r2, [pc, #400]	@ (800b26c <LL_GPIO_Init+0x1c0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d00b      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a63      	ldr	r2, [pc, #396]	@ (800b270 <LL_GPIO_Init+0x1c4>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d007      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a62      	ldr	r2, [pc, #392]	@ (800b274 <LL_GPIO_Init+0x1c8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d003      	beq.n	800b0f6 <LL_GPIO_Init+0x4a>
 800b0ee:	21a2      	movs	r1, #162	@ 0xa2
 800b0f0:	4861      	ldr	r0, [pc, #388]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b0f2:	f7f9 fae7 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f023 437b 	bic.w	r3, r3, #4211081216	@ 0xfb000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <LL_GPIO_Init+0x62>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 437b 	and.w	r3, r3, #4211081216	@ 0xfb000000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <LL_GPIO_Init+0x6a>
 800b10e:	21a3      	movs	r1, #163	@ 0xa3
 800b110:	4859      	ldr	r0, [pc, #356]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b112:	f7f9 fad7 	bl	80046c4 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	0c1b      	lsrs	r3, r3, #16
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	fa93 f3a3 	rbit	r3, r3
 800b12a:	60fb      	str	r3, [r7, #12]
  return result;
 800b12c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800b12e:	fab3 f383 	clz	r3, r3
 800b132:	b2db      	uxtb	r3, r3
 800b134:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800b136:	e084      	b.n	800b242 <LL_GPIO_Init+0x196>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800b138:	2201      	movs	r2, #1
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	409a      	lsls	r2, r3
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	4013      	ands	r3, r2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d07a      	beq.n	800b23c <LL_GPIO_Init+0x190>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2b07      	cmp	r3, #7
 800b14a:	d806      	bhi.n	800b15a <LL_GPIO_Init+0xae>
      {
        currentpin = (0x00000101uL << pinpos);
 800b14c:	f240 1201 	movw	r2, #257	@ 0x101
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e008      	b.n	800b16c <LL_GPIO_Init+0xc0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	3b08      	subs	r3, #8
 800b15e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b162:	fa02 f303 	lsl.w	r3, r2, r3
 800b166:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b16a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2b08      	cmp	r3, #8
 800b172:	d112      	bne.n	800b19a <LL_GPIO_Init+0xee>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d007      	beq.n	800b18c <LL_GPIO_Init+0xe0>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d003      	beq.n	800b18c <LL_GPIO_Init+0xe0>
 800b184:	21be      	movs	r1, #190	@ 0xbe
 800b186:	483c      	ldr	r0, [pc, #240]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b188:	f7f9 fa9c 	bl	80046c4 <assert_failed>

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	461a      	mov	r2, r3
 800b192:	69b9      	ldr	r1, [r7, #24]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ff67 	bl	800b068 <LL_GPIO_SetPinPull>
      }
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d013      	beq.n	800b1ca <LL_GPIO_Init+0x11e>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d00f      	beq.n	800b1ca <LL_GPIO_Init+0x11e>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b08      	cmp	r3, #8
 800b1b0:	d00b      	beq.n	800b1ca <LL_GPIO_Init+0x11e>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d007      	beq.n	800b1ca <LL_GPIO_Init+0x11e>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2b09      	cmp	r3, #9
 800b1c0:	d003      	beq.n	800b1ca <LL_GPIO_Init+0x11e>
 800b1c2:	21c5      	movs	r1, #197	@ 0xc5
 800b1c4:	482c      	ldr	r0, [pc, #176]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b1c6:	f7f9 fa7d 	bl	80046c4 <assert_failed>
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	69b9      	ldr	r1, [r7, #24]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff feb2 	bl	800af3c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d003      	beq.n	800b1e8 <LL_GPIO_Init+0x13c>
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	2b09      	cmp	r3, #9
 800b1e6:	d129      	bne.n	800b23c <LL_GPIO_Init+0x190>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d00b      	beq.n	800b208 <LL_GPIO_Init+0x15c>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d007      	beq.n	800b208 <LL_GPIO_Init+0x15c>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d003      	beq.n	800b208 <LL_GPIO_Init+0x15c>
 800b200:	21cd      	movs	r1, #205	@ 0xcd
 800b202:	481d      	ldr	r0, [pc, #116]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b204:	f7f9 fa5e 	bl	80046c4 <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <LL_GPIO_Init+0x174>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	2b04      	cmp	r3, #4
 800b216:	d003      	beq.n	800b220 <LL_GPIO_Init+0x174>
 800b218:	21ce      	movs	r1, #206	@ 0xce
 800b21a:	4817      	ldr	r0, [pc, #92]	@ (800b278 <LL_GPIO_Init+0x1cc>)
 800b21c:	f7f9 fa52 	bl	80046c4 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	461a      	mov	r2, r3
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff feb9 	bl	800afa0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	461a      	mov	r2, r3
 800b234:	69b9      	ldr	r1, [r7, #24]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fee4 	bl	800b004 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	3301      	adds	r3, #1
 800b240:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	fa22 f303 	lsr.w	r3, r2, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f47f af74 	bne.w	800b138 <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	40010800 	.word	0x40010800
 800b260:	40010c00 	.word	0x40010c00
 800b264:	40011000 	.word	0x40011000
 800b268:	40011400 	.word	0x40011400
 800b26c:	40011800 	.word	0x40011800
 800b270:	40011c00 	.word	0x40011c00
 800b274:	40012000 	.word	0x40012000
 800b278:	080101f0 	.word	0x080101f0

0800b27c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b280:	4b03      	ldr	r3, [pc, #12]	@ (800b290 <LL_RCC_GetSysClkSource+0x14>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	f003 030c 	and.w	r3, r3, #12
}
 800b288:	4618      	mov	r0, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bc80      	pop	{r7}
 800b28e:	4770      	bx	lr
 800b290:	40021000 	.word	0x40021000

0800b294 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b298:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <LL_RCC_GetAHBPrescaler+0x14>)
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bc80      	pop	{r7}
 800b2a6:	4770      	bx	lr
 800b2a8:	40021000 	.word	0x40021000

0800b2ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b2b0:	4b03      	ldr	r3, [pc, #12]	@ (800b2c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bc80      	pop	{r7}
 800b2be:	4770      	bx	lr
 800b2c0:	40021000 	.word	0x40021000

0800b2c4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b2c8:	4b03      	ldr	r3, [pc, #12]	@ (800b2d8 <LL_RCC_GetAPB2Prescaler+0x14>)
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bc80      	pop	{r7}
 800b2d6:	4770      	bx	lr
 800b2d8:	40021000 	.word	0x40021000

0800b2dc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800b2e0:	4b03      	ldr	r3, [pc, #12]	@ (800b2f0 <LL_RCC_PLL_GetMainSource+0x14>)
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr
 800b2f0:	40021000 	.word	0x40021000

0800b2f4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800b2f8:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 800b300:	4618      	mov	r0, r3
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr
 800b308:	40021000 	.word	0x40021000

0800b30c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800b310:	4b04      	ldr	r3, [pc, #16]	@ (800b324 <LL_RCC_PLL_GetPrediv+0x18>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	0c5b      	lsrs	r3, r3, #17
 800b316:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bc80      	pop	{r7}
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	40021000 	.word	0x40021000

0800b328 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b330:	f000 f820 	bl	800b374 <RCC_GetSystemClockFreq>
 800b334:	4602      	mov	r2, r0
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f83e 	bl	800b3c0 <RCC_GetHCLKClockFreq>
 800b344:	4602      	mov	r2, r0
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f84c 	bl	800b3ec <RCC_GetPCLK1ClockFreq>
 800b354:	4602      	mov	r2, r0
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 f858 	bl	800b414 <RCC_GetPCLK2ClockFreq>
 800b364:	4602      	mov	r2, r0
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b37e:	f7ff ff7d 	bl	800b27c <LL_RCC_GetSysClkSource>
 800b382:	4603      	mov	r3, r0
 800b384:	2b08      	cmp	r3, #8
 800b386:	d00c      	beq.n	800b3a2 <RCC_GetSystemClockFreq+0x2e>
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d80e      	bhi.n	800b3aa <RCC_GetSystemClockFreq+0x36>
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <RCC_GetSystemClockFreq+0x22>
 800b390:	2b04      	cmp	r3, #4
 800b392:	d003      	beq.n	800b39c <RCC_GetSystemClockFreq+0x28>
 800b394:	e009      	b.n	800b3aa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b396:	4b09      	ldr	r3, [pc, #36]	@ (800b3bc <RCC_GetSystemClockFreq+0x48>)
 800b398:	607b      	str	r3, [r7, #4]
      break;
 800b39a:	e009      	b.n	800b3b0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b39c:	4b07      	ldr	r3, [pc, #28]	@ (800b3bc <RCC_GetSystemClockFreq+0x48>)
 800b39e:	607b      	str	r3, [r7, #4]
      break;
 800b3a0:	e006      	b.n	800b3b0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800b3a2:	f000 f84b 	bl	800b43c <RCC_PLL_GetFreqDomain_SYS>
 800b3a6:	6078      	str	r0, [r7, #4]
      break;
 800b3a8:	e002      	b.n	800b3b0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800b3aa:	4b04      	ldr	r3, [pc, #16]	@ (800b3bc <RCC_GetSystemClockFreq+0x48>)
 800b3ac:	607b      	str	r3, [r7, #4]
      break;
 800b3ae:	bf00      	nop
  }

  return frequency;
 800b3b0:	687b      	ldr	r3, [r7, #4]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	007a1200 	.word	0x007a1200

0800b3c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b3c8:	f7ff ff64 	bl	800b294 <LL_RCC_GetAHBPrescaler>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	091b      	lsrs	r3, r3, #4
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	4a04      	ldr	r2, [pc, #16]	@ (800b3e8 <RCC_GetHCLKClockFreq+0x28>)
 800b3d6:	5cd3      	ldrb	r3, [r2, r3]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	40d3      	lsrs	r3, r2
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	080109d0 	.word	0x080109d0

0800b3ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b3f4:	f7ff ff5a 	bl	800b2ac <LL_RCC_GetAPB1Prescaler>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	4a04      	ldr	r2, [pc, #16]	@ (800b410 <RCC_GetPCLK1ClockFreq+0x24>)
 800b3fe:	5cd3      	ldrb	r3, [r2, r3]
 800b400:	461a      	mov	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	40d3      	lsrs	r3, r2
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	080109e0 	.word	0x080109e0

0800b414 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b41c:	f7ff ff52 	bl	800b2c4 <LL_RCC_GetAPB2Prescaler>
 800b420:	4603      	mov	r3, r0
 800b422:	0adb      	lsrs	r3, r3, #11
 800b424:	4a04      	ldr	r2, [pc, #16]	@ (800b438 <RCC_GetPCLK2ClockFreq+0x24>)
 800b426:	5cd3      	ldrb	r3, [r2, r3]
 800b428:	461a      	mov	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	40d3      	lsrs	r3, r2
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	080109e0 	.word	0x080109e0

0800b43c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	2300      	movs	r3, #0
 800b448:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b44a:	f7ff ff47 	bl	800b2dc <LL_RCC_PLL_GetMainSource>
 800b44e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b45c:	d003      	beq.n	800b466 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b45e:	e00b      	b.n	800b478 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800b460:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800b462:	607b      	str	r3, [r7, #4]
      break;
 800b464:	e00b      	b.n	800b47e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800b466:	f7ff ff51 	bl	800b30c <LL_RCC_PLL_GetPrediv>
 800b46a:	4603      	mov	r3, r0
 800b46c:	3301      	adds	r3, #1
 800b46e:	4a0b      	ldr	r2, [pc, #44]	@ (800b49c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800b470:	fbb2 f3f3 	udiv	r3, r2, r3
 800b474:	607b      	str	r3, [r7, #4]
      break;
 800b476:	e002      	b.n	800b47e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800b478:	4b07      	ldr	r3, [pc, #28]	@ (800b498 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800b47a:	607b      	str	r3, [r7, #4]
      break;
 800b47c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800b47e:	f7ff ff39 	bl	800b2f4 <LL_RCC_PLL_GetMultiplicator>
 800b482:	4603      	mov	r3, r0
 800b484:	0c9b      	lsrs	r3, r3, #18
 800b486:	3302      	adds	r3, #2
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	003d0900 	.word	0x003d0900
 800b49c:	007a1200 	.word	0x007a1200

0800b4a0 <LL_USART_IsEnabled>:
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4b4:	bf0c      	ite	eq
 800b4b6:	2301      	moveq	r3, #1
 800b4b8:	2300      	movne	r3, #0
 800b4ba:	b2db      	uxtb	r3, r3
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bc80      	pop	{r7}
 800b4c4:	4770      	bx	lr

0800b4c6 <LL_USART_SetStopBitsLength>:
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	611a      	str	r2, [r3, #16]
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr

0800b4ea <LL_USART_SetHWFlowCtrl>:
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	615a      	str	r2, [r3, #20]
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr
	...

0800b510 <LL_USART_SetBaudRate>:
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009a      	lsls	r2, r3, #2
 800b526:	441a      	add	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	4a25      	ldr	r2, [pc, #148]	@ (800b5c8 <LL_USART_SetBaudRate+0xb8>)
 800b532:	fba2 2303 	umull	r2, r3, r2, r3
 800b536:	095b      	lsrs	r3, r3, #5
 800b538:	b29b      	uxth	r3, r3
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	b299      	uxth	r1, r3
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009a      	lsls	r2, r3, #2
 800b548:	441a      	add	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b552:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c8 <LL_USART_SetBaudRate+0xb8>)
 800b554:	fba3 0302 	umull	r0, r3, r3, r2
 800b558:	095b      	lsrs	r3, r3, #5
 800b55a:	2064      	movs	r0, #100	@ 0x64
 800b55c:	fb00 f303 	mul.w	r3, r0, r3
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	3332      	adds	r3, #50	@ 0x32
 800b566:	4a18      	ldr	r2, [pc, #96]	@ (800b5c8 <LL_USART_SetBaudRate+0xb8>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	095b      	lsrs	r3, r3, #5
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b574:	b29b      	uxth	r3, r3
 800b576:	440b      	add	r3, r1
 800b578:	b299      	uxth	r1, r3
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009a      	lsls	r2, r3, #2
 800b584:	441a      	add	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b58e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c8 <LL_USART_SetBaudRate+0xb8>)
 800b590:	fba3 0302 	umull	r0, r3, r3, r2
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	2064      	movs	r0, #100	@ 0x64
 800b598:	fb00 f303 	mul.w	r3, r0, r3
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	011b      	lsls	r3, r3, #4
 800b5a0:	3332      	adds	r3, #50	@ 0x32
 800b5a2:	4a09      	ldr	r2, [pc, #36]	@ (800b5c8 <LL_USART_SetBaudRate+0xb8>)
 800b5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a8:	095b      	lsrs	r3, r3, #5
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f003 030f 	and.w	r3, r3, #15
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	440b      	add	r3, r1
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	609a      	str	r2, [r3, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bc80      	pop	{r7}
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	51eb851f 	.word	0x51eb851f

0800b5cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61bb      	str	r3, [r7, #24]
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a74      	ldr	r2, [pc, #464]	@ (800b7b4 <LL_USART_Init+0x1e8>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d013      	beq.n	800b60e <LL_USART_Init+0x42>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a73      	ldr	r2, [pc, #460]	@ (800b7b8 <LL_USART_Init+0x1ec>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00f      	beq.n	800b60e <LL_USART_Init+0x42>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a72      	ldr	r2, [pc, #456]	@ (800b7bc <LL_USART_Init+0x1f0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00b      	beq.n	800b60e <LL_USART_Init+0x42>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a71      	ldr	r2, [pc, #452]	@ (800b7c0 <LL_USART_Init+0x1f4>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d007      	beq.n	800b60e <LL_USART_Init+0x42>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a70      	ldr	r2, [pc, #448]	@ (800b7c4 <LL_USART_Init+0x1f8>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d003      	beq.n	800b60e <LL_USART_Init+0x42>
 800b606:	21cd      	movs	r1, #205	@ 0xcd
 800b608:	486f      	ldr	r0, [pc, #444]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b60a:	f7f9 f85b 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a6e      	ldr	r2, [pc, #440]	@ (800b7cc <LL_USART_Init+0x200>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d903      	bls.n	800b620 <LL_USART_Init+0x54>
 800b618:	21ce      	movs	r1, #206	@ 0xce
 800b61a:	486b      	ldr	r0, [pc, #428]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b61c:	f7f9 f852 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d008      	beq.n	800b63a <LL_USART_Init+0x6e>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b630:	d003      	beq.n	800b63a <LL_USART_Init+0x6e>
 800b632:	21cf      	movs	r1, #207	@ 0xcf
 800b634:	4864      	ldr	r0, [pc, #400]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b636:	f7f9 f845 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b642:	d011      	beq.n	800b668 <LL_USART_Init+0x9c>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00d      	beq.n	800b668 <LL_USART_Init+0x9c>
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b654:	d008      	beq.n	800b668 <LL_USART_Init+0x9c>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b65e:	d003      	beq.n	800b668 <LL_USART_Init+0x9c>
 800b660:	21d0      	movs	r1, #208	@ 0xd0
 800b662:	4859      	ldr	r0, [pc, #356]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b664:	f7f9 f82e 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00d      	beq.n	800b68c <LL_USART_Init+0xc0>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b678:	d008      	beq.n	800b68c <LL_USART_Init+0xc0>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b682:	d003      	beq.n	800b68c <LL_USART_Init+0xc0>
 800b684:	21d1      	movs	r1, #209	@ 0xd1
 800b686:	4850      	ldr	r0, [pc, #320]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b688:	f7f9 f81c 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <LL_USART_Init+0xe8>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d00b      	beq.n	800b6b4 <LL_USART_Init+0xe8>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	d007      	beq.n	800b6b4 <LL_USART_Init+0xe8>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	2b0c      	cmp	r3, #12
 800b6aa:	d003      	beq.n	800b6b4 <LL_USART_Init+0xe8>
 800b6ac:	21d2      	movs	r1, #210	@ 0xd2
 800b6ae:	4846      	ldr	r0, [pc, #280]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b6b0:	f7f9 f808 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d012      	beq.n	800b6e2 <LL_USART_Init+0x116>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6c4:	d00d      	beq.n	800b6e2 <LL_USART_Init+0x116>
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ce:	d008      	beq.n	800b6e2 <LL_USART_Init+0x116>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6d8:	d003      	beq.n	800b6e2 <LL_USART_Init+0x116>
 800b6da:	21d3      	movs	r1, #211	@ 0xd3
 800b6dc:	483a      	ldr	r0, [pc, #232]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b6de:	f7f8 fff1 	bl	80046c4 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fedc 	bl	800b4a0 <LL_USART_IsEnabled>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d15c      	bne.n	800b7a8 <LL_USART_Init+0x1dc>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800b6f6:	f023 030c 	bic.w	r3, r3, #12
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	6851      	ldr	r1, [r2, #4]
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	68d2      	ldr	r2, [r2, #12]
 800b702:	4311      	orrs	r1, r2
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	6912      	ldr	r2, [r2, #16]
 800b708:	430a      	orrs	r2, r1
 800b70a:	431a      	orrs	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff fed5 	bl	800b4c6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fee1 	bl	800b4ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fdfb 	bl	800b328 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a1f      	ldr	r2, [pc, #124]	@ (800b7b4 <LL_USART_Init+0x1e8>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d102      	bne.n	800b740 <LL_USART_Init+0x174>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	e01a      	b.n	800b776 <LL_USART_Init+0x1aa>
    }
    else if (USARTx == USART2)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a1d      	ldr	r2, [pc, #116]	@ (800b7b8 <LL_USART_Init+0x1ec>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d102      	bne.n	800b74e <LL_USART_Init+0x182>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	61bb      	str	r3, [r7, #24]
 800b74c:	e013      	b.n	800b776 <LL_USART_Init+0x1aa>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a1a      	ldr	r2, [pc, #104]	@ (800b7bc <LL_USART_Init+0x1f0>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d102      	bne.n	800b75c <LL_USART_Init+0x190>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	e00c      	b.n	800b776 <LL_USART_Init+0x1aa>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a18      	ldr	r2, [pc, #96]	@ (800b7c0 <LL_USART_Init+0x1f4>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d102      	bne.n	800b76a <LL_USART_Init+0x19e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	61bb      	str	r3, [r7, #24]
 800b768:	e005      	b.n	800b776 <LL_USART_Init+0x1aa>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a15      	ldr	r2, [pc, #84]	@ (800b7c4 <LL_USART_Init+0x1f8>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d101      	bne.n	800b776 <LL_USART_Init+0x1aa>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d015      	beq.n	800b7a8 <LL_USART_Init+0x1dc>
        && (USART_InitStruct->BaudRate != 0U))
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d011      	beq.n	800b7a8 <LL_USART_Init+0x1dc>
    {
      status = SUCCESS;
 800b784:	2300      	movs	r3, #0
 800b786:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800b78c:	461a      	mov	r2, r3
 800b78e:	69b9      	ldr	r1, [r7, #24]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff febd 	bl	800b510 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	2b0f      	cmp	r3, #15
 800b79c:	d804      	bhi.n	800b7a8 <LL_USART_Init+0x1dc>
 800b79e:	f240 1135 	movw	r1, #309	@ 0x135
 800b7a2:	4809      	ldr	r0, [pc, #36]	@ (800b7c8 <LL_USART_Init+0x1fc>)
 800b7a4:	f7f8 ff8e 	bl	80046c4 <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b7a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	40013800 	.word	0x40013800
 800b7b8:	40004400 	.word	0x40004400
 800b7bc:	40004800 	.word	0x40004800
 800b7c0:	40004c00 	.word	0x40004c00
 800b7c4:	40005000 	.word	0x40005000
 800b7c8:	08010228 	.word	0x08010228
 800b7cc:	0044aa20 	.word	0x0044aa20

0800b7d0 <atoi>:
 800b7d0:	220a      	movs	r2, #10
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f000 b87c 	b.w	800b8d0 <strtol>

0800b7d8 <_strtol_l.constprop.0>:
 800b7d8:	2b24      	cmp	r3, #36	@ 0x24
 800b7da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7de:	4686      	mov	lr, r0
 800b7e0:	4690      	mov	r8, r2
 800b7e2:	d801      	bhi.n	800b7e8 <_strtol_l.constprop.0+0x10>
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d106      	bne.n	800b7f6 <_strtol_l.constprop.0+0x1e>
 800b7e8:	f001 f872 	bl	800c8d0 <__errno>
 800b7ec:	2316      	movs	r3, #22
 800b7ee:	6003      	str	r3, [r0, #0]
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	4833      	ldr	r0, [pc, #204]	@ (800b8c8 <_strtol_l.constprop.0+0xf0>)
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b800:	5d06      	ldrb	r6, [r0, r4]
 800b802:	f016 0608 	ands.w	r6, r6, #8
 800b806:	d1f8      	bne.n	800b7fa <_strtol_l.constprop.0+0x22>
 800b808:	2c2d      	cmp	r4, #45	@ 0x2d
 800b80a:	d12d      	bne.n	800b868 <_strtol_l.constprop.0+0x90>
 800b80c:	2601      	movs	r6, #1
 800b80e:	782c      	ldrb	r4, [r5, #0]
 800b810:	1c95      	adds	r5, r2, #2
 800b812:	f033 0210 	bics.w	r2, r3, #16
 800b816:	d109      	bne.n	800b82c <_strtol_l.constprop.0+0x54>
 800b818:	2c30      	cmp	r4, #48	@ 0x30
 800b81a:	d12a      	bne.n	800b872 <_strtol_l.constprop.0+0x9a>
 800b81c:	782a      	ldrb	r2, [r5, #0]
 800b81e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b822:	2a58      	cmp	r2, #88	@ 0x58
 800b824:	d125      	bne.n	800b872 <_strtol_l.constprop.0+0x9a>
 800b826:	2310      	movs	r3, #16
 800b828:	786c      	ldrb	r4, [r5, #1]
 800b82a:	3502      	adds	r5, #2
 800b82c:	2200      	movs	r2, #0
 800b82e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b832:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b836:	fbbc f9f3 	udiv	r9, ip, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b840:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b844:	2f09      	cmp	r7, #9
 800b846:	d81b      	bhi.n	800b880 <_strtol_l.constprop.0+0xa8>
 800b848:	463c      	mov	r4, r7
 800b84a:	42a3      	cmp	r3, r4
 800b84c:	dd27      	ble.n	800b89e <_strtol_l.constprop.0+0xc6>
 800b84e:	1c57      	adds	r7, r2, #1
 800b850:	d007      	beq.n	800b862 <_strtol_l.constprop.0+0x8a>
 800b852:	4581      	cmp	r9, r0
 800b854:	d320      	bcc.n	800b898 <_strtol_l.constprop.0+0xc0>
 800b856:	d101      	bne.n	800b85c <_strtol_l.constprop.0+0x84>
 800b858:	45a2      	cmp	sl, r4
 800b85a:	db1d      	blt.n	800b898 <_strtol_l.constprop.0+0xc0>
 800b85c:	2201      	movs	r2, #1
 800b85e:	fb00 4003 	mla	r0, r0, r3, r4
 800b862:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b866:	e7eb      	b.n	800b840 <_strtol_l.constprop.0+0x68>
 800b868:	2c2b      	cmp	r4, #43	@ 0x2b
 800b86a:	bf04      	itt	eq
 800b86c:	782c      	ldrbeq	r4, [r5, #0]
 800b86e:	1c95      	addeq	r5, r2, #2
 800b870:	e7cf      	b.n	800b812 <_strtol_l.constprop.0+0x3a>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1da      	bne.n	800b82c <_strtol_l.constprop.0+0x54>
 800b876:	2c30      	cmp	r4, #48	@ 0x30
 800b878:	bf0c      	ite	eq
 800b87a:	2308      	moveq	r3, #8
 800b87c:	230a      	movne	r3, #10
 800b87e:	e7d5      	b.n	800b82c <_strtol_l.constprop.0+0x54>
 800b880:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b884:	2f19      	cmp	r7, #25
 800b886:	d801      	bhi.n	800b88c <_strtol_l.constprop.0+0xb4>
 800b888:	3c37      	subs	r4, #55	@ 0x37
 800b88a:	e7de      	b.n	800b84a <_strtol_l.constprop.0+0x72>
 800b88c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b890:	2f19      	cmp	r7, #25
 800b892:	d804      	bhi.n	800b89e <_strtol_l.constprop.0+0xc6>
 800b894:	3c57      	subs	r4, #87	@ 0x57
 800b896:	e7d8      	b.n	800b84a <_strtol_l.constprop.0+0x72>
 800b898:	f04f 32ff 	mov.w	r2, #4294967295
 800b89c:	e7e1      	b.n	800b862 <_strtol_l.constprop.0+0x8a>
 800b89e:	1c53      	adds	r3, r2, #1
 800b8a0:	d108      	bne.n	800b8b4 <_strtol_l.constprop.0+0xdc>
 800b8a2:	2322      	movs	r3, #34	@ 0x22
 800b8a4:	4660      	mov	r0, ip
 800b8a6:	f8ce 3000 	str.w	r3, [lr]
 800b8aa:	f1b8 0f00 	cmp.w	r8, #0
 800b8ae:	d0a0      	beq.n	800b7f2 <_strtol_l.constprop.0+0x1a>
 800b8b0:	1e69      	subs	r1, r5, #1
 800b8b2:	e006      	b.n	800b8c2 <_strtol_l.constprop.0+0xea>
 800b8b4:	b106      	cbz	r6, 800b8b8 <_strtol_l.constprop.0+0xe0>
 800b8b6:	4240      	negs	r0, r0
 800b8b8:	f1b8 0f00 	cmp.w	r8, #0
 800b8bc:	d099      	beq.n	800b7f2 <_strtol_l.constprop.0+0x1a>
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	d1f6      	bne.n	800b8b0 <_strtol_l.constprop.0+0xd8>
 800b8c2:	f8c8 1000 	str.w	r1, [r8]
 800b8c6:	e794      	b.n	800b7f2 <_strtol_l.constprop.0+0x1a>
 800b8c8:	08010a0f 	.word	0x08010a0f

0800b8cc <_strtol_r>:
 800b8cc:	f7ff bf84 	b.w	800b7d8 <_strtol_l.constprop.0>

0800b8d0 <strtol>:
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	460a      	mov	r2, r1
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	4802      	ldr	r0, [pc, #8]	@ (800b8e0 <strtol+0x10>)
 800b8d8:	6800      	ldr	r0, [r0, #0]
 800b8da:	f7ff bf7d 	b.w	800b7d8 <_strtol_l.constprop.0>
 800b8de:	bf00      	nop
 800b8e0:	20000050 	.word	0x20000050

0800b8e4 <__cvt>:
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	bfbb      	ittet	lt
 800b8ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b8f2:	461d      	movlt	r5, r3
 800b8f4:	2300      	movge	r3, #0
 800b8f6:	232d      	movlt	r3, #45	@ 0x2d
 800b8f8:	b088      	sub	sp, #32
 800b8fa:	4614      	mov	r4, r2
 800b8fc:	bfb8      	it	lt
 800b8fe:	4614      	movlt	r4, r2
 800b900:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b902:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b904:	7013      	strb	r3, [r2, #0]
 800b906:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b908:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b90c:	f023 0820 	bic.w	r8, r3, #32
 800b910:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b914:	d005      	beq.n	800b922 <__cvt+0x3e>
 800b916:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b91a:	d100      	bne.n	800b91e <__cvt+0x3a>
 800b91c:	3601      	adds	r6, #1
 800b91e:	2302      	movs	r3, #2
 800b920:	e000      	b.n	800b924 <__cvt+0x40>
 800b922:	2303      	movs	r3, #3
 800b924:	aa07      	add	r2, sp, #28
 800b926:	9204      	str	r2, [sp, #16]
 800b928:	aa06      	add	r2, sp, #24
 800b92a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b92e:	e9cd 3600 	strd	r3, r6, [sp]
 800b932:	4622      	mov	r2, r4
 800b934:	462b      	mov	r3, r5
 800b936:	f001 f8a3 	bl	800ca80 <_dtoa_r>
 800b93a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b93e:	4607      	mov	r7, r0
 800b940:	d119      	bne.n	800b976 <__cvt+0x92>
 800b942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b944:	07db      	lsls	r3, r3, #31
 800b946:	d50e      	bpl.n	800b966 <__cvt+0x82>
 800b948:	eb00 0906 	add.w	r9, r0, r6
 800b94c:	2200      	movs	r2, #0
 800b94e:	2300      	movs	r3, #0
 800b950:	4620      	mov	r0, r4
 800b952:	4629      	mov	r1, r5
 800b954:	f7f5 f894 	bl	8000a80 <__aeabi_dcmpeq>
 800b958:	b108      	cbz	r0, 800b95e <__cvt+0x7a>
 800b95a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b95e:	2230      	movs	r2, #48	@ 0x30
 800b960:	9b07      	ldr	r3, [sp, #28]
 800b962:	454b      	cmp	r3, r9
 800b964:	d31e      	bcc.n	800b9a4 <__cvt+0xc0>
 800b966:	4638      	mov	r0, r7
 800b968:	9b07      	ldr	r3, [sp, #28]
 800b96a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b96c:	1bdb      	subs	r3, r3, r7
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	b008      	add	sp, #32
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b976:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b97a:	eb00 0906 	add.w	r9, r0, r6
 800b97e:	d1e5      	bne.n	800b94c <__cvt+0x68>
 800b980:	7803      	ldrb	r3, [r0, #0]
 800b982:	2b30      	cmp	r3, #48	@ 0x30
 800b984:	d10a      	bne.n	800b99c <__cvt+0xb8>
 800b986:	2200      	movs	r2, #0
 800b988:	2300      	movs	r3, #0
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f5 f877 	bl	8000a80 <__aeabi_dcmpeq>
 800b992:	b918      	cbnz	r0, 800b99c <__cvt+0xb8>
 800b994:	f1c6 0601 	rsb	r6, r6, #1
 800b998:	f8ca 6000 	str.w	r6, [sl]
 800b99c:	f8da 3000 	ldr.w	r3, [sl]
 800b9a0:	4499      	add	r9, r3
 800b9a2:	e7d3      	b.n	800b94c <__cvt+0x68>
 800b9a4:	1c59      	adds	r1, r3, #1
 800b9a6:	9107      	str	r1, [sp, #28]
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	e7d9      	b.n	800b960 <__cvt+0x7c>

0800b9ac <__exponent>:
 800b9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ae:	2900      	cmp	r1, #0
 800b9b0:	bfb6      	itet	lt
 800b9b2:	232d      	movlt	r3, #45	@ 0x2d
 800b9b4:	232b      	movge	r3, #43	@ 0x2b
 800b9b6:	4249      	neglt	r1, r1
 800b9b8:	2909      	cmp	r1, #9
 800b9ba:	7002      	strb	r2, [r0, #0]
 800b9bc:	7043      	strb	r3, [r0, #1]
 800b9be:	dd29      	ble.n	800ba14 <__exponent+0x68>
 800b9c0:	f10d 0307 	add.w	r3, sp, #7
 800b9c4:	461d      	mov	r5, r3
 800b9c6:	270a      	movs	r7, #10
 800b9c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	fb07 1416 	mls	r4, r7, r6, r1
 800b9d2:	3430      	adds	r4, #48	@ 0x30
 800b9d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9d8:	460c      	mov	r4, r1
 800b9da:	2c63      	cmp	r4, #99	@ 0x63
 800b9dc:	4631      	mov	r1, r6
 800b9de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9e2:	dcf1      	bgt.n	800b9c8 <__exponent+0x1c>
 800b9e4:	3130      	adds	r1, #48	@ 0x30
 800b9e6:	1e94      	subs	r4, r2, #2
 800b9e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9ec:	4623      	mov	r3, r4
 800b9ee:	1c41      	adds	r1, r0, #1
 800b9f0:	42ab      	cmp	r3, r5
 800b9f2:	d30a      	bcc.n	800ba0a <__exponent+0x5e>
 800b9f4:	f10d 0309 	add.w	r3, sp, #9
 800b9f8:	1a9b      	subs	r3, r3, r2
 800b9fa:	42ac      	cmp	r4, r5
 800b9fc:	bf88      	it	hi
 800b9fe:	2300      	movhi	r3, #0
 800ba00:	3302      	adds	r3, #2
 800ba02:	4403      	add	r3, r0
 800ba04:	1a18      	subs	r0, r3, r0
 800ba06:	b003      	add	sp, #12
 800ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba12:	e7ed      	b.n	800b9f0 <__exponent+0x44>
 800ba14:	2330      	movs	r3, #48	@ 0x30
 800ba16:	3130      	adds	r1, #48	@ 0x30
 800ba18:	7083      	strb	r3, [r0, #2]
 800ba1a:	70c1      	strb	r1, [r0, #3]
 800ba1c:	1d03      	adds	r3, r0, #4
 800ba1e:	e7f1      	b.n	800ba04 <__exponent+0x58>

0800ba20 <_printf_float>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	b091      	sub	sp, #68	@ 0x44
 800ba26:	460c      	mov	r4, r1
 800ba28:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ba2c:	4616      	mov	r6, r2
 800ba2e:	461f      	mov	r7, r3
 800ba30:	4605      	mov	r5, r0
 800ba32:	f000 ff03 	bl	800c83c <_localeconv_r>
 800ba36:	6803      	ldr	r3, [r0, #0]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	9308      	str	r3, [sp, #32]
 800ba3c:	f7f4 fbf4 	bl	8000228 <strlen>
 800ba40:	2300      	movs	r3, #0
 800ba42:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba44:	f8d8 3000 	ldr.w	r3, [r8]
 800ba48:	9009      	str	r0, [sp, #36]	@ 0x24
 800ba4a:	3307      	adds	r3, #7
 800ba4c:	f023 0307 	bic.w	r3, r3, #7
 800ba50:	f103 0208 	add.w	r2, r3, #8
 800ba54:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba58:	f8d4 b000 	ldr.w	fp, [r4]
 800ba5c:	f8c8 2000 	str.w	r2, [r8]
 800ba60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba6a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba7a:	4b9c      	ldr	r3, [pc, #624]	@ (800bcec <_printf_float+0x2cc>)
 800ba7c:	f7f5 f832 	bl	8000ae4 <__aeabi_dcmpun>
 800ba80:	bb70      	cbnz	r0, 800bae0 <_printf_float+0xc0>
 800ba82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8a:	4b98      	ldr	r3, [pc, #608]	@ (800bcec <_printf_float+0x2cc>)
 800ba8c:	f7f5 f80c 	bl	8000aa8 <__aeabi_dcmple>
 800ba90:	bb30      	cbnz	r0, 800bae0 <_printf_float+0xc0>
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f4 fffb 	bl	8000a94 <__aeabi_dcmplt>
 800ba9e:	b110      	cbz	r0, 800baa6 <_printf_float+0x86>
 800baa0:	232d      	movs	r3, #45	@ 0x2d
 800baa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baa6:	4a92      	ldr	r2, [pc, #584]	@ (800bcf0 <_printf_float+0x2d0>)
 800baa8:	4b92      	ldr	r3, [pc, #584]	@ (800bcf4 <_printf_float+0x2d4>)
 800baaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800baae:	bf94      	ite	ls
 800bab0:	4690      	movls	r8, r2
 800bab2:	4698      	movhi	r8, r3
 800bab4:	2303      	movs	r3, #3
 800bab6:	f04f 0900 	mov.w	r9, #0
 800baba:	6123      	str	r3, [r4, #16]
 800babc:	f02b 0304 	bic.w	r3, fp, #4
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	4633      	mov	r3, r6
 800bac4:	4621      	mov	r1, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	9700      	str	r7, [sp, #0]
 800baca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bacc:	f000 f9d4 	bl	800be78 <_printf_common>
 800bad0:	3001      	adds	r0, #1
 800bad2:	f040 8090 	bne.w	800bbf6 <_printf_float+0x1d6>
 800bad6:	f04f 30ff 	mov.w	r0, #4294967295
 800bada:	b011      	add	sp, #68	@ 0x44
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	4642      	mov	r2, r8
 800bae2:	464b      	mov	r3, r9
 800bae4:	4640      	mov	r0, r8
 800bae6:	4649      	mov	r1, r9
 800bae8:	f7f4 fffc 	bl	8000ae4 <__aeabi_dcmpun>
 800baec:	b148      	cbz	r0, 800bb02 <_printf_float+0xe2>
 800baee:	464b      	mov	r3, r9
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfb8      	it	lt
 800baf4:	232d      	movlt	r3, #45	@ 0x2d
 800baf6:	4a80      	ldr	r2, [pc, #512]	@ (800bcf8 <_printf_float+0x2d8>)
 800baf8:	bfb8      	it	lt
 800bafa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bafe:	4b7f      	ldr	r3, [pc, #508]	@ (800bcfc <_printf_float+0x2dc>)
 800bb00:	e7d3      	b.n	800baaa <_printf_float+0x8a>
 800bb02:	6863      	ldr	r3, [r4, #4]
 800bb04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	d13f      	bne.n	800bb8c <_printf_float+0x16c>
 800bb0c:	2306      	movs	r3, #6
 800bb0e:	6063      	str	r3, [r4, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	9206      	str	r2, [sp, #24]
 800bb1a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bb1c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800bb20:	aa0d      	add	r2, sp, #52	@ 0x34
 800bb22:	9203      	str	r2, [sp, #12]
 800bb24:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800bb28:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb2c:	6863      	ldr	r3, [r4, #4]
 800bb2e:	4642      	mov	r2, r8
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	4628      	mov	r0, r5
 800bb34:	464b      	mov	r3, r9
 800bb36:	910a      	str	r1, [sp, #40]	@ 0x28
 800bb38:	f7ff fed4 	bl	800b8e4 <__cvt>
 800bb3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb3e:	4680      	mov	r8, r0
 800bb40:	2947      	cmp	r1, #71	@ 0x47
 800bb42:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bb44:	d128      	bne.n	800bb98 <_printf_float+0x178>
 800bb46:	1cc8      	adds	r0, r1, #3
 800bb48:	db02      	blt.n	800bb50 <_printf_float+0x130>
 800bb4a:	6863      	ldr	r3, [r4, #4]
 800bb4c:	4299      	cmp	r1, r3
 800bb4e:	dd40      	ble.n	800bbd2 <_printf_float+0x1b2>
 800bb50:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb54:	fa5f fa8a 	uxtb.w	sl, sl
 800bb58:	4652      	mov	r2, sl
 800bb5a:	3901      	subs	r1, #1
 800bb5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb60:	910d      	str	r1, [sp, #52]	@ 0x34
 800bb62:	f7ff ff23 	bl	800b9ac <__exponent>
 800bb66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb68:	4681      	mov	r9, r0
 800bb6a:	1813      	adds	r3, r2, r0
 800bb6c:	2a01      	cmp	r2, #1
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	dc02      	bgt.n	800bb78 <_printf_float+0x158>
 800bb72:	6822      	ldr	r2, [r4, #0]
 800bb74:	07d2      	lsls	r2, r2, #31
 800bb76:	d501      	bpl.n	800bb7c <_printf_float+0x15c>
 800bb78:	3301      	adds	r3, #1
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d09e      	beq.n	800bac2 <_printf_float+0xa2>
 800bb84:	232d      	movs	r3, #45	@ 0x2d
 800bb86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb8a:	e79a      	b.n	800bac2 <_printf_float+0xa2>
 800bb8c:	2947      	cmp	r1, #71	@ 0x47
 800bb8e:	d1bf      	bne.n	800bb10 <_printf_float+0xf0>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1bd      	bne.n	800bb10 <_printf_float+0xf0>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e7ba      	b.n	800bb0e <_printf_float+0xee>
 800bb98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb9c:	d9dc      	bls.n	800bb58 <_printf_float+0x138>
 800bb9e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bba2:	d118      	bne.n	800bbd6 <_printf_float+0x1b6>
 800bba4:	2900      	cmp	r1, #0
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	dd0b      	ble.n	800bbc2 <_printf_float+0x1a2>
 800bbaa:	6121      	str	r1, [r4, #16]
 800bbac:	b913      	cbnz	r3, 800bbb4 <_printf_float+0x194>
 800bbae:	6822      	ldr	r2, [r4, #0]
 800bbb0:	07d0      	lsls	r0, r2, #31
 800bbb2:	d502      	bpl.n	800bbba <_printf_float+0x19a>
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	440b      	add	r3, r1
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	f04f 0900 	mov.w	r9, #0
 800bbbe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbc0:	e7dc      	b.n	800bb7c <_printf_float+0x15c>
 800bbc2:	b913      	cbnz	r3, 800bbca <_printf_float+0x1aa>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	07d2      	lsls	r2, r2, #31
 800bbc8:	d501      	bpl.n	800bbce <_printf_float+0x1ae>
 800bbca:	3302      	adds	r3, #2
 800bbcc:	e7f4      	b.n	800bbb8 <_printf_float+0x198>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7f2      	b.n	800bbb8 <_printf_float+0x198>
 800bbd2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bbd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	db05      	blt.n	800bbe8 <_printf_float+0x1c8>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	6121      	str	r1, [r4, #16]
 800bbe0:	07d8      	lsls	r0, r3, #31
 800bbe2:	d5ea      	bpl.n	800bbba <_printf_float+0x19a>
 800bbe4:	1c4b      	adds	r3, r1, #1
 800bbe6:	e7e7      	b.n	800bbb8 <_printf_float+0x198>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	bfcc      	ite	gt
 800bbec:	2201      	movgt	r2, #1
 800bbee:	f1c1 0202 	rsble	r2, r1, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	e7e0      	b.n	800bbb8 <_printf_float+0x198>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	055a      	lsls	r2, r3, #21
 800bbfa:	d407      	bmi.n	800bc0c <_printf_float+0x1ec>
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	4642      	mov	r2, r8
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	d12b      	bne.n	800bc62 <_printf_float+0x242>
 800bc0a:	e764      	b.n	800bad6 <_printf_float+0xb6>
 800bc0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc10:	f240 80dc 	bls.w	800bdcc <_printf_float+0x3ac>
 800bc14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f7f4 ff30 	bl	8000a80 <__aeabi_dcmpeq>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d033      	beq.n	800bc8c <_printf_float+0x26c>
 800bc24:	2301      	movs	r3, #1
 800bc26:	4631      	mov	r1, r6
 800bc28:	4628      	mov	r0, r5
 800bc2a:	4a35      	ldr	r2, [pc, #212]	@ (800bd00 <_printf_float+0x2e0>)
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f af51 	beq.w	800bad6 <_printf_float+0xb6>
 800bc34:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bc38:	4543      	cmp	r3, r8
 800bc3a:	db02      	blt.n	800bc42 <_printf_float+0x222>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	07d8      	lsls	r0, r3, #31
 800bc40:	d50f      	bpl.n	800bc62 <_printf_float+0x242>
 800bc42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc46:	4631      	mov	r1, r6
 800bc48:	4628      	mov	r0, r5
 800bc4a:	47b8      	blx	r7
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	f43f af42 	beq.w	800bad6 <_printf_float+0xb6>
 800bc52:	f04f 0900 	mov.w	r9, #0
 800bc56:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc5a:	f104 0a1a 	add.w	sl, r4, #26
 800bc5e:	45c8      	cmp	r8, r9
 800bc60:	dc09      	bgt.n	800bc76 <_printf_float+0x256>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	079b      	lsls	r3, r3, #30
 800bc66:	f100 8102 	bmi.w	800be6e <_printf_float+0x44e>
 800bc6a:	68e0      	ldr	r0, [r4, #12]
 800bc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6e:	4298      	cmp	r0, r3
 800bc70:	bfb8      	it	lt
 800bc72:	4618      	movlt	r0, r3
 800bc74:	e731      	b.n	800bada <_printf_float+0xba>
 800bc76:	2301      	movs	r3, #1
 800bc78:	4652      	mov	r2, sl
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f af28 	beq.w	800bad6 <_printf_float+0xb6>
 800bc86:	f109 0901 	add.w	r9, r9, #1
 800bc8a:	e7e8      	b.n	800bc5e <_printf_float+0x23e>
 800bc8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	dc38      	bgt.n	800bd04 <_printf_float+0x2e4>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4631      	mov	r1, r6
 800bc96:	4628      	mov	r0, r5
 800bc98:	4a19      	ldr	r2, [pc, #100]	@ (800bd00 <_printf_float+0x2e0>)
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f af1a 	beq.w	800bad6 <_printf_float+0xb6>
 800bca2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bca6:	ea59 0303 	orrs.w	r3, r9, r3
 800bcaa:	d102      	bne.n	800bcb2 <_printf_float+0x292>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	07d9      	lsls	r1, r3, #31
 800bcb0:	d5d7      	bpl.n	800bc62 <_printf_float+0x242>
 800bcb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b8      	blx	r7
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	f43f af0a 	beq.w	800bad6 <_printf_float+0xb6>
 800bcc2:	f04f 0a00 	mov.w	sl, #0
 800bcc6:	f104 0b1a 	add.w	fp, r4, #26
 800bcca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bccc:	425b      	negs	r3, r3
 800bcce:	4553      	cmp	r3, sl
 800bcd0:	dc01      	bgt.n	800bcd6 <_printf_float+0x2b6>
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	e793      	b.n	800bbfe <_printf_float+0x1de>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	465a      	mov	r2, fp
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	f43f aef8 	beq.w	800bad6 <_printf_float+0xb6>
 800bce6:	f10a 0a01 	add.w	sl, sl, #1
 800bcea:	e7ee      	b.n	800bcca <_printf_float+0x2aa>
 800bcec:	7fefffff 	.word	0x7fefffff
 800bcf0:	08010b0f 	.word	0x08010b0f
 800bcf4:	08010b13 	.word	0x08010b13
 800bcf8:	08010b17 	.word	0x08010b17
 800bcfc:	08010b1b 	.word	0x08010b1b
 800bd00:	08010b1f 	.word	0x08010b1f
 800bd04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bd0a:	4553      	cmp	r3, sl
 800bd0c:	bfa8      	it	ge
 800bd0e:	4653      	movge	r3, sl
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	4699      	mov	r9, r3
 800bd14:	dc36      	bgt.n	800bd84 <_printf_float+0x364>
 800bd16:	f04f 0b00 	mov.w	fp, #0
 800bd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd1e:	f104 021a 	add.w	r2, r4, #26
 800bd22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd24:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd26:	eba3 0309 	sub.w	r3, r3, r9
 800bd2a:	455b      	cmp	r3, fp
 800bd2c:	dc31      	bgt.n	800bd92 <_printf_float+0x372>
 800bd2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd30:	459a      	cmp	sl, r3
 800bd32:	dc3a      	bgt.n	800bdaa <_printf_float+0x38a>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	07da      	lsls	r2, r3, #31
 800bd38:	d437      	bmi.n	800bdaa <_printf_float+0x38a>
 800bd3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd3c:	ebaa 0903 	sub.w	r9, sl, r3
 800bd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd42:	ebaa 0303 	sub.w	r3, sl, r3
 800bd46:	4599      	cmp	r9, r3
 800bd48:	bfa8      	it	ge
 800bd4a:	4699      	movge	r9, r3
 800bd4c:	f1b9 0f00 	cmp.w	r9, #0
 800bd50:	dc33      	bgt.n	800bdba <_printf_float+0x39a>
 800bd52:	f04f 0800 	mov.w	r8, #0
 800bd56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd5a:	f104 0b1a 	add.w	fp, r4, #26
 800bd5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd60:	ebaa 0303 	sub.w	r3, sl, r3
 800bd64:	eba3 0309 	sub.w	r3, r3, r9
 800bd68:	4543      	cmp	r3, r8
 800bd6a:	f77f af7a 	ble.w	800bc62 <_printf_float+0x242>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	465a      	mov	r2, fp
 800bd72:	4631      	mov	r1, r6
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f43f aeac 	beq.w	800bad6 <_printf_float+0xb6>
 800bd7e:	f108 0801 	add.w	r8, r8, #1
 800bd82:	e7ec      	b.n	800bd5e <_printf_float+0x33e>
 800bd84:	4642      	mov	r2, r8
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b8      	blx	r7
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d1c2      	bne.n	800bd16 <_printf_float+0x2f6>
 800bd90:	e6a1      	b.n	800bad6 <_printf_float+0xb6>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd9a:	47b8      	blx	r7
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	f43f ae9a 	beq.w	800bad6 <_printf_float+0xb6>
 800bda2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bda4:	f10b 0b01 	add.w	fp, fp, #1
 800bda8:	e7bb      	b.n	800bd22 <_printf_float+0x302>
 800bdaa:	4631      	mov	r1, r6
 800bdac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	47b8      	blx	r7
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d1c0      	bne.n	800bd3a <_printf_float+0x31a>
 800bdb8:	e68d      	b.n	800bad6 <_printf_float+0xb6>
 800bdba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	4442      	add	r2, r8
 800bdc4:	47b8      	blx	r7
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d1c3      	bne.n	800bd52 <_printf_float+0x332>
 800bdca:	e684      	b.n	800bad6 <_printf_float+0xb6>
 800bdcc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bdd0:	f1ba 0f01 	cmp.w	sl, #1
 800bdd4:	dc01      	bgt.n	800bdda <_printf_float+0x3ba>
 800bdd6:	07db      	lsls	r3, r3, #31
 800bdd8:	d536      	bpl.n	800be48 <_printf_float+0x428>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4642      	mov	r2, r8
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	f43f ae76 	beq.w	800bad6 <_printf_float+0xb6>
 800bdea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	f43f ae6e 	beq.w	800bad6 <_printf_float+0xb6>
 800bdfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdfe:	2200      	movs	r2, #0
 800be00:	2300      	movs	r3, #0
 800be02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be06:	f7f4 fe3b 	bl	8000a80 <__aeabi_dcmpeq>
 800be0a:	b9c0      	cbnz	r0, 800be3e <_printf_float+0x41e>
 800be0c:	4653      	mov	r3, sl
 800be0e:	f108 0201 	add.w	r2, r8, #1
 800be12:	4631      	mov	r1, r6
 800be14:	4628      	mov	r0, r5
 800be16:	47b8      	blx	r7
 800be18:	3001      	adds	r0, #1
 800be1a:	d10c      	bne.n	800be36 <_printf_float+0x416>
 800be1c:	e65b      	b.n	800bad6 <_printf_float+0xb6>
 800be1e:	2301      	movs	r3, #1
 800be20:	465a      	mov	r2, fp
 800be22:	4631      	mov	r1, r6
 800be24:	4628      	mov	r0, r5
 800be26:	47b8      	blx	r7
 800be28:	3001      	adds	r0, #1
 800be2a:	f43f ae54 	beq.w	800bad6 <_printf_float+0xb6>
 800be2e:	f108 0801 	add.w	r8, r8, #1
 800be32:	45d0      	cmp	r8, sl
 800be34:	dbf3      	blt.n	800be1e <_printf_float+0x3fe>
 800be36:	464b      	mov	r3, r9
 800be38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be3c:	e6e0      	b.n	800bc00 <_printf_float+0x1e0>
 800be3e:	f04f 0800 	mov.w	r8, #0
 800be42:	f104 0b1a 	add.w	fp, r4, #26
 800be46:	e7f4      	b.n	800be32 <_printf_float+0x412>
 800be48:	2301      	movs	r3, #1
 800be4a:	4642      	mov	r2, r8
 800be4c:	e7e1      	b.n	800be12 <_printf_float+0x3f2>
 800be4e:	2301      	movs	r3, #1
 800be50:	464a      	mov	r2, r9
 800be52:	4631      	mov	r1, r6
 800be54:	4628      	mov	r0, r5
 800be56:	47b8      	blx	r7
 800be58:	3001      	adds	r0, #1
 800be5a:	f43f ae3c 	beq.w	800bad6 <_printf_float+0xb6>
 800be5e:	f108 0801 	add.w	r8, r8, #1
 800be62:	68e3      	ldr	r3, [r4, #12]
 800be64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800be66:	1a5b      	subs	r3, r3, r1
 800be68:	4543      	cmp	r3, r8
 800be6a:	dcf0      	bgt.n	800be4e <_printf_float+0x42e>
 800be6c:	e6fd      	b.n	800bc6a <_printf_float+0x24a>
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	f104 0919 	add.w	r9, r4, #25
 800be76:	e7f4      	b.n	800be62 <_printf_float+0x442>

0800be78 <_printf_common>:
 800be78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	4616      	mov	r6, r2
 800be7e:	4698      	mov	r8, r3
 800be80:	688a      	ldr	r2, [r1, #8]
 800be82:	690b      	ldr	r3, [r1, #16]
 800be84:	4607      	mov	r7, r0
 800be86:	4293      	cmp	r3, r2
 800be88:	bfb8      	it	lt
 800be8a:	4613      	movlt	r3, r2
 800be8c:	6033      	str	r3, [r6, #0]
 800be8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be92:	460c      	mov	r4, r1
 800be94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be98:	b10a      	cbz	r2, 800be9e <_printf_common+0x26>
 800be9a:	3301      	adds	r3, #1
 800be9c:	6033      	str	r3, [r6, #0]
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	0699      	lsls	r1, r3, #26
 800bea2:	bf42      	ittt	mi
 800bea4:	6833      	ldrmi	r3, [r6, #0]
 800bea6:	3302      	addmi	r3, #2
 800bea8:	6033      	strmi	r3, [r6, #0]
 800beaa:	6825      	ldr	r5, [r4, #0]
 800beac:	f015 0506 	ands.w	r5, r5, #6
 800beb0:	d106      	bne.n	800bec0 <_printf_common+0x48>
 800beb2:	f104 0a19 	add.w	sl, r4, #25
 800beb6:	68e3      	ldr	r3, [r4, #12]
 800beb8:	6832      	ldr	r2, [r6, #0]
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	42ab      	cmp	r3, r5
 800bebe:	dc2b      	bgt.n	800bf18 <_printf_common+0xa0>
 800bec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bec4:	6822      	ldr	r2, [r4, #0]
 800bec6:	3b00      	subs	r3, #0
 800bec8:	bf18      	it	ne
 800beca:	2301      	movne	r3, #1
 800becc:	0692      	lsls	r2, r2, #26
 800bece:	d430      	bmi.n	800bf32 <_printf_common+0xba>
 800bed0:	4641      	mov	r1, r8
 800bed2:	4638      	mov	r0, r7
 800bed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bed8:	47c8      	blx	r9
 800beda:	3001      	adds	r0, #1
 800bedc:	d023      	beq.n	800bf26 <_printf_common+0xae>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	6922      	ldr	r2, [r4, #16]
 800bee2:	f003 0306 	and.w	r3, r3, #6
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	bf14      	ite	ne
 800beea:	2500      	movne	r5, #0
 800beec:	6833      	ldreq	r3, [r6, #0]
 800beee:	f04f 0600 	mov.w	r6, #0
 800bef2:	bf08      	it	eq
 800bef4:	68e5      	ldreq	r5, [r4, #12]
 800bef6:	f104 041a 	add.w	r4, r4, #26
 800befa:	bf08      	it	eq
 800befc:	1aed      	subeq	r5, r5, r3
 800befe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf02:	bf08      	it	eq
 800bf04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	bfc4      	itt	gt
 800bf0c:	1a9b      	subgt	r3, r3, r2
 800bf0e:	18ed      	addgt	r5, r5, r3
 800bf10:	42b5      	cmp	r5, r6
 800bf12:	d11a      	bne.n	800bf4a <_printf_common+0xd2>
 800bf14:	2000      	movs	r0, #0
 800bf16:	e008      	b.n	800bf2a <_printf_common+0xb2>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	4641      	mov	r1, r8
 800bf1e:	4638      	mov	r0, r7
 800bf20:	47c8      	blx	r9
 800bf22:	3001      	adds	r0, #1
 800bf24:	d103      	bne.n	800bf2e <_printf_common+0xb6>
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2e:	3501      	adds	r5, #1
 800bf30:	e7c1      	b.n	800beb6 <_printf_common+0x3e>
 800bf32:	2030      	movs	r0, #48	@ 0x30
 800bf34:	18e1      	adds	r1, r4, r3
 800bf36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf40:	4422      	add	r2, r4
 800bf42:	3302      	adds	r3, #2
 800bf44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf48:	e7c2      	b.n	800bed0 <_printf_common+0x58>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	4641      	mov	r1, r8
 800bf50:	4638      	mov	r0, r7
 800bf52:	47c8      	blx	r9
 800bf54:	3001      	adds	r0, #1
 800bf56:	d0e6      	beq.n	800bf26 <_printf_common+0xae>
 800bf58:	3601      	adds	r6, #1
 800bf5a:	e7d9      	b.n	800bf10 <_printf_common+0x98>

0800bf5c <_printf_i>:
 800bf5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf60:	7e0f      	ldrb	r7, [r1, #24]
 800bf62:	4691      	mov	r9, r2
 800bf64:	2f78      	cmp	r7, #120	@ 0x78
 800bf66:	4680      	mov	r8, r0
 800bf68:	460c      	mov	r4, r1
 800bf6a:	469a      	mov	sl, r3
 800bf6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf72:	d807      	bhi.n	800bf84 <_printf_i+0x28>
 800bf74:	2f62      	cmp	r7, #98	@ 0x62
 800bf76:	d80a      	bhi.n	800bf8e <_printf_i+0x32>
 800bf78:	2f00      	cmp	r7, #0
 800bf7a:	f000 80d3 	beq.w	800c124 <_printf_i+0x1c8>
 800bf7e:	2f58      	cmp	r7, #88	@ 0x58
 800bf80:	f000 80ba 	beq.w	800c0f8 <_printf_i+0x19c>
 800bf84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf8c:	e03a      	b.n	800c004 <_printf_i+0xa8>
 800bf8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf92:	2b15      	cmp	r3, #21
 800bf94:	d8f6      	bhi.n	800bf84 <_printf_i+0x28>
 800bf96:	a101      	add	r1, pc, #4	@ (adr r1, 800bf9c <_printf_i+0x40>)
 800bf98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf9c:	0800bff5 	.word	0x0800bff5
 800bfa0:	0800c009 	.word	0x0800c009
 800bfa4:	0800bf85 	.word	0x0800bf85
 800bfa8:	0800bf85 	.word	0x0800bf85
 800bfac:	0800bf85 	.word	0x0800bf85
 800bfb0:	0800bf85 	.word	0x0800bf85
 800bfb4:	0800c009 	.word	0x0800c009
 800bfb8:	0800bf85 	.word	0x0800bf85
 800bfbc:	0800bf85 	.word	0x0800bf85
 800bfc0:	0800bf85 	.word	0x0800bf85
 800bfc4:	0800bf85 	.word	0x0800bf85
 800bfc8:	0800c10b 	.word	0x0800c10b
 800bfcc:	0800c033 	.word	0x0800c033
 800bfd0:	0800c0c5 	.word	0x0800c0c5
 800bfd4:	0800bf85 	.word	0x0800bf85
 800bfd8:	0800bf85 	.word	0x0800bf85
 800bfdc:	0800c12d 	.word	0x0800c12d
 800bfe0:	0800bf85 	.word	0x0800bf85
 800bfe4:	0800c033 	.word	0x0800c033
 800bfe8:	0800bf85 	.word	0x0800bf85
 800bfec:	0800bf85 	.word	0x0800bf85
 800bff0:	0800c0cd 	.word	0x0800c0cd
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6032      	str	r2, [r6, #0]
 800bffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c004:	2301      	movs	r3, #1
 800c006:	e09e      	b.n	800c146 <_printf_i+0x1ea>
 800c008:	6833      	ldr	r3, [r6, #0]
 800c00a:	6820      	ldr	r0, [r4, #0]
 800c00c:	1d19      	adds	r1, r3, #4
 800c00e:	6031      	str	r1, [r6, #0]
 800c010:	0606      	lsls	r6, r0, #24
 800c012:	d501      	bpl.n	800c018 <_printf_i+0xbc>
 800c014:	681d      	ldr	r5, [r3, #0]
 800c016:	e003      	b.n	800c020 <_printf_i+0xc4>
 800c018:	0645      	lsls	r5, r0, #25
 800c01a:	d5fb      	bpl.n	800c014 <_printf_i+0xb8>
 800c01c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c020:	2d00      	cmp	r5, #0
 800c022:	da03      	bge.n	800c02c <_printf_i+0xd0>
 800c024:	232d      	movs	r3, #45	@ 0x2d
 800c026:	426d      	negs	r5, r5
 800c028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c02c:	230a      	movs	r3, #10
 800c02e:	4859      	ldr	r0, [pc, #356]	@ (800c194 <_printf_i+0x238>)
 800c030:	e011      	b.n	800c056 <_printf_i+0xfa>
 800c032:	6821      	ldr	r1, [r4, #0]
 800c034:	6833      	ldr	r3, [r6, #0]
 800c036:	0608      	lsls	r0, r1, #24
 800c038:	f853 5b04 	ldr.w	r5, [r3], #4
 800c03c:	d402      	bmi.n	800c044 <_printf_i+0xe8>
 800c03e:	0649      	lsls	r1, r1, #25
 800c040:	bf48      	it	mi
 800c042:	b2ad      	uxthmi	r5, r5
 800c044:	2f6f      	cmp	r7, #111	@ 0x6f
 800c046:	6033      	str	r3, [r6, #0]
 800c048:	bf14      	ite	ne
 800c04a:	230a      	movne	r3, #10
 800c04c:	2308      	moveq	r3, #8
 800c04e:	4851      	ldr	r0, [pc, #324]	@ (800c194 <_printf_i+0x238>)
 800c050:	2100      	movs	r1, #0
 800c052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c056:	6866      	ldr	r6, [r4, #4]
 800c058:	2e00      	cmp	r6, #0
 800c05a:	bfa8      	it	ge
 800c05c:	6821      	ldrge	r1, [r4, #0]
 800c05e:	60a6      	str	r6, [r4, #8]
 800c060:	bfa4      	itt	ge
 800c062:	f021 0104 	bicge.w	r1, r1, #4
 800c066:	6021      	strge	r1, [r4, #0]
 800c068:	b90d      	cbnz	r5, 800c06e <_printf_i+0x112>
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d04b      	beq.n	800c106 <_printf_i+0x1aa>
 800c06e:	4616      	mov	r6, r2
 800c070:	fbb5 f1f3 	udiv	r1, r5, r3
 800c074:	fb03 5711 	mls	r7, r3, r1, r5
 800c078:	5dc7      	ldrb	r7, [r0, r7]
 800c07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c07e:	462f      	mov	r7, r5
 800c080:	42bb      	cmp	r3, r7
 800c082:	460d      	mov	r5, r1
 800c084:	d9f4      	bls.n	800c070 <_printf_i+0x114>
 800c086:	2b08      	cmp	r3, #8
 800c088:	d10b      	bne.n	800c0a2 <_printf_i+0x146>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	07df      	lsls	r7, r3, #31
 800c08e:	d508      	bpl.n	800c0a2 <_printf_i+0x146>
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	6861      	ldr	r1, [r4, #4]
 800c094:	4299      	cmp	r1, r3
 800c096:	bfde      	ittt	le
 800c098:	2330      	movle	r3, #48	@ 0x30
 800c09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0a2:	1b92      	subs	r2, r2, r6
 800c0a4:	6122      	str	r2, [r4, #16]
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f8cd a000 	str.w	sl, [sp]
 800c0b0:	aa03      	add	r2, sp, #12
 800c0b2:	f7ff fee1 	bl	800be78 <_printf_common>
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	d14a      	bne.n	800c150 <_printf_i+0x1f4>
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c0be:	b004      	add	sp, #16
 800c0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	f043 0320 	orr.w	r3, r3, #32
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	2778      	movs	r7, #120	@ 0x78
 800c0ce:	4832      	ldr	r0, [pc, #200]	@ (800c198 <_printf_i+0x23c>)
 800c0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	061f      	lsls	r7, r3, #24
 800c0da:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0de:	d402      	bmi.n	800c0e6 <_printf_i+0x18a>
 800c0e0:	065f      	lsls	r7, r3, #25
 800c0e2:	bf48      	it	mi
 800c0e4:	b2ad      	uxthmi	r5, r5
 800c0e6:	6031      	str	r1, [r6, #0]
 800c0e8:	07d9      	lsls	r1, r3, #31
 800c0ea:	bf44      	itt	mi
 800c0ec:	f043 0320 	orrmi.w	r3, r3, #32
 800c0f0:	6023      	strmi	r3, [r4, #0]
 800c0f2:	b11d      	cbz	r5, 800c0fc <_printf_i+0x1a0>
 800c0f4:	2310      	movs	r3, #16
 800c0f6:	e7ab      	b.n	800c050 <_printf_i+0xf4>
 800c0f8:	4826      	ldr	r0, [pc, #152]	@ (800c194 <_printf_i+0x238>)
 800c0fa:	e7e9      	b.n	800c0d0 <_printf_i+0x174>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	f023 0320 	bic.w	r3, r3, #32
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	e7f6      	b.n	800c0f4 <_printf_i+0x198>
 800c106:	4616      	mov	r6, r2
 800c108:	e7bd      	b.n	800c086 <_printf_i+0x12a>
 800c10a:	6833      	ldr	r3, [r6, #0]
 800c10c:	6825      	ldr	r5, [r4, #0]
 800c10e:	1d18      	adds	r0, r3, #4
 800c110:	6961      	ldr	r1, [r4, #20]
 800c112:	6030      	str	r0, [r6, #0]
 800c114:	062e      	lsls	r6, r5, #24
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	d501      	bpl.n	800c11e <_printf_i+0x1c2>
 800c11a:	6019      	str	r1, [r3, #0]
 800c11c:	e002      	b.n	800c124 <_printf_i+0x1c8>
 800c11e:	0668      	lsls	r0, r5, #25
 800c120:	d5fb      	bpl.n	800c11a <_printf_i+0x1be>
 800c122:	8019      	strh	r1, [r3, #0]
 800c124:	2300      	movs	r3, #0
 800c126:	4616      	mov	r6, r2
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	e7bc      	b.n	800c0a6 <_printf_i+0x14a>
 800c12c:	6833      	ldr	r3, [r6, #0]
 800c12e:	2100      	movs	r1, #0
 800c130:	1d1a      	adds	r2, r3, #4
 800c132:	6032      	str	r2, [r6, #0]
 800c134:	681e      	ldr	r6, [r3, #0]
 800c136:	6862      	ldr	r2, [r4, #4]
 800c138:	4630      	mov	r0, r6
 800c13a:	f000 fbf6 	bl	800c92a <memchr>
 800c13e:	b108      	cbz	r0, 800c144 <_printf_i+0x1e8>
 800c140:	1b80      	subs	r0, r0, r6
 800c142:	6060      	str	r0, [r4, #4]
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	6123      	str	r3, [r4, #16]
 800c148:	2300      	movs	r3, #0
 800c14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c14e:	e7aa      	b.n	800c0a6 <_printf_i+0x14a>
 800c150:	4632      	mov	r2, r6
 800c152:	4649      	mov	r1, r9
 800c154:	4640      	mov	r0, r8
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	47d0      	blx	sl
 800c15a:	3001      	adds	r0, #1
 800c15c:	d0ad      	beq.n	800c0ba <_printf_i+0x15e>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	079b      	lsls	r3, r3, #30
 800c162:	d413      	bmi.n	800c18c <_printf_i+0x230>
 800c164:	68e0      	ldr	r0, [r4, #12]
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	4298      	cmp	r0, r3
 800c16a:	bfb8      	it	lt
 800c16c:	4618      	movlt	r0, r3
 800c16e:	e7a6      	b.n	800c0be <_printf_i+0x162>
 800c170:	2301      	movs	r3, #1
 800c172:	4632      	mov	r2, r6
 800c174:	4649      	mov	r1, r9
 800c176:	4640      	mov	r0, r8
 800c178:	47d0      	blx	sl
 800c17a:	3001      	adds	r0, #1
 800c17c:	d09d      	beq.n	800c0ba <_printf_i+0x15e>
 800c17e:	3501      	adds	r5, #1
 800c180:	68e3      	ldr	r3, [r4, #12]
 800c182:	9903      	ldr	r1, [sp, #12]
 800c184:	1a5b      	subs	r3, r3, r1
 800c186:	42ab      	cmp	r3, r5
 800c188:	dcf2      	bgt.n	800c170 <_printf_i+0x214>
 800c18a:	e7eb      	b.n	800c164 <_printf_i+0x208>
 800c18c:	2500      	movs	r5, #0
 800c18e:	f104 0619 	add.w	r6, r4, #25
 800c192:	e7f5      	b.n	800c180 <_printf_i+0x224>
 800c194:	08010b21 	.word	0x08010b21
 800c198:	08010b32 	.word	0x08010b32

0800c19c <_scanf_float>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	b087      	sub	sp, #28
 800c1a2:	9303      	str	r3, [sp, #12]
 800c1a4:	688b      	ldr	r3, [r1, #8]
 800c1a6:	4617      	mov	r7, r2
 800c1a8:	1e5a      	subs	r2, r3, #1
 800c1aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c1ae:	bf82      	ittt	hi
 800c1b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c1b4:	eb03 0b05 	addhi.w	fp, r3, r5
 800c1b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c1bc:	460a      	mov	r2, r1
 800c1be:	f04f 0500 	mov.w	r5, #0
 800c1c2:	bf88      	it	hi
 800c1c4:	608b      	strhi	r3, [r1, #8]
 800c1c6:	680b      	ldr	r3, [r1, #0]
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c1ce:	f842 3b1c 	str.w	r3, [r2], #28
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	bf98      	it	ls
 800c1d6:	f04f 0b00 	movls.w	fp, #0
 800c1da:	4616      	mov	r6, r2
 800c1dc:	46aa      	mov	sl, r5
 800c1de:	46a9      	mov	r9, r5
 800c1e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1e4:	9201      	str	r2, [sp, #4]
 800c1e6:	9502      	str	r5, [sp, #8]
 800c1e8:	68a2      	ldr	r2, [r4, #8]
 800c1ea:	b152      	cbz	r2, 800c202 <_scanf_float+0x66>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b4e      	cmp	r3, #78	@ 0x4e
 800c1f2:	d865      	bhi.n	800c2c0 <_scanf_float+0x124>
 800c1f4:	2b40      	cmp	r3, #64	@ 0x40
 800c1f6:	d83d      	bhi.n	800c274 <_scanf_float+0xd8>
 800c1f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c1fc:	b2c8      	uxtb	r0, r1
 800c1fe:	280e      	cmp	r0, #14
 800c200:	d93b      	bls.n	800c27a <_scanf_float+0xde>
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	d003      	beq.n	800c210 <_scanf_float+0x74>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c214:	f1ba 0f01 	cmp.w	sl, #1
 800c218:	f200 8118 	bhi.w	800c44c <_scanf_float+0x2b0>
 800c21c:	9b01      	ldr	r3, [sp, #4]
 800c21e:	429e      	cmp	r6, r3
 800c220:	f200 8109 	bhi.w	800c436 <_scanf_float+0x29a>
 800c224:	2001      	movs	r0, #1
 800c226:	b007      	add	sp, #28
 800c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c230:	2a0d      	cmp	r2, #13
 800c232:	d8e6      	bhi.n	800c202 <_scanf_float+0x66>
 800c234:	a101      	add	r1, pc, #4	@ (adr r1, 800c23c <_scanf_float+0xa0>)
 800c236:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c23a:	bf00      	nop
 800c23c:	0800c383 	.word	0x0800c383
 800c240:	0800c203 	.word	0x0800c203
 800c244:	0800c203 	.word	0x0800c203
 800c248:	0800c203 	.word	0x0800c203
 800c24c:	0800c3e3 	.word	0x0800c3e3
 800c250:	0800c3bb 	.word	0x0800c3bb
 800c254:	0800c203 	.word	0x0800c203
 800c258:	0800c203 	.word	0x0800c203
 800c25c:	0800c391 	.word	0x0800c391
 800c260:	0800c203 	.word	0x0800c203
 800c264:	0800c203 	.word	0x0800c203
 800c268:	0800c203 	.word	0x0800c203
 800c26c:	0800c203 	.word	0x0800c203
 800c270:	0800c349 	.word	0x0800c349
 800c274:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c278:	e7da      	b.n	800c230 <_scanf_float+0x94>
 800c27a:	290e      	cmp	r1, #14
 800c27c:	d8c1      	bhi.n	800c202 <_scanf_float+0x66>
 800c27e:	a001      	add	r0, pc, #4	@ (adr r0, 800c284 <_scanf_float+0xe8>)
 800c280:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c284:	0800c339 	.word	0x0800c339
 800c288:	0800c203 	.word	0x0800c203
 800c28c:	0800c339 	.word	0x0800c339
 800c290:	0800c3cf 	.word	0x0800c3cf
 800c294:	0800c203 	.word	0x0800c203
 800c298:	0800c2e1 	.word	0x0800c2e1
 800c29c:	0800c31f 	.word	0x0800c31f
 800c2a0:	0800c31f 	.word	0x0800c31f
 800c2a4:	0800c31f 	.word	0x0800c31f
 800c2a8:	0800c31f 	.word	0x0800c31f
 800c2ac:	0800c31f 	.word	0x0800c31f
 800c2b0:	0800c31f 	.word	0x0800c31f
 800c2b4:	0800c31f 	.word	0x0800c31f
 800c2b8:	0800c31f 	.word	0x0800c31f
 800c2bc:	0800c31f 	.word	0x0800c31f
 800c2c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2c2:	d809      	bhi.n	800c2d8 <_scanf_float+0x13c>
 800c2c4:	2b60      	cmp	r3, #96	@ 0x60
 800c2c6:	d8b1      	bhi.n	800c22c <_scanf_float+0x90>
 800c2c8:	2b54      	cmp	r3, #84	@ 0x54
 800c2ca:	d07b      	beq.n	800c3c4 <_scanf_float+0x228>
 800c2cc:	2b59      	cmp	r3, #89	@ 0x59
 800c2ce:	d198      	bne.n	800c202 <_scanf_float+0x66>
 800c2d0:	2d07      	cmp	r5, #7
 800c2d2:	d196      	bne.n	800c202 <_scanf_float+0x66>
 800c2d4:	2508      	movs	r5, #8
 800c2d6:	e02c      	b.n	800c332 <_scanf_float+0x196>
 800c2d8:	2b74      	cmp	r3, #116	@ 0x74
 800c2da:	d073      	beq.n	800c3c4 <_scanf_float+0x228>
 800c2dc:	2b79      	cmp	r3, #121	@ 0x79
 800c2de:	e7f6      	b.n	800c2ce <_scanf_float+0x132>
 800c2e0:	6821      	ldr	r1, [r4, #0]
 800c2e2:	05c8      	lsls	r0, r1, #23
 800c2e4:	d51b      	bpl.n	800c31e <_scanf_float+0x182>
 800c2e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c2ea:	6021      	str	r1, [r4, #0]
 800c2ec:	f109 0901 	add.w	r9, r9, #1
 800c2f0:	f1bb 0f00 	cmp.w	fp, #0
 800c2f4:	d003      	beq.n	800c2fe <_scanf_float+0x162>
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2fc:	60a2      	str	r2, [r4, #8]
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	3b01      	subs	r3, #1
 800c302:	60a3      	str	r3, [r4, #8]
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	3301      	adds	r3, #1
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	607b      	str	r3, [r7, #4]
 800c312:	f340 8087 	ble.w	800c424 <_scanf_float+0x288>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	e764      	b.n	800c1e8 <_scanf_float+0x4c>
 800c31e:	eb1a 0105 	adds.w	r1, sl, r5
 800c322:	f47f af6e 	bne.w	800c202 <_scanf_float+0x66>
 800c326:	460d      	mov	r5, r1
 800c328:	468a      	mov	sl, r1
 800c32a:	6822      	ldr	r2, [r4, #0]
 800c32c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c330:	6022      	str	r2, [r4, #0]
 800c332:	f806 3b01 	strb.w	r3, [r6], #1
 800c336:	e7e2      	b.n	800c2fe <_scanf_float+0x162>
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	0610      	lsls	r0, r2, #24
 800c33c:	f57f af61 	bpl.w	800c202 <_scanf_float+0x66>
 800c340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c344:	6022      	str	r2, [r4, #0]
 800c346:	e7f4      	b.n	800c332 <_scanf_float+0x196>
 800c348:	f1ba 0f00 	cmp.w	sl, #0
 800c34c:	d10e      	bne.n	800c36c <_scanf_float+0x1d0>
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	d10e      	bne.n	800c372 <_scanf_float+0x1d6>
 800c354:	6822      	ldr	r2, [r4, #0]
 800c356:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c35a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c35e:	d108      	bne.n	800c372 <_scanf_float+0x1d6>
 800c360:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c364:	f04f 0a01 	mov.w	sl, #1
 800c368:	6022      	str	r2, [r4, #0]
 800c36a:	e7e2      	b.n	800c332 <_scanf_float+0x196>
 800c36c:	f1ba 0f02 	cmp.w	sl, #2
 800c370:	d055      	beq.n	800c41e <_scanf_float+0x282>
 800c372:	2d01      	cmp	r5, #1
 800c374:	d002      	beq.n	800c37c <_scanf_float+0x1e0>
 800c376:	2d04      	cmp	r5, #4
 800c378:	f47f af43 	bne.w	800c202 <_scanf_float+0x66>
 800c37c:	3501      	adds	r5, #1
 800c37e:	b2ed      	uxtb	r5, r5
 800c380:	e7d7      	b.n	800c332 <_scanf_float+0x196>
 800c382:	f1ba 0f01 	cmp.w	sl, #1
 800c386:	f47f af3c 	bne.w	800c202 <_scanf_float+0x66>
 800c38a:	f04f 0a02 	mov.w	sl, #2
 800c38e:	e7d0      	b.n	800c332 <_scanf_float+0x196>
 800c390:	b97d      	cbnz	r5, 800c3b2 <_scanf_float+0x216>
 800c392:	f1b9 0f00 	cmp.w	r9, #0
 800c396:	f47f af37 	bne.w	800c208 <_scanf_float+0x6c>
 800c39a:	6822      	ldr	r2, [r4, #0]
 800c39c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c3a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c3a4:	f040 8103 	bne.w	800c5ae <_scanf_float+0x412>
 800c3a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3ac:	2501      	movs	r5, #1
 800c3ae:	6022      	str	r2, [r4, #0]
 800c3b0:	e7bf      	b.n	800c332 <_scanf_float+0x196>
 800c3b2:	2d03      	cmp	r5, #3
 800c3b4:	d0e2      	beq.n	800c37c <_scanf_float+0x1e0>
 800c3b6:	2d05      	cmp	r5, #5
 800c3b8:	e7de      	b.n	800c378 <_scanf_float+0x1dc>
 800c3ba:	2d02      	cmp	r5, #2
 800c3bc:	f47f af21 	bne.w	800c202 <_scanf_float+0x66>
 800c3c0:	2503      	movs	r5, #3
 800c3c2:	e7b6      	b.n	800c332 <_scanf_float+0x196>
 800c3c4:	2d06      	cmp	r5, #6
 800c3c6:	f47f af1c 	bne.w	800c202 <_scanf_float+0x66>
 800c3ca:	2507      	movs	r5, #7
 800c3cc:	e7b1      	b.n	800c332 <_scanf_float+0x196>
 800c3ce:	6822      	ldr	r2, [r4, #0]
 800c3d0:	0591      	lsls	r1, r2, #22
 800c3d2:	f57f af16 	bpl.w	800c202 <_scanf_float+0x66>
 800c3d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c3da:	6022      	str	r2, [r4, #0]
 800c3dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3e0:	e7a7      	b.n	800c332 <_scanf_float+0x196>
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c3e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c3ec:	d006      	beq.n	800c3fc <_scanf_float+0x260>
 800c3ee:	0550      	lsls	r0, r2, #21
 800c3f0:	f57f af07 	bpl.w	800c202 <_scanf_float+0x66>
 800c3f4:	f1b9 0f00 	cmp.w	r9, #0
 800c3f8:	f000 80d9 	beq.w	800c5ae <_scanf_float+0x412>
 800c3fc:	0591      	lsls	r1, r2, #22
 800c3fe:	bf58      	it	pl
 800c400:	9902      	ldrpl	r1, [sp, #8]
 800c402:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c406:	bf58      	it	pl
 800c408:	eba9 0101 	subpl.w	r1, r9, r1
 800c40c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c410:	f04f 0900 	mov.w	r9, #0
 800c414:	bf58      	it	pl
 800c416:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c41a:	6022      	str	r2, [r4, #0]
 800c41c:	e789      	b.n	800c332 <_scanf_float+0x196>
 800c41e:	f04f 0a03 	mov.w	sl, #3
 800c422:	e786      	b.n	800c332 <_scanf_float+0x196>
 800c424:	4639      	mov	r1, r7
 800c426:	4640      	mov	r0, r8
 800c428:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c42c:	4798      	blx	r3
 800c42e:	2800      	cmp	r0, #0
 800c430:	f43f aeda 	beq.w	800c1e8 <_scanf_float+0x4c>
 800c434:	e6e5      	b.n	800c202 <_scanf_float+0x66>
 800c436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c43a:	463a      	mov	r2, r7
 800c43c:	4640      	mov	r0, r8
 800c43e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c442:	4798      	blx	r3
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	3b01      	subs	r3, #1
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	e6e7      	b.n	800c21c <_scanf_float+0x80>
 800c44c:	1e6b      	subs	r3, r5, #1
 800c44e:	2b06      	cmp	r3, #6
 800c450:	d824      	bhi.n	800c49c <_scanf_float+0x300>
 800c452:	2d02      	cmp	r5, #2
 800c454:	d836      	bhi.n	800c4c4 <_scanf_float+0x328>
 800c456:	9b01      	ldr	r3, [sp, #4]
 800c458:	429e      	cmp	r6, r3
 800c45a:	f67f aee3 	bls.w	800c224 <_scanf_float+0x88>
 800c45e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c462:	463a      	mov	r2, r7
 800c464:	4640      	mov	r0, r8
 800c466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c46a:	4798      	blx	r3
 800c46c:	6923      	ldr	r3, [r4, #16]
 800c46e:	3b01      	subs	r3, #1
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	e7f0      	b.n	800c456 <_scanf_float+0x2ba>
 800c474:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c478:	463a      	mov	r2, r7
 800c47a:	4640      	mov	r0, r8
 800c47c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c480:	4798      	blx	r3
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	3b01      	subs	r3, #1
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c48c:	fa5f fa8a 	uxtb.w	sl, sl
 800c490:	f1ba 0f02 	cmp.w	sl, #2
 800c494:	d1ee      	bne.n	800c474 <_scanf_float+0x2d8>
 800c496:	3d03      	subs	r5, #3
 800c498:	b2ed      	uxtb	r5, r5
 800c49a:	1b76      	subs	r6, r6, r5
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	05da      	lsls	r2, r3, #23
 800c4a0:	d530      	bpl.n	800c504 <_scanf_float+0x368>
 800c4a2:	055b      	lsls	r3, r3, #21
 800c4a4:	d511      	bpl.n	800c4ca <_scanf_float+0x32e>
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	429e      	cmp	r6, r3
 800c4aa:	f67f aebb 	bls.w	800c224 <_scanf_float+0x88>
 800c4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4ba:	4798      	blx	r3
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	6123      	str	r3, [r4, #16]
 800c4c2:	e7f0      	b.n	800c4a6 <_scanf_float+0x30a>
 800c4c4:	46aa      	mov	sl, r5
 800c4c6:	46b3      	mov	fp, r6
 800c4c8:	e7de      	b.n	800c488 <_scanf_float+0x2ec>
 800c4ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	2965      	cmp	r1, #101	@ 0x65
 800c4d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	d00c      	beq.n	800c4f8 <_scanf_float+0x35c>
 800c4de:	2945      	cmp	r1, #69	@ 0x45
 800c4e0:	d00a      	beq.n	800c4f8 <_scanf_float+0x35c>
 800c4e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4e6:	463a      	mov	r2, r7
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4798      	blx	r3
 800c4ec:	6923      	ldr	r3, [r4, #16]
 800c4ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	1eb5      	subs	r5, r6, #2
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	463a      	mov	r2, r7
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c500:	4798      	blx	r3
 800c502:	462e      	mov	r6, r5
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	f012 0210 	ands.w	r2, r2, #16
 800c50a:	d001      	beq.n	800c510 <_scanf_float+0x374>
 800c50c:	2000      	movs	r0, #0
 800c50e:	e68a      	b.n	800c226 <_scanf_float+0x8a>
 800c510:	7032      	strb	r2, [r6, #0]
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c51c:	d11c      	bne.n	800c558 <_scanf_float+0x3bc>
 800c51e:	9b02      	ldr	r3, [sp, #8]
 800c520:	454b      	cmp	r3, r9
 800c522:	eba3 0209 	sub.w	r2, r3, r9
 800c526:	d123      	bne.n	800c570 <_scanf_float+0x3d4>
 800c528:	2200      	movs	r2, #0
 800c52a:	4640      	mov	r0, r8
 800c52c:	9901      	ldr	r1, [sp, #4]
 800c52e:	f002 fc0f 	bl	800ed50 <_strtod_r>
 800c532:	9b03      	ldr	r3, [sp, #12]
 800c534:	6825      	ldr	r5, [r4, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f015 0f02 	tst.w	r5, #2
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	f103 0204 	add.w	r2, r3, #4
 800c544:	d01f      	beq.n	800c586 <_scanf_float+0x3ea>
 800c546:	9903      	ldr	r1, [sp, #12]
 800c548:	600a      	str	r2, [r1, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	e9c3 6700 	strd	r6, r7, [r3]
 800c550:	68e3      	ldr	r3, [r4, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	60e3      	str	r3, [r4, #12]
 800c556:	e7d9      	b.n	800c50c <_scanf_float+0x370>
 800c558:	9b04      	ldr	r3, [sp, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d0e4      	beq.n	800c528 <_scanf_float+0x38c>
 800c55e:	9905      	ldr	r1, [sp, #20]
 800c560:	230a      	movs	r3, #10
 800c562:	4640      	mov	r0, r8
 800c564:	3101      	adds	r1, #1
 800c566:	f7ff f9b1 	bl	800b8cc <_strtol_r>
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	9e05      	ldr	r6, [sp, #20]
 800c56e:	1ac2      	subs	r2, r0, r3
 800c570:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c574:	429e      	cmp	r6, r3
 800c576:	bf28      	it	cs
 800c578:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c57c:	4630      	mov	r0, r6
 800c57e:	490d      	ldr	r1, [pc, #52]	@ (800c5b4 <_scanf_float+0x418>)
 800c580:	f000 f8f0 	bl	800c764 <siprintf>
 800c584:	e7d0      	b.n	800c528 <_scanf_float+0x38c>
 800c586:	076d      	lsls	r5, r5, #29
 800c588:	d4dd      	bmi.n	800c546 <_scanf_float+0x3aa>
 800c58a:	9d03      	ldr	r5, [sp, #12]
 800c58c:	602a      	str	r2, [r5, #0]
 800c58e:	681d      	ldr	r5, [r3, #0]
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	f7f4 faa6 	bl	8000ae4 <__aeabi_dcmpun>
 800c598:	b120      	cbz	r0, 800c5a4 <_scanf_float+0x408>
 800c59a:	4807      	ldr	r0, [pc, #28]	@ (800c5b8 <_scanf_float+0x41c>)
 800c59c:	f000 f9e2 	bl	800c964 <nanf>
 800c5a0:	6028      	str	r0, [r5, #0]
 800c5a2:	e7d5      	b.n	800c550 <_scanf_float+0x3b4>
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f4 fafa 	bl	8000ba0 <__aeabi_d2f>
 800c5ac:	e7f8      	b.n	800c5a0 <_scanf_float+0x404>
 800c5ae:	f04f 0900 	mov.w	r9, #0
 800c5b2:	e62d      	b.n	800c210 <_scanf_float+0x74>
 800c5b4:	08010b43 	.word	0x08010b43
 800c5b8:	08010ddc 	.word	0x08010ddc

0800c5bc <std>:
 800c5bc:	2300      	movs	r3, #0
 800c5be:	b510      	push	{r4, lr}
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5ca:	6083      	str	r3, [r0, #8]
 800c5cc:	8181      	strh	r1, [r0, #12]
 800c5ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5d0:	81c2      	strh	r2, [r0, #14]
 800c5d2:	6183      	str	r3, [r0, #24]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	2208      	movs	r2, #8
 800c5d8:	305c      	adds	r0, #92	@ 0x5c
 800c5da:	f000 f926 	bl	800c82a <memset>
 800c5de:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <std+0x58>)
 800c5e0:	6224      	str	r4, [r4, #32]
 800c5e2:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c618 <std+0x5c>)
 800c5e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <std+0x60>)
 800c5ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c620 <std+0x64>)
 800c5ee:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <std+0x68>)
 800c5f2:	429c      	cmp	r4, r3
 800c5f4:	d006      	beq.n	800c604 <std+0x48>
 800c5f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5fa:	4294      	cmp	r4, r2
 800c5fc:	d002      	beq.n	800c604 <std+0x48>
 800c5fe:	33d0      	adds	r3, #208	@ 0xd0
 800c600:	429c      	cmp	r4, r3
 800c602:	d105      	bne.n	800c610 <std+0x54>
 800c604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c60c:	f000 b98a 	b.w	800c924 <__retarget_lock_init_recursive>
 800c610:	bd10      	pop	{r4, pc}
 800c612:	bf00      	nop
 800c614:	0800c7a5 	.word	0x0800c7a5
 800c618:	0800c7c7 	.word	0x0800c7c7
 800c61c:	0800c7ff 	.word	0x0800c7ff
 800c620:	0800c823 	.word	0x0800c823
 800c624:	20000998 	.word	0x20000998

0800c628 <stdio_exit_handler>:
 800c628:	4a02      	ldr	r2, [pc, #8]	@ (800c634 <stdio_exit_handler+0xc>)
 800c62a:	4903      	ldr	r1, [pc, #12]	@ (800c638 <stdio_exit_handler+0x10>)
 800c62c:	4803      	ldr	r0, [pc, #12]	@ (800c63c <stdio_exit_handler+0x14>)
 800c62e:	f000 b869 	b.w	800c704 <_fwalk_sglue>
 800c632:	bf00      	nop
 800c634:	20000044 	.word	0x20000044
 800c638:	0800f38d 	.word	0x0800f38d
 800c63c:	20000054 	.word	0x20000054

0800c640 <cleanup_stdio>:
 800c640:	6841      	ldr	r1, [r0, #4]
 800c642:	4b0c      	ldr	r3, [pc, #48]	@ (800c674 <cleanup_stdio+0x34>)
 800c644:	b510      	push	{r4, lr}
 800c646:	4299      	cmp	r1, r3
 800c648:	4604      	mov	r4, r0
 800c64a:	d001      	beq.n	800c650 <cleanup_stdio+0x10>
 800c64c:	f002 fe9e 	bl	800f38c <_fflush_r>
 800c650:	68a1      	ldr	r1, [r4, #8]
 800c652:	4b09      	ldr	r3, [pc, #36]	@ (800c678 <cleanup_stdio+0x38>)
 800c654:	4299      	cmp	r1, r3
 800c656:	d002      	beq.n	800c65e <cleanup_stdio+0x1e>
 800c658:	4620      	mov	r0, r4
 800c65a:	f002 fe97 	bl	800f38c <_fflush_r>
 800c65e:	68e1      	ldr	r1, [r4, #12]
 800c660:	4b06      	ldr	r3, [pc, #24]	@ (800c67c <cleanup_stdio+0x3c>)
 800c662:	4299      	cmp	r1, r3
 800c664:	d004      	beq.n	800c670 <cleanup_stdio+0x30>
 800c666:	4620      	mov	r0, r4
 800c668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c66c:	f002 be8e 	b.w	800f38c <_fflush_r>
 800c670:	bd10      	pop	{r4, pc}
 800c672:	bf00      	nop
 800c674:	20000998 	.word	0x20000998
 800c678:	20000a00 	.word	0x20000a00
 800c67c:	20000a68 	.word	0x20000a68

0800c680 <global_stdio_init.part.0>:
 800c680:	b510      	push	{r4, lr}
 800c682:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b0 <global_stdio_init.part.0+0x30>)
 800c684:	4c0b      	ldr	r4, [pc, #44]	@ (800c6b4 <global_stdio_init.part.0+0x34>)
 800c686:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b8 <global_stdio_init.part.0+0x38>)
 800c688:	4620      	mov	r0, r4
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	2104      	movs	r1, #4
 800c68e:	2200      	movs	r2, #0
 800c690:	f7ff ff94 	bl	800c5bc <std>
 800c694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c698:	2201      	movs	r2, #1
 800c69a:	2109      	movs	r1, #9
 800c69c:	f7ff ff8e 	bl	800c5bc <std>
 800c6a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6aa:	2112      	movs	r1, #18
 800c6ac:	f7ff bf86 	b.w	800c5bc <std>
 800c6b0:	20000ad0 	.word	0x20000ad0
 800c6b4:	20000998 	.word	0x20000998
 800c6b8:	0800c629 	.word	0x0800c629

0800c6bc <__sfp_lock_acquire>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	@ (800c6c4 <__sfp_lock_acquire+0x8>)
 800c6be:	f000 b932 	b.w	800c926 <__retarget_lock_acquire_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	20000ad9 	.word	0x20000ad9

0800c6c8 <__sfp_lock_release>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	@ (800c6d0 <__sfp_lock_release+0x8>)
 800c6ca:	f000 b92d 	b.w	800c928 <__retarget_lock_release_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	20000ad9 	.word	0x20000ad9

0800c6d4 <__sinit>:
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	f7ff fff0 	bl	800c6bc <__sfp_lock_acquire>
 800c6dc:	6a23      	ldr	r3, [r4, #32]
 800c6de:	b11b      	cbz	r3, 800c6e8 <__sinit+0x14>
 800c6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e4:	f7ff bff0 	b.w	800c6c8 <__sfp_lock_release>
 800c6e8:	4b04      	ldr	r3, [pc, #16]	@ (800c6fc <__sinit+0x28>)
 800c6ea:	6223      	str	r3, [r4, #32]
 800c6ec:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <__sinit+0x2c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1f5      	bne.n	800c6e0 <__sinit+0xc>
 800c6f4:	f7ff ffc4 	bl	800c680 <global_stdio_init.part.0>
 800c6f8:	e7f2      	b.n	800c6e0 <__sinit+0xc>
 800c6fa:	bf00      	nop
 800c6fc:	0800c641 	.word	0x0800c641
 800c700:	20000ad0 	.word	0x20000ad0

0800c704 <_fwalk_sglue>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	4607      	mov	r7, r0
 800c70a:	4688      	mov	r8, r1
 800c70c:	4614      	mov	r4, r2
 800c70e:	2600      	movs	r6, #0
 800c710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c714:	f1b9 0901 	subs.w	r9, r9, #1
 800c718:	d505      	bpl.n	800c726 <_fwalk_sglue+0x22>
 800c71a:	6824      	ldr	r4, [r4, #0]
 800c71c:	2c00      	cmp	r4, #0
 800c71e:	d1f7      	bne.n	800c710 <_fwalk_sglue+0xc>
 800c720:	4630      	mov	r0, r6
 800c722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d907      	bls.n	800c73c <_fwalk_sglue+0x38>
 800c72c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c730:	3301      	adds	r3, #1
 800c732:	d003      	beq.n	800c73c <_fwalk_sglue+0x38>
 800c734:	4629      	mov	r1, r5
 800c736:	4638      	mov	r0, r7
 800c738:	47c0      	blx	r8
 800c73a:	4306      	orrs	r6, r0
 800c73c:	3568      	adds	r5, #104	@ 0x68
 800c73e:	e7e9      	b.n	800c714 <_fwalk_sglue+0x10>

0800c740 <iprintf>:
 800c740:	b40f      	push	{r0, r1, r2, r3}
 800c742:	b507      	push	{r0, r1, r2, lr}
 800c744:	4906      	ldr	r1, [pc, #24]	@ (800c760 <iprintf+0x20>)
 800c746:	ab04      	add	r3, sp, #16
 800c748:	6808      	ldr	r0, [r1, #0]
 800c74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74e:	6881      	ldr	r1, [r0, #8]
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	f002 fc83 	bl	800f05c <_vfiprintf_r>
 800c756:	b003      	add	sp, #12
 800c758:	f85d eb04 	ldr.w	lr, [sp], #4
 800c75c:	b004      	add	sp, #16
 800c75e:	4770      	bx	lr
 800c760:	20000050 	.word	0x20000050

0800c764 <siprintf>:
 800c764:	b40e      	push	{r1, r2, r3}
 800c766:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c76a:	b500      	push	{lr}
 800c76c:	b09c      	sub	sp, #112	@ 0x70
 800c76e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c770:	9002      	str	r0, [sp, #8]
 800c772:	9006      	str	r0, [sp, #24]
 800c774:	9107      	str	r1, [sp, #28]
 800c776:	9104      	str	r1, [sp, #16]
 800c778:	4808      	ldr	r0, [pc, #32]	@ (800c79c <siprintf+0x38>)
 800c77a:	4909      	ldr	r1, [pc, #36]	@ (800c7a0 <siprintf+0x3c>)
 800c77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c780:	9105      	str	r1, [sp, #20]
 800c782:	6800      	ldr	r0, [r0, #0]
 800c784:	a902      	add	r1, sp, #8
 800c786:	9301      	str	r3, [sp, #4]
 800c788:	f002 fb44 	bl	800ee14 <_svfiprintf_r>
 800c78c:	2200      	movs	r2, #0
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	701a      	strb	r2, [r3, #0]
 800c792:	b01c      	add	sp, #112	@ 0x70
 800c794:	f85d eb04 	ldr.w	lr, [sp], #4
 800c798:	b003      	add	sp, #12
 800c79a:	4770      	bx	lr
 800c79c:	20000050 	.word	0x20000050
 800c7a0:	ffff0208 	.word	0xffff0208

0800c7a4 <__sread>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ac:	f000 f86c 	bl	800c888 <_read_r>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	bfab      	itete	ge
 800c7b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c7b8:	181b      	addge	r3, r3, r0
 800c7ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7be:	bfac      	ite	ge
 800c7c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7c2:	81a3      	strhlt	r3, [r4, #12]
 800c7c4:	bd10      	pop	{r4, pc}

0800c7c6 <__swrite>:
 800c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ca:	461f      	mov	r7, r3
 800c7cc:	898b      	ldrh	r3, [r1, #12]
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	05db      	lsls	r3, r3, #23
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	4616      	mov	r6, r2
 800c7d6:	d505      	bpl.n	800c7e4 <__swrite+0x1e>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e0:	f000 f840 	bl	800c864 <_lseek_r>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	463b      	mov	r3, r7
 800c7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fa:	f000 b857 	b.w	800c8ac <_write_r>

0800c7fe <__sseek>:
 800c7fe:	b510      	push	{r4, lr}
 800c800:	460c      	mov	r4, r1
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 f82d 	bl	800c864 <_lseek_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	bf15      	itete	ne
 800c810:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c81a:	81a3      	strheq	r3, [r4, #12]
 800c81c:	bf18      	it	ne
 800c81e:	81a3      	strhne	r3, [r4, #12]
 800c820:	bd10      	pop	{r4, pc}

0800c822 <__sclose>:
 800c822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c826:	f000 b80d 	b.w	800c844 <_close_r>

0800c82a <memset>:
 800c82a:	4603      	mov	r3, r0
 800c82c:	4402      	add	r2, r0
 800c82e:	4293      	cmp	r3, r2
 800c830:	d100      	bne.n	800c834 <memset+0xa>
 800c832:	4770      	bx	lr
 800c834:	f803 1b01 	strb.w	r1, [r3], #1
 800c838:	e7f9      	b.n	800c82e <memset+0x4>
	...

0800c83c <_localeconv_r>:
 800c83c:	4800      	ldr	r0, [pc, #0]	@ (800c840 <_localeconv_r+0x4>)
 800c83e:	4770      	bx	lr
 800c840:	20000190 	.word	0x20000190

0800c844 <_close_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	2300      	movs	r3, #0
 800c848:	4d05      	ldr	r5, [pc, #20]	@ (800c860 <_close_r+0x1c>)
 800c84a:	4604      	mov	r4, r0
 800c84c:	4608      	mov	r0, r1
 800c84e:	602b      	str	r3, [r5, #0]
 800c850:	f7f8 f811 	bl	8004876 <_close>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d102      	bne.n	800c85e <_close_r+0x1a>
 800c858:	682b      	ldr	r3, [r5, #0]
 800c85a:	b103      	cbz	r3, 800c85e <_close_r+0x1a>
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	bd38      	pop	{r3, r4, r5, pc}
 800c860:	20000ad4 	.word	0x20000ad4

0800c864 <_lseek_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	4611      	mov	r1, r2
 800c86c:	2200      	movs	r2, #0
 800c86e:	4d05      	ldr	r5, [pc, #20]	@ (800c884 <_lseek_r+0x20>)
 800c870:	602a      	str	r2, [r5, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	f7f8 f823 	bl	80048be <_lseek>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d102      	bne.n	800c882 <_lseek_r+0x1e>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b103      	cbz	r3, 800c882 <_lseek_r+0x1e>
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	20000ad4 	.word	0x20000ad4

0800c888 <_read_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	4611      	mov	r1, r2
 800c890:	2200      	movs	r2, #0
 800c892:	4d05      	ldr	r5, [pc, #20]	@ (800c8a8 <_read_r+0x20>)
 800c894:	602a      	str	r2, [r5, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	f7f7 ffb4 	bl	8004804 <_read>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_read_r+0x1e>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_read_r+0x1e>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	20000ad4 	.word	0x20000ad4

0800c8ac <_write_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	4d05      	ldr	r5, [pc, #20]	@ (800c8cc <_write_r+0x20>)
 800c8b8:	602a      	str	r2, [r5, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f7f7 ffbf 	bl	800483e <_write>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_write_r+0x1e>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_write_r+0x1e>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	20000ad4 	.word	0x20000ad4

0800c8d0 <__errno>:
 800c8d0:	4b01      	ldr	r3, [pc, #4]	@ (800c8d8 <__errno+0x8>)
 800c8d2:	6818      	ldr	r0, [r3, #0]
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	20000050 	.word	0x20000050

0800c8dc <__libc_init_array>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	2600      	movs	r6, #0
 800c8e0:	4d0c      	ldr	r5, [pc, #48]	@ (800c914 <__libc_init_array+0x38>)
 800c8e2:	4c0d      	ldr	r4, [pc, #52]	@ (800c918 <__libc_init_array+0x3c>)
 800c8e4:	1b64      	subs	r4, r4, r5
 800c8e6:	10a4      	asrs	r4, r4, #2
 800c8e8:	42a6      	cmp	r6, r4
 800c8ea:	d109      	bne.n	800c900 <__libc_init_array+0x24>
 800c8ec:	f003 faee 	bl	800fecc <_init>
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	4d0a      	ldr	r5, [pc, #40]	@ (800c91c <__libc_init_array+0x40>)
 800c8f4:	4c0a      	ldr	r4, [pc, #40]	@ (800c920 <__libc_init_array+0x44>)
 800c8f6:	1b64      	subs	r4, r4, r5
 800c8f8:	10a4      	asrs	r4, r4, #2
 800c8fa:	42a6      	cmp	r6, r4
 800c8fc:	d105      	bne.n	800c90a <__libc_init_array+0x2e>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	f855 3b04 	ldr.w	r3, [r5], #4
 800c904:	4798      	blx	r3
 800c906:	3601      	adds	r6, #1
 800c908:	e7ee      	b.n	800c8e8 <__libc_init_array+0xc>
 800c90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c90e:	4798      	blx	r3
 800c910:	3601      	adds	r6, #1
 800c912:	e7f2      	b.n	800c8fa <__libc_init_array+0x1e>
 800c914:	08010e48 	.word	0x08010e48
 800c918:	08010e48 	.word	0x08010e48
 800c91c:	08010e48 	.word	0x08010e48
 800c920:	08010e4c 	.word	0x08010e4c

0800c924 <__retarget_lock_init_recursive>:
 800c924:	4770      	bx	lr

0800c926 <__retarget_lock_acquire_recursive>:
 800c926:	4770      	bx	lr

0800c928 <__retarget_lock_release_recursive>:
 800c928:	4770      	bx	lr

0800c92a <memchr>:
 800c92a:	4603      	mov	r3, r0
 800c92c:	b510      	push	{r4, lr}
 800c92e:	b2c9      	uxtb	r1, r1
 800c930:	4402      	add	r2, r0
 800c932:	4293      	cmp	r3, r2
 800c934:	4618      	mov	r0, r3
 800c936:	d101      	bne.n	800c93c <memchr+0x12>
 800c938:	2000      	movs	r0, #0
 800c93a:	e003      	b.n	800c944 <memchr+0x1a>
 800c93c:	7804      	ldrb	r4, [r0, #0]
 800c93e:	3301      	adds	r3, #1
 800c940:	428c      	cmp	r4, r1
 800c942:	d1f6      	bne.n	800c932 <memchr+0x8>
 800c944:	bd10      	pop	{r4, pc}

0800c946 <memcpy>:
 800c946:	440a      	add	r2, r1
 800c948:	4291      	cmp	r1, r2
 800c94a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c94e:	d100      	bne.n	800c952 <memcpy+0xc>
 800c950:	4770      	bx	lr
 800c952:	b510      	push	{r4, lr}
 800c954:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c958:	4291      	cmp	r1, r2
 800c95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c95e:	d1f9      	bne.n	800c954 <memcpy+0xe>
 800c960:	bd10      	pop	{r4, pc}
	...

0800c964 <nanf>:
 800c964:	4800      	ldr	r0, [pc, #0]	@ (800c968 <nanf+0x4>)
 800c966:	4770      	bx	lr
 800c968:	7fc00000 	.word	0x7fc00000

0800c96c <quorem>:
 800c96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	6903      	ldr	r3, [r0, #16]
 800c972:	690c      	ldr	r4, [r1, #16]
 800c974:	4607      	mov	r7, r0
 800c976:	42a3      	cmp	r3, r4
 800c978:	db7e      	blt.n	800ca78 <quorem+0x10c>
 800c97a:	3c01      	subs	r4, #1
 800c97c:	00a3      	lsls	r3, r4, #2
 800c97e:	f100 0514 	add.w	r5, r0, #20
 800c982:	f101 0814 	add.w	r8, r1, #20
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c996:	3301      	adds	r3, #1
 800c998:	429a      	cmp	r2, r3
 800c99a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c99e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9a2:	d32e      	bcc.n	800ca02 <quorem+0x96>
 800c9a4:	f04f 0a00 	mov.w	sl, #0
 800c9a8:	46c4      	mov	ip, r8
 800c9aa:	46ae      	mov	lr, r5
 800c9ac:	46d3      	mov	fp, sl
 800c9ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9b2:	b298      	uxth	r0, r3
 800c9b4:	fb06 a000 	mla	r0, r6, r0, sl
 800c9b8:	0c1b      	lsrs	r3, r3, #16
 800c9ba:	0c02      	lsrs	r2, r0, #16
 800c9bc:	fb06 2303 	mla	r3, r6, r3, r2
 800c9c0:	f8de 2000 	ldr.w	r2, [lr]
 800c9c4:	b280      	uxth	r0, r0
 800c9c6:	b292      	uxth	r2, r2
 800c9c8:	1a12      	subs	r2, r2, r0
 800c9ca:	445a      	add	r2, fp
 800c9cc:	f8de 0000 	ldr.w	r0, [lr]
 800c9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c9e4:	45e1      	cmp	r9, ip
 800c9e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c9ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c9ee:	d2de      	bcs.n	800c9ae <quorem+0x42>
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	58eb      	ldr	r3, [r5, r3]
 800c9f4:	b92b      	cbnz	r3, 800ca02 <quorem+0x96>
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	3b04      	subs	r3, #4
 800c9fa:	429d      	cmp	r5, r3
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	d32f      	bcc.n	800ca60 <quorem+0xf4>
 800ca00:	613c      	str	r4, [r7, #16]
 800ca02:	4638      	mov	r0, r7
 800ca04:	f001 f9c4 	bl	800dd90 <__mcmp>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	db25      	blt.n	800ca58 <quorem+0xec>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca14:	f8d1 c000 	ldr.w	ip, [r1]
 800ca18:	fa1f fe82 	uxth.w	lr, r2
 800ca1c:	fa1f f38c 	uxth.w	r3, ip
 800ca20:	eba3 030e 	sub.w	r3, r3, lr
 800ca24:	4403      	add	r3, r0
 800ca26:	0c12      	lsrs	r2, r2, #16
 800ca28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca36:	45c1      	cmp	r9, r8
 800ca38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca3c:	f841 3b04 	str.w	r3, [r1], #4
 800ca40:	d2e6      	bcs.n	800ca10 <quorem+0xa4>
 800ca42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca4a:	b922      	cbnz	r2, 800ca56 <quorem+0xea>
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	429d      	cmp	r5, r3
 800ca50:	461a      	mov	r2, r3
 800ca52:	d30b      	bcc.n	800ca6c <quorem+0x100>
 800ca54:	613c      	str	r4, [r7, #16]
 800ca56:	3601      	adds	r6, #1
 800ca58:	4630      	mov	r0, r6
 800ca5a:	b003      	add	sp, #12
 800ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca60:	6812      	ldr	r2, [r2, #0]
 800ca62:	3b04      	subs	r3, #4
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	d1cb      	bne.n	800ca00 <quorem+0x94>
 800ca68:	3c01      	subs	r4, #1
 800ca6a:	e7c6      	b.n	800c9fa <quorem+0x8e>
 800ca6c:	6812      	ldr	r2, [r2, #0]
 800ca6e:	3b04      	subs	r3, #4
 800ca70:	2a00      	cmp	r2, #0
 800ca72:	d1ef      	bne.n	800ca54 <quorem+0xe8>
 800ca74:	3c01      	subs	r4, #1
 800ca76:	e7ea      	b.n	800ca4e <quorem+0xe2>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	e7ee      	b.n	800ca5a <quorem+0xee>
 800ca7c:	0000      	movs	r0, r0
	...

0800ca80 <_dtoa_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	4614      	mov	r4, r2
 800ca86:	461d      	mov	r5, r3
 800ca88:	69c7      	ldr	r7, [r0, #28]
 800ca8a:	b097      	sub	sp, #92	@ 0x5c
 800ca8c:	4683      	mov	fp, r0
 800ca8e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ca92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ca94:	b97f      	cbnz	r7, 800cab6 <_dtoa_r+0x36>
 800ca96:	2010      	movs	r0, #16
 800ca98:	f000 fe02 	bl	800d6a0 <malloc>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	f8cb 001c 	str.w	r0, [fp, #28]
 800caa2:	b920      	cbnz	r0, 800caae <_dtoa_r+0x2e>
 800caa4:	21ef      	movs	r1, #239	@ 0xef
 800caa6:	4ba8      	ldr	r3, [pc, #672]	@ (800cd48 <_dtoa_r+0x2c8>)
 800caa8:	48a8      	ldr	r0, [pc, #672]	@ (800cd4c <_dtoa_r+0x2cc>)
 800caaa:	f002 fd6d 	bl	800f588 <__assert_func>
 800caae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cab2:	6007      	str	r7, [r0, #0]
 800cab4:	60c7      	str	r7, [r0, #12]
 800cab6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800caba:	6819      	ldr	r1, [r3, #0]
 800cabc:	b159      	cbz	r1, 800cad6 <_dtoa_r+0x56>
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	2301      	movs	r3, #1
 800cac2:	4093      	lsls	r3, r2
 800cac4:	604a      	str	r2, [r1, #4]
 800cac6:	608b      	str	r3, [r1, #8]
 800cac8:	4658      	mov	r0, fp
 800caca:	f000 fedf 	bl	800d88c <_Bfree>
 800cace:	2200      	movs	r2, #0
 800cad0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	1e2b      	subs	r3, r5, #0
 800cad8:	bfaf      	iteee	ge
 800cada:	2300      	movge	r3, #0
 800cadc:	2201      	movlt	r2, #1
 800cade:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cae2:	9303      	strlt	r3, [sp, #12]
 800cae4:	bfa8      	it	ge
 800cae6:	6033      	strge	r3, [r6, #0]
 800cae8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800caec:	4b98      	ldr	r3, [pc, #608]	@ (800cd50 <_dtoa_r+0x2d0>)
 800caee:	bfb8      	it	lt
 800caf0:	6032      	strlt	r2, [r6, #0]
 800caf2:	ea33 0308 	bics.w	r3, r3, r8
 800caf6:	d112      	bne.n	800cb1e <_dtoa_r+0x9e>
 800caf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cafc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cb04:	4323      	orrs	r3, r4
 800cb06:	f000 8550 	beq.w	800d5aa <_dtoa_r+0xb2a>
 800cb0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cb0c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800cd54 <_dtoa_r+0x2d4>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 8552 	beq.w	800d5ba <_dtoa_r+0xb3a>
 800cb16:	f10a 0303 	add.w	r3, sl, #3
 800cb1a:	f000 bd4c 	b.w	800d5b6 <_dtoa_r+0xb36>
 800cb1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f7f3 ffa7 	bl	8000a80 <__aeabi_dcmpeq>
 800cb32:	4607      	mov	r7, r0
 800cb34:	b158      	cbz	r0, 800cb4e <_dtoa_r+0xce>
 800cb36:	2301      	movs	r3, #1
 800cb38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cb3e:	b113      	cbz	r3, 800cb46 <_dtoa_r+0xc6>
 800cb40:	4b85      	ldr	r3, [pc, #532]	@ (800cd58 <_dtoa_r+0x2d8>)
 800cb42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800cd5c <_dtoa_r+0x2dc>
 800cb4a:	f000 bd36 	b.w	800d5ba <_dtoa_r+0xb3a>
 800cb4e:	ab14      	add	r3, sp, #80	@ 0x50
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	ab15      	add	r3, sp, #84	@ 0x54
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	4658      	mov	r0, fp
 800cb58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cb5c:	f001 fa30 	bl	800dfc0 <__d2b>
 800cb60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800cb64:	4681      	mov	r9, r0
 800cb66:	2e00      	cmp	r6, #0
 800cb68:	d077      	beq.n	800cc5a <_dtoa_r+0x1da>
 800cb6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb80:	9712      	str	r7, [sp, #72]	@ 0x48
 800cb82:	4619      	mov	r1, r3
 800cb84:	2200      	movs	r2, #0
 800cb86:	4b76      	ldr	r3, [pc, #472]	@ (800cd60 <_dtoa_r+0x2e0>)
 800cb88:	f7f3 fb5a 	bl	8000240 <__aeabi_dsub>
 800cb8c:	a368      	add	r3, pc, #416	@ (adr r3, 800cd30 <_dtoa_r+0x2b0>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f7f3 fd0d 	bl	80005b0 <__aeabi_dmul>
 800cb96:	a368      	add	r3, pc, #416	@ (adr r3, 800cd38 <_dtoa_r+0x2b8>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f7f3 fb52 	bl	8000244 <__adddf3>
 800cba0:	4604      	mov	r4, r0
 800cba2:	4630      	mov	r0, r6
 800cba4:	460d      	mov	r5, r1
 800cba6:	f7f3 fc99 	bl	80004dc <__aeabi_i2d>
 800cbaa:	a365      	add	r3, pc, #404	@ (adr r3, 800cd40 <_dtoa_r+0x2c0>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fcfe 	bl	80005b0 <__aeabi_dmul>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	f7f3 fb42 	bl	8000244 <__adddf3>
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	460d      	mov	r5, r1
 800cbc4:	f7f3 ffa4 	bl	8000b10 <__aeabi_d2iz>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	4607      	mov	r7, r0
 800cbcc:	2300      	movs	r3, #0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 ff5f 	bl	8000a94 <__aeabi_dcmplt>
 800cbd6:	b140      	cbz	r0, 800cbea <_dtoa_r+0x16a>
 800cbd8:	4638      	mov	r0, r7
 800cbda:	f7f3 fc7f 	bl	80004dc <__aeabi_i2d>
 800cbde:	4622      	mov	r2, r4
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	f7f3 ff4d 	bl	8000a80 <__aeabi_dcmpeq>
 800cbe6:	b900      	cbnz	r0, 800cbea <_dtoa_r+0x16a>
 800cbe8:	3f01      	subs	r7, #1
 800cbea:	2f16      	cmp	r7, #22
 800cbec:	d853      	bhi.n	800cc96 <_dtoa_r+0x216>
 800cbee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbf2:	4b5c      	ldr	r3, [pc, #368]	@ (800cd64 <_dtoa_r+0x2e4>)
 800cbf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7f3 ff4a 	bl	8000a94 <__aeabi_dcmplt>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d04a      	beq.n	800cc9a <_dtoa_r+0x21a>
 800cc04:	2300      	movs	r3, #0
 800cc06:	3f01      	subs	r7, #1
 800cc08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc0c:	1b9b      	subs	r3, r3, r6
 800cc0e:	1e5a      	subs	r2, r3, #1
 800cc10:	bf46      	itte	mi
 800cc12:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc16:	2300      	movmi	r3, #0
 800cc18:	f04f 0800 	movpl.w	r8, #0
 800cc1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc1e:	bf48      	it	mi
 800cc20:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800cc22:	2f00      	cmp	r7, #0
 800cc24:	db3b      	blt.n	800cc9e <_dtoa_r+0x21e>
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	970e      	str	r7, [sp, #56]	@ 0x38
 800cc2a:	443b      	add	r3, r7
 800cc2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc2e:	2300      	movs	r3, #0
 800cc30:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc34:	2b09      	cmp	r3, #9
 800cc36:	d866      	bhi.n	800cd06 <_dtoa_r+0x286>
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	bfc4      	itt	gt
 800cc3c:	3b04      	subgt	r3, #4
 800cc3e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800cc40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc42:	bfc8      	it	gt
 800cc44:	2400      	movgt	r4, #0
 800cc46:	f1a3 0302 	sub.w	r3, r3, #2
 800cc4a:	bfd8      	it	le
 800cc4c:	2401      	movle	r4, #1
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	d864      	bhi.n	800cd1c <_dtoa_r+0x29c>
 800cc52:	e8df f003 	tbb	[pc, r3]
 800cc56:	382b      	.short	0x382b
 800cc58:	5636      	.short	0x5636
 800cc5a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cc5e:	441e      	add	r6, r3
 800cc60:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc64:	2b20      	cmp	r3, #32
 800cc66:	bfc1      	itttt	gt
 800cc68:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cc70:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc74:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc78:	bfd6      	itet	le
 800cc7a:	f1c3 0320 	rsble	r3, r3, #32
 800cc7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800cc82:	fa04 f003 	lslle.w	r0, r4, r3
 800cc86:	f7f3 fc19 	bl	80004bc <__aeabi_ui2d>
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc90:	3e01      	subs	r6, #1
 800cc92:	9212      	str	r2, [sp, #72]	@ 0x48
 800cc94:	e775      	b.n	800cb82 <_dtoa_r+0x102>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e7b6      	b.n	800cc08 <_dtoa_r+0x188>
 800cc9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cc9c:	e7b5      	b.n	800cc0a <_dtoa_r+0x18a>
 800cc9e:	427b      	negs	r3, r7
 800cca0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cca2:	2300      	movs	r3, #0
 800cca4:	eba8 0807 	sub.w	r8, r8, r7
 800cca8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ccaa:	e7c2      	b.n	800cc32 <_dtoa_r+0x1b2>
 800ccac:	2300      	movs	r3, #0
 800ccae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dc35      	bgt.n	800cd22 <_dtoa_r+0x2a2>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	461a      	mov	r2, r3
 800ccba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ccbe:	9221      	str	r2, [sp, #132]	@ 0x84
 800ccc0:	e00b      	b.n	800ccda <_dtoa_r+0x25a>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e7f3      	b.n	800ccae <_dtoa_r+0x22e>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cccc:	18fb      	adds	r3, r7, r3
 800ccce:	9308      	str	r3, [sp, #32]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	9307      	str	r3, [sp, #28]
 800ccd6:	bfb8      	it	lt
 800ccd8:	2301      	movlt	r3, #1
 800ccda:	2100      	movs	r1, #0
 800ccdc:	2204      	movs	r2, #4
 800ccde:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cce2:	f102 0514 	add.w	r5, r2, #20
 800cce6:	429d      	cmp	r5, r3
 800cce8:	d91f      	bls.n	800cd2a <_dtoa_r+0x2aa>
 800ccea:	6041      	str	r1, [r0, #4]
 800ccec:	4658      	mov	r0, fp
 800ccee:	f000 fd8d 	bl	800d80c <_Balloc>
 800ccf2:	4682      	mov	sl, r0
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d139      	bne.n	800cd6c <_dtoa_r+0x2ec>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccfe:	4b1a      	ldr	r3, [pc, #104]	@ (800cd68 <_dtoa_r+0x2e8>)
 800cd00:	e6d2      	b.n	800caa8 <_dtoa_r+0x28>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e7e0      	b.n	800ccc8 <_dtoa_r+0x248>
 800cd06:	2401      	movs	r4, #1
 800cd08:	2300      	movs	r3, #0
 800cd0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd0c:	9320      	str	r3, [sp, #128]	@ 0x80
 800cd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd12:	2200      	movs	r2, #0
 800cd14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cd18:	2312      	movs	r3, #18
 800cd1a:	e7d0      	b.n	800ccbe <_dtoa_r+0x23e>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd20:	e7f5      	b.n	800cd0e <_dtoa_r+0x28e>
 800cd22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cd28:	e7d7      	b.n	800ccda <_dtoa_r+0x25a>
 800cd2a:	3101      	adds	r1, #1
 800cd2c:	0052      	lsls	r2, r2, #1
 800cd2e:	e7d8      	b.n	800cce2 <_dtoa_r+0x262>
 800cd30:	636f4361 	.word	0x636f4361
 800cd34:	3fd287a7 	.word	0x3fd287a7
 800cd38:	8b60c8b3 	.word	0x8b60c8b3
 800cd3c:	3fc68a28 	.word	0x3fc68a28
 800cd40:	509f79fb 	.word	0x509f79fb
 800cd44:	3fd34413 	.word	0x3fd34413
 800cd48:	08010b55 	.word	0x08010b55
 800cd4c:	08010b6c 	.word	0x08010b6c
 800cd50:	7ff00000 	.word	0x7ff00000
 800cd54:	08010b51 	.word	0x08010b51
 800cd58:	08010b20 	.word	0x08010b20
 800cd5c:	08010b1f 	.word	0x08010b1f
 800cd60:	3ff80000 	.word	0x3ff80000
 800cd64:	08010c68 	.word	0x08010c68
 800cd68:	08010bc4 	.word	0x08010bc4
 800cd6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd70:	6018      	str	r0, [r3, #0]
 800cd72:	9b07      	ldr	r3, [sp, #28]
 800cd74:	2b0e      	cmp	r3, #14
 800cd76:	f200 80a4 	bhi.w	800cec2 <_dtoa_r+0x442>
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	f000 80a1 	beq.w	800cec2 <_dtoa_r+0x442>
 800cd80:	2f00      	cmp	r7, #0
 800cd82:	dd33      	ble.n	800cdec <_dtoa_r+0x36c>
 800cd84:	4b86      	ldr	r3, [pc, #536]	@ (800cfa0 <_dtoa_r+0x520>)
 800cd86:	f007 020f 	and.w	r2, r7, #15
 800cd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd8e:	05f8      	lsls	r0, r7, #23
 800cd90:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cd94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cd98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd9c:	d516      	bpl.n	800cdcc <_dtoa_r+0x34c>
 800cd9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cda2:	4b80      	ldr	r3, [pc, #512]	@ (800cfa4 <_dtoa_r+0x524>)
 800cda4:	2603      	movs	r6, #3
 800cda6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdaa:	f7f3 fd2b 	bl	8000804 <__aeabi_ddiv>
 800cdae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdb2:	f004 040f 	and.w	r4, r4, #15
 800cdb6:	4d7b      	ldr	r5, [pc, #492]	@ (800cfa4 <_dtoa_r+0x524>)
 800cdb8:	b954      	cbnz	r4, 800cdd0 <_dtoa_r+0x350>
 800cdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc2:	f7f3 fd1f 	bl	8000804 <__aeabi_ddiv>
 800cdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdca:	e028      	b.n	800ce1e <_dtoa_r+0x39e>
 800cdcc:	2602      	movs	r6, #2
 800cdce:	e7f2      	b.n	800cdb6 <_dtoa_r+0x336>
 800cdd0:	07e1      	lsls	r1, r4, #31
 800cdd2:	d508      	bpl.n	800cde6 <_dtoa_r+0x366>
 800cdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cddc:	f7f3 fbe8 	bl	80005b0 <__aeabi_dmul>
 800cde0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cde4:	3601      	adds	r6, #1
 800cde6:	1064      	asrs	r4, r4, #1
 800cde8:	3508      	adds	r5, #8
 800cdea:	e7e5      	b.n	800cdb8 <_dtoa_r+0x338>
 800cdec:	f000 80d2 	beq.w	800cf94 <_dtoa_r+0x514>
 800cdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdf4:	427c      	negs	r4, r7
 800cdf6:	4b6a      	ldr	r3, [pc, #424]	@ (800cfa0 <_dtoa_r+0x520>)
 800cdf8:	f004 020f 	and.w	r2, r4, #15
 800cdfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	f7f3 fbd4 	bl	80005b0 <__aeabi_dmul>
 800ce08:	2602      	movs	r6, #2
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce10:	4d64      	ldr	r5, [pc, #400]	@ (800cfa4 <_dtoa_r+0x524>)
 800ce12:	1124      	asrs	r4, r4, #4
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	f040 80b2 	bne.w	800cf7e <_dtoa_r+0x4fe>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1d3      	bne.n	800cdc6 <_dtoa_r+0x346>
 800ce1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80b7 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	4b5d      	ldr	r3, [pc, #372]	@ (800cfa8 <_dtoa_r+0x528>)
 800ce32:	f7f3 fe2f 	bl	8000a94 <__aeabi_dcmplt>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f000 80ae 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce3c:	9b07      	ldr	r3, [sp, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 80aa 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce44:	9b08      	ldr	r3, [sp, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	dd37      	ble.n	800ceba <_dtoa_r+0x43a>
 800ce4a:	1e7b      	subs	r3, r7, #1
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	2200      	movs	r2, #0
 800ce52:	4629      	mov	r1, r5
 800ce54:	4b55      	ldr	r3, [pc, #340]	@ (800cfac <_dtoa_r+0x52c>)
 800ce56:	f7f3 fbab 	bl	80005b0 <__aeabi_dmul>
 800ce5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5e:	9c08      	ldr	r4, [sp, #32]
 800ce60:	3601      	adds	r6, #1
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7f3 fb3a 	bl	80004dc <__aeabi_i2d>
 800ce68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce6c:	f7f3 fba0 	bl	80005b0 <__aeabi_dmul>
 800ce70:	2200      	movs	r2, #0
 800ce72:	4b4f      	ldr	r3, [pc, #316]	@ (800cfb0 <_dtoa_r+0x530>)
 800ce74:	f7f3 f9e6 	bl	8000244 <__adddf3>
 800ce78:	4605      	mov	r5, r0
 800ce7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	f040 809a 	bne.w	800cfb8 <_dtoa_r+0x538>
 800ce84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4b4a      	ldr	r3, [pc, #296]	@ (800cfb4 <_dtoa_r+0x534>)
 800ce8c:	f7f3 f9d8 	bl	8000240 <__aeabi_dsub>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4633      	mov	r3, r6
 800ce9c:	f7f3 fe18 	bl	8000ad0 <__aeabi_dcmpgt>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f040 828e 	bne.w	800d3c2 <_dtoa_r+0x942>
 800cea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceaa:	462a      	mov	r2, r5
 800ceac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ceb0:	f7f3 fdf0 	bl	8000a94 <__aeabi_dcmplt>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f040 8127 	bne.w	800d108 <_dtoa_r+0x688>
 800ceba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cec2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f2c0 8163 	blt.w	800d190 <_dtoa_r+0x710>
 800ceca:	2f0e      	cmp	r7, #14
 800cecc:	f300 8160 	bgt.w	800d190 <_dtoa_r+0x710>
 800ced0:	4b33      	ldr	r3, [pc, #204]	@ (800cfa0 <_dtoa_r+0x520>)
 800ced2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ced6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ceda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cede:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da03      	bge.n	800ceec <_dtoa_r+0x46c>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f340 8100 	ble.w	800d0ec <_dtoa_r+0x66c>
 800ceec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cef0:	4656      	mov	r6, sl
 800cef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f7f3 fc83 	bl	8000804 <__aeabi_ddiv>
 800cefe:	f7f3 fe07 	bl	8000b10 <__aeabi_d2iz>
 800cf02:	4680      	mov	r8, r0
 800cf04:	f7f3 faea 	bl	80004dc <__aeabi_i2d>
 800cf08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf0c:	f7f3 fb50 	bl	80005b0 <__aeabi_dmul>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4620      	mov	r0, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	f7f3 f992 	bl	8000240 <__aeabi_dsub>
 800cf1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf20:	9d07      	ldr	r5, [sp, #28]
 800cf22:	f806 4b01 	strb.w	r4, [r6], #1
 800cf26:	eba6 040a 	sub.w	r4, r6, sl
 800cf2a:	42a5      	cmp	r5, r4
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	f040 8116 	bne.w	800d160 <_dtoa_r+0x6e0>
 800cf34:	f7f3 f986 	bl	8000244 <__adddf3>
 800cf38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	f7f3 fdc6 	bl	8000ad0 <__aeabi_dcmpgt>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f040 80f8 	bne.w	800d13a <_dtoa_r+0x6ba>
 800cf4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf4e:	4620      	mov	r0, r4
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7f3 fd95 	bl	8000a80 <__aeabi_dcmpeq>
 800cf56:	b118      	cbz	r0, 800cf60 <_dtoa_r+0x4e0>
 800cf58:	f018 0f01 	tst.w	r8, #1
 800cf5c:	f040 80ed 	bne.w	800d13a <_dtoa_r+0x6ba>
 800cf60:	4649      	mov	r1, r9
 800cf62:	4658      	mov	r0, fp
 800cf64:	f000 fc92 	bl	800d88c <_Bfree>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	7033      	strb	r3, [r6, #0]
 800cf6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cf6e:	3701      	adds	r7, #1
 800cf70:	601f      	str	r7, [r3, #0]
 800cf72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 8320 	beq.w	800d5ba <_dtoa_r+0xb3a>
 800cf7a:	601e      	str	r6, [r3, #0]
 800cf7c:	e31d      	b.n	800d5ba <_dtoa_r+0xb3a>
 800cf7e:	07e2      	lsls	r2, r4, #31
 800cf80:	d505      	bpl.n	800cf8e <_dtoa_r+0x50e>
 800cf82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf86:	f7f3 fb13 	bl	80005b0 <__aeabi_dmul>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	3601      	adds	r6, #1
 800cf8e:	1064      	asrs	r4, r4, #1
 800cf90:	3508      	adds	r5, #8
 800cf92:	e73f      	b.n	800ce14 <_dtoa_r+0x394>
 800cf94:	2602      	movs	r6, #2
 800cf96:	e742      	b.n	800ce1e <_dtoa_r+0x39e>
 800cf98:	9c07      	ldr	r4, [sp, #28]
 800cf9a:	9704      	str	r7, [sp, #16]
 800cf9c:	e761      	b.n	800ce62 <_dtoa_r+0x3e2>
 800cf9e:	bf00      	nop
 800cfa0:	08010c68 	.word	0x08010c68
 800cfa4:	08010c40 	.word	0x08010c40
 800cfa8:	3ff00000 	.word	0x3ff00000
 800cfac:	40240000 	.word	0x40240000
 800cfb0:	401c0000 	.word	0x401c0000
 800cfb4:	40140000 	.word	0x40140000
 800cfb8:	4b70      	ldr	r3, [pc, #448]	@ (800d17c <_dtoa_r+0x6fc>)
 800cfba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfc4:	4454      	add	r4, sl
 800cfc6:	2900      	cmp	r1, #0
 800cfc8:	d045      	beq.n	800d056 <_dtoa_r+0x5d6>
 800cfca:	2000      	movs	r0, #0
 800cfcc:	496c      	ldr	r1, [pc, #432]	@ (800d180 <_dtoa_r+0x700>)
 800cfce:	f7f3 fc19 	bl	8000804 <__aeabi_ddiv>
 800cfd2:	4633      	mov	r3, r6
 800cfd4:	462a      	mov	r2, r5
 800cfd6:	f7f3 f933 	bl	8000240 <__aeabi_dsub>
 800cfda:	4656      	mov	r6, sl
 800cfdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe4:	f7f3 fd94 	bl	8000b10 <__aeabi_d2iz>
 800cfe8:	4605      	mov	r5, r0
 800cfea:	f7f3 fa77 	bl	80004dc <__aeabi_i2d>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff6:	f7f3 f923 	bl	8000240 <__aeabi_dsub>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	3530      	adds	r5, #48	@ 0x30
 800d000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d008:	f806 5b01 	strb.w	r5, [r6], #1
 800d00c:	f7f3 fd42 	bl	8000a94 <__aeabi_dcmplt>
 800d010:	2800      	cmp	r0, #0
 800d012:	d163      	bne.n	800d0dc <_dtoa_r+0x65c>
 800d014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d018:	2000      	movs	r0, #0
 800d01a:	495a      	ldr	r1, [pc, #360]	@ (800d184 <_dtoa_r+0x704>)
 800d01c:	f7f3 f910 	bl	8000240 <__aeabi_dsub>
 800d020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d024:	f7f3 fd36 	bl	8000a94 <__aeabi_dcmplt>
 800d028:	2800      	cmp	r0, #0
 800d02a:	f040 8087 	bne.w	800d13c <_dtoa_r+0x6bc>
 800d02e:	42a6      	cmp	r6, r4
 800d030:	f43f af43 	beq.w	800ceba <_dtoa_r+0x43a>
 800d034:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d038:	2200      	movs	r2, #0
 800d03a:	4b53      	ldr	r3, [pc, #332]	@ (800d188 <_dtoa_r+0x708>)
 800d03c:	f7f3 fab8 	bl	80005b0 <__aeabi_dmul>
 800d040:	2200      	movs	r2, #0
 800d042:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d04a:	4b4f      	ldr	r3, [pc, #316]	@ (800d188 <_dtoa_r+0x708>)
 800d04c:	f7f3 fab0 	bl	80005b0 <__aeabi_dmul>
 800d050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d054:	e7c4      	b.n	800cfe0 <_dtoa_r+0x560>
 800d056:	4631      	mov	r1, r6
 800d058:	4628      	mov	r0, r5
 800d05a:	f7f3 faa9 	bl	80005b0 <__aeabi_dmul>
 800d05e:	4656      	mov	r6, sl
 800d060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d064:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d06a:	f7f3 fd51 	bl	8000b10 <__aeabi_d2iz>
 800d06e:	4605      	mov	r5, r0
 800d070:	f7f3 fa34 	bl	80004dc <__aeabi_i2d>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07c:	f7f3 f8e0 	bl	8000240 <__aeabi_dsub>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	3530      	adds	r5, #48	@ 0x30
 800d086:	f806 5b01 	strb.w	r5, [r6], #1
 800d08a:	42a6      	cmp	r6, r4
 800d08c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d090:	f04f 0200 	mov.w	r2, #0
 800d094:	d124      	bne.n	800d0e0 <_dtoa_r+0x660>
 800d096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d09a:	4b39      	ldr	r3, [pc, #228]	@ (800d180 <_dtoa_r+0x700>)
 800d09c:	f7f3 f8d2 	bl	8000244 <__adddf3>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0a8:	f7f3 fd12 	bl	8000ad0 <__aeabi_dcmpgt>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d145      	bne.n	800d13c <_dtoa_r+0x6bc>
 800d0b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	4932      	ldr	r1, [pc, #200]	@ (800d180 <_dtoa_r+0x700>)
 800d0b8:	f7f3 f8c2 	bl	8000240 <__aeabi_dsub>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0c4:	f7f3 fce6 	bl	8000a94 <__aeabi_dcmplt>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	f43f aef6 	beq.w	800ceba <_dtoa_r+0x43a>
 800d0ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d0d0:	1e73      	subs	r3, r6, #1
 800d0d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0d8:	2b30      	cmp	r3, #48	@ 0x30
 800d0da:	d0f8      	beq.n	800d0ce <_dtoa_r+0x64e>
 800d0dc:	9f04      	ldr	r7, [sp, #16]
 800d0de:	e73f      	b.n	800cf60 <_dtoa_r+0x4e0>
 800d0e0:	4b29      	ldr	r3, [pc, #164]	@ (800d188 <_dtoa_r+0x708>)
 800d0e2:	f7f3 fa65 	bl	80005b0 <__aeabi_dmul>
 800d0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ea:	e7bc      	b.n	800d066 <_dtoa_r+0x5e6>
 800d0ec:	d10c      	bne.n	800d108 <_dtoa_r+0x688>
 800d0ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	4b25      	ldr	r3, [pc, #148]	@ (800d18c <_dtoa_r+0x70c>)
 800d0f6:	f7f3 fa5b 	bl	80005b0 <__aeabi_dmul>
 800d0fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0fe:	f7f3 fcdd 	bl	8000abc <__aeabi_dcmpge>
 800d102:	2800      	cmp	r0, #0
 800d104:	f000 815b 	beq.w	800d3be <_dtoa_r+0x93e>
 800d108:	2400      	movs	r4, #0
 800d10a:	4625      	mov	r5, r4
 800d10c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d10e:	4656      	mov	r6, sl
 800d110:	43db      	mvns	r3, r3
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	2700      	movs	r7, #0
 800d116:	4621      	mov	r1, r4
 800d118:	4658      	mov	r0, fp
 800d11a:	f000 fbb7 	bl	800d88c <_Bfree>
 800d11e:	2d00      	cmp	r5, #0
 800d120:	d0dc      	beq.n	800d0dc <_dtoa_r+0x65c>
 800d122:	b12f      	cbz	r7, 800d130 <_dtoa_r+0x6b0>
 800d124:	42af      	cmp	r7, r5
 800d126:	d003      	beq.n	800d130 <_dtoa_r+0x6b0>
 800d128:	4639      	mov	r1, r7
 800d12a:	4658      	mov	r0, fp
 800d12c:	f000 fbae 	bl	800d88c <_Bfree>
 800d130:	4629      	mov	r1, r5
 800d132:	4658      	mov	r0, fp
 800d134:	f000 fbaa 	bl	800d88c <_Bfree>
 800d138:	e7d0      	b.n	800d0dc <_dtoa_r+0x65c>
 800d13a:	9704      	str	r7, [sp, #16]
 800d13c:	4633      	mov	r3, r6
 800d13e:	461e      	mov	r6, r3
 800d140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d144:	2a39      	cmp	r2, #57	@ 0x39
 800d146:	d107      	bne.n	800d158 <_dtoa_r+0x6d8>
 800d148:	459a      	cmp	sl, r3
 800d14a:	d1f8      	bne.n	800d13e <_dtoa_r+0x6be>
 800d14c:	9a04      	ldr	r2, [sp, #16]
 800d14e:	3201      	adds	r2, #1
 800d150:	9204      	str	r2, [sp, #16]
 800d152:	2230      	movs	r2, #48	@ 0x30
 800d154:	f88a 2000 	strb.w	r2, [sl]
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	3201      	adds	r2, #1
 800d15c:	701a      	strb	r2, [r3, #0]
 800d15e:	e7bd      	b.n	800d0dc <_dtoa_r+0x65c>
 800d160:	2200      	movs	r2, #0
 800d162:	4b09      	ldr	r3, [pc, #36]	@ (800d188 <_dtoa_r+0x708>)
 800d164:	f7f3 fa24 	bl	80005b0 <__aeabi_dmul>
 800d168:	2200      	movs	r2, #0
 800d16a:	2300      	movs	r3, #0
 800d16c:	4604      	mov	r4, r0
 800d16e:	460d      	mov	r5, r1
 800d170:	f7f3 fc86 	bl	8000a80 <__aeabi_dcmpeq>
 800d174:	2800      	cmp	r0, #0
 800d176:	f43f aebc 	beq.w	800cef2 <_dtoa_r+0x472>
 800d17a:	e6f1      	b.n	800cf60 <_dtoa_r+0x4e0>
 800d17c:	08010c68 	.word	0x08010c68
 800d180:	3fe00000 	.word	0x3fe00000
 800d184:	3ff00000 	.word	0x3ff00000
 800d188:	40240000 	.word	0x40240000
 800d18c:	40140000 	.word	0x40140000
 800d190:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d192:	2a00      	cmp	r2, #0
 800d194:	f000 80db 	beq.w	800d34e <_dtoa_r+0x8ce>
 800d198:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d19a:	2a01      	cmp	r2, #1
 800d19c:	f300 80bf 	bgt.w	800d31e <_dtoa_r+0x89e>
 800d1a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1a2:	2a00      	cmp	r2, #0
 800d1a4:	f000 80b7 	beq.w	800d316 <_dtoa_r+0x896>
 800d1a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1ac:	4646      	mov	r6, r8
 800d1ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	441a      	add	r2, r3
 800d1b6:	4658      	mov	r0, fp
 800d1b8:	4498      	add	r8, r3
 800d1ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1bc:	f000 fc64 	bl	800da88 <__i2b>
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	b15e      	cbz	r6, 800d1dc <_dtoa_r+0x75c>
 800d1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	dd08      	ble.n	800d1dc <_dtoa_r+0x75c>
 800d1ca:	42b3      	cmp	r3, r6
 800d1cc:	bfa8      	it	ge
 800d1ce:	4633      	movge	r3, r6
 800d1d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1d2:	eba8 0803 	sub.w	r8, r8, r3
 800d1d6:	1af6      	subs	r6, r6, r3
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1de:	b1f3      	cbz	r3, 800d21e <_dtoa_r+0x79e>
 800d1e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f000 80b7 	beq.w	800d356 <_dtoa_r+0x8d6>
 800d1e8:	b18c      	cbz	r4, 800d20e <_dtoa_r+0x78e>
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4658      	mov	r0, fp
 800d1f0:	f000 fd08 	bl	800dc04 <__pow5mult>
 800d1f4:	464a      	mov	r2, r9
 800d1f6:	4601      	mov	r1, r0
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	4658      	mov	r0, fp
 800d1fc:	f000 fc5a 	bl	800dab4 <__multiply>
 800d200:	4649      	mov	r1, r9
 800d202:	9004      	str	r0, [sp, #16]
 800d204:	4658      	mov	r0, fp
 800d206:	f000 fb41 	bl	800d88c <_Bfree>
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	4699      	mov	r9, r3
 800d20e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d210:	1b1a      	subs	r2, r3, r4
 800d212:	d004      	beq.n	800d21e <_dtoa_r+0x79e>
 800d214:	4649      	mov	r1, r9
 800d216:	4658      	mov	r0, fp
 800d218:	f000 fcf4 	bl	800dc04 <__pow5mult>
 800d21c:	4681      	mov	r9, r0
 800d21e:	2101      	movs	r1, #1
 800d220:	4658      	mov	r0, fp
 800d222:	f000 fc31 	bl	800da88 <__i2b>
 800d226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d228:	4604      	mov	r4, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 81c9 	beq.w	800d5c2 <_dtoa_r+0xb42>
 800d230:	461a      	mov	r2, r3
 800d232:	4601      	mov	r1, r0
 800d234:	4658      	mov	r0, fp
 800d236:	f000 fce5 	bl	800dc04 <__pow5mult>
 800d23a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d23c:	4604      	mov	r4, r0
 800d23e:	2b01      	cmp	r3, #1
 800d240:	f300 808f 	bgt.w	800d362 <_dtoa_r+0x8e2>
 800d244:	9b02      	ldr	r3, [sp, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f040 8087 	bne.w	800d35a <_dtoa_r+0x8da>
 800d24c:	9b03      	ldr	r3, [sp, #12]
 800d24e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 8083 	bne.w	800d35e <_dtoa_r+0x8de>
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d25e:	0d1b      	lsrs	r3, r3, #20
 800d260:	051b      	lsls	r3, r3, #20
 800d262:	b12b      	cbz	r3, 800d270 <_dtoa_r+0x7f0>
 800d264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d266:	f108 0801 	add.w	r8, r8, #1
 800d26a:	3301      	adds	r3, #1
 800d26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d26e:	2301      	movs	r3, #1
 800d270:	930a      	str	r3, [sp, #40]	@ 0x28
 800d272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 81aa 	beq.w	800d5ce <_dtoa_r+0xb4e>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d280:	6918      	ldr	r0, [r3, #16]
 800d282:	f000 fbb5 	bl	800d9f0 <__hi0bits>
 800d286:	f1c0 0020 	rsb	r0, r0, #32
 800d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28c:	4418      	add	r0, r3
 800d28e:	f010 001f 	ands.w	r0, r0, #31
 800d292:	d071      	beq.n	800d378 <_dtoa_r+0x8f8>
 800d294:	f1c0 0320 	rsb	r3, r0, #32
 800d298:	2b04      	cmp	r3, #4
 800d29a:	dd65      	ble.n	800d368 <_dtoa_r+0x8e8>
 800d29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d29e:	f1c0 001c 	rsb	r0, r0, #28
 800d2a2:	4403      	add	r3, r0
 800d2a4:	4480      	add	r8, r0
 800d2a6:	4406      	add	r6, r0
 800d2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2aa:	f1b8 0f00 	cmp.w	r8, #0
 800d2ae:	dd05      	ble.n	800d2bc <_dtoa_r+0x83c>
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	4642      	mov	r2, r8
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	f000 fcff 	bl	800dcb8 <__lshift>
 800d2ba:	4681      	mov	r9, r0
 800d2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	dd05      	ble.n	800d2ce <_dtoa_r+0x84e>
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	f000 fcf6 	bl	800dcb8 <__lshift>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d053      	beq.n	800d37c <_dtoa_r+0x8fc>
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	4648      	mov	r0, r9
 800d2d8:	f000 fd5a 	bl	800dd90 <__mcmp>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	da4d      	bge.n	800d37c <_dtoa_r+0x8fc>
 800d2e0:	1e7b      	subs	r3, r7, #1
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	9304      	str	r3, [sp, #16]
 800d2e6:	220a      	movs	r2, #10
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4658      	mov	r0, fp
 800d2ec:	f000 faf0 	bl	800d8d0 <__multadd>
 800d2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2f2:	4681      	mov	r9, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 816c 	beq.w	800d5d2 <_dtoa_r+0xb52>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	220a      	movs	r2, #10
 800d300:	4658      	mov	r0, fp
 800d302:	f000 fae5 	bl	800d8d0 <__multadd>
 800d306:	9b08      	ldr	r3, [sp, #32]
 800d308:	4605      	mov	r5, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dc61      	bgt.n	800d3d2 <_dtoa_r+0x952>
 800d30e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d310:	2b02      	cmp	r3, #2
 800d312:	dc3b      	bgt.n	800d38c <_dtoa_r+0x90c>
 800d314:	e05d      	b.n	800d3d2 <_dtoa_r+0x952>
 800d316:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d318:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d31c:	e746      	b.n	800d1ac <_dtoa_r+0x72c>
 800d31e:	9b07      	ldr	r3, [sp, #28]
 800d320:	1e5c      	subs	r4, r3, #1
 800d322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d324:	42a3      	cmp	r3, r4
 800d326:	bfbf      	itttt	lt
 800d328:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d32a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800d32c:	1ae3      	sublt	r3, r4, r3
 800d32e:	18d2      	addlt	r2, r2, r3
 800d330:	bfa8      	it	ge
 800d332:	1b1c      	subge	r4, r3, r4
 800d334:	9b07      	ldr	r3, [sp, #28]
 800d336:	bfbe      	ittt	lt
 800d338:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d33a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800d33c:	2400      	movlt	r4, #0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfb5      	itete	lt
 800d342:	eba8 0603 	sublt.w	r6, r8, r3
 800d346:	4646      	movge	r6, r8
 800d348:	2300      	movlt	r3, #0
 800d34a:	9b07      	ldrge	r3, [sp, #28]
 800d34c:	e730      	b.n	800d1b0 <_dtoa_r+0x730>
 800d34e:	4646      	mov	r6, r8
 800d350:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d352:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d354:	e735      	b.n	800d1c2 <_dtoa_r+0x742>
 800d356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d358:	e75c      	b.n	800d214 <_dtoa_r+0x794>
 800d35a:	2300      	movs	r3, #0
 800d35c:	e788      	b.n	800d270 <_dtoa_r+0x7f0>
 800d35e:	9b02      	ldr	r3, [sp, #8]
 800d360:	e786      	b.n	800d270 <_dtoa_r+0x7f0>
 800d362:	2300      	movs	r3, #0
 800d364:	930a      	str	r3, [sp, #40]	@ 0x28
 800d366:	e788      	b.n	800d27a <_dtoa_r+0x7fa>
 800d368:	d09f      	beq.n	800d2aa <_dtoa_r+0x82a>
 800d36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d36c:	331c      	adds	r3, #28
 800d36e:	441a      	add	r2, r3
 800d370:	4498      	add	r8, r3
 800d372:	441e      	add	r6, r3
 800d374:	9209      	str	r2, [sp, #36]	@ 0x24
 800d376:	e798      	b.n	800d2aa <_dtoa_r+0x82a>
 800d378:	4603      	mov	r3, r0
 800d37a:	e7f6      	b.n	800d36a <_dtoa_r+0x8ea>
 800d37c:	9b07      	ldr	r3, [sp, #28]
 800d37e:	9704      	str	r7, [sp, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	dc20      	bgt.n	800d3c6 <_dtoa_r+0x946>
 800d384:	9308      	str	r3, [sp, #32]
 800d386:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d388:	2b02      	cmp	r3, #2
 800d38a:	dd1e      	ble.n	800d3ca <_dtoa_r+0x94a>
 800d38c:	9b08      	ldr	r3, [sp, #32]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f47f aebc 	bne.w	800d10c <_dtoa_r+0x68c>
 800d394:	4621      	mov	r1, r4
 800d396:	2205      	movs	r2, #5
 800d398:	4658      	mov	r0, fp
 800d39a:	f000 fa99 	bl	800d8d0 <__multadd>
 800d39e:	4601      	mov	r1, r0
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	4648      	mov	r0, r9
 800d3a4:	f000 fcf4 	bl	800dd90 <__mcmp>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	f77f aeaf 	ble.w	800d10c <_dtoa_r+0x68c>
 800d3ae:	2331      	movs	r3, #49	@ 0x31
 800d3b0:	4656      	mov	r6, sl
 800d3b2:	f806 3b01 	strb.w	r3, [r6], #1
 800d3b6:	9b04      	ldr	r3, [sp, #16]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	e6aa      	b.n	800d114 <_dtoa_r+0x694>
 800d3be:	9c07      	ldr	r4, [sp, #28]
 800d3c0:	9704      	str	r7, [sp, #16]
 800d3c2:	4625      	mov	r5, r4
 800d3c4:	e7f3      	b.n	800d3ae <_dtoa_r+0x92e>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	9308      	str	r3, [sp, #32]
 800d3ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 8104 	beq.w	800d5da <_dtoa_r+0xb5a>
 800d3d2:	2e00      	cmp	r6, #0
 800d3d4:	dd05      	ble.n	800d3e2 <_dtoa_r+0x962>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4632      	mov	r2, r6
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 fc6c 	bl	800dcb8 <__lshift>
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d05a      	beq.n	800d49e <_dtoa_r+0xa1e>
 800d3e8:	4658      	mov	r0, fp
 800d3ea:	6869      	ldr	r1, [r5, #4]
 800d3ec:	f000 fa0e 	bl	800d80c <_Balloc>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	b928      	cbnz	r0, 800d400 <_dtoa_r+0x980>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d3fa:	4b83      	ldr	r3, [pc, #524]	@ (800d608 <_dtoa_r+0xb88>)
 800d3fc:	f7ff bb54 	b.w	800caa8 <_dtoa_r+0x28>
 800d400:	692a      	ldr	r2, [r5, #16]
 800d402:	f105 010c 	add.w	r1, r5, #12
 800d406:	3202      	adds	r2, #2
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	300c      	adds	r0, #12
 800d40c:	f7ff fa9b 	bl	800c946 <memcpy>
 800d410:	2201      	movs	r2, #1
 800d412:	4631      	mov	r1, r6
 800d414:	4658      	mov	r0, fp
 800d416:	f000 fc4f 	bl	800dcb8 <__lshift>
 800d41a:	462f      	mov	r7, r5
 800d41c:	4605      	mov	r5, r0
 800d41e:	f10a 0301 	add.w	r3, sl, #1
 800d422:	9307      	str	r3, [sp, #28]
 800d424:	9b08      	ldr	r3, [sp, #32]
 800d426:	4453      	add	r3, sl
 800d428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d42a:	9b02      	ldr	r3, [sp, #8]
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	930a      	str	r3, [sp, #40]	@ 0x28
 800d432:	9b07      	ldr	r3, [sp, #28]
 800d434:	4621      	mov	r1, r4
 800d436:	3b01      	subs	r3, #1
 800d438:	4648      	mov	r0, r9
 800d43a:	9302      	str	r3, [sp, #8]
 800d43c:	f7ff fa96 	bl	800c96c <quorem>
 800d440:	4639      	mov	r1, r7
 800d442:	9008      	str	r0, [sp, #32]
 800d444:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d448:	4648      	mov	r0, r9
 800d44a:	f000 fca1 	bl	800dd90 <__mcmp>
 800d44e:	462a      	mov	r2, r5
 800d450:	9009      	str	r0, [sp, #36]	@ 0x24
 800d452:	4621      	mov	r1, r4
 800d454:	4658      	mov	r0, fp
 800d456:	f000 fcb7 	bl	800ddc8 <__mdiff>
 800d45a:	68c2      	ldr	r2, [r0, #12]
 800d45c:	4606      	mov	r6, r0
 800d45e:	bb02      	cbnz	r2, 800d4a2 <_dtoa_r+0xa22>
 800d460:	4601      	mov	r1, r0
 800d462:	4648      	mov	r0, r9
 800d464:	f000 fc94 	bl	800dd90 <__mcmp>
 800d468:	4602      	mov	r2, r0
 800d46a:	4631      	mov	r1, r6
 800d46c:	4658      	mov	r0, fp
 800d46e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d470:	f000 fa0c 	bl	800d88c <_Bfree>
 800d474:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d476:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d478:	9e07      	ldr	r6, [sp, #28]
 800d47a:	ea43 0102 	orr.w	r1, r3, r2
 800d47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d480:	4319      	orrs	r1, r3
 800d482:	d110      	bne.n	800d4a6 <_dtoa_r+0xa26>
 800d484:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d488:	d029      	beq.n	800d4de <_dtoa_r+0xa5e>
 800d48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd02      	ble.n	800d496 <_dtoa_r+0xa16>
 800d490:	9b08      	ldr	r3, [sp, #32]
 800d492:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d496:	9b02      	ldr	r3, [sp, #8]
 800d498:	f883 8000 	strb.w	r8, [r3]
 800d49c:	e63b      	b.n	800d116 <_dtoa_r+0x696>
 800d49e:	4628      	mov	r0, r5
 800d4a0:	e7bb      	b.n	800d41a <_dtoa_r+0x99a>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	e7e1      	b.n	800d46a <_dtoa_r+0x9ea>
 800d4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	db04      	blt.n	800d4b6 <_dtoa_r+0xa36>
 800d4ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d4ae:	430b      	orrs	r3, r1
 800d4b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4b2:	430b      	orrs	r3, r1
 800d4b4:	d120      	bne.n	800d4f8 <_dtoa_r+0xa78>
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	dded      	ble.n	800d496 <_dtoa_r+0xa16>
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	2201      	movs	r2, #1
 800d4be:	4658      	mov	r0, fp
 800d4c0:	f000 fbfa 	bl	800dcb8 <__lshift>
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	4681      	mov	r9, r0
 800d4c8:	f000 fc62 	bl	800dd90 <__mcmp>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	dc03      	bgt.n	800d4d8 <_dtoa_r+0xa58>
 800d4d0:	d1e1      	bne.n	800d496 <_dtoa_r+0xa16>
 800d4d2:	f018 0f01 	tst.w	r8, #1
 800d4d6:	d0de      	beq.n	800d496 <_dtoa_r+0xa16>
 800d4d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4dc:	d1d8      	bne.n	800d490 <_dtoa_r+0xa10>
 800d4de:	2339      	movs	r3, #57	@ 0x39
 800d4e0:	9a02      	ldr	r2, [sp, #8]
 800d4e2:	7013      	strb	r3, [r2, #0]
 800d4e4:	4633      	mov	r3, r6
 800d4e6:	461e      	mov	r6, r3
 800d4e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	2a39      	cmp	r2, #57	@ 0x39
 800d4f0:	d052      	beq.n	800d598 <_dtoa_r+0xb18>
 800d4f2:	3201      	adds	r2, #1
 800d4f4:	701a      	strb	r2, [r3, #0]
 800d4f6:	e60e      	b.n	800d116 <_dtoa_r+0x696>
 800d4f8:	2a00      	cmp	r2, #0
 800d4fa:	dd07      	ble.n	800d50c <_dtoa_r+0xa8c>
 800d4fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d500:	d0ed      	beq.n	800d4de <_dtoa_r+0xa5e>
 800d502:	9a02      	ldr	r2, [sp, #8]
 800d504:	f108 0301 	add.w	r3, r8, #1
 800d508:	7013      	strb	r3, [r2, #0]
 800d50a:	e604      	b.n	800d116 <_dtoa_r+0x696>
 800d50c:	9b07      	ldr	r3, [sp, #28]
 800d50e:	9a07      	ldr	r2, [sp, #28]
 800d510:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d516:	4293      	cmp	r3, r2
 800d518:	d028      	beq.n	800d56c <_dtoa_r+0xaec>
 800d51a:	4649      	mov	r1, r9
 800d51c:	2300      	movs	r3, #0
 800d51e:	220a      	movs	r2, #10
 800d520:	4658      	mov	r0, fp
 800d522:	f000 f9d5 	bl	800d8d0 <__multadd>
 800d526:	42af      	cmp	r7, r5
 800d528:	4681      	mov	r9, r0
 800d52a:	f04f 0300 	mov.w	r3, #0
 800d52e:	f04f 020a 	mov.w	r2, #10
 800d532:	4639      	mov	r1, r7
 800d534:	4658      	mov	r0, fp
 800d536:	d107      	bne.n	800d548 <_dtoa_r+0xac8>
 800d538:	f000 f9ca 	bl	800d8d0 <__multadd>
 800d53c:	4607      	mov	r7, r0
 800d53e:	4605      	mov	r5, r0
 800d540:	9b07      	ldr	r3, [sp, #28]
 800d542:	3301      	adds	r3, #1
 800d544:	9307      	str	r3, [sp, #28]
 800d546:	e774      	b.n	800d432 <_dtoa_r+0x9b2>
 800d548:	f000 f9c2 	bl	800d8d0 <__multadd>
 800d54c:	4629      	mov	r1, r5
 800d54e:	4607      	mov	r7, r0
 800d550:	2300      	movs	r3, #0
 800d552:	220a      	movs	r2, #10
 800d554:	4658      	mov	r0, fp
 800d556:	f000 f9bb 	bl	800d8d0 <__multadd>
 800d55a:	4605      	mov	r5, r0
 800d55c:	e7f0      	b.n	800d540 <_dtoa_r+0xac0>
 800d55e:	9b08      	ldr	r3, [sp, #32]
 800d560:	2700      	movs	r7, #0
 800d562:	2b00      	cmp	r3, #0
 800d564:	bfcc      	ite	gt
 800d566:	461e      	movgt	r6, r3
 800d568:	2601      	movle	r6, #1
 800d56a:	4456      	add	r6, sl
 800d56c:	4649      	mov	r1, r9
 800d56e:	2201      	movs	r2, #1
 800d570:	4658      	mov	r0, fp
 800d572:	f000 fba1 	bl	800dcb8 <__lshift>
 800d576:	4621      	mov	r1, r4
 800d578:	4681      	mov	r9, r0
 800d57a:	f000 fc09 	bl	800dd90 <__mcmp>
 800d57e:	2800      	cmp	r0, #0
 800d580:	dcb0      	bgt.n	800d4e4 <_dtoa_r+0xa64>
 800d582:	d102      	bne.n	800d58a <_dtoa_r+0xb0a>
 800d584:	f018 0f01 	tst.w	r8, #1
 800d588:	d1ac      	bne.n	800d4e4 <_dtoa_r+0xa64>
 800d58a:	4633      	mov	r3, r6
 800d58c:	461e      	mov	r6, r3
 800d58e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d592:	2a30      	cmp	r2, #48	@ 0x30
 800d594:	d0fa      	beq.n	800d58c <_dtoa_r+0xb0c>
 800d596:	e5be      	b.n	800d116 <_dtoa_r+0x696>
 800d598:	459a      	cmp	sl, r3
 800d59a:	d1a4      	bne.n	800d4e6 <_dtoa_r+0xa66>
 800d59c:	9b04      	ldr	r3, [sp, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	2331      	movs	r3, #49	@ 0x31
 800d5a4:	f88a 3000 	strb.w	r3, [sl]
 800d5a8:	e5b5      	b.n	800d116 <_dtoa_r+0x696>
 800d5aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d5ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d60c <_dtoa_r+0xb8c>
 800d5b0:	b11b      	cbz	r3, 800d5ba <_dtoa_r+0xb3a>
 800d5b2:	f10a 0308 	add.w	r3, sl, #8
 800d5b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	4650      	mov	r0, sl
 800d5bc:	b017      	add	sp, #92	@ 0x5c
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	f77f ae3d 	ble.w	800d244 <_dtoa_r+0x7c4>
 800d5ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e65b      	b.n	800d28a <_dtoa_r+0x80a>
 800d5d2:	9b08      	ldr	r3, [sp, #32]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f77f aed6 	ble.w	800d386 <_dtoa_r+0x906>
 800d5da:	4656      	mov	r6, sl
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4648      	mov	r0, r9
 800d5e0:	f7ff f9c4 	bl	800c96c <quorem>
 800d5e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	f806 8b01 	strb.w	r8, [r6], #1
 800d5ee:	eba6 020a 	sub.w	r2, r6, sl
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	ddb3      	ble.n	800d55e <_dtoa_r+0xade>
 800d5f6:	4649      	mov	r1, r9
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	220a      	movs	r2, #10
 800d5fc:	4658      	mov	r0, fp
 800d5fe:	f000 f967 	bl	800d8d0 <__multadd>
 800d602:	4681      	mov	r9, r0
 800d604:	e7ea      	b.n	800d5dc <_dtoa_r+0xb5c>
 800d606:	bf00      	nop
 800d608:	08010bc4 	.word	0x08010bc4
 800d60c:	08010b48 	.word	0x08010b48

0800d610 <_free_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4605      	mov	r5, r0
 800d614:	2900      	cmp	r1, #0
 800d616:	d040      	beq.n	800d69a <_free_r+0x8a>
 800d618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d61c:	1f0c      	subs	r4, r1, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bfb8      	it	lt
 800d622:	18e4      	addlt	r4, r4, r3
 800d624:	f000 f8e6 	bl	800d7f4 <__malloc_lock>
 800d628:	4a1c      	ldr	r2, [pc, #112]	@ (800d69c <_free_r+0x8c>)
 800d62a:	6813      	ldr	r3, [r2, #0]
 800d62c:	b933      	cbnz	r3, 800d63c <_free_r+0x2c>
 800d62e:	6063      	str	r3, [r4, #4]
 800d630:	6014      	str	r4, [r2, #0]
 800d632:	4628      	mov	r0, r5
 800d634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d638:	f000 b8e2 	b.w	800d800 <__malloc_unlock>
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	d908      	bls.n	800d652 <_free_r+0x42>
 800d640:	6820      	ldr	r0, [r4, #0]
 800d642:	1821      	adds	r1, r4, r0
 800d644:	428b      	cmp	r3, r1
 800d646:	bf01      	itttt	eq
 800d648:	6819      	ldreq	r1, [r3, #0]
 800d64a:	685b      	ldreq	r3, [r3, #4]
 800d64c:	1809      	addeq	r1, r1, r0
 800d64e:	6021      	streq	r1, [r4, #0]
 800d650:	e7ed      	b.n	800d62e <_free_r+0x1e>
 800d652:	461a      	mov	r2, r3
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	b10b      	cbz	r3, 800d65c <_free_r+0x4c>
 800d658:	42a3      	cmp	r3, r4
 800d65a:	d9fa      	bls.n	800d652 <_free_r+0x42>
 800d65c:	6811      	ldr	r1, [r2, #0]
 800d65e:	1850      	adds	r0, r2, r1
 800d660:	42a0      	cmp	r0, r4
 800d662:	d10b      	bne.n	800d67c <_free_r+0x6c>
 800d664:	6820      	ldr	r0, [r4, #0]
 800d666:	4401      	add	r1, r0
 800d668:	1850      	adds	r0, r2, r1
 800d66a:	4283      	cmp	r3, r0
 800d66c:	6011      	str	r1, [r2, #0]
 800d66e:	d1e0      	bne.n	800d632 <_free_r+0x22>
 800d670:	6818      	ldr	r0, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	4408      	add	r0, r1
 800d676:	6010      	str	r0, [r2, #0]
 800d678:	6053      	str	r3, [r2, #4]
 800d67a:	e7da      	b.n	800d632 <_free_r+0x22>
 800d67c:	d902      	bls.n	800d684 <_free_r+0x74>
 800d67e:	230c      	movs	r3, #12
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	e7d6      	b.n	800d632 <_free_r+0x22>
 800d684:	6820      	ldr	r0, [r4, #0]
 800d686:	1821      	adds	r1, r4, r0
 800d688:	428b      	cmp	r3, r1
 800d68a:	bf01      	itttt	eq
 800d68c:	6819      	ldreq	r1, [r3, #0]
 800d68e:	685b      	ldreq	r3, [r3, #4]
 800d690:	1809      	addeq	r1, r1, r0
 800d692:	6021      	streq	r1, [r4, #0]
 800d694:	6063      	str	r3, [r4, #4]
 800d696:	6054      	str	r4, [r2, #4]
 800d698:	e7cb      	b.n	800d632 <_free_r+0x22>
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	20000ae0 	.word	0x20000ae0

0800d6a0 <malloc>:
 800d6a0:	4b02      	ldr	r3, [pc, #8]	@ (800d6ac <malloc+0xc>)
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	6818      	ldr	r0, [r3, #0]
 800d6a6:	f000 b825 	b.w	800d6f4 <_malloc_r>
 800d6aa:	bf00      	nop
 800d6ac:	20000050 	.word	0x20000050

0800d6b0 <sbrk_aligned>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	4e0f      	ldr	r6, [pc, #60]	@ (800d6f0 <sbrk_aligned+0x40>)
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	6831      	ldr	r1, [r6, #0]
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	b911      	cbnz	r1, 800d6c2 <sbrk_aligned+0x12>
 800d6bc:	f001 ff4e 	bl	800f55c <_sbrk_r>
 800d6c0:	6030      	str	r0, [r6, #0]
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f001 ff49 	bl	800f55c <_sbrk_r>
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d103      	bne.n	800d6d6 <sbrk_aligned+0x26>
 800d6ce:	f04f 34ff 	mov.w	r4, #4294967295
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
 800d6d6:	1cc4      	adds	r4, r0, #3
 800d6d8:	f024 0403 	bic.w	r4, r4, #3
 800d6dc:	42a0      	cmp	r0, r4
 800d6de:	d0f8      	beq.n	800d6d2 <sbrk_aligned+0x22>
 800d6e0:	1a21      	subs	r1, r4, r0
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f001 ff3a 	bl	800f55c <_sbrk_r>
 800d6e8:	3001      	adds	r0, #1
 800d6ea:	d1f2      	bne.n	800d6d2 <sbrk_aligned+0x22>
 800d6ec:	e7ef      	b.n	800d6ce <sbrk_aligned+0x1e>
 800d6ee:	bf00      	nop
 800d6f0:	20000adc 	.word	0x20000adc

0800d6f4 <_malloc_r>:
 800d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	1ccd      	adds	r5, r1, #3
 800d6fa:	f025 0503 	bic.w	r5, r5, #3
 800d6fe:	3508      	adds	r5, #8
 800d700:	2d0c      	cmp	r5, #12
 800d702:	bf38      	it	cc
 800d704:	250c      	movcc	r5, #12
 800d706:	2d00      	cmp	r5, #0
 800d708:	4606      	mov	r6, r0
 800d70a:	db01      	blt.n	800d710 <_malloc_r+0x1c>
 800d70c:	42a9      	cmp	r1, r5
 800d70e:	d904      	bls.n	800d71a <_malloc_r+0x26>
 800d710:	230c      	movs	r3, #12
 800d712:	6033      	str	r3, [r6, #0]
 800d714:	2000      	movs	r0, #0
 800d716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d71a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d7f0 <_malloc_r+0xfc>
 800d71e:	f000 f869 	bl	800d7f4 <__malloc_lock>
 800d722:	f8d8 3000 	ldr.w	r3, [r8]
 800d726:	461c      	mov	r4, r3
 800d728:	bb44      	cbnz	r4, 800d77c <_malloc_r+0x88>
 800d72a:	4629      	mov	r1, r5
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7ff ffbf 	bl	800d6b0 <sbrk_aligned>
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	4604      	mov	r4, r0
 800d736:	d158      	bne.n	800d7ea <_malloc_r+0xf6>
 800d738:	f8d8 4000 	ldr.w	r4, [r8]
 800d73c:	4627      	mov	r7, r4
 800d73e:	2f00      	cmp	r7, #0
 800d740:	d143      	bne.n	800d7ca <_malloc_r+0xd6>
 800d742:	2c00      	cmp	r4, #0
 800d744:	d04b      	beq.n	800d7de <_malloc_r+0xea>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	4639      	mov	r1, r7
 800d74a:	4630      	mov	r0, r6
 800d74c:	eb04 0903 	add.w	r9, r4, r3
 800d750:	f001 ff04 	bl	800f55c <_sbrk_r>
 800d754:	4581      	cmp	r9, r0
 800d756:	d142      	bne.n	800d7de <_malloc_r+0xea>
 800d758:	6821      	ldr	r1, [r4, #0]
 800d75a:	4630      	mov	r0, r6
 800d75c:	1a6d      	subs	r5, r5, r1
 800d75e:	4629      	mov	r1, r5
 800d760:	f7ff ffa6 	bl	800d6b0 <sbrk_aligned>
 800d764:	3001      	adds	r0, #1
 800d766:	d03a      	beq.n	800d7de <_malloc_r+0xea>
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	442b      	add	r3, r5
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	f8d8 3000 	ldr.w	r3, [r8]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	bb62      	cbnz	r2, 800d7d0 <_malloc_r+0xdc>
 800d776:	f8c8 7000 	str.w	r7, [r8]
 800d77a:	e00f      	b.n	800d79c <_malloc_r+0xa8>
 800d77c:	6822      	ldr	r2, [r4, #0]
 800d77e:	1b52      	subs	r2, r2, r5
 800d780:	d420      	bmi.n	800d7c4 <_malloc_r+0xd0>
 800d782:	2a0b      	cmp	r2, #11
 800d784:	d917      	bls.n	800d7b6 <_malloc_r+0xc2>
 800d786:	1961      	adds	r1, r4, r5
 800d788:	42a3      	cmp	r3, r4
 800d78a:	6025      	str	r5, [r4, #0]
 800d78c:	bf18      	it	ne
 800d78e:	6059      	strne	r1, [r3, #4]
 800d790:	6863      	ldr	r3, [r4, #4]
 800d792:	bf08      	it	eq
 800d794:	f8c8 1000 	streq.w	r1, [r8]
 800d798:	5162      	str	r2, [r4, r5]
 800d79a:	604b      	str	r3, [r1, #4]
 800d79c:	4630      	mov	r0, r6
 800d79e:	f000 f82f 	bl	800d800 <__malloc_unlock>
 800d7a2:	f104 000b 	add.w	r0, r4, #11
 800d7a6:	1d23      	adds	r3, r4, #4
 800d7a8:	f020 0007 	bic.w	r0, r0, #7
 800d7ac:	1ac2      	subs	r2, r0, r3
 800d7ae:	bf1c      	itt	ne
 800d7b0:	1a1b      	subne	r3, r3, r0
 800d7b2:	50a3      	strne	r3, [r4, r2]
 800d7b4:	e7af      	b.n	800d716 <_malloc_r+0x22>
 800d7b6:	6862      	ldr	r2, [r4, #4]
 800d7b8:	42a3      	cmp	r3, r4
 800d7ba:	bf0c      	ite	eq
 800d7bc:	f8c8 2000 	streq.w	r2, [r8]
 800d7c0:	605a      	strne	r2, [r3, #4]
 800d7c2:	e7eb      	b.n	800d79c <_malloc_r+0xa8>
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	6864      	ldr	r4, [r4, #4]
 800d7c8:	e7ae      	b.n	800d728 <_malloc_r+0x34>
 800d7ca:	463c      	mov	r4, r7
 800d7cc:	687f      	ldr	r7, [r7, #4]
 800d7ce:	e7b6      	b.n	800d73e <_malloc_r+0x4a>
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	42a3      	cmp	r3, r4
 800d7d6:	d1fb      	bne.n	800d7d0 <_malloc_r+0xdc>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	6053      	str	r3, [r2, #4]
 800d7dc:	e7de      	b.n	800d79c <_malloc_r+0xa8>
 800d7de:	230c      	movs	r3, #12
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	6033      	str	r3, [r6, #0]
 800d7e4:	f000 f80c 	bl	800d800 <__malloc_unlock>
 800d7e8:	e794      	b.n	800d714 <_malloc_r+0x20>
 800d7ea:	6005      	str	r5, [r0, #0]
 800d7ec:	e7d6      	b.n	800d79c <_malloc_r+0xa8>
 800d7ee:	bf00      	nop
 800d7f0:	20000ae0 	.word	0x20000ae0

0800d7f4 <__malloc_lock>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	@ (800d7fc <__malloc_lock+0x8>)
 800d7f6:	f7ff b896 	b.w	800c926 <__retarget_lock_acquire_recursive>
 800d7fa:	bf00      	nop
 800d7fc:	20000ad8 	.word	0x20000ad8

0800d800 <__malloc_unlock>:
 800d800:	4801      	ldr	r0, [pc, #4]	@ (800d808 <__malloc_unlock+0x8>)
 800d802:	f7ff b891 	b.w	800c928 <__retarget_lock_release_recursive>
 800d806:	bf00      	nop
 800d808:	20000ad8 	.word	0x20000ad8

0800d80c <_Balloc>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	69c6      	ldr	r6, [r0, #28]
 800d810:	4604      	mov	r4, r0
 800d812:	460d      	mov	r5, r1
 800d814:	b976      	cbnz	r6, 800d834 <_Balloc+0x28>
 800d816:	2010      	movs	r0, #16
 800d818:	f7ff ff42 	bl	800d6a0 <malloc>
 800d81c:	4602      	mov	r2, r0
 800d81e:	61e0      	str	r0, [r4, #28]
 800d820:	b920      	cbnz	r0, 800d82c <_Balloc+0x20>
 800d822:	216b      	movs	r1, #107	@ 0x6b
 800d824:	4b17      	ldr	r3, [pc, #92]	@ (800d884 <_Balloc+0x78>)
 800d826:	4818      	ldr	r0, [pc, #96]	@ (800d888 <_Balloc+0x7c>)
 800d828:	f001 feae 	bl	800f588 <__assert_func>
 800d82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d830:	6006      	str	r6, [r0, #0]
 800d832:	60c6      	str	r6, [r0, #12]
 800d834:	69e6      	ldr	r6, [r4, #28]
 800d836:	68f3      	ldr	r3, [r6, #12]
 800d838:	b183      	cbz	r3, 800d85c <_Balloc+0x50>
 800d83a:	69e3      	ldr	r3, [r4, #28]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d842:	b9b8      	cbnz	r0, 800d874 <_Balloc+0x68>
 800d844:	2101      	movs	r1, #1
 800d846:	fa01 f605 	lsl.w	r6, r1, r5
 800d84a:	1d72      	adds	r2, r6, #5
 800d84c:	4620      	mov	r0, r4
 800d84e:	0092      	lsls	r2, r2, #2
 800d850:	f001 feb8 	bl	800f5c4 <_calloc_r>
 800d854:	b160      	cbz	r0, 800d870 <_Balloc+0x64>
 800d856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d85a:	e00e      	b.n	800d87a <_Balloc+0x6e>
 800d85c:	2221      	movs	r2, #33	@ 0x21
 800d85e:	2104      	movs	r1, #4
 800d860:	4620      	mov	r0, r4
 800d862:	f001 feaf 	bl	800f5c4 <_calloc_r>
 800d866:	69e3      	ldr	r3, [r4, #28]
 800d868:	60f0      	str	r0, [r6, #12]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e4      	bne.n	800d83a <_Balloc+0x2e>
 800d870:	2000      	movs	r0, #0
 800d872:	bd70      	pop	{r4, r5, r6, pc}
 800d874:	6802      	ldr	r2, [r0, #0]
 800d876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d87a:	2300      	movs	r3, #0
 800d87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d880:	e7f7      	b.n	800d872 <_Balloc+0x66>
 800d882:	bf00      	nop
 800d884:	08010b55 	.word	0x08010b55
 800d888:	08010bd5 	.word	0x08010bd5

0800d88c <_Bfree>:
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	69c6      	ldr	r6, [r0, #28]
 800d890:	4605      	mov	r5, r0
 800d892:	460c      	mov	r4, r1
 800d894:	b976      	cbnz	r6, 800d8b4 <_Bfree+0x28>
 800d896:	2010      	movs	r0, #16
 800d898:	f7ff ff02 	bl	800d6a0 <malloc>
 800d89c:	4602      	mov	r2, r0
 800d89e:	61e8      	str	r0, [r5, #28]
 800d8a0:	b920      	cbnz	r0, 800d8ac <_Bfree+0x20>
 800d8a2:	218f      	movs	r1, #143	@ 0x8f
 800d8a4:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <_Bfree+0x3c>)
 800d8a6:	4809      	ldr	r0, [pc, #36]	@ (800d8cc <_Bfree+0x40>)
 800d8a8:	f001 fe6e 	bl	800f588 <__assert_func>
 800d8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8b0:	6006      	str	r6, [r0, #0]
 800d8b2:	60c6      	str	r6, [r0, #12]
 800d8b4:	b13c      	cbz	r4, 800d8c6 <_Bfree+0x3a>
 800d8b6:	69eb      	ldr	r3, [r5, #28]
 800d8b8:	6862      	ldr	r2, [r4, #4]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8c0:	6021      	str	r1, [r4, #0]
 800d8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}
 800d8c8:	08010b55 	.word	0x08010b55
 800d8cc:	08010bd5 	.word	0x08010bd5

0800d8d0 <__multadd>:
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	461e      	mov	r6, r3
 800d8da:	2000      	movs	r0, #0
 800d8dc:	690d      	ldr	r5, [r1, #16]
 800d8de:	f101 0c14 	add.w	ip, r1, #20
 800d8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	b299      	uxth	r1, r3
 800d8ea:	fb02 6101 	mla	r1, r2, r1, r6
 800d8ee:	0c1e      	lsrs	r6, r3, #16
 800d8f0:	0c0b      	lsrs	r3, r1, #16
 800d8f2:	fb02 3306 	mla	r3, r2, r6, r3
 800d8f6:	b289      	uxth	r1, r1
 800d8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8fc:	4285      	cmp	r5, r0
 800d8fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d902:	f84c 1b04 	str.w	r1, [ip], #4
 800d906:	dcec      	bgt.n	800d8e2 <__multadd+0x12>
 800d908:	b30e      	cbz	r6, 800d94e <__multadd+0x7e>
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	42ab      	cmp	r3, r5
 800d90e:	dc19      	bgt.n	800d944 <__multadd+0x74>
 800d910:	6861      	ldr	r1, [r4, #4]
 800d912:	4638      	mov	r0, r7
 800d914:	3101      	adds	r1, #1
 800d916:	f7ff ff79 	bl	800d80c <_Balloc>
 800d91a:	4680      	mov	r8, r0
 800d91c:	b928      	cbnz	r0, 800d92a <__multadd+0x5a>
 800d91e:	4602      	mov	r2, r0
 800d920:	21ba      	movs	r1, #186	@ 0xba
 800d922:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <__multadd+0x84>)
 800d924:	480c      	ldr	r0, [pc, #48]	@ (800d958 <__multadd+0x88>)
 800d926:	f001 fe2f 	bl	800f588 <__assert_func>
 800d92a:	6922      	ldr	r2, [r4, #16]
 800d92c:	f104 010c 	add.w	r1, r4, #12
 800d930:	3202      	adds	r2, #2
 800d932:	0092      	lsls	r2, r2, #2
 800d934:	300c      	adds	r0, #12
 800d936:	f7ff f806 	bl	800c946 <memcpy>
 800d93a:	4621      	mov	r1, r4
 800d93c:	4638      	mov	r0, r7
 800d93e:	f7ff ffa5 	bl	800d88c <_Bfree>
 800d942:	4644      	mov	r4, r8
 800d944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d948:	3501      	adds	r5, #1
 800d94a:	615e      	str	r6, [r3, #20]
 800d94c:	6125      	str	r5, [r4, #16]
 800d94e:	4620      	mov	r0, r4
 800d950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d954:	08010bc4 	.word	0x08010bc4
 800d958:	08010bd5 	.word	0x08010bd5

0800d95c <__s2b>:
 800d95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d960:	4615      	mov	r5, r2
 800d962:	2209      	movs	r2, #9
 800d964:	461f      	mov	r7, r3
 800d966:	3308      	adds	r3, #8
 800d968:	460c      	mov	r4, r1
 800d96a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d96e:	4606      	mov	r6, r0
 800d970:	2201      	movs	r2, #1
 800d972:	2100      	movs	r1, #0
 800d974:	429a      	cmp	r2, r3
 800d976:	db09      	blt.n	800d98c <__s2b+0x30>
 800d978:	4630      	mov	r0, r6
 800d97a:	f7ff ff47 	bl	800d80c <_Balloc>
 800d97e:	b940      	cbnz	r0, 800d992 <__s2b+0x36>
 800d980:	4602      	mov	r2, r0
 800d982:	21d3      	movs	r1, #211	@ 0xd3
 800d984:	4b18      	ldr	r3, [pc, #96]	@ (800d9e8 <__s2b+0x8c>)
 800d986:	4819      	ldr	r0, [pc, #100]	@ (800d9ec <__s2b+0x90>)
 800d988:	f001 fdfe 	bl	800f588 <__assert_func>
 800d98c:	0052      	lsls	r2, r2, #1
 800d98e:	3101      	adds	r1, #1
 800d990:	e7f0      	b.n	800d974 <__s2b+0x18>
 800d992:	9b08      	ldr	r3, [sp, #32]
 800d994:	2d09      	cmp	r5, #9
 800d996:	6143      	str	r3, [r0, #20]
 800d998:	f04f 0301 	mov.w	r3, #1
 800d99c:	6103      	str	r3, [r0, #16]
 800d99e:	dd16      	ble.n	800d9ce <__s2b+0x72>
 800d9a0:	f104 0909 	add.w	r9, r4, #9
 800d9a4:	46c8      	mov	r8, r9
 800d9a6:	442c      	add	r4, r5
 800d9a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9ac:	4601      	mov	r1, r0
 800d9ae:	220a      	movs	r2, #10
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	3b30      	subs	r3, #48	@ 0x30
 800d9b4:	f7ff ff8c 	bl	800d8d0 <__multadd>
 800d9b8:	45a0      	cmp	r8, r4
 800d9ba:	d1f5      	bne.n	800d9a8 <__s2b+0x4c>
 800d9bc:	f1a5 0408 	sub.w	r4, r5, #8
 800d9c0:	444c      	add	r4, r9
 800d9c2:	1b2d      	subs	r5, r5, r4
 800d9c4:	1963      	adds	r3, r4, r5
 800d9c6:	42bb      	cmp	r3, r7
 800d9c8:	db04      	blt.n	800d9d4 <__s2b+0x78>
 800d9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ce:	2509      	movs	r5, #9
 800d9d0:	340a      	adds	r4, #10
 800d9d2:	e7f6      	b.n	800d9c2 <__s2b+0x66>
 800d9d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9d8:	4601      	mov	r1, r0
 800d9da:	220a      	movs	r2, #10
 800d9dc:	4630      	mov	r0, r6
 800d9de:	3b30      	subs	r3, #48	@ 0x30
 800d9e0:	f7ff ff76 	bl	800d8d0 <__multadd>
 800d9e4:	e7ee      	b.n	800d9c4 <__s2b+0x68>
 800d9e6:	bf00      	nop
 800d9e8:	08010bc4 	.word	0x08010bc4
 800d9ec:	08010bd5 	.word	0x08010bd5

0800d9f0 <__hi0bits>:
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d9f6:	bf3a      	itte	cc
 800d9f8:	0403      	lslcc	r3, r0, #16
 800d9fa:	2010      	movcc	r0, #16
 800d9fc:	2000      	movcs	r0, #0
 800d9fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da02:	bf3c      	itt	cc
 800da04:	021b      	lslcc	r3, r3, #8
 800da06:	3008      	addcc	r0, #8
 800da08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da0c:	bf3c      	itt	cc
 800da0e:	011b      	lslcc	r3, r3, #4
 800da10:	3004      	addcc	r0, #4
 800da12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da16:	bf3c      	itt	cc
 800da18:	009b      	lslcc	r3, r3, #2
 800da1a:	3002      	addcc	r0, #2
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	db05      	blt.n	800da2c <__hi0bits+0x3c>
 800da20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da24:	f100 0001 	add.w	r0, r0, #1
 800da28:	bf08      	it	eq
 800da2a:	2020      	moveq	r0, #32
 800da2c:	4770      	bx	lr

0800da2e <__lo0bits>:
 800da2e:	6803      	ldr	r3, [r0, #0]
 800da30:	4602      	mov	r2, r0
 800da32:	f013 0007 	ands.w	r0, r3, #7
 800da36:	d00b      	beq.n	800da50 <__lo0bits+0x22>
 800da38:	07d9      	lsls	r1, r3, #31
 800da3a:	d421      	bmi.n	800da80 <__lo0bits+0x52>
 800da3c:	0798      	lsls	r0, r3, #30
 800da3e:	bf49      	itett	mi
 800da40:	085b      	lsrmi	r3, r3, #1
 800da42:	089b      	lsrpl	r3, r3, #2
 800da44:	2001      	movmi	r0, #1
 800da46:	6013      	strmi	r3, [r2, #0]
 800da48:	bf5c      	itt	pl
 800da4a:	2002      	movpl	r0, #2
 800da4c:	6013      	strpl	r3, [r2, #0]
 800da4e:	4770      	bx	lr
 800da50:	b299      	uxth	r1, r3
 800da52:	b909      	cbnz	r1, 800da58 <__lo0bits+0x2a>
 800da54:	2010      	movs	r0, #16
 800da56:	0c1b      	lsrs	r3, r3, #16
 800da58:	b2d9      	uxtb	r1, r3
 800da5a:	b909      	cbnz	r1, 800da60 <__lo0bits+0x32>
 800da5c:	3008      	adds	r0, #8
 800da5e:	0a1b      	lsrs	r3, r3, #8
 800da60:	0719      	lsls	r1, r3, #28
 800da62:	bf04      	itt	eq
 800da64:	091b      	lsreq	r3, r3, #4
 800da66:	3004      	addeq	r0, #4
 800da68:	0799      	lsls	r1, r3, #30
 800da6a:	bf04      	itt	eq
 800da6c:	089b      	lsreq	r3, r3, #2
 800da6e:	3002      	addeq	r0, #2
 800da70:	07d9      	lsls	r1, r3, #31
 800da72:	d403      	bmi.n	800da7c <__lo0bits+0x4e>
 800da74:	085b      	lsrs	r3, r3, #1
 800da76:	f100 0001 	add.w	r0, r0, #1
 800da7a:	d003      	beq.n	800da84 <__lo0bits+0x56>
 800da7c:	6013      	str	r3, [r2, #0]
 800da7e:	4770      	bx	lr
 800da80:	2000      	movs	r0, #0
 800da82:	4770      	bx	lr
 800da84:	2020      	movs	r0, #32
 800da86:	4770      	bx	lr

0800da88 <__i2b>:
 800da88:	b510      	push	{r4, lr}
 800da8a:	460c      	mov	r4, r1
 800da8c:	2101      	movs	r1, #1
 800da8e:	f7ff febd 	bl	800d80c <_Balloc>
 800da92:	4602      	mov	r2, r0
 800da94:	b928      	cbnz	r0, 800daa2 <__i2b+0x1a>
 800da96:	f240 1145 	movw	r1, #325	@ 0x145
 800da9a:	4b04      	ldr	r3, [pc, #16]	@ (800daac <__i2b+0x24>)
 800da9c:	4804      	ldr	r0, [pc, #16]	@ (800dab0 <__i2b+0x28>)
 800da9e:	f001 fd73 	bl	800f588 <__assert_func>
 800daa2:	2301      	movs	r3, #1
 800daa4:	6144      	str	r4, [r0, #20]
 800daa6:	6103      	str	r3, [r0, #16]
 800daa8:	bd10      	pop	{r4, pc}
 800daaa:	bf00      	nop
 800daac:	08010bc4 	.word	0x08010bc4
 800dab0:	08010bd5 	.word	0x08010bd5

0800dab4 <__multiply>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	4614      	mov	r4, r2
 800daba:	690a      	ldr	r2, [r1, #16]
 800dabc:	6923      	ldr	r3, [r4, #16]
 800dabe:	460f      	mov	r7, r1
 800dac0:	429a      	cmp	r2, r3
 800dac2:	bfa2      	ittt	ge
 800dac4:	4623      	movge	r3, r4
 800dac6:	460c      	movge	r4, r1
 800dac8:	461f      	movge	r7, r3
 800daca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dace:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	6861      	ldr	r1, [r4, #4]
 800dad6:	eb0a 0609 	add.w	r6, sl, r9
 800dada:	42b3      	cmp	r3, r6
 800dadc:	b085      	sub	sp, #20
 800dade:	bfb8      	it	lt
 800dae0:	3101      	addlt	r1, #1
 800dae2:	f7ff fe93 	bl	800d80c <_Balloc>
 800dae6:	b930      	cbnz	r0, 800daf6 <__multiply+0x42>
 800dae8:	4602      	mov	r2, r0
 800daea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800daee:	4b43      	ldr	r3, [pc, #268]	@ (800dbfc <__multiply+0x148>)
 800daf0:	4843      	ldr	r0, [pc, #268]	@ (800dc00 <__multiply+0x14c>)
 800daf2:	f001 fd49 	bl	800f588 <__assert_func>
 800daf6:	f100 0514 	add.w	r5, r0, #20
 800dafa:	462b      	mov	r3, r5
 800dafc:	2200      	movs	r2, #0
 800dafe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db02:	4543      	cmp	r3, r8
 800db04:	d321      	bcc.n	800db4a <__multiply+0x96>
 800db06:	f107 0114 	add.w	r1, r7, #20
 800db0a:	f104 0214 	add.w	r2, r4, #20
 800db0e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800db12:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800db16:	9302      	str	r3, [sp, #8]
 800db18:	1b13      	subs	r3, r2, r4
 800db1a:	3b15      	subs	r3, #21
 800db1c:	f023 0303 	bic.w	r3, r3, #3
 800db20:	3304      	adds	r3, #4
 800db22:	f104 0715 	add.w	r7, r4, #21
 800db26:	42ba      	cmp	r2, r7
 800db28:	bf38      	it	cc
 800db2a:	2304      	movcc	r3, #4
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	9b02      	ldr	r3, [sp, #8]
 800db30:	9103      	str	r1, [sp, #12]
 800db32:	428b      	cmp	r3, r1
 800db34:	d80c      	bhi.n	800db50 <__multiply+0x9c>
 800db36:	2e00      	cmp	r6, #0
 800db38:	dd03      	ble.n	800db42 <__multiply+0x8e>
 800db3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d05a      	beq.n	800dbf8 <__multiply+0x144>
 800db42:	6106      	str	r6, [r0, #16]
 800db44:	b005      	add	sp, #20
 800db46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4a:	f843 2b04 	str.w	r2, [r3], #4
 800db4e:	e7d8      	b.n	800db02 <__multiply+0x4e>
 800db50:	f8b1 a000 	ldrh.w	sl, [r1]
 800db54:	f1ba 0f00 	cmp.w	sl, #0
 800db58:	d023      	beq.n	800dba2 <__multiply+0xee>
 800db5a:	46a9      	mov	r9, r5
 800db5c:	f04f 0c00 	mov.w	ip, #0
 800db60:	f104 0e14 	add.w	lr, r4, #20
 800db64:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db68:	f8d9 3000 	ldr.w	r3, [r9]
 800db6c:	fa1f fb87 	uxth.w	fp, r7
 800db70:	b29b      	uxth	r3, r3
 800db72:	fb0a 330b 	mla	r3, sl, fp, r3
 800db76:	4463      	add	r3, ip
 800db78:	f8d9 c000 	ldr.w	ip, [r9]
 800db7c:	0c3f      	lsrs	r7, r7, #16
 800db7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800db82:	fb0a c707 	mla	r7, sl, r7, ip
 800db86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db90:	4572      	cmp	r2, lr
 800db92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db96:	f849 3b04 	str.w	r3, [r9], #4
 800db9a:	d8e3      	bhi.n	800db64 <__multiply+0xb0>
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	f845 c003 	str.w	ip, [r5, r3]
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	3104      	adds	r1, #4
 800dba6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	d021      	beq.n	800dbf4 <__multiply+0x140>
 800dbb0:	46ae      	mov	lr, r5
 800dbb2:	f04f 0a00 	mov.w	sl, #0
 800dbb6:	682b      	ldr	r3, [r5, #0]
 800dbb8:	f104 0c14 	add.w	ip, r4, #20
 800dbbc:	f8bc b000 	ldrh.w	fp, [ip]
 800dbc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	fb09 770b 	mla	r7, r9, fp, r7
 800dbca:	4457      	add	r7, sl
 800dbcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dbd0:	f84e 3b04 	str.w	r3, [lr], #4
 800dbd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbdc:	f8be 3000 	ldrh.w	r3, [lr]
 800dbe0:	4562      	cmp	r2, ip
 800dbe2:	fb09 330a 	mla	r3, r9, sl, r3
 800dbe6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dbea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbee:	d8e5      	bhi.n	800dbbc <__multiply+0x108>
 800dbf0:	9f01      	ldr	r7, [sp, #4]
 800dbf2:	51eb      	str	r3, [r5, r7]
 800dbf4:	3504      	adds	r5, #4
 800dbf6:	e79a      	b.n	800db2e <__multiply+0x7a>
 800dbf8:	3e01      	subs	r6, #1
 800dbfa:	e79c      	b.n	800db36 <__multiply+0x82>
 800dbfc:	08010bc4 	.word	0x08010bc4
 800dc00:	08010bd5 	.word	0x08010bd5

0800dc04 <__pow5mult>:
 800dc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc08:	4615      	mov	r5, r2
 800dc0a:	f012 0203 	ands.w	r2, r2, #3
 800dc0e:	4607      	mov	r7, r0
 800dc10:	460e      	mov	r6, r1
 800dc12:	d007      	beq.n	800dc24 <__pow5mult+0x20>
 800dc14:	4c25      	ldr	r4, [pc, #148]	@ (800dcac <__pow5mult+0xa8>)
 800dc16:	3a01      	subs	r2, #1
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc1e:	f7ff fe57 	bl	800d8d0 <__multadd>
 800dc22:	4606      	mov	r6, r0
 800dc24:	10ad      	asrs	r5, r5, #2
 800dc26:	d03d      	beq.n	800dca4 <__pow5mult+0xa0>
 800dc28:	69fc      	ldr	r4, [r7, #28]
 800dc2a:	b97c      	cbnz	r4, 800dc4c <__pow5mult+0x48>
 800dc2c:	2010      	movs	r0, #16
 800dc2e:	f7ff fd37 	bl	800d6a0 <malloc>
 800dc32:	4602      	mov	r2, r0
 800dc34:	61f8      	str	r0, [r7, #28]
 800dc36:	b928      	cbnz	r0, 800dc44 <__pow5mult+0x40>
 800dc38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dc3c:	4b1c      	ldr	r3, [pc, #112]	@ (800dcb0 <__pow5mult+0xac>)
 800dc3e:	481d      	ldr	r0, [pc, #116]	@ (800dcb4 <__pow5mult+0xb0>)
 800dc40:	f001 fca2 	bl	800f588 <__assert_func>
 800dc44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc48:	6004      	str	r4, [r0, #0]
 800dc4a:	60c4      	str	r4, [r0, #12]
 800dc4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc54:	b94c      	cbnz	r4, 800dc6a <__pow5mult+0x66>
 800dc56:	f240 2171 	movw	r1, #625	@ 0x271
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	f7ff ff14 	bl	800da88 <__i2b>
 800dc60:	2300      	movs	r3, #0
 800dc62:	4604      	mov	r4, r0
 800dc64:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc68:	6003      	str	r3, [r0, #0]
 800dc6a:	f04f 0900 	mov.w	r9, #0
 800dc6e:	07eb      	lsls	r3, r5, #31
 800dc70:	d50a      	bpl.n	800dc88 <__pow5mult+0x84>
 800dc72:	4631      	mov	r1, r6
 800dc74:	4622      	mov	r2, r4
 800dc76:	4638      	mov	r0, r7
 800dc78:	f7ff ff1c 	bl	800dab4 <__multiply>
 800dc7c:	4680      	mov	r8, r0
 800dc7e:	4631      	mov	r1, r6
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff fe03 	bl	800d88c <_Bfree>
 800dc86:	4646      	mov	r6, r8
 800dc88:	106d      	asrs	r5, r5, #1
 800dc8a:	d00b      	beq.n	800dca4 <__pow5mult+0xa0>
 800dc8c:	6820      	ldr	r0, [r4, #0]
 800dc8e:	b938      	cbnz	r0, 800dca0 <__pow5mult+0x9c>
 800dc90:	4622      	mov	r2, r4
 800dc92:	4621      	mov	r1, r4
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff ff0d 	bl	800dab4 <__multiply>
 800dc9a:	6020      	str	r0, [r4, #0]
 800dc9c:	f8c0 9000 	str.w	r9, [r0]
 800dca0:	4604      	mov	r4, r0
 800dca2:	e7e4      	b.n	800dc6e <__pow5mult+0x6a>
 800dca4:	4630      	mov	r0, r6
 800dca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcaa:	bf00      	nop
 800dcac:	08010c30 	.word	0x08010c30
 800dcb0:	08010b55 	.word	0x08010b55
 800dcb4:	08010bd5 	.word	0x08010bd5

0800dcb8 <__lshift>:
 800dcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	4691      	mov	r9, r2
 800dcc2:	6923      	ldr	r3, [r4, #16]
 800dcc4:	6849      	ldr	r1, [r1, #4]
 800dcc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcca:	68a3      	ldr	r3, [r4, #8]
 800dccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcd0:	f108 0601 	add.w	r6, r8, #1
 800dcd4:	42b3      	cmp	r3, r6
 800dcd6:	db0b      	blt.n	800dcf0 <__lshift+0x38>
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff fd97 	bl	800d80c <_Balloc>
 800dcde:	4605      	mov	r5, r0
 800dce0:	b948      	cbnz	r0, 800dcf6 <__lshift+0x3e>
 800dce2:	4602      	mov	r2, r0
 800dce4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dce8:	4b27      	ldr	r3, [pc, #156]	@ (800dd88 <__lshift+0xd0>)
 800dcea:	4828      	ldr	r0, [pc, #160]	@ (800dd8c <__lshift+0xd4>)
 800dcec:	f001 fc4c 	bl	800f588 <__assert_func>
 800dcf0:	3101      	adds	r1, #1
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	e7ee      	b.n	800dcd4 <__lshift+0x1c>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f100 0114 	add.w	r1, r0, #20
 800dcfc:	f100 0210 	add.w	r2, r0, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	4553      	cmp	r3, sl
 800dd04:	db33      	blt.n	800dd6e <__lshift+0xb6>
 800dd06:	6920      	ldr	r0, [r4, #16]
 800dd08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd0c:	f104 0314 	add.w	r3, r4, #20
 800dd10:	f019 091f 	ands.w	r9, r9, #31
 800dd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd1c:	d02b      	beq.n	800dd76 <__lshift+0xbe>
 800dd1e:	468a      	mov	sl, r1
 800dd20:	2200      	movs	r2, #0
 800dd22:	f1c9 0e20 	rsb	lr, r9, #32
 800dd26:	6818      	ldr	r0, [r3, #0]
 800dd28:	fa00 f009 	lsl.w	r0, r0, r9
 800dd2c:	4310      	orrs	r0, r2
 800dd2e:	f84a 0b04 	str.w	r0, [sl], #4
 800dd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd36:	459c      	cmp	ip, r3
 800dd38:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd3c:	d8f3      	bhi.n	800dd26 <__lshift+0x6e>
 800dd3e:	ebac 0304 	sub.w	r3, ip, r4
 800dd42:	3b15      	subs	r3, #21
 800dd44:	f023 0303 	bic.w	r3, r3, #3
 800dd48:	3304      	adds	r3, #4
 800dd4a:	f104 0015 	add.w	r0, r4, #21
 800dd4e:	4584      	cmp	ip, r0
 800dd50:	bf38      	it	cc
 800dd52:	2304      	movcc	r3, #4
 800dd54:	50ca      	str	r2, [r1, r3]
 800dd56:	b10a      	cbz	r2, 800dd5c <__lshift+0xa4>
 800dd58:	f108 0602 	add.w	r6, r8, #2
 800dd5c:	3e01      	subs	r6, #1
 800dd5e:	4638      	mov	r0, r7
 800dd60:	4621      	mov	r1, r4
 800dd62:	612e      	str	r6, [r5, #16]
 800dd64:	f7ff fd92 	bl	800d88c <_Bfree>
 800dd68:	4628      	mov	r0, r5
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd72:	3301      	adds	r3, #1
 800dd74:	e7c5      	b.n	800dd02 <__lshift+0x4a>
 800dd76:	3904      	subs	r1, #4
 800dd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd7c:	459c      	cmp	ip, r3
 800dd7e:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd82:	d8f9      	bhi.n	800dd78 <__lshift+0xc0>
 800dd84:	e7ea      	b.n	800dd5c <__lshift+0xa4>
 800dd86:	bf00      	nop
 800dd88:	08010bc4 	.word	0x08010bc4
 800dd8c:	08010bd5 	.word	0x08010bd5

0800dd90 <__mcmp>:
 800dd90:	4603      	mov	r3, r0
 800dd92:	690a      	ldr	r2, [r1, #16]
 800dd94:	6900      	ldr	r0, [r0, #16]
 800dd96:	b530      	push	{r4, r5, lr}
 800dd98:	1a80      	subs	r0, r0, r2
 800dd9a:	d10e      	bne.n	800ddba <__mcmp+0x2a>
 800dd9c:	3314      	adds	r3, #20
 800dd9e:	3114      	adds	r1, #20
 800dda0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dda4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dda8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ddac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ddb0:	4295      	cmp	r5, r2
 800ddb2:	d003      	beq.n	800ddbc <__mcmp+0x2c>
 800ddb4:	d205      	bcs.n	800ddc2 <__mcmp+0x32>
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	bd30      	pop	{r4, r5, pc}
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	d3f3      	bcc.n	800dda8 <__mcmp+0x18>
 800ddc0:	e7fb      	b.n	800ddba <__mcmp+0x2a>
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	e7f9      	b.n	800ddba <__mcmp+0x2a>
	...

0800ddc8 <__mdiff>:
 800ddc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	4689      	mov	r9, r1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4648      	mov	r0, r9
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	f7ff ffdb 	bl	800dd90 <__mcmp>
 800ddda:	1e05      	subs	r5, r0, #0
 800dddc:	d112      	bne.n	800de04 <__mdiff+0x3c>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff fd13 	bl	800d80c <_Balloc>
 800dde6:	4602      	mov	r2, r0
 800dde8:	b928      	cbnz	r0, 800ddf6 <__mdiff+0x2e>
 800ddea:	f240 2137 	movw	r1, #567	@ 0x237
 800ddee:	4b3e      	ldr	r3, [pc, #248]	@ (800dee8 <__mdiff+0x120>)
 800ddf0:	483e      	ldr	r0, [pc, #248]	@ (800deec <__mdiff+0x124>)
 800ddf2:	f001 fbc9 	bl	800f588 <__assert_func>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddfc:	4610      	mov	r0, r2
 800ddfe:	b003      	add	sp, #12
 800de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de04:	bfbc      	itt	lt
 800de06:	464b      	movlt	r3, r9
 800de08:	46a1      	movlt	r9, r4
 800de0a:	4630      	mov	r0, r6
 800de0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de10:	bfba      	itte	lt
 800de12:	461c      	movlt	r4, r3
 800de14:	2501      	movlt	r5, #1
 800de16:	2500      	movge	r5, #0
 800de18:	f7ff fcf8 	bl	800d80c <_Balloc>
 800de1c:	4602      	mov	r2, r0
 800de1e:	b918      	cbnz	r0, 800de28 <__mdiff+0x60>
 800de20:	f240 2145 	movw	r1, #581	@ 0x245
 800de24:	4b30      	ldr	r3, [pc, #192]	@ (800dee8 <__mdiff+0x120>)
 800de26:	e7e3      	b.n	800ddf0 <__mdiff+0x28>
 800de28:	f100 0b14 	add.w	fp, r0, #20
 800de2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800de30:	f109 0310 	add.w	r3, r9, #16
 800de34:	60c5      	str	r5, [r0, #12]
 800de36:	f04f 0c00 	mov.w	ip, #0
 800de3a:	f109 0514 	add.w	r5, r9, #20
 800de3e:	46d9      	mov	r9, fp
 800de40:	6926      	ldr	r6, [r4, #16]
 800de42:	f104 0e14 	add.w	lr, r4, #20
 800de46:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800de4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800de4e:	9301      	str	r3, [sp, #4]
 800de50:	9b01      	ldr	r3, [sp, #4]
 800de52:	f85e 0b04 	ldr.w	r0, [lr], #4
 800de56:	f853 af04 	ldr.w	sl, [r3, #4]!
 800de5a:	b281      	uxth	r1, r0
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	fa1f f38a 	uxth.w	r3, sl
 800de62:	1a5b      	subs	r3, r3, r1
 800de64:	0c00      	lsrs	r0, r0, #16
 800de66:	4463      	add	r3, ip
 800de68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de70:	b29b      	uxth	r3, r3
 800de72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de76:	4576      	cmp	r6, lr
 800de78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de7c:	f849 3b04 	str.w	r3, [r9], #4
 800de80:	d8e6      	bhi.n	800de50 <__mdiff+0x88>
 800de82:	1b33      	subs	r3, r6, r4
 800de84:	3b15      	subs	r3, #21
 800de86:	f023 0303 	bic.w	r3, r3, #3
 800de8a:	3415      	adds	r4, #21
 800de8c:	3304      	adds	r3, #4
 800de8e:	42a6      	cmp	r6, r4
 800de90:	bf38      	it	cc
 800de92:	2304      	movcc	r3, #4
 800de94:	441d      	add	r5, r3
 800de96:	445b      	add	r3, fp
 800de98:	461e      	mov	r6, r3
 800de9a:	462c      	mov	r4, r5
 800de9c:	4544      	cmp	r4, r8
 800de9e:	d30e      	bcc.n	800debe <__mdiff+0xf6>
 800dea0:	f108 0103 	add.w	r1, r8, #3
 800dea4:	1b49      	subs	r1, r1, r5
 800dea6:	f021 0103 	bic.w	r1, r1, #3
 800deaa:	3d03      	subs	r5, #3
 800deac:	45a8      	cmp	r8, r5
 800deae:	bf38      	it	cc
 800deb0:	2100      	movcc	r1, #0
 800deb2:	440b      	add	r3, r1
 800deb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800deb8:	b199      	cbz	r1, 800dee2 <__mdiff+0x11a>
 800deba:	6117      	str	r7, [r2, #16]
 800debc:	e79e      	b.n	800ddfc <__mdiff+0x34>
 800debe:	46e6      	mov	lr, ip
 800dec0:	f854 1b04 	ldr.w	r1, [r4], #4
 800dec4:	fa1f fc81 	uxth.w	ip, r1
 800dec8:	44f4      	add	ip, lr
 800deca:	0c08      	lsrs	r0, r1, #16
 800decc:	4471      	add	r1, lr
 800dece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ded2:	b289      	uxth	r1, r1
 800ded4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ded8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dedc:	f846 1b04 	str.w	r1, [r6], #4
 800dee0:	e7dc      	b.n	800de9c <__mdiff+0xd4>
 800dee2:	3f01      	subs	r7, #1
 800dee4:	e7e6      	b.n	800deb4 <__mdiff+0xec>
 800dee6:	bf00      	nop
 800dee8:	08010bc4 	.word	0x08010bc4
 800deec:	08010bd5 	.word	0x08010bd5

0800def0 <__ulp>:
 800def0:	4b0e      	ldr	r3, [pc, #56]	@ (800df2c <__ulp+0x3c>)
 800def2:	400b      	ands	r3, r1
 800def4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800def8:	2b00      	cmp	r3, #0
 800defa:	dc08      	bgt.n	800df0e <__ulp+0x1e>
 800defc:	425b      	negs	r3, r3
 800defe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800df02:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df06:	da04      	bge.n	800df12 <__ulp+0x22>
 800df08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df0c:	4113      	asrs	r3, r2
 800df0e:	2200      	movs	r2, #0
 800df10:	e008      	b.n	800df24 <__ulp+0x34>
 800df12:	f1a2 0314 	sub.w	r3, r2, #20
 800df16:	2b1e      	cmp	r3, #30
 800df18:	bfd6      	itet	le
 800df1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800df1e:	2201      	movgt	r2, #1
 800df20:	40da      	lsrle	r2, r3
 800df22:	2300      	movs	r3, #0
 800df24:	4619      	mov	r1, r3
 800df26:	4610      	mov	r0, r2
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	7ff00000 	.word	0x7ff00000

0800df30 <__b2d>:
 800df30:	6902      	ldr	r2, [r0, #16]
 800df32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df34:	f100 0614 	add.w	r6, r0, #20
 800df38:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800df3c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800df40:	4f1e      	ldr	r7, [pc, #120]	@ (800dfbc <__b2d+0x8c>)
 800df42:	4620      	mov	r0, r4
 800df44:	f7ff fd54 	bl	800d9f0 <__hi0bits>
 800df48:	4603      	mov	r3, r0
 800df4a:	f1c0 0020 	rsb	r0, r0, #32
 800df4e:	2b0a      	cmp	r3, #10
 800df50:	f1a2 0504 	sub.w	r5, r2, #4
 800df54:	6008      	str	r0, [r1, #0]
 800df56:	dc12      	bgt.n	800df7e <__b2d+0x4e>
 800df58:	42ae      	cmp	r6, r5
 800df5a:	bf2c      	ite	cs
 800df5c:	2200      	movcs	r2, #0
 800df5e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800df62:	f1c3 0c0b 	rsb	ip, r3, #11
 800df66:	3315      	adds	r3, #21
 800df68:	fa24 fe0c 	lsr.w	lr, r4, ip
 800df6c:	fa04 f303 	lsl.w	r3, r4, r3
 800df70:	fa22 f20c 	lsr.w	r2, r2, ip
 800df74:	ea4e 0107 	orr.w	r1, lr, r7
 800df78:	431a      	orrs	r2, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df7e:	42ae      	cmp	r6, r5
 800df80:	bf36      	itet	cc
 800df82:	f1a2 0508 	subcc.w	r5, r2, #8
 800df86:	2200      	movcs	r2, #0
 800df88:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800df8c:	3b0b      	subs	r3, #11
 800df8e:	d012      	beq.n	800dfb6 <__b2d+0x86>
 800df90:	f1c3 0720 	rsb	r7, r3, #32
 800df94:	fa22 f107 	lsr.w	r1, r2, r7
 800df98:	409c      	lsls	r4, r3
 800df9a:	430c      	orrs	r4, r1
 800df9c:	42b5      	cmp	r5, r6
 800df9e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dfa2:	bf94      	ite	ls
 800dfa4:	2400      	movls	r4, #0
 800dfa6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dfaa:	409a      	lsls	r2, r3
 800dfac:	40fc      	lsrs	r4, r7
 800dfae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dfb2:	4322      	orrs	r2, r4
 800dfb4:	e7e1      	b.n	800df7a <__b2d+0x4a>
 800dfb6:	ea44 0107 	orr.w	r1, r4, r7
 800dfba:	e7de      	b.n	800df7a <__b2d+0x4a>
 800dfbc:	3ff00000 	.word	0x3ff00000

0800dfc0 <__d2b>:
 800dfc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	4690      	mov	r8, r2
 800dfc8:	4699      	mov	r9, r3
 800dfca:	9e08      	ldr	r6, [sp, #32]
 800dfcc:	f7ff fc1e 	bl	800d80c <_Balloc>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	b930      	cbnz	r0, 800dfe2 <__d2b+0x22>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 310f 	movw	r1, #783	@ 0x30f
 800dfda:	4b23      	ldr	r3, [pc, #140]	@ (800e068 <__d2b+0xa8>)
 800dfdc:	4823      	ldr	r0, [pc, #140]	@ (800e06c <__d2b+0xac>)
 800dfde:	f001 fad3 	bl	800f588 <__assert_func>
 800dfe2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dfe6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfea:	b10d      	cbz	r5, 800dff0 <__d2b+0x30>
 800dfec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	f1b8 0300 	subs.w	r3, r8, #0
 800dff6:	d024      	beq.n	800e042 <__d2b+0x82>
 800dff8:	4668      	mov	r0, sp
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	f7ff fd17 	bl	800da2e <__lo0bits>
 800e000:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e004:	b1d8      	cbz	r0, 800e03e <__d2b+0x7e>
 800e006:	f1c0 0320 	rsb	r3, r0, #32
 800e00a:	fa02 f303 	lsl.w	r3, r2, r3
 800e00e:	430b      	orrs	r3, r1
 800e010:	40c2      	lsrs	r2, r0
 800e012:	6163      	str	r3, [r4, #20]
 800e014:	9201      	str	r2, [sp, #4]
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bf0c      	ite	eq
 800e01c:	2201      	moveq	r2, #1
 800e01e:	2202      	movne	r2, #2
 800e020:	61a3      	str	r3, [r4, #24]
 800e022:	6122      	str	r2, [r4, #16]
 800e024:	b1ad      	cbz	r5, 800e052 <__d2b+0x92>
 800e026:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e02a:	4405      	add	r5, r0
 800e02c:	6035      	str	r5, [r6, #0]
 800e02e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e034:	6018      	str	r0, [r3, #0]
 800e036:	4620      	mov	r0, r4
 800e038:	b002      	add	sp, #8
 800e03a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e03e:	6161      	str	r1, [r4, #20]
 800e040:	e7e9      	b.n	800e016 <__d2b+0x56>
 800e042:	a801      	add	r0, sp, #4
 800e044:	f7ff fcf3 	bl	800da2e <__lo0bits>
 800e048:	9b01      	ldr	r3, [sp, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	6163      	str	r3, [r4, #20]
 800e04e:	3020      	adds	r0, #32
 800e050:	e7e7      	b.n	800e022 <__d2b+0x62>
 800e052:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e05a:	6030      	str	r0, [r6, #0]
 800e05c:	6918      	ldr	r0, [r3, #16]
 800e05e:	f7ff fcc7 	bl	800d9f0 <__hi0bits>
 800e062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e066:	e7e4      	b.n	800e032 <__d2b+0x72>
 800e068:	08010bc4 	.word	0x08010bc4
 800e06c:	08010bd5 	.word	0x08010bd5

0800e070 <__ratio>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	b085      	sub	sp, #20
 800e076:	e9cd 1000 	strd	r1, r0, [sp]
 800e07a:	a902      	add	r1, sp, #8
 800e07c:	f7ff ff58 	bl	800df30 <__b2d>
 800e080:	468b      	mov	fp, r1
 800e082:	4606      	mov	r6, r0
 800e084:	460f      	mov	r7, r1
 800e086:	9800      	ldr	r0, [sp, #0]
 800e088:	a903      	add	r1, sp, #12
 800e08a:	f7ff ff51 	bl	800df30 <__b2d>
 800e08e:	460d      	mov	r5, r1
 800e090:	9b01      	ldr	r3, [sp, #4]
 800e092:	4689      	mov	r9, r1
 800e094:	6919      	ldr	r1, [r3, #16]
 800e096:	9b00      	ldr	r3, [sp, #0]
 800e098:	4604      	mov	r4, r0
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	4630      	mov	r0, r6
 800e09e:	1ac9      	subs	r1, r1, r3
 800e0a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e0a4:	1a9b      	subs	r3, r3, r2
 800e0a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	bfcd      	iteet	gt
 800e0ae:	463a      	movgt	r2, r7
 800e0b0:	462a      	movle	r2, r5
 800e0b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e0ba:	bfd8      	it	le
 800e0bc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e0c0:	464b      	mov	r3, r9
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	4659      	mov	r1, fp
 800e0c6:	f7f2 fb9d 	bl	8000804 <__aeabi_ddiv>
 800e0ca:	b005      	add	sp, #20
 800e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0d0 <__copybits>:
 800e0d0:	3901      	subs	r1, #1
 800e0d2:	b570      	push	{r4, r5, r6, lr}
 800e0d4:	1149      	asrs	r1, r1, #5
 800e0d6:	6914      	ldr	r4, [r2, #16]
 800e0d8:	3101      	adds	r1, #1
 800e0da:	f102 0314 	add.w	r3, r2, #20
 800e0de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e0e6:	1f05      	subs	r5, r0, #4
 800e0e8:	42a3      	cmp	r3, r4
 800e0ea:	d30c      	bcc.n	800e106 <__copybits+0x36>
 800e0ec:	1aa3      	subs	r3, r4, r2
 800e0ee:	3b11      	subs	r3, #17
 800e0f0:	f023 0303 	bic.w	r3, r3, #3
 800e0f4:	3211      	adds	r2, #17
 800e0f6:	42a2      	cmp	r2, r4
 800e0f8:	bf88      	it	hi
 800e0fa:	2300      	movhi	r3, #0
 800e0fc:	4418      	add	r0, r3
 800e0fe:	2300      	movs	r3, #0
 800e100:	4288      	cmp	r0, r1
 800e102:	d305      	bcc.n	800e110 <__copybits+0x40>
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	f853 6b04 	ldr.w	r6, [r3], #4
 800e10a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e10e:	e7eb      	b.n	800e0e8 <__copybits+0x18>
 800e110:	f840 3b04 	str.w	r3, [r0], #4
 800e114:	e7f4      	b.n	800e100 <__copybits+0x30>

0800e116 <__any_on>:
 800e116:	f100 0214 	add.w	r2, r0, #20
 800e11a:	6900      	ldr	r0, [r0, #16]
 800e11c:	114b      	asrs	r3, r1, #5
 800e11e:	4298      	cmp	r0, r3
 800e120:	b510      	push	{r4, lr}
 800e122:	db11      	blt.n	800e148 <__any_on+0x32>
 800e124:	dd0a      	ble.n	800e13c <__any_on+0x26>
 800e126:	f011 011f 	ands.w	r1, r1, #31
 800e12a:	d007      	beq.n	800e13c <__any_on+0x26>
 800e12c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e130:	fa24 f001 	lsr.w	r0, r4, r1
 800e134:	fa00 f101 	lsl.w	r1, r0, r1
 800e138:	428c      	cmp	r4, r1
 800e13a:	d10b      	bne.n	800e154 <__any_on+0x3e>
 800e13c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e140:	4293      	cmp	r3, r2
 800e142:	d803      	bhi.n	800e14c <__any_on+0x36>
 800e144:	2000      	movs	r0, #0
 800e146:	bd10      	pop	{r4, pc}
 800e148:	4603      	mov	r3, r0
 800e14a:	e7f7      	b.n	800e13c <__any_on+0x26>
 800e14c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e150:	2900      	cmp	r1, #0
 800e152:	d0f5      	beq.n	800e140 <__any_on+0x2a>
 800e154:	2001      	movs	r0, #1
 800e156:	e7f6      	b.n	800e146 <__any_on+0x30>

0800e158 <sulp>:
 800e158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e15c:	460f      	mov	r7, r1
 800e15e:	4690      	mov	r8, r2
 800e160:	f7ff fec6 	bl	800def0 <__ulp>
 800e164:	4604      	mov	r4, r0
 800e166:	460d      	mov	r5, r1
 800e168:	f1b8 0f00 	cmp.w	r8, #0
 800e16c:	d011      	beq.n	800e192 <sulp+0x3a>
 800e16e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e172:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd0b      	ble.n	800e192 <sulp+0x3a>
 800e17a:	2400      	movs	r4, #0
 800e17c:	051b      	lsls	r3, r3, #20
 800e17e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e182:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e186:	4622      	mov	r2, r4
 800e188:	462b      	mov	r3, r5
 800e18a:	f7f2 fa11 	bl	80005b0 <__aeabi_dmul>
 800e18e:	4604      	mov	r4, r0
 800e190:	460d      	mov	r5, r1
 800e192:	4620      	mov	r0, r4
 800e194:	4629      	mov	r1, r5
 800e196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e19a:	0000      	movs	r0, r0
 800e19c:	0000      	movs	r0, r0
	...

0800e1a0 <_strtod_l>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	b09f      	sub	sp, #124	@ 0x7c
 800e1a6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800e1ae:	f04f 0a00 	mov.w	sl, #0
 800e1b2:	f04f 0b00 	mov.w	fp, #0
 800e1b6:	460a      	mov	r2, r1
 800e1b8:	9005      	str	r0, [sp, #20]
 800e1ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1bc:	7811      	ldrb	r1, [r2, #0]
 800e1be:	292b      	cmp	r1, #43	@ 0x2b
 800e1c0:	d048      	beq.n	800e254 <_strtod_l+0xb4>
 800e1c2:	d836      	bhi.n	800e232 <_strtod_l+0x92>
 800e1c4:	290d      	cmp	r1, #13
 800e1c6:	d830      	bhi.n	800e22a <_strtod_l+0x8a>
 800e1c8:	2908      	cmp	r1, #8
 800e1ca:	d830      	bhi.n	800e22e <_strtod_l+0x8e>
 800e1cc:	2900      	cmp	r1, #0
 800e1ce:	d039      	beq.n	800e244 <_strtod_l+0xa4>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e1d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e1d6:	782a      	ldrb	r2, [r5, #0]
 800e1d8:	2a30      	cmp	r2, #48	@ 0x30
 800e1da:	f040 80b1 	bne.w	800e340 <_strtod_l+0x1a0>
 800e1de:	786a      	ldrb	r2, [r5, #1]
 800e1e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e1e4:	2a58      	cmp	r2, #88	@ 0x58
 800e1e6:	d16c      	bne.n	800e2c2 <_strtod_l+0x122>
 800e1e8:	9302      	str	r3, [sp, #8]
 800e1ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1ec:	4a8e      	ldr	r2, [pc, #568]	@ (800e428 <_strtod_l+0x288>)
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	ab1a      	add	r3, sp, #104	@ 0x68
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	9805      	ldr	r0, [sp, #20]
 800e1f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e1f8:	a919      	add	r1, sp, #100	@ 0x64
 800e1fa:	f001 fa5f 	bl	800f6bc <__gethex>
 800e1fe:	f010 060f 	ands.w	r6, r0, #15
 800e202:	4604      	mov	r4, r0
 800e204:	d005      	beq.n	800e212 <_strtod_l+0x72>
 800e206:	2e06      	cmp	r6, #6
 800e208:	d126      	bne.n	800e258 <_strtod_l+0xb8>
 800e20a:	2300      	movs	r3, #0
 800e20c:	3501      	adds	r5, #1
 800e20e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e210:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e214:	2b00      	cmp	r3, #0
 800e216:	f040 8584 	bne.w	800ed22 <_strtod_l+0xb82>
 800e21a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e21c:	b1bb      	cbz	r3, 800e24e <_strtod_l+0xae>
 800e21e:	4650      	mov	r0, sl
 800e220:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800e224:	b01f      	add	sp, #124	@ 0x7c
 800e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22a:	2920      	cmp	r1, #32
 800e22c:	d1d0      	bne.n	800e1d0 <_strtod_l+0x30>
 800e22e:	3201      	adds	r2, #1
 800e230:	e7c3      	b.n	800e1ba <_strtod_l+0x1a>
 800e232:	292d      	cmp	r1, #45	@ 0x2d
 800e234:	d1cc      	bne.n	800e1d0 <_strtod_l+0x30>
 800e236:	2101      	movs	r1, #1
 800e238:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e23a:	1c51      	adds	r1, r2, #1
 800e23c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e23e:	7852      	ldrb	r2, [r2, #1]
 800e240:	2a00      	cmp	r2, #0
 800e242:	d1c7      	bne.n	800e1d4 <_strtod_l+0x34>
 800e244:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e246:	9419      	str	r4, [sp, #100]	@ 0x64
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f040 8568 	bne.w	800ed1e <_strtod_l+0xb7e>
 800e24e:	4650      	mov	r0, sl
 800e250:	4659      	mov	r1, fp
 800e252:	e7e7      	b.n	800e224 <_strtod_l+0x84>
 800e254:	2100      	movs	r1, #0
 800e256:	e7ef      	b.n	800e238 <_strtod_l+0x98>
 800e258:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e25a:	b13a      	cbz	r2, 800e26c <_strtod_l+0xcc>
 800e25c:	2135      	movs	r1, #53	@ 0x35
 800e25e:	a81c      	add	r0, sp, #112	@ 0x70
 800e260:	f7ff ff36 	bl	800e0d0 <__copybits>
 800e264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e266:	9805      	ldr	r0, [sp, #20]
 800e268:	f7ff fb10 	bl	800d88c <_Bfree>
 800e26c:	3e01      	subs	r6, #1
 800e26e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e270:	2e04      	cmp	r6, #4
 800e272:	d806      	bhi.n	800e282 <_strtod_l+0xe2>
 800e274:	e8df f006 	tbb	[pc, r6]
 800e278:	201d0314 	.word	0x201d0314
 800e27c:	14          	.byte	0x14
 800e27d:	00          	.byte	0x00
 800e27e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e282:	05e1      	lsls	r1, r4, #23
 800e284:	bf48      	it	mi
 800e286:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e28a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e28e:	0d1b      	lsrs	r3, r3, #20
 800e290:	051b      	lsls	r3, r3, #20
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1bd      	bne.n	800e212 <_strtod_l+0x72>
 800e296:	f7fe fb1b 	bl	800c8d0 <__errno>
 800e29a:	2322      	movs	r3, #34	@ 0x22
 800e29c:	6003      	str	r3, [r0, #0]
 800e29e:	e7b8      	b.n	800e212 <_strtod_l+0x72>
 800e2a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e2a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e2ac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2b0:	e7e7      	b.n	800e282 <_strtod_l+0xe2>
 800e2b2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800e42c <_strtod_l+0x28c>
 800e2b6:	e7e4      	b.n	800e282 <_strtod_l+0xe2>
 800e2b8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e2bc:	f04f 3aff 	mov.w	sl, #4294967295
 800e2c0:	e7df      	b.n	800e282 <_strtod_l+0xe2>
 800e2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2c4:	1c5a      	adds	r2, r3, #1
 800e2c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2c8:	785b      	ldrb	r3, [r3, #1]
 800e2ca:	2b30      	cmp	r3, #48	@ 0x30
 800e2cc:	d0f9      	beq.n	800e2c2 <_strtod_l+0x122>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d09f      	beq.n	800e212 <_strtod_l+0x72>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2d8:	220a      	movs	r2, #10
 800e2da:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2dc:	2300      	movs	r3, #0
 800e2de:	461f      	mov	r7, r3
 800e2e0:	9308      	str	r3, [sp, #32]
 800e2e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2e4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e2e6:	7805      	ldrb	r5, [r0, #0]
 800e2e8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e2ec:	b2d9      	uxtb	r1, r3
 800e2ee:	2909      	cmp	r1, #9
 800e2f0:	d928      	bls.n	800e344 <_strtod_l+0x1a4>
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	494e      	ldr	r1, [pc, #312]	@ (800e430 <_strtod_l+0x290>)
 800e2f6:	f001 f91f 	bl	800f538 <strncmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d032      	beq.n	800e364 <_strtod_l+0x1c4>
 800e2fe:	2000      	movs	r0, #0
 800e300:	462a      	mov	r2, r5
 800e302:	4681      	mov	r9, r0
 800e304:	463d      	mov	r5, r7
 800e306:	4603      	mov	r3, r0
 800e308:	2a65      	cmp	r2, #101	@ 0x65
 800e30a:	d001      	beq.n	800e310 <_strtod_l+0x170>
 800e30c:	2a45      	cmp	r2, #69	@ 0x45
 800e30e:	d114      	bne.n	800e33a <_strtod_l+0x19a>
 800e310:	b91d      	cbnz	r5, 800e31a <_strtod_l+0x17a>
 800e312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e314:	4302      	orrs	r2, r0
 800e316:	d095      	beq.n	800e244 <_strtod_l+0xa4>
 800e318:	2500      	movs	r5, #0
 800e31a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e31c:	1c62      	adds	r2, r4, #1
 800e31e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e320:	7862      	ldrb	r2, [r4, #1]
 800e322:	2a2b      	cmp	r2, #43	@ 0x2b
 800e324:	d077      	beq.n	800e416 <_strtod_l+0x276>
 800e326:	2a2d      	cmp	r2, #45	@ 0x2d
 800e328:	d07b      	beq.n	800e422 <_strtod_l+0x282>
 800e32a:	f04f 0c00 	mov.w	ip, #0
 800e32e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e332:	2909      	cmp	r1, #9
 800e334:	f240 8082 	bls.w	800e43c <_strtod_l+0x29c>
 800e338:	9419      	str	r4, [sp, #100]	@ 0x64
 800e33a:	f04f 0800 	mov.w	r8, #0
 800e33e:	e0a2      	b.n	800e486 <_strtod_l+0x2e6>
 800e340:	2300      	movs	r3, #0
 800e342:	e7c7      	b.n	800e2d4 <_strtod_l+0x134>
 800e344:	2f08      	cmp	r7, #8
 800e346:	bfd5      	itete	le
 800e348:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e34a:	9908      	ldrgt	r1, [sp, #32]
 800e34c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e350:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e354:	f100 0001 	add.w	r0, r0, #1
 800e358:	bfd4      	ite	le
 800e35a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e35c:	9308      	strgt	r3, [sp, #32]
 800e35e:	3701      	adds	r7, #1
 800e360:	9019      	str	r0, [sp, #100]	@ 0x64
 800e362:	e7bf      	b.n	800e2e4 <_strtod_l+0x144>
 800e364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	9219      	str	r2, [sp, #100]	@ 0x64
 800e36a:	785a      	ldrb	r2, [r3, #1]
 800e36c:	b37f      	cbz	r7, 800e3ce <_strtod_l+0x22e>
 800e36e:	4681      	mov	r9, r0
 800e370:	463d      	mov	r5, r7
 800e372:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e376:	2b09      	cmp	r3, #9
 800e378:	d912      	bls.n	800e3a0 <_strtod_l+0x200>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e7c4      	b.n	800e308 <_strtod_l+0x168>
 800e37e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e380:	3001      	adds	r0, #1
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	9219      	str	r2, [sp, #100]	@ 0x64
 800e386:	785a      	ldrb	r2, [r3, #1]
 800e388:	2a30      	cmp	r2, #48	@ 0x30
 800e38a:	d0f8      	beq.n	800e37e <_strtod_l+0x1de>
 800e38c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e390:	2b08      	cmp	r3, #8
 800e392:	f200 84cb 	bhi.w	800ed2c <_strtod_l+0xb8c>
 800e396:	4681      	mov	r9, r0
 800e398:	2000      	movs	r0, #0
 800e39a:	4605      	mov	r5, r0
 800e39c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e39e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3a0:	3a30      	subs	r2, #48	@ 0x30
 800e3a2:	f100 0301 	add.w	r3, r0, #1
 800e3a6:	d02a      	beq.n	800e3fe <_strtod_l+0x25e>
 800e3a8:	4499      	add	r9, r3
 800e3aa:	210a      	movs	r1, #10
 800e3ac:	462b      	mov	r3, r5
 800e3ae:	eb00 0c05 	add.w	ip, r0, r5
 800e3b2:	4563      	cmp	r3, ip
 800e3b4:	d10d      	bne.n	800e3d2 <_strtod_l+0x232>
 800e3b6:	1c69      	adds	r1, r5, #1
 800e3b8:	4401      	add	r1, r0
 800e3ba:	4428      	add	r0, r5
 800e3bc:	2808      	cmp	r0, #8
 800e3be:	dc16      	bgt.n	800e3ee <_strtod_l+0x24e>
 800e3c0:	230a      	movs	r3, #10
 800e3c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3c4:	fb03 2300 	mla	r3, r3, r0, r2
 800e3c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e018      	b.n	800e400 <_strtod_l+0x260>
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	e7da      	b.n	800e388 <_strtod_l+0x1e8>
 800e3d2:	2b08      	cmp	r3, #8
 800e3d4:	f103 0301 	add.w	r3, r3, #1
 800e3d8:	dc03      	bgt.n	800e3e2 <_strtod_l+0x242>
 800e3da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e3dc:	434e      	muls	r6, r1
 800e3de:	960a      	str	r6, [sp, #40]	@ 0x28
 800e3e0:	e7e7      	b.n	800e3b2 <_strtod_l+0x212>
 800e3e2:	2b10      	cmp	r3, #16
 800e3e4:	bfde      	ittt	le
 800e3e6:	9e08      	ldrle	r6, [sp, #32]
 800e3e8:	434e      	mulle	r6, r1
 800e3ea:	9608      	strle	r6, [sp, #32]
 800e3ec:	e7e1      	b.n	800e3b2 <_strtod_l+0x212>
 800e3ee:	280f      	cmp	r0, #15
 800e3f0:	dceb      	bgt.n	800e3ca <_strtod_l+0x22a>
 800e3f2:	230a      	movs	r3, #10
 800e3f4:	9808      	ldr	r0, [sp, #32]
 800e3f6:	fb03 2300 	mla	r3, r3, r0, r2
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	e7e5      	b.n	800e3ca <_strtod_l+0x22a>
 800e3fe:	4629      	mov	r1, r5
 800e400:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e402:	460d      	mov	r5, r1
 800e404:	1c50      	adds	r0, r2, #1
 800e406:	9019      	str	r0, [sp, #100]	@ 0x64
 800e408:	7852      	ldrb	r2, [r2, #1]
 800e40a:	4618      	mov	r0, r3
 800e40c:	e7b1      	b.n	800e372 <_strtod_l+0x1d2>
 800e40e:	f04f 0900 	mov.w	r9, #0
 800e412:	2301      	movs	r3, #1
 800e414:	e77d      	b.n	800e312 <_strtod_l+0x172>
 800e416:	f04f 0c00 	mov.w	ip, #0
 800e41a:	1ca2      	adds	r2, r4, #2
 800e41c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e41e:	78a2      	ldrb	r2, [r4, #2]
 800e420:	e785      	b.n	800e32e <_strtod_l+0x18e>
 800e422:	f04f 0c01 	mov.w	ip, #1
 800e426:	e7f8      	b.n	800e41a <_strtod_l+0x27a>
 800e428:	08010d48 	.word	0x08010d48
 800e42c:	7ff00000 	.word	0x7ff00000
 800e430:	08010d30 	.word	0x08010d30
 800e434:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e436:	1c51      	adds	r1, r2, #1
 800e438:	9119      	str	r1, [sp, #100]	@ 0x64
 800e43a:	7852      	ldrb	r2, [r2, #1]
 800e43c:	2a30      	cmp	r2, #48	@ 0x30
 800e43e:	d0f9      	beq.n	800e434 <_strtod_l+0x294>
 800e440:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e444:	2908      	cmp	r1, #8
 800e446:	f63f af78 	bhi.w	800e33a <_strtod_l+0x19a>
 800e44a:	f04f 080a 	mov.w	r8, #10
 800e44e:	3a30      	subs	r2, #48	@ 0x30
 800e450:	920e      	str	r2, [sp, #56]	@ 0x38
 800e452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e454:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e456:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e458:	1c56      	adds	r6, r2, #1
 800e45a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e45c:	7852      	ldrb	r2, [r2, #1]
 800e45e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e462:	f1be 0f09 	cmp.w	lr, #9
 800e466:	d939      	bls.n	800e4dc <_strtod_l+0x33c>
 800e468:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e46a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e46e:	1a76      	subs	r6, r6, r1
 800e470:	2e08      	cmp	r6, #8
 800e472:	dc03      	bgt.n	800e47c <_strtod_l+0x2dc>
 800e474:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e476:	4588      	cmp	r8, r1
 800e478:	bfa8      	it	ge
 800e47a:	4688      	movge	r8, r1
 800e47c:	f1bc 0f00 	cmp.w	ip, #0
 800e480:	d001      	beq.n	800e486 <_strtod_l+0x2e6>
 800e482:	f1c8 0800 	rsb	r8, r8, #0
 800e486:	2d00      	cmp	r5, #0
 800e488:	d14e      	bne.n	800e528 <_strtod_l+0x388>
 800e48a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e48c:	4308      	orrs	r0, r1
 800e48e:	f47f aec0 	bne.w	800e212 <_strtod_l+0x72>
 800e492:	2b00      	cmp	r3, #0
 800e494:	f47f aed6 	bne.w	800e244 <_strtod_l+0xa4>
 800e498:	2a69      	cmp	r2, #105	@ 0x69
 800e49a:	d028      	beq.n	800e4ee <_strtod_l+0x34e>
 800e49c:	dc25      	bgt.n	800e4ea <_strtod_l+0x34a>
 800e49e:	2a49      	cmp	r2, #73	@ 0x49
 800e4a0:	d025      	beq.n	800e4ee <_strtod_l+0x34e>
 800e4a2:	2a4e      	cmp	r2, #78	@ 0x4e
 800e4a4:	f47f aece 	bne.w	800e244 <_strtod_l+0xa4>
 800e4a8:	499a      	ldr	r1, [pc, #616]	@ (800e714 <_strtod_l+0x574>)
 800e4aa:	a819      	add	r0, sp, #100	@ 0x64
 800e4ac:	f001 fb28 	bl	800fb00 <__match>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f43f aec7 	beq.w	800e244 <_strtod_l+0xa4>
 800e4b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b28      	cmp	r3, #40	@ 0x28
 800e4bc:	d12e      	bne.n	800e51c <_strtod_l+0x37c>
 800e4be:	4996      	ldr	r1, [pc, #600]	@ (800e718 <_strtod_l+0x578>)
 800e4c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4c2:	a819      	add	r0, sp, #100	@ 0x64
 800e4c4:	f001 fb30 	bl	800fb28 <__hexnan>
 800e4c8:	2805      	cmp	r0, #5
 800e4ca:	d127      	bne.n	800e51c <_strtod_l+0x37c>
 800e4cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e4d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e4d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e4da:	e69a      	b.n	800e212 <_strtod_l+0x72>
 800e4dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e4de:	fb08 2101 	mla	r1, r8, r1, r2
 800e4e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e4e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4e8:	e7b5      	b.n	800e456 <_strtod_l+0x2b6>
 800e4ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800e4ec:	e7da      	b.n	800e4a4 <_strtod_l+0x304>
 800e4ee:	498b      	ldr	r1, [pc, #556]	@ (800e71c <_strtod_l+0x57c>)
 800e4f0:	a819      	add	r0, sp, #100	@ 0x64
 800e4f2:	f001 fb05 	bl	800fb00 <__match>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	f43f aea4 	beq.w	800e244 <_strtod_l+0xa4>
 800e4fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4fe:	4988      	ldr	r1, [pc, #544]	@ (800e720 <_strtod_l+0x580>)
 800e500:	3b01      	subs	r3, #1
 800e502:	a819      	add	r0, sp, #100	@ 0x64
 800e504:	9319      	str	r3, [sp, #100]	@ 0x64
 800e506:	f001 fafb 	bl	800fb00 <__match>
 800e50a:	b910      	cbnz	r0, 800e512 <_strtod_l+0x372>
 800e50c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e50e:	3301      	adds	r3, #1
 800e510:	9319      	str	r3, [sp, #100]	@ 0x64
 800e512:	f04f 0a00 	mov.w	sl, #0
 800e516:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800e724 <_strtod_l+0x584>
 800e51a:	e67a      	b.n	800e212 <_strtod_l+0x72>
 800e51c:	4882      	ldr	r0, [pc, #520]	@ (800e728 <_strtod_l+0x588>)
 800e51e:	f001 f82d 	bl	800f57c <nan>
 800e522:	4682      	mov	sl, r0
 800e524:	468b      	mov	fp, r1
 800e526:	e674      	b.n	800e212 <_strtod_l+0x72>
 800e528:	eba8 0309 	sub.w	r3, r8, r9
 800e52c:	2f00      	cmp	r7, #0
 800e52e:	bf08      	it	eq
 800e530:	462f      	moveq	r7, r5
 800e532:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e534:	2d10      	cmp	r5, #16
 800e536:	462c      	mov	r4, r5
 800e538:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53a:	bfa8      	it	ge
 800e53c:	2410      	movge	r4, #16
 800e53e:	f7f1 ffbd 	bl	80004bc <__aeabi_ui2d>
 800e542:	2d09      	cmp	r5, #9
 800e544:	4682      	mov	sl, r0
 800e546:	468b      	mov	fp, r1
 800e548:	dc11      	bgt.n	800e56e <_strtod_l+0x3ce>
 800e54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f43f ae60 	beq.w	800e212 <_strtod_l+0x72>
 800e552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e554:	dd76      	ble.n	800e644 <_strtod_l+0x4a4>
 800e556:	2b16      	cmp	r3, #22
 800e558:	dc5d      	bgt.n	800e616 <_strtod_l+0x476>
 800e55a:	4974      	ldr	r1, [pc, #464]	@ (800e72c <_strtod_l+0x58c>)
 800e55c:	4652      	mov	r2, sl
 800e55e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e562:	465b      	mov	r3, fp
 800e564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e568:	f7f2 f822 	bl	80005b0 <__aeabi_dmul>
 800e56c:	e7d9      	b.n	800e522 <_strtod_l+0x382>
 800e56e:	4b6f      	ldr	r3, [pc, #444]	@ (800e72c <_strtod_l+0x58c>)
 800e570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e574:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e578:	f7f2 f81a 	bl	80005b0 <__aeabi_dmul>
 800e57c:	4682      	mov	sl, r0
 800e57e:	9808      	ldr	r0, [sp, #32]
 800e580:	468b      	mov	fp, r1
 800e582:	f7f1 ff9b 	bl	80004bc <__aeabi_ui2d>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4650      	mov	r0, sl
 800e58c:	4659      	mov	r1, fp
 800e58e:	f7f1 fe59 	bl	8000244 <__adddf3>
 800e592:	2d0f      	cmp	r5, #15
 800e594:	4682      	mov	sl, r0
 800e596:	468b      	mov	fp, r1
 800e598:	ddd7      	ble.n	800e54a <_strtod_l+0x3aa>
 800e59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e59c:	1b2c      	subs	r4, r5, r4
 800e59e:	441c      	add	r4, r3
 800e5a0:	2c00      	cmp	r4, #0
 800e5a2:	f340 8096 	ble.w	800e6d2 <_strtod_l+0x532>
 800e5a6:	f014 030f 	ands.w	r3, r4, #15
 800e5aa:	d00a      	beq.n	800e5c2 <_strtod_l+0x422>
 800e5ac:	495f      	ldr	r1, [pc, #380]	@ (800e72c <_strtod_l+0x58c>)
 800e5ae:	4652      	mov	r2, sl
 800e5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b8:	465b      	mov	r3, fp
 800e5ba:	f7f1 fff9 	bl	80005b0 <__aeabi_dmul>
 800e5be:	4682      	mov	sl, r0
 800e5c0:	468b      	mov	fp, r1
 800e5c2:	f034 040f 	bics.w	r4, r4, #15
 800e5c6:	d073      	beq.n	800e6b0 <_strtod_l+0x510>
 800e5c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e5cc:	dd48      	ble.n	800e660 <_strtod_l+0x4c0>
 800e5ce:	2400      	movs	r4, #0
 800e5d0:	46a0      	mov	r8, r4
 800e5d2:	46a1      	mov	r9, r4
 800e5d4:	940a      	str	r4, [sp, #40]	@ 0x28
 800e5d6:	2322      	movs	r3, #34	@ 0x22
 800e5d8:	f04f 0a00 	mov.w	sl, #0
 800e5dc:	9a05      	ldr	r2, [sp, #20]
 800e5de:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800e724 <_strtod_l+0x584>
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f43f ae13 	beq.w	800e212 <_strtod_l+0x72>
 800e5ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5ee:	9805      	ldr	r0, [sp, #20]
 800e5f0:	f7ff f94c 	bl	800d88c <_Bfree>
 800e5f4:	4649      	mov	r1, r9
 800e5f6:	9805      	ldr	r0, [sp, #20]
 800e5f8:	f7ff f948 	bl	800d88c <_Bfree>
 800e5fc:	4641      	mov	r1, r8
 800e5fe:	9805      	ldr	r0, [sp, #20]
 800e600:	f7ff f944 	bl	800d88c <_Bfree>
 800e604:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e606:	9805      	ldr	r0, [sp, #20]
 800e608:	f7ff f940 	bl	800d88c <_Bfree>
 800e60c:	4621      	mov	r1, r4
 800e60e:	9805      	ldr	r0, [sp, #20]
 800e610:	f7ff f93c 	bl	800d88c <_Bfree>
 800e614:	e5fd      	b.n	800e212 <_strtod_l+0x72>
 800e616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e618:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e61c:	4293      	cmp	r3, r2
 800e61e:	dbbc      	blt.n	800e59a <_strtod_l+0x3fa>
 800e620:	4c42      	ldr	r4, [pc, #264]	@ (800e72c <_strtod_l+0x58c>)
 800e622:	f1c5 050f 	rsb	r5, r5, #15
 800e626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e62a:	4652      	mov	r2, sl
 800e62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e630:	465b      	mov	r3, fp
 800e632:	f7f1 ffbd 	bl	80005b0 <__aeabi_dmul>
 800e636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e638:	1b5d      	subs	r5, r3, r5
 800e63a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e63e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e642:	e791      	b.n	800e568 <_strtod_l+0x3c8>
 800e644:	3316      	adds	r3, #22
 800e646:	dba8      	blt.n	800e59a <_strtod_l+0x3fa>
 800e648:	4b38      	ldr	r3, [pc, #224]	@ (800e72c <_strtod_l+0x58c>)
 800e64a:	eba9 0808 	sub.w	r8, r9, r8
 800e64e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e652:	4650      	mov	r0, sl
 800e654:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e658:	4659      	mov	r1, fp
 800e65a:	f7f2 f8d3 	bl	8000804 <__aeabi_ddiv>
 800e65e:	e760      	b.n	800e522 <_strtod_l+0x382>
 800e660:	4b33      	ldr	r3, [pc, #204]	@ (800e730 <_strtod_l+0x590>)
 800e662:	4650      	mov	r0, sl
 800e664:	9308      	str	r3, [sp, #32]
 800e666:	2300      	movs	r3, #0
 800e668:	4659      	mov	r1, fp
 800e66a:	461e      	mov	r6, r3
 800e66c:	1124      	asrs	r4, r4, #4
 800e66e:	2c01      	cmp	r4, #1
 800e670:	dc21      	bgt.n	800e6b6 <_strtod_l+0x516>
 800e672:	b10b      	cbz	r3, 800e678 <_strtod_l+0x4d8>
 800e674:	4682      	mov	sl, r0
 800e676:	468b      	mov	fp, r1
 800e678:	492d      	ldr	r1, [pc, #180]	@ (800e730 <_strtod_l+0x590>)
 800e67a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e67e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e682:	4652      	mov	r2, sl
 800e684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e688:	465b      	mov	r3, fp
 800e68a:	f7f1 ff91 	bl	80005b0 <__aeabi_dmul>
 800e68e:	4b25      	ldr	r3, [pc, #148]	@ (800e724 <_strtod_l+0x584>)
 800e690:	460a      	mov	r2, r1
 800e692:	400b      	ands	r3, r1
 800e694:	4927      	ldr	r1, [pc, #156]	@ (800e734 <_strtod_l+0x594>)
 800e696:	4682      	mov	sl, r0
 800e698:	428b      	cmp	r3, r1
 800e69a:	d898      	bhi.n	800e5ce <_strtod_l+0x42e>
 800e69c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e6a0:	428b      	cmp	r3, r1
 800e6a2:	bf86      	itte	hi
 800e6a4:	f04f 3aff 	movhi.w	sl, #4294967295
 800e6a8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e738 <_strtod_l+0x598>
 800e6ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	9308      	str	r3, [sp, #32]
 800e6b4:	e07a      	b.n	800e7ac <_strtod_l+0x60c>
 800e6b6:	07e2      	lsls	r2, r4, #31
 800e6b8:	d505      	bpl.n	800e6c6 <_strtod_l+0x526>
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 ff76 	bl	80005b0 <__aeabi_dmul>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	9a08      	ldr	r2, [sp, #32]
 800e6c8:	3601      	adds	r6, #1
 800e6ca:	3208      	adds	r2, #8
 800e6cc:	1064      	asrs	r4, r4, #1
 800e6ce:	9208      	str	r2, [sp, #32]
 800e6d0:	e7cd      	b.n	800e66e <_strtod_l+0x4ce>
 800e6d2:	d0ed      	beq.n	800e6b0 <_strtod_l+0x510>
 800e6d4:	4264      	negs	r4, r4
 800e6d6:	f014 020f 	ands.w	r2, r4, #15
 800e6da:	d00a      	beq.n	800e6f2 <_strtod_l+0x552>
 800e6dc:	4b13      	ldr	r3, [pc, #76]	@ (800e72c <_strtod_l+0x58c>)
 800e6de:	4650      	mov	r0, sl
 800e6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6e4:	4659      	mov	r1, fp
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	f7f2 f88b 	bl	8000804 <__aeabi_ddiv>
 800e6ee:	4682      	mov	sl, r0
 800e6f0:	468b      	mov	fp, r1
 800e6f2:	1124      	asrs	r4, r4, #4
 800e6f4:	d0dc      	beq.n	800e6b0 <_strtod_l+0x510>
 800e6f6:	2c1f      	cmp	r4, #31
 800e6f8:	dd20      	ble.n	800e73c <_strtod_l+0x59c>
 800e6fa:	2400      	movs	r4, #0
 800e6fc:	46a0      	mov	r8, r4
 800e6fe:	46a1      	mov	r9, r4
 800e700:	940a      	str	r4, [sp, #40]	@ 0x28
 800e702:	2322      	movs	r3, #34	@ 0x22
 800e704:	9a05      	ldr	r2, [sp, #20]
 800e706:	f04f 0a00 	mov.w	sl, #0
 800e70a:	f04f 0b00 	mov.w	fp, #0
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	e768      	b.n	800e5e4 <_strtod_l+0x444>
 800e712:	bf00      	nop
 800e714:	08010b1c 	.word	0x08010b1c
 800e718:	08010d34 	.word	0x08010d34
 800e71c:	08010b14 	.word	0x08010b14
 800e720:	08010b4b 	.word	0x08010b4b
 800e724:	7ff00000 	.word	0x7ff00000
 800e728:	08010ddc 	.word	0x08010ddc
 800e72c:	08010c68 	.word	0x08010c68
 800e730:	08010c40 	.word	0x08010c40
 800e734:	7ca00000 	.word	0x7ca00000
 800e738:	7fefffff 	.word	0x7fefffff
 800e73c:	f014 0310 	ands.w	r3, r4, #16
 800e740:	bf18      	it	ne
 800e742:	236a      	movne	r3, #106	@ 0x6a
 800e744:	4650      	mov	r0, sl
 800e746:	9308      	str	r3, [sp, #32]
 800e748:	4659      	mov	r1, fp
 800e74a:	2300      	movs	r3, #0
 800e74c:	4ea9      	ldr	r6, [pc, #676]	@ (800e9f4 <_strtod_l+0x854>)
 800e74e:	07e2      	lsls	r2, r4, #31
 800e750:	d504      	bpl.n	800e75c <_strtod_l+0x5bc>
 800e752:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e756:	f7f1 ff2b 	bl	80005b0 <__aeabi_dmul>
 800e75a:	2301      	movs	r3, #1
 800e75c:	1064      	asrs	r4, r4, #1
 800e75e:	f106 0608 	add.w	r6, r6, #8
 800e762:	d1f4      	bne.n	800e74e <_strtod_l+0x5ae>
 800e764:	b10b      	cbz	r3, 800e76a <_strtod_l+0x5ca>
 800e766:	4682      	mov	sl, r0
 800e768:	468b      	mov	fp, r1
 800e76a:	9b08      	ldr	r3, [sp, #32]
 800e76c:	b1b3      	cbz	r3, 800e79c <_strtod_l+0x5fc>
 800e76e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e772:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e776:	2b00      	cmp	r3, #0
 800e778:	4659      	mov	r1, fp
 800e77a:	dd0f      	ble.n	800e79c <_strtod_l+0x5fc>
 800e77c:	2b1f      	cmp	r3, #31
 800e77e:	dd57      	ble.n	800e830 <_strtod_l+0x690>
 800e780:	2b34      	cmp	r3, #52	@ 0x34
 800e782:	bfd8      	it	le
 800e784:	f04f 33ff 	movle.w	r3, #4294967295
 800e788:	f04f 0a00 	mov.w	sl, #0
 800e78c:	bfcf      	iteee	gt
 800e78e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e792:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e796:	4093      	lslle	r3, r2
 800e798:	ea03 0b01 	andle.w	fp, r3, r1
 800e79c:	2200      	movs	r2, #0
 800e79e:	2300      	movs	r3, #0
 800e7a0:	4650      	mov	r0, sl
 800e7a2:	4659      	mov	r1, fp
 800e7a4:	f7f2 f96c 	bl	8000a80 <__aeabi_dcmpeq>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d1a6      	bne.n	800e6fa <_strtod_l+0x55a>
 800e7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ae:	463a      	mov	r2, r7
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e7b4:	462b      	mov	r3, r5
 800e7b6:	9805      	ldr	r0, [sp, #20]
 800e7b8:	f7ff f8d0 	bl	800d95c <__s2b>
 800e7bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	f43f af05 	beq.w	800e5ce <_strtod_l+0x42e>
 800e7c4:	2400      	movs	r4, #0
 800e7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7c8:	eba9 0308 	sub.w	r3, r9, r8
 800e7cc:	2a00      	cmp	r2, #0
 800e7ce:	bfa8      	it	ge
 800e7d0:	2300      	movge	r3, #0
 800e7d2:	46a0      	mov	r8, r4
 800e7d4:	9312      	str	r3, [sp, #72]	@ 0x48
 800e7d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e7da:	9316      	str	r3, [sp, #88]	@ 0x58
 800e7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7de:	9805      	ldr	r0, [sp, #20]
 800e7e0:	6859      	ldr	r1, [r3, #4]
 800e7e2:	f7ff f813 	bl	800d80c <_Balloc>
 800e7e6:	4681      	mov	r9, r0
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	f43f aef4 	beq.w	800e5d6 <_strtod_l+0x436>
 800e7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f0:	300c      	adds	r0, #12
 800e7f2:	691a      	ldr	r2, [r3, #16]
 800e7f4:	f103 010c 	add.w	r1, r3, #12
 800e7f8:	3202      	adds	r2, #2
 800e7fa:	0092      	lsls	r2, r2, #2
 800e7fc:	f7fe f8a3 	bl	800c946 <memcpy>
 800e800:	ab1c      	add	r3, sp, #112	@ 0x70
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	4652      	mov	r2, sl
 800e80a:	465b      	mov	r3, fp
 800e80c:	9805      	ldr	r0, [sp, #20]
 800e80e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e812:	f7ff fbd5 	bl	800dfc0 <__d2b>
 800e816:	901a      	str	r0, [sp, #104]	@ 0x68
 800e818:	2800      	cmp	r0, #0
 800e81a:	f43f aedc 	beq.w	800e5d6 <_strtod_l+0x436>
 800e81e:	2101      	movs	r1, #1
 800e820:	9805      	ldr	r0, [sp, #20]
 800e822:	f7ff f931 	bl	800da88 <__i2b>
 800e826:	4680      	mov	r8, r0
 800e828:	b948      	cbnz	r0, 800e83e <_strtod_l+0x69e>
 800e82a:	f04f 0800 	mov.w	r8, #0
 800e82e:	e6d2      	b.n	800e5d6 <_strtod_l+0x436>
 800e830:	f04f 32ff 	mov.w	r2, #4294967295
 800e834:	fa02 f303 	lsl.w	r3, r2, r3
 800e838:	ea03 0a0a 	and.w	sl, r3, sl
 800e83c:	e7ae      	b.n	800e79c <_strtod_l+0x5fc>
 800e83e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e840:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e842:	2d00      	cmp	r5, #0
 800e844:	bfab      	itete	ge
 800e846:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e848:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e84a:	18ef      	addge	r7, r5, r3
 800e84c:	1b5e      	sublt	r6, r3, r5
 800e84e:	9b08      	ldr	r3, [sp, #32]
 800e850:	bfa8      	it	ge
 800e852:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e854:	eba5 0503 	sub.w	r5, r5, r3
 800e858:	4415      	add	r5, r2
 800e85a:	4b67      	ldr	r3, [pc, #412]	@ (800e9f8 <_strtod_l+0x858>)
 800e85c:	f105 35ff 	add.w	r5, r5, #4294967295
 800e860:	bfb8      	it	lt
 800e862:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e864:	429d      	cmp	r5, r3
 800e866:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e86a:	da50      	bge.n	800e90e <_strtod_l+0x76e>
 800e86c:	1b5b      	subs	r3, r3, r5
 800e86e:	2b1f      	cmp	r3, #31
 800e870:	f04f 0101 	mov.w	r1, #1
 800e874:	eba2 0203 	sub.w	r2, r2, r3
 800e878:	dc3d      	bgt.n	800e8f6 <_strtod_l+0x756>
 800e87a:	fa01 f303 	lsl.w	r3, r1, r3
 800e87e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e880:	2300      	movs	r3, #0
 800e882:	9310      	str	r3, [sp, #64]	@ 0x40
 800e884:	18bd      	adds	r5, r7, r2
 800e886:	9b08      	ldr	r3, [sp, #32]
 800e888:	42af      	cmp	r7, r5
 800e88a:	4416      	add	r6, r2
 800e88c:	441e      	add	r6, r3
 800e88e:	463b      	mov	r3, r7
 800e890:	bfa8      	it	ge
 800e892:	462b      	movge	r3, r5
 800e894:	42b3      	cmp	r3, r6
 800e896:	bfa8      	it	ge
 800e898:	4633      	movge	r3, r6
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	bfc2      	ittt	gt
 800e89e:	1aed      	subgt	r5, r5, r3
 800e8a0:	1af6      	subgt	r6, r6, r3
 800e8a2:	1aff      	subgt	r7, r7, r3
 800e8a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	dd16      	ble.n	800e8d8 <_strtod_l+0x738>
 800e8aa:	4641      	mov	r1, r8
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	9805      	ldr	r0, [sp, #20]
 800e8b0:	f7ff f9a8 	bl	800dc04 <__pow5mult>
 800e8b4:	4680      	mov	r8, r0
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d0b7      	beq.n	800e82a <_strtod_l+0x68a>
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8be:	9805      	ldr	r0, [sp, #20]
 800e8c0:	f7ff f8f8 	bl	800dab4 <__multiply>
 800e8c4:	900e      	str	r0, [sp, #56]	@ 0x38
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	f43f ae85 	beq.w	800e5d6 <_strtod_l+0x436>
 800e8cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8ce:	9805      	ldr	r0, [sp, #20]
 800e8d0:	f7fe ffdc 	bl	800d88c <_Bfree>
 800e8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8d8:	2d00      	cmp	r5, #0
 800e8da:	dc1d      	bgt.n	800e918 <_strtod_l+0x778>
 800e8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	dd23      	ble.n	800e92a <_strtod_l+0x78a>
 800e8e2:	4649      	mov	r1, r9
 800e8e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e8e6:	9805      	ldr	r0, [sp, #20]
 800e8e8:	f7ff f98c 	bl	800dc04 <__pow5mult>
 800e8ec:	4681      	mov	r9, r0
 800e8ee:	b9e0      	cbnz	r0, 800e92a <_strtod_l+0x78a>
 800e8f0:	f04f 0900 	mov.w	r9, #0
 800e8f4:	e66f      	b.n	800e5d6 <_strtod_l+0x436>
 800e8f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e8fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e8fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e902:	35e2      	adds	r5, #226	@ 0xe2
 800e904:	fa01 f305 	lsl.w	r3, r1, r5
 800e908:	9310      	str	r3, [sp, #64]	@ 0x40
 800e90a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e90c:	e7ba      	b.n	800e884 <_strtod_l+0x6e4>
 800e90e:	2300      	movs	r3, #0
 800e910:	9310      	str	r3, [sp, #64]	@ 0x40
 800e912:	2301      	movs	r3, #1
 800e914:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e916:	e7b5      	b.n	800e884 <_strtod_l+0x6e4>
 800e918:	462a      	mov	r2, r5
 800e91a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e91c:	9805      	ldr	r0, [sp, #20]
 800e91e:	f7ff f9cb 	bl	800dcb8 <__lshift>
 800e922:	901a      	str	r0, [sp, #104]	@ 0x68
 800e924:	2800      	cmp	r0, #0
 800e926:	d1d9      	bne.n	800e8dc <_strtod_l+0x73c>
 800e928:	e655      	b.n	800e5d6 <_strtod_l+0x436>
 800e92a:	2e00      	cmp	r6, #0
 800e92c:	dd07      	ble.n	800e93e <_strtod_l+0x79e>
 800e92e:	4649      	mov	r1, r9
 800e930:	4632      	mov	r2, r6
 800e932:	9805      	ldr	r0, [sp, #20]
 800e934:	f7ff f9c0 	bl	800dcb8 <__lshift>
 800e938:	4681      	mov	r9, r0
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d0d8      	beq.n	800e8f0 <_strtod_l+0x750>
 800e93e:	2f00      	cmp	r7, #0
 800e940:	dd08      	ble.n	800e954 <_strtod_l+0x7b4>
 800e942:	4641      	mov	r1, r8
 800e944:	463a      	mov	r2, r7
 800e946:	9805      	ldr	r0, [sp, #20]
 800e948:	f7ff f9b6 	bl	800dcb8 <__lshift>
 800e94c:	4680      	mov	r8, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	f43f ae41 	beq.w	800e5d6 <_strtod_l+0x436>
 800e954:	464a      	mov	r2, r9
 800e956:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e958:	9805      	ldr	r0, [sp, #20]
 800e95a:	f7ff fa35 	bl	800ddc8 <__mdiff>
 800e95e:	4604      	mov	r4, r0
 800e960:	2800      	cmp	r0, #0
 800e962:	f43f ae38 	beq.w	800e5d6 <_strtod_l+0x436>
 800e966:	68c3      	ldr	r3, [r0, #12]
 800e968:	4641      	mov	r1, r8
 800e96a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e96c:	2300      	movs	r3, #0
 800e96e:	60c3      	str	r3, [r0, #12]
 800e970:	f7ff fa0e 	bl	800dd90 <__mcmp>
 800e974:	2800      	cmp	r0, #0
 800e976:	da45      	bge.n	800ea04 <_strtod_l+0x864>
 800e978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e97a:	ea53 030a 	orrs.w	r3, r3, sl
 800e97e:	d16b      	bne.n	800ea58 <_strtod_l+0x8b8>
 800e980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e984:	2b00      	cmp	r3, #0
 800e986:	d167      	bne.n	800ea58 <_strtod_l+0x8b8>
 800e988:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e98c:	0d1b      	lsrs	r3, r3, #20
 800e98e:	051b      	lsls	r3, r3, #20
 800e990:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e994:	d960      	bls.n	800ea58 <_strtod_l+0x8b8>
 800e996:	6963      	ldr	r3, [r4, #20]
 800e998:	b913      	cbnz	r3, 800e9a0 <_strtod_l+0x800>
 800e99a:	6923      	ldr	r3, [r4, #16]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	dd5b      	ble.n	800ea58 <_strtod_l+0x8b8>
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	9805      	ldr	r0, [sp, #20]
 800e9a6:	f7ff f987 	bl	800dcb8 <__lshift>
 800e9aa:	4641      	mov	r1, r8
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	f7ff f9ef 	bl	800dd90 <__mcmp>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	dd50      	ble.n	800ea58 <_strtod_l+0x8b8>
 800e9b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9ba:	9a08      	ldr	r2, [sp, #32]
 800e9bc:	0d1b      	lsrs	r3, r3, #20
 800e9be:	051b      	lsls	r3, r3, #20
 800e9c0:	2a00      	cmp	r2, #0
 800e9c2:	d06a      	beq.n	800ea9a <_strtod_l+0x8fa>
 800e9c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9c8:	d867      	bhi.n	800ea9a <_strtod_l+0x8fa>
 800e9ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e9ce:	f67f ae98 	bls.w	800e702 <_strtod_l+0x562>
 800e9d2:	4650      	mov	r0, sl
 800e9d4:	4659      	mov	r1, fp
 800e9d6:	4b09      	ldr	r3, [pc, #36]	@ (800e9fc <_strtod_l+0x85c>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f7f1 fde9 	bl	80005b0 <__aeabi_dmul>
 800e9de:	4b08      	ldr	r3, [pc, #32]	@ (800ea00 <_strtod_l+0x860>)
 800e9e0:	4682      	mov	sl, r0
 800e9e2:	400b      	ands	r3, r1
 800e9e4:	468b      	mov	fp, r1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f47f ae00 	bne.w	800e5ec <_strtod_l+0x44c>
 800e9ec:	2322      	movs	r3, #34	@ 0x22
 800e9ee:	9a05      	ldr	r2, [sp, #20]
 800e9f0:	6013      	str	r3, [r2, #0]
 800e9f2:	e5fb      	b.n	800e5ec <_strtod_l+0x44c>
 800e9f4:	08010d60 	.word	0x08010d60
 800e9f8:	fffffc02 	.word	0xfffffc02
 800e9fc:	39500000 	.word	0x39500000
 800ea00:	7ff00000 	.word	0x7ff00000
 800ea04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ea08:	d165      	bne.n	800ead6 <_strtod_l+0x936>
 800ea0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea10:	b35a      	cbz	r2, 800ea6a <_strtod_l+0x8ca>
 800ea12:	4a99      	ldr	r2, [pc, #612]	@ (800ec78 <_strtod_l+0xad8>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d12b      	bne.n	800ea70 <_strtod_l+0x8d0>
 800ea18:	9b08      	ldr	r3, [sp, #32]
 800ea1a:	4651      	mov	r1, sl
 800ea1c:	b303      	cbz	r3, 800ea60 <_strtod_l+0x8c0>
 800ea1e:	465a      	mov	r2, fp
 800ea20:	4b96      	ldr	r3, [pc, #600]	@ (800ec7c <_strtod_l+0xadc>)
 800ea22:	4013      	ands	r3, r2
 800ea24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ea28:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2c:	d81b      	bhi.n	800ea66 <_strtod_l+0x8c6>
 800ea2e:	0d1b      	lsrs	r3, r3, #20
 800ea30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea34:	fa02 f303 	lsl.w	r3, r2, r3
 800ea38:	4299      	cmp	r1, r3
 800ea3a:	d119      	bne.n	800ea70 <_strtod_l+0x8d0>
 800ea3c:	4b90      	ldr	r3, [pc, #576]	@ (800ec80 <_strtod_l+0xae0>)
 800ea3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d102      	bne.n	800ea4a <_strtod_l+0x8aa>
 800ea44:	3101      	adds	r1, #1
 800ea46:	f43f adc6 	beq.w	800e5d6 <_strtod_l+0x436>
 800ea4a:	f04f 0a00 	mov.w	sl, #0
 800ea4e:	4b8b      	ldr	r3, [pc, #556]	@ (800ec7c <_strtod_l+0xadc>)
 800ea50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea52:	401a      	ands	r2, r3
 800ea54:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ea58:	9b08      	ldr	r3, [sp, #32]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1b9      	bne.n	800e9d2 <_strtod_l+0x832>
 800ea5e:	e5c5      	b.n	800e5ec <_strtod_l+0x44c>
 800ea60:	f04f 33ff 	mov.w	r3, #4294967295
 800ea64:	e7e8      	b.n	800ea38 <_strtod_l+0x898>
 800ea66:	4613      	mov	r3, r2
 800ea68:	e7e6      	b.n	800ea38 <_strtod_l+0x898>
 800ea6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ea6e:	d0a2      	beq.n	800e9b6 <_strtod_l+0x816>
 800ea70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea72:	b1db      	cbz	r3, 800eaac <_strtod_l+0x90c>
 800ea74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea76:	4213      	tst	r3, r2
 800ea78:	d0ee      	beq.n	800ea58 <_strtod_l+0x8b8>
 800ea7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea7c:	4650      	mov	r0, sl
 800ea7e:	4659      	mov	r1, fp
 800ea80:	9a08      	ldr	r2, [sp, #32]
 800ea82:	b1bb      	cbz	r3, 800eab4 <_strtod_l+0x914>
 800ea84:	f7ff fb68 	bl	800e158 <sulp>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea90:	f7f1 fbd8 	bl	8000244 <__adddf3>
 800ea94:	4682      	mov	sl, r0
 800ea96:	468b      	mov	fp, r1
 800ea98:	e7de      	b.n	800ea58 <_strtod_l+0x8b8>
 800ea9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ea9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eaa2:	f04f 3aff 	mov.w	sl, #4294967295
 800eaa6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eaaa:	e7d5      	b.n	800ea58 <_strtod_l+0x8b8>
 800eaac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eaae:	ea13 0f0a 	tst.w	r3, sl
 800eab2:	e7e1      	b.n	800ea78 <_strtod_l+0x8d8>
 800eab4:	f7ff fb50 	bl	800e158 <sulp>
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eac0:	f7f1 fbbe 	bl	8000240 <__aeabi_dsub>
 800eac4:	2200      	movs	r2, #0
 800eac6:	2300      	movs	r3, #0
 800eac8:	4682      	mov	sl, r0
 800eaca:	468b      	mov	fp, r1
 800eacc:	f7f1 ffd8 	bl	8000a80 <__aeabi_dcmpeq>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d0c1      	beq.n	800ea58 <_strtod_l+0x8b8>
 800ead4:	e615      	b.n	800e702 <_strtod_l+0x562>
 800ead6:	4641      	mov	r1, r8
 800ead8:	4620      	mov	r0, r4
 800eada:	f7ff fac9 	bl	800e070 <__ratio>
 800eade:	2200      	movs	r2, #0
 800eae0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eae4:	4606      	mov	r6, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	f7f1 ffde 	bl	8000aa8 <__aeabi_dcmple>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d06d      	beq.n	800ebcc <_strtod_l+0xa2c>
 800eaf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d178      	bne.n	800ebe8 <_strtod_l+0xa48>
 800eaf6:	f1ba 0f00 	cmp.w	sl, #0
 800eafa:	d156      	bne.n	800ebaa <_strtod_l+0xa0a>
 800eafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eafe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d158      	bne.n	800ebb8 <_strtod_l+0xa18>
 800eb06:	2200      	movs	r2, #0
 800eb08:	4630      	mov	r0, r6
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	4b5d      	ldr	r3, [pc, #372]	@ (800ec84 <_strtod_l+0xae4>)
 800eb0e:	f7f1 ffc1 	bl	8000a94 <__aeabi_dcmplt>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d157      	bne.n	800ebc6 <_strtod_l+0xa26>
 800eb16:	4630      	mov	r0, r6
 800eb18:	4639      	mov	r1, r7
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	4b5a      	ldr	r3, [pc, #360]	@ (800ec88 <_strtod_l+0xae8>)
 800eb1e:	f7f1 fd47 	bl	80005b0 <__aeabi_dmul>
 800eb22:	4606      	mov	r6, r0
 800eb24:	460f      	mov	r7, r1
 800eb26:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eb2a:	9606      	str	r6, [sp, #24]
 800eb2c:	9307      	str	r3, [sp, #28]
 800eb2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb32:	4d52      	ldr	r5, [pc, #328]	@ (800ec7c <_strtod_l+0xadc>)
 800eb34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb3a:	401d      	ands	r5, r3
 800eb3c:	4b53      	ldr	r3, [pc, #332]	@ (800ec8c <_strtod_l+0xaec>)
 800eb3e:	429d      	cmp	r5, r3
 800eb40:	f040 80aa 	bne.w	800ec98 <_strtod_l+0xaf8>
 800eb44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb46:	4650      	mov	r0, sl
 800eb48:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eb4c:	4659      	mov	r1, fp
 800eb4e:	f7ff f9cf 	bl	800def0 <__ulp>
 800eb52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb56:	f7f1 fd2b 	bl	80005b0 <__aeabi_dmul>
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	465b      	mov	r3, fp
 800eb5e:	f7f1 fb71 	bl	8000244 <__adddf3>
 800eb62:	460b      	mov	r3, r1
 800eb64:	4945      	ldr	r1, [pc, #276]	@ (800ec7c <_strtod_l+0xadc>)
 800eb66:	4a4a      	ldr	r2, [pc, #296]	@ (800ec90 <_strtod_l+0xaf0>)
 800eb68:	4019      	ands	r1, r3
 800eb6a:	4291      	cmp	r1, r2
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	d942      	bls.n	800ebf6 <_strtod_l+0xa56>
 800eb70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb72:	4b43      	ldr	r3, [pc, #268]	@ (800ec80 <_strtod_l+0xae0>)
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d103      	bne.n	800eb80 <_strtod_l+0x9e0>
 800eb78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	f43f ad2b 	beq.w	800e5d6 <_strtod_l+0x436>
 800eb80:	f04f 3aff 	mov.w	sl, #4294967295
 800eb84:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ec80 <_strtod_l+0xae0>
 800eb88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb8a:	9805      	ldr	r0, [sp, #20]
 800eb8c:	f7fe fe7e 	bl	800d88c <_Bfree>
 800eb90:	4649      	mov	r1, r9
 800eb92:	9805      	ldr	r0, [sp, #20]
 800eb94:	f7fe fe7a 	bl	800d88c <_Bfree>
 800eb98:	4641      	mov	r1, r8
 800eb9a:	9805      	ldr	r0, [sp, #20]
 800eb9c:	f7fe fe76 	bl	800d88c <_Bfree>
 800eba0:	4621      	mov	r1, r4
 800eba2:	9805      	ldr	r0, [sp, #20]
 800eba4:	f7fe fe72 	bl	800d88c <_Bfree>
 800eba8:	e618      	b.n	800e7dc <_strtod_l+0x63c>
 800ebaa:	f1ba 0f01 	cmp.w	sl, #1
 800ebae:	d103      	bne.n	800ebb8 <_strtod_l+0xa18>
 800ebb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f43f ada5 	beq.w	800e702 <_strtod_l+0x562>
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4b36      	ldr	r3, [pc, #216]	@ (800ec94 <_strtod_l+0xaf4>)
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebc2:	4f30      	ldr	r7, [pc, #192]	@ (800ec84 <_strtod_l+0xae4>)
 800ebc4:	e7b3      	b.n	800eb2e <_strtod_l+0x98e>
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	4f2f      	ldr	r7, [pc, #188]	@ (800ec88 <_strtod_l+0xae8>)
 800ebca:	e7ac      	b.n	800eb26 <_strtod_l+0x986>
 800ebcc:	4630      	mov	r0, r6
 800ebce:	4639      	mov	r1, r7
 800ebd0:	4b2d      	ldr	r3, [pc, #180]	@ (800ec88 <_strtod_l+0xae8>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f7f1 fcec 	bl	80005b0 <__aeabi_dmul>
 800ebd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460f      	mov	r7, r1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0a1      	beq.n	800eb26 <_strtod_l+0x986>
 800ebe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ebe6:	e7a2      	b.n	800eb2e <_strtod_l+0x98e>
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4b26      	ldr	r3, [pc, #152]	@ (800ec84 <_strtod_l+0xae4>)
 800ebec:	4616      	mov	r6, r2
 800ebee:	461f      	mov	r7, r3
 800ebf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebf4:	e79b      	b.n	800eb2e <_strtod_l+0x98e>
 800ebf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ebfa:	9b08      	ldr	r3, [sp, #32]
 800ebfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1c1      	bne.n	800eb88 <_strtod_l+0x9e8>
 800ec04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec08:	0d1b      	lsrs	r3, r3, #20
 800ec0a:	051b      	lsls	r3, r3, #20
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d1bb      	bne.n	800eb88 <_strtod_l+0x9e8>
 800ec10:	4630      	mov	r0, r6
 800ec12:	4639      	mov	r1, r7
 800ec14:	f7f2 fb2e 	bl	8001274 <__aeabi_d2lz>
 800ec18:	f7f1 fc9c 	bl	8000554 <__aeabi_l2d>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 fb0c 	bl	8000240 <__aeabi_dsub>
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ec30:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ec34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec36:	ea46 060a 	orr.w	r6, r6, sl
 800ec3a:	431e      	orrs	r6, r3
 800ec3c:	d069      	beq.n	800ed12 <_strtod_l+0xb72>
 800ec3e:	a30a      	add	r3, pc, #40	@ (adr r3, 800ec68 <_strtod_l+0xac8>)
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	f7f1 ff26 	bl	8000a94 <__aeabi_dcmplt>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	f47f accf 	bne.w	800e5ec <_strtod_l+0x44c>
 800ec4e:	a308      	add	r3, pc, #32	@ (adr r3, 800ec70 <_strtod_l+0xad0>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec58:	f7f1 ff3a 	bl	8000ad0 <__aeabi_dcmpgt>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d093      	beq.n	800eb88 <_strtod_l+0x9e8>
 800ec60:	e4c4      	b.n	800e5ec <_strtod_l+0x44c>
 800ec62:	bf00      	nop
 800ec64:	f3af 8000 	nop.w
 800ec68:	94a03595 	.word	0x94a03595
 800ec6c:	3fdfffff 	.word	0x3fdfffff
 800ec70:	35afe535 	.word	0x35afe535
 800ec74:	3fe00000 	.word	0x3fe00000
 800ec78:	000fffff 	.word	0x000fffff
 800ec7c:	7ff00000 	.word	0x7ff00000
 800ec80:	7fefffff 	.word	0x7fefffff
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	3fe00000 	.word	0x3fe00000
 800ec8c:	7fe00000 	.word	0x7fe00000
 800ec90:	7c9fffff 	.word	0x7c9fffff
 800ec94:	bff00000 	.word	0xbff00000
 800ec98:	9b08      	ldr	r3, [sp, #32]
 800ec9a:	b323      	cbz	r3, 800ece6 <_strtod_l+0xb46>
 800ec9c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eca0:	d821      	bhi.n	800ece6 <_strtod_l+0xb46>
 800eca2:	a327      	add	r3, pc, #156	@ (adr r3, 800ed40 <_strtod_l+0xba0>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	4630      	mov	r0, r6
 800ecaa:	4639      	mov	r1, r7
 800ecac:	f7f1 fefc 	bl	8000aa8 <__aeabi_dcmple>
 800ecb0:	b1a0      	cbz	r0, 800ecdc <_strtod_l+0xb3c>
 800ecb2:	4639      	mov	r1, r7
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	f7f1 ff53 	bl	8000b60 <__aeabi_d2uiz>
 800ecba:	2801      	cmp	r0, #1
 800ecbc:	bf38      	it	cc
 800ecbe:	2001      	movcc	r0, #1
 800ecc0:	f7f1 fbfc 	bl	80004bc <__aeabi_ui2d>
 800ecc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	460f      	mov	r7, r1
 800ecca:	b9fb      	cbnz	r3, 800ed0c <_strtod_l+0xb6c>
 800eccc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ecd0:	9014      	str	r0, [sp, #80]	@ 0x50
 800ecd2:	9315      	str	r3, [sp, #84]	@ 0x54
 800ecd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ecd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ecdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecde:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ece2:	1b5b      	subs	r3, r3, r5
 800ece4:	9311      	str	r3, [sp, #68]	@ 0x44
 800ece6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ecea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ecee:	f7ff f8ff 	bl	800def0 <__ulp>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	4659      	mov	r1, fp
 800ecfa:	f7f1 fc59 	bl	80005b0 <__aeabi_dmul>
 800ecfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ed02:	f7f1 fa9f 	bl	8000244 <__adddf3>
 800ed06:	4682      	mov	sl, r0
 800ed08:	468b      	mov	fp, r1
 800ed0a:	e776      	b.n	800ebfa <_strtod_l+0xa5a>
 800ed0c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ed10:	e7e0      	b.n	800ecd4 <_strtod_l+0xb34>
 800ed12:	a30d      	add	r3, pc, #52	@ (adr r3, 800ed48 <_strtod_l+0xba8>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 febc 	bl	8000a94 <__aeabi_dcmplt>
 800ed1c:	e79e      	b.n	800ec5c <_strtod_l+0xabc>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed24:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	f7ff ba77 	b.w	800e21a <_strtod_l+0x7a>
 800ed2c:	2a65      	cmp	r2, #101	@ 0x65
 800ed2e:	f43f ab6e 	beq.w	800e40e <_strtod_l+0x26e>
 800ed32:	2a45      	cmp	r2, #69	@ 0x45
 800ed34:	f43f ab6b 	beq.w	800e40e <_strtod_l+0x26e>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	f7ff bba6 	b.w	800e48a <_strtod_l+0x2ea>
 800ed3e:	bf00      	nop
 800ed40:	ffc00000 	.word	0xffc00000
 800ed44:	41dfffff 	.word	0x41dfffff
 800ed48:	94a03595 	.word	0x94a03595
 800ed4c:	3fcfffff 	.word	0x3fcfffff

0800ed50 <_strtod_r>:
 800ed50:	4b01      	ldr	r3, [pc, #4]	@ (800ed58 <_strtod_r+0x8>)
 800ed52:	f7ff ba25 	b.w	800e1a0 <_strtod_l>
 800ed56:	bf00      	nop
 800ed58:	200000a0 	.word	0x200000a0

0800ed5c <__ssputs_r>:
 800ed5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	461f      	mov	r7, r3
 800ed62:	688e      	ldr	r6, [r1, #8]
 800ed64:	4682      	mov	sl, r0
 800ed66:	42be      	cmp	r6, r7
 800ed68:	460c      	mov	r4, r1
 800ed6a:	4690      	mov	r8, r2
 800ed6c:	680b      	ldr	r3, [r1, #0]
 800ed6e:	d82d      	bhi.n	800edcc <__ssputs_r+0x70>
 800ed70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed78:	d026      	beq.n	800edc8 <__ssputs_r+0x6c>
 800ed7a:	6965      	ldr	r5, [r4, #20]
 800ed7c:	6909      	ldr	r1, [r1, #16]
 800ed7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed82:	eba3 0901 	sub.w	r9, r3, r1
 800ed86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed8a:	1c7b      	adds	r3, r7, #1
 800ed8c:	444b      	add	r3, r9
 800ed8e:	106d      	asrs	r5, r5, #1
 800ed90:	429d      	cmp	r5, r3
 800ed92:	bf38      	it	cc
 800ed94:	461d      	movcc	r5, r3
 800ed96:	0553      	lsls	r3, r2, #21
 800ed98:	d527      	bpl.n	800edea <__ssputs_r+0x8e>
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	f7fe fcaa 	bl	800d6f4 <_malloc_r>
 800eda0:	4606      	mov	r6, r0
 800eda2:	b360      	cbz	r0, 800edfe <__ssputs_r+0xa2>
 800eda4:	464a      	mov	r2, r9
 800eda6:	6921      	ldr	r1, [r4, #16]
 800eda8:	f7fd fdcd 	bl	800c946 <memcpy>
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb6:	81a3      	strh	r3, [r4, #12]
 800edb8:	6126      	str	r6, [r4, #16]
 800edba:	444e      	add	r6, r9
 800edbc:	6026      	str	r6, [r4, #0]
 800edbe:	463e      	mov	r6, r7
 800edc0:	6165      	str	r5, [r4, #20]
 800edc2:	eba5 0509 	sub.w	r5, r5, r9
 800edc6:	60a5      	str	r5, [r4, #8]
 800edc8:	42be      	cmp	r6, r7
 800edca:	d900      	bls.n	800edce <__ssputs_r+0x72>
 800edcc:	463e      	mov	r6, r7
 800edce:	4632      	mov	r2, r6
 800edd0:	4641      	mov	r1, r8
 800edd2:	6820      	ldr	r0, [r4, #0]
 800edd4:	f000 fb96 	bl	800f504 <memmove>
 800edd8:	2000      	movs	r0, #0
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	1b9b      	subs	r3, r3, r6
 800edde:	60a3      	str	r3, [r4, #8]
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	4433      	add	r3, r6
 800ede4:	6023      	str	r3, [r4, #0]
 800ede6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edea:	462a      	mov	r2, r5
 800edec:	f000 ff49 	bl	800fc82 <_realloc_r>
 800edf0:	4606      	mov	r6, r0
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d1e0      	bne.n	800edb8 <__ssputs_r+0x5c>
 800edf6:	4650      	mov	r0, sl
 800edf8:	6921      	ldr	r1, [r4, #16]
 800edfa:	f7fe fc09 	bl	800d610 <_free_r>
 800edfe:	230c      	movs	r3, #12
 800ee00:	f8ca 3000 	str.w	r3, [sl]
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee0e:	81a3      	strh	r3, [r4, #12]
 800ee10:	e7e9      	b.n	800ede6 <__ssputs_r+0x8a>
	...

0800ee14 <_svfiprintf_r>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	4698      	mov	r8, r3
 800ee1a:	898b      	ldrh	r3, [r1, #12]
 800ee1c:	4607      	mov	r7, r0
 800ee1e:	061b      	lsls	r3, r3, #24
 800ee20:	460d      	mov	r5, r1
 800ee22:	4614      	mov	r4, r2
 800ee24:	b09d      	sub	sp, #116	@ 0x74
 800ee26:	d510      	bpl.n	800ee4a <_svfiprintf_r+0x36>
 800ee28:	690b      	ldr	r3, [r1, #16]
 800ee2a:	b973      	cbnz	r3, 800ee4a <_svfiprintf_r+0x36>
 800ee2c:	2140      	movs	r1, #64	@ 0x40
 800ee2e:	f7fe fc61 	bl	800d6f4 <_malloc_r>
 800ee32:	6028      	str	r0, [r5, #0]
 800ee34:	6128      	str	r0, [r5, #16]
 800ee36:	b930      	cbnz	r0, 800ee46 <_svfiprintf_r+0x32>
 800ee38:	230c      	movs	r3, #12
 800ee3a:	603b      	str	r3, [r7, #0]
 800ee3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee40:	b01d      	add	sp, #116	@ 0x74
 800ee42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee46:	2340      	movs	r3, #64	@ 0x40
 800ee48:	616b      	str	r3, [r5, #20]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4e:	2320      	movs	r3, #32
 800ee50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee54:	2330      	movs	r3, #48	@ 0x30
 800ee56:	f04f 0901 	mov.w	r9, #1
 800ee5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800eff8 <_svfiprintf_r+0x1e4>
 800ee62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee66:	4623      	mov	r3, r4
 800ee68:	469a      	mov	sl, r3
 800ee6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6e:	b10a      	cbz	r2, 800ee74 <_svfiprintf_r+0x60>
 800ee70:	2a25      	cmp	r2, #37	@ 0x25
 800ee72:	d1f9      	bne.n	800ee68 <_svfiprintf_r+0x54>
 800ee74:	ebba 0b04 	subs.w	fp, sl, r4
 800ee78:	d00b      	beq.n	800ee92 <_svfiprintf_r+0x7e>
 800ee7a:	465b      	mov	r3, fp
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff ff6b 	bl	800ed5c <__ssputs_r>
 800ee86:	3001      	adds	r0, #1
 800ee88:	f000 80a7 	beq.w	800efda <_svfiprintf_r+0x1c6>
 800ee8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8e:	445a      	add	r2, fp
 800ee90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee92:	f89a 3000 	ldrb.w	r3, [sl]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 809f 	beq.w	800efda <_svfiprintf_r+0x1c6>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea6:	f10a 0a01 	add.w	sl, sl, #1
 800eeaa:	9304      	str	r3, [sp, #16]
 800eeac:	9307      	str	r3, [sp, #28]
 800eeae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeb4:	4654      	mov	r4, sl
 800eeb6:	2205      	movs	r2, #5
 800eeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebc:	484e      	ldr	r0, [pc, #312]	@ (800eff8 <_svfiprintf_r+0x1e4>)
 800eebe:	f7fd fd34 	bl	800c92a <memchr>
 800eec2:	9a04      	ldr	r2, [sp, #16]
 800eec4:	b9d8      	cbnz	r0, 800eefe <_svfiprintf_r+0xea>
 800eec6:	06d0      	lsls	r0, r2, #27
 800eec8:	bf44      	itt	mi
 800eeca:	2320      	movmi	r3, #32
 800eecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed0:	0711      	lsls	r1, r2, #28
 800eed2:	bf44      	itt	mi
 800eed4:	232b      	movmi	r3, #43	@ 0x2b
 800eed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeda:	f89a 3000 	ldrb.w	r3, [sl]
 800eede:	2b2a      	cmp	r3, #42	@ 0x2a
 800eee0:	d015      	beq.n	800ef0e <_svfiprintf_r+0xfa>
 800eee2:	4654      	mov	r4, sl
 800eee4:	2000      	movs	r0, #0
 800eee6:	f04f 0c0a 	mov.w	ip, #10
 800eeea:	9a07      	ldr	r2, [sp, #28]
 800eeec:	4621      	mov	r1, r4
 800eeee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef2:	3b30      	subs	r3, #48	@ 0x30
 800eef4:	2b09      	cmp	r3, #9
 800eef6:	d94b      	bls.n	800ef90 <_svfiprintf_r+0x17c>
 800eef8:	b1b0      	cbz	r0, 800ef28 <_svfiprintf_r+0x114>
 800eefa:	9207      	str	r2, [sp, #28]
 800eefc:	e014      	b.n	800ef28 <_svfiprintf_r+0x114>
 800eefe:	eba0 0308 	sub.w	r3, r0, r8
 800ef02:	fa09 f303 	lsl.w	r3, r9, r3
 800ef06:	4313      	orrs	r3, r2
 800ef08:	46a2      	mov	sl, r4
 800ef0a:	9304      	str	r3, [sp, #16]
 800ef0c:	e7d2      	b.n	800eeb4 <_svfiprintf_r+0xa0>
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	1d19      	adds	r1, r3, #4
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	9103      	str	r1, [sp, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	bfbb      	ittet	lt
 800ef1a:	425b      	neglt	r3, r3
 800ef1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef20:	9307      	strge	r3, [sp, #28]
 800ef22:	9307      	strlt	r3, [sp, #28]
 800ef24:	bfb8      	it	lt
 800ef26:	9204      	strlt	r2, [sp, #16]
 800ef28:	7823      	ldrb	r3, [r4, #0]
 800ef2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef2c:	d10a      	bne.n	800ef44 <_svfiprintf_r+0x130>
 800ef2e:	7863      	ldrb	r3, [r4, #1]
 800ef30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef32:	d132      	bne.n	800ef9a <_svfiprintf_r+0x186>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	3402      	adds	r4, #2
 800ef38:	1d1a      	adds	r2, r3, #4
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	9203      	str	r2, [sp, #12]
 800ef3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef42:	9305      	str	r3, [sp, #20]
 800ef44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800effc <_svfiprintf_r+0x1e8>
 800ef48:	2203      	movs	r2, #3
 800ef4a:	4650      	mov	r0, sl
 800ef4c:	7821      	ldrb	r1, [r4, #0]
 800ef4e:	f7fd fcec 	bl	800c92a <memchr>
 800ef52:	b138      	cbz	r0, 800ef64 <_svfiprintf_r+0x150>
 800ef54:	2240      	movs	r2, #64	@ 0x40
 800ef56:	9b04      	ldr	r3, [sp, #16]
 800ef58:	eba0 000a 	sub.w	r0, r0, sl
 800ef5c:	4082      	lsls	r2, r0
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	3401      	adds	r4, #1
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef68:	2206      	movs	r2, #6
 800ef6a:	4825      	ldr	r0, [pc, #148]	@ (800f000 <_svfiprintf_r+0x1ec>)
 800ef6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef70:	f7fd fcdb 	bl	800c92a <memchr>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d036      	beq.n	800efe6 <_svfiprintf_r+0x1d2>
 800ef78:	4b22      	ldr	r3, [pc, #136]	@ (800f004 <_svfiprintf_r+0x1f0>)
 800ef7a:	bb1b      	cbnz	r3, 800efc4 <_svfiprintf_r+0x1b0>
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	3307      	adds	r3, #7
 800ef80:	f023 0307 	bic.w	r3, r3, #7
 800ef84:	3308      	adds	r3, #8
 800ef86:	9303      	str	r3, [sp, #12]
 800ef88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8a:	4433      	add	r3, r6
 800ef8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8e:	e76a      	b.n	800ee66 <_svfiprintf_r+0x52>
 800ef90:	460c      	mov	r4, r1
 800ef92:	2001      	movs	r0, #1
 800ef94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef98:	e7a8      	b.n	800eeec <_svfiprintf_r+0xd8>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f04f 0c0a 	mov.w	ip, #10
 800efa0:	4619      	mov	r1, r3
 800efa2:	3401      	adds	r4, #1
 800efa4:	9305      	str	r3, [sp, #20]
 800efa6:	4620      	mov	r0, r4
 800efa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efac:	3a30      	subs	r2, #48	@ 0x30
 800efae:	2a09      	cmp	r2, #9
 800efb0:	d903      	bls.n	800efba <_svfiprintf_r+0x1a6>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0c6      	beq.n	800ef44 <_svfiprintf_r+0x130>
 800efb6:	9105      	str	r1, [sp, #20]
 800efb8:	e7c4      	b.n	800ef44 <_svfiprintf_r+0x130>
 800efba:	4604      	mov	r4, r0
 800efbc:	2301      	movs	r3, #1
 800efbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800efc2:	e7f0      	b.n	800efa6 <_svfiprintf_r+0x192>
 800efc4:	ab03      	add	r3, sp, #12
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	462a      	mov	r2, r5
 800efca:	4638      	mov	r0, r7
 800efcc:	4b0e      	ldr	r3, [pc, #56]	@ (800f008 <_svfiprintf_r+0x1f4>)
 800efce:	a904      	add	r1, sp, #16
 800efd0:	f7fc fd26 	bl	800ba20 <_printf_float>
 800efd4:	1c42      	adds	r2, r0, #1
 800efd6:	4606      	mov	r6, r0
 800efd8:	d1d6      	bne.n	800ef88 <_svfiprintf_r+0x174>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	065b      	lsls	r3, r3, #25
 800efde:	f53f af2d 	bmi.w	800ee3c <_svfiprintf_r+0x28>
 800efe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efe4:	e72c      	b.n	800ee40 <_svfiprintf_r+0x2c>
 800efe6:	ab03      	add	r3, sp, #12
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	462a      	mov	r2, r5
 800efec:	4638      	mov	r0, r7
 800efee:	4b06      	ldr	r3, [pc, #24]	@ (800f008 <_svfiprintf_r+0x1f4>)
 800eff0:	a904      	add	r1, sp, #16
 800eff2:	f7fc ffb3 	bl	800bf5c <_printf_i>
 800eff6:	e7ed      	b.n	800efd4 <_svfiprintf_r+0x1c0>
 800eff8:	08010d88 	.word	0x08010d88
 800effc:	08010d8e 	.word	0x08010d8e
 800f000:	08010d92 	.word	0x08010d92
 800f004:	0800ba21 	.word	0x0800ba21
 800f008:	0800ed5d 	.word	0x0800ed5d

0800f00c <__sfputc_r>:
 800f00c:	6893      	ldr	r3, [r2, #8]
 800f00e:	b410      	push	{r4}
 800f010:	3b01      	subs	r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	6093      	str	r3, [r2, #8]
 800f016:	da07      	bge.n	800f028 <__sfputc_r+0x1c>
 800f018:	6994      	ldr	r4, [r2, #24]
 800f01a:	42a3      	cmp	r3, r4
 800f01c:	db01      	blt.n	800f022 <__sfputc_r+0x16>
 800f01e:	290a      	cmp	r1, #10
 800f020:	d102      	bne.n	800f028 <__sfputc_r+0x1c>
 800f022:	bc10      	pop	{r4}
 800f024:	f000 b9da 	b.w	800f3dc <__swbuf_r>
 800f028:	6813      	ldr	r3, [r2, #0]
 800f02a:	1c58      	adds	r0, r3, #1
 800f02c:	6010      	str	r0, [r2, #0]
 800f02e:	7019      	strb	r1, [r3, #0]
 800f030:	4608      	mov	r0, r1
 800f032:	bc10      	pop	{r4}
 800f034:	4770      	bx	lr

0800f036 <__sfputs_r>:
 800f036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f038:	4606      	mov	r6, r0
 800f03a:	460f      	mov	r7, r1
 800f03c:	4614      	mov	r4, r2
 800f03e:	18d5      	adds	r5, r2, r3
 800f040:	42ac      	cmp	r4, r5
 800f042:	d101      	bne.n	800f048 <__sfputs_r+0x12>
 800f044:	2000      	movs	r0, #0
 800f046:	e007      	b.n	800f058 <__sfputs_r+0x22>
 800f048:	463a      	mov	r2, r7
 800f04a:	4630      	mov	r0, r6
 800f04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f050:	f7ff ffdc 	bl	800f00c <__sfputc_r>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d1f3      	bne.n	800f040 <__sfputs_r+0xa>
 800f058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f05c <_vfiprintf_r>:
 800f05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	460d      	mov	r5, r1
 800f062:	4614      	mov	r4, r2
 800f064:	4698      	mov	r8, r3
 800f066:	4606      	mov	r6, r0
 800f068:	b09d      	sub	sp, #116	@ 0x74
 800f06a:	b118      	cbz	r0, 800f074 <_vfiprintf_r+0x18>
 800f06c:	6a03      	ldr	r3, [r0, #32]
 800f06e:	b90b      	cbnz	r3, 800f074 <_vfiprintf_r+0x18>
 800f070:	f7fd fb30 	bl	800c6d4 <__sinit>
 800f074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d405      	bmi.n	800f086 <_vfiprintf_r+0x2a>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d402      	bmi.n	800f086 <_vfiprintf_r+0x2a>
 800f080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f082:	f7fd fc50 	bl	800c926 <__retarget_lock_acquire_recursive>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	071b      	lsls	r3, r3, #28
 800f08a:	d501      	bpl.n	800f090 <_vfiprintf_r+0x34>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	b99b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x5c>
 800f090:	4629      	mov	r1, r5
 800f092:	4630      	mov	r0, r6
 800f094:	f000 f9e0 	bl	800f458 <__swsetup_r>
 800f098:	b170      	cbz	r0, 800f0b8 <_vfiprintf_r+0x5c>
 800f09a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f09c:	07dc      	lsls	r4, r3, #31
 800f09e:	d504      	bpl.n	800f0aa <_vfiprintf_r+0x4e>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a4:	b01d      	add	sp, #116	@ 0x74
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	89ab      	ldrh	r3, [r5, #12]
 800f0ac:	0598      	lsls	r0, r3, #22
 800f0ae:	d4f7      	bmi.n	800f0a0 <_vfiprintf_r+0x44>
 800f0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0b2:	f7fd fc39 	bl	800c928 <__retarget_lock_release_recursive>
 800f0b6:	e7f3      	b.n	800f0a0 <_vfiprintf_r+0x44>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0c2:	2330      	movs	r3, #48	@ 0x30
 800f0c4:	f04f 0901 	mov.w	r9, #1
 800f0c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f278 <_vfiprintf_r+0x21c>
 800f0d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0d4:	4623      	mov	r3, r4
 800f0d6:	469a      	mov	sl, r3
 800f0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0dc:	b10a      	cbz	r2, 800f0e2 <_vfiprintf_r+0x86>
 800f0de:	2a25      	cmp	r2, #37	@ 0x25
 800f0e0:	d1f9      	bne.n	800f0d6 <_vfiprintf_r+0x7a>
 800f0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e6:	d00b      	beq.n	800f100 <_vfiprintf_r+0xa4>
 800f0e8:	465b      	mov	r3, fp
 800f0ea:	4622      	mov	r2, r4
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f7ff ffa1 	bl	800f036 <__sfputs_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	f000 80a7 	beq.w	800f248 <_vfiprintf_r+0x1ec>
 800f0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0fc:	445a      	add	r2, fp
 800f0fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800f100:	f89a 3000 	ldrb.w	r3, [sl]
 800f104:	2b00      	cmp	r3, #0
 800f106:	f000 809f 	beq.w	800f248 <_vfiprintf_r+0x1ec>
 800f10a:	2300      	movs	r3, #0
 800f10c:	f04f 32ff 	mov.w	r2, #4294967295
 800f110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f114:	f10a 0a01 	add.w	sl, sl, #1
 800f118:	9304      	str	r3, [sp, #16]
 800f11a:	9307      	str	r3, [sp, #28]
 800f11c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f120:	931a      	str	r3, [sp, #104]	@ 0x68
 800f122:	4654      	mov	r4, sl
 800f124:	2205      	movs	r2, #5
 800f126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12a:	4853      	ldr	r0, [pc, #332]	@ (800f278 <_vfiprintf_r+0x21c>)
 800f12c:	f7fd fbfd 	bl	800c92a <memchr>
 800f130:	9a04      	ldr	r2, [sp, #16]
 800f132:	b9d8      	cbnz	r0, 800f16c <_vfiprintf_r+0x110>
 800f134:	06d1      	lsls	r1, r2, #27
 800f136:	bf44      	itt	mi
 800f138:	2320      	movmi	r3, #32
 800f13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f13e:	0713      	lsls	r3, r2, #28
 800f140:	bf44      	itt	mi
 800f142:	232b      	movmi	r3, #43	@ 0x2b
 800f144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f148:	f89a 3000 	ldrb.w	r3, [sl]
 800f14c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f14e:	d015      	beq.n	800f17c <_vfiprintf_r+0x120>
 800f150:	4654      	mov	r4, sl
 800f152:	2000      	movs	r0, #0
 800f154:	f04f 0c0a 	mov.w	ip, #10
 800f158:	9a07      	ldr	r2, [sp, #28]
 800f15a:	4621      	mov	r1, r4
 800f15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f160:	3b30      	subs	r3, #48	@ 0x30
 800f162:	2b09      	cmp	r3, #9
 800f164:	d94b      	bls.n	800f1fe <_vfiprintf_r+0x1a2>
 800f166:	b1b0      	cbz	r0, 800f196 <_vfiprintf_r+0x13a>
 800f168:	9207      	str	r2, [sp, #28]
 800f16a:	e014      	b.n	800f196 <_vfiprintf_r+0x13a>
 800f16c:	eba0 0308 	sub.w	r3, r0, r8
 800f170:	fa09 f303 	lsl.w	r3, r9, r3
 800f174:	4313      	orrs	r3, r2
 800f176:	46a2      	mov	sl, r4
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	e7d2      	b.n	800f122 <_vfiprintf_r+0xc6>
 800f17c:	9b03      	ldr	r3, [sp, #12]
 800f17e:	1d19      	adds	r1, r3, #4
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	9103      	str	r1, [sp, #12]
 800f184:	2b00      	cmp	r3, #0
 800f186:	bfbb      	ittet	lt
 800f188:	425b      	neglt	r3, r3
 800f18a:	f042 0202 	orrlt.w	r2, r2, #2
 800f18e:	9307      	strge	r3, [sp, #28]
 800f190:	9307      	strlt	r3, [sp, #28]
 800f192:	bfb8      	it	lt
 800f194:	9204      	strlt	r2, [sp, #16]
 800f196:	7823      	ldrb	r3, [r4, #0]
 800f198:	2b2e      	cmp	r3, #46	@ 0x2e
 800f19a:	d10a      	bne.n	800f1b2 <_vfiprintf_r+0x156>
 800f19c:	7863      	ldrb	r3, [r4, #1]
 800f19e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1a0:	d132      	bne.n	800f208 <_vfiprintf_r+0x1ac>
 800f1a2:	9b03      	ldr	r3, [sp, #12]
 800f1a4:	3402      	adds	r4, #2
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9203      	str	r2, [sp, #12]
 800f1ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1b0:	9305      	str	r3, [sp, #20]
 800f1b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f27c <_vfiprintf_r+0x220>
 800f1b6:	2203      	movs	r2, #3
 800f1b8:	4650      	mov	r0, sl
 800f1ba:	7821      	ldrb	r1, [r4, #0]
 800f1bc:	f7fd fbb5 	bl	800c92a <memchr>
 800f1c0:	b138      	cbz	r0, 800f1d2 <_vfiprintf_r+0x176>
 800f1c2:	2240      	movs	r2, #64	@ 0x40
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	eba0 000a 	sub.w	r0, r0, sl
 800f1ca:	4082      	lsls	r2, r0
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	3401      	adds	r4, #1
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d6:	2206      	movs	r2, #6
 800f1d8:	4829      	ldr	r0, [pc, #164]	@ (800f280 <_vfiprintf_r+0x224>)
 800f1da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1de:	f7fd fba4 	bl	800c92a <memchr>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d03f      	beq.n	800f266 <_vfiprintf_r+0x20a>
 800f1e6:	4b27      	ldr	r3, [pc, #156]	@ (800f284 <_vfiprintf_r+0x228>)
 800f1e8:	bb1b      	cbnz	r3, 800f232 <_vfiprintf_r+0x1d6>
 800f1ea:	9b03      	ldr	r3, [sp, #12]
 800f1ec:	3307      	adds	r3, #7
 800f1ee:	f023 0307 	bic.w	r3, r3, #7
 800f1f2:	3308      	adds	r3, #8
 800f1f4:	9303      	str	r3, [sp, #12]
 800f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f8:	443b      	add	r3, r7
 800f1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1fc:	e76a      	b.n	800f0d4 <_vfiprintf_r+0x78>
 800f1fe:	460c      	mov	r4, r1
 800f200:	2001      	movs	r0, #1
 800f202:	fb0c 3202 	mla	r2, ip, r2, r3
 800f206:	e7a8      	b.n	800f15a <_vfiprintf_r+0xfe>
 800f208:	2300      	movs	r3, #0
 800f20a:	f04f 0c0a 	mov.w	ip, #10
 800f20e:	4619      	mov	r1, r3
 800f210:	3401      	adds	r4, #1
 800f212:	9305      	str	r3, [sp, #20]
 800f214:	4620      	mov	r0, r4
 800f216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f21a:	3a30      	subs	r2, #48	@ 0x30
 800f21c:	2a09      	cmp	r2, #9
 800f21e:	d903      	bls.n	800f228 <_vfiprintf_r+0x1cc>
 800f220:	2b00      	cmp	r3, #0
 800f222:	d0c6      	beq.n	800f1b2 <_vfiprintf_r+0x156>
 800f224:	9105      	str	r1, [sp, #20]
 800f226:	e7c4      	b.n	800f1b2 <_vfiprintf_r+0x156>
 800f228:	4604      	mov	r4, r0
 800f22a:	2301      	movs	r3, #1
 800f22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f230:	e7f0      	b.n	800f214 <_vfiprintf_r+0x1b8>
 800f232:	ab03      	add	r3, sp, #12
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	462a      	mov	r2, r5
 800f238:	4630      	mov	r0, r6
 800f23a:	4b13      	ldr	r3, [pc, #76]	@ (800f288 <_vfiprintf_r+0x22c>)
 800f23c:	a904      	add	r1, sp, #16
 800f23e:	f7fc fbef 	bl	800ba20 <_printf_float>
 800f242:	4607      	mov	r7, r0
 800f244:	1c78      	adds	r0, r7, #1
 800f246:	d1d6      	bne.n	800f1f6 <_vfiprintf_r+0x19a>
 800f248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f24a:	07d9      	lsls	r1, r3, #31
 800f24c:	d405      	bmi.n	800f25a <_vfiprintf_r+0x1fe>
 800f24e:	89ab      	ldrh	r3, [r5, #12]
 800f250:	059a      	lsls	r2, r3, #22
 800f252:	d402      	bmi.n	800f25a <_vfiprintf_r+0x1fe>
 800f254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f256:	f7fd fb67 	bl	800c928 <__retarget_lock_release_recursive>
 800f25a:	89ab      	ldrh	r3, [r5, #12]
 800f25c:	065b      	lsls	r3, r3, #25
 800f25e:	f53f af1f 	bmi.w	800f0a0 <_vfiprintf_r+0x44>
 800f262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f264:	e71e      	b.n	800f0a4 <_vfiprintf_r+0x48>
 800f266:	ab03      	add	r3, sp, #12
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	462a      	mov	r2, r5
 800f26c:	4630      	mov	r0, r6
 800f26e:	4b06      	ldr	r3, [pc, #24]	@ (800f288 <_vfiprintf_r+0x22c>)
 800f270:	a904      	add	r1, sp, #16
 800f272:	f7fc fe73 	bl	800bf5c <_printf_i>
 800f276:	e7e4      	b.n	800f242 <_vfiprintf_r+0x1e6>
 800f278:	08010d88 	.word	0x08010d88
 800f27c:	08010d8e 	.word	0x08010d8e
 800f280:	08010d92 	.word	0x08010d92
 800f284:	0800ba21 	.word	0x0800ba21
 800f288:	0800f037 	.word	0x0800f037

0800f28c <__sflush_r>:
 800f28c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	0716      	lsls	r6, r2, #28
 800f294:	4605      	mov	r5, r0
 800f296:	460c      	mov	r4, r1
 800f298:	d454      	bmi.n	800f344 <__sflush_r+0xb8>
 800f29a:	684b      	ldr	r3, [r1, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dc02      	bgt.n	800f2a6 <__sflush_r+0x1a>
 800f2a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	dd48      	ble.n	800f338 <__sflush_r+0xac>
 800f2a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2a8:	2e00      	cmp	r6, #0
 800f2aa:	d045      	beq.n	800f338 <__sflush_r+0xac>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2b2:	682f      	ldr	r7, [r5, #0]
 800f2b4:	6a21      	ldr	r1, [r4, #32]
 800f2b6:	602b      	str	r3, [r5, #0]
 800f2b8:	d030      	beq.n	800f31c <__sflush_r+0x90>
 800f2ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	0759      	lsls	r1, r3, #29
 800f2c0:	d505      	bpl.n	800f2ce <__sflush_r+0x42>
 800f2c2:	6863      	ldr	r3, [r4, #4]
 800f2c4:	1ad2      	subs	r2, r2, r3
 800f2c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2c8:	b10b      	cbz	r3, 800f2ce <__sflush_r+0x42>
 800f2ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2cc:	1ad2      	subs	r2, r2, r3
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2d4:	6a21      	ldr	r1, [r4, #32]
 800f2d6:	47b0      	blx	r6
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	89a3      	ldrh	r3, [r4, #12]
 800f2dc:	d106      	bne.n	800f2ec <__sflush_r+0x60>
 800f2de:	6829      	ldr	r1, [r5, #0]
 800f2e0:	291d      	cmp	r1, #29
 800f2e2:	d82b      	bhi.n	800f33c <__sflush_r+0xb0>
 800f2e4:	4a28      	ldr	r2, [pc, #160]	@ (800f388 <__sflush_r+0xfc>)
 800f2e6:	410a      	asrs	r2, r1
 800f2e8:	07d6      	lsls	r6, r2, #31
 800f2ea:	d427      	bmi.n	800f33c <__sflush_r+0xb0>
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	6062      	str	r2, [r4, #4]
 800f2f0:	6922      	ldr	r2, [r4, #16]
 800f2f2:	04d9      	lsls	r1, r3, #19
 800f2f4:	6022      	str	r2, [r4, #0]
 800f2f6:	d504      	bpl.n	800f302 <__sflush_r+0x76>
 800f2f8:	1c42      	adds	r2, r0, #1
 800f2fa:	d101      	bne.n	800f300 <__sflush_r+0x74>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b903      	cbnz	r3, 800f302 <__sflush_r+0x76>
 800f300:	6560      	str	r0, [r4, #84]	@ 0x54
 800f302:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f304:	602f      	str	r7, [r5, #0]
 800f306:	b1b9      	cbz	r1, 800f338 <__sflush_r+0xac>
 800f308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f30c:	4299      	cmp	r1, r3
 800f30e:	d002      	beq.n	800f316 <__sflush_r+0x8a>
 800f310:	4628      	mov	r0, r5
 800f312:	f7fe f97d 	bl	800d610 <_free_r>
 800f316:	2300      	movs	r3, #0
 800f318:	6363      	str	r3, [r4, #52]	@ 0x34
 800f31a:	e00d      	b.n	800f338 <__sflush_r+0xac>
 800f31c:	2301      	movs	r3, #1
 800f31e:	4628      	mov	r0, r5
 800f320:	47b0      	blx	r6
 800f322:	4602      	mov	r2, r0
 800f324:	1c50      	adds	r0, r2, #1
 800f326:	d1c9      	bne.n	800f2bc <__sflush_r+0x30>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0c6      	beq.n	800f2bc <__sflush_r+0x30>
 800f32e:	2b1d      	cmp	r3, #29
 800f330:	d001      	beq.n	800f336 <__sflush_r+0xaa>
 800f332:	2b16      	cmp	r3, #22
 800f334:	d11d      	bne.n	800f372 <__sflush_r+0xe6>
 800f336:	602f      	str	r7, [r5, #0]
 800f338:	2000      	movs	r0, #0
 800f33a:	e021      	b.n	800f380 <__sflush_r+0xf4>
 800f33c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f340:	b21b      	sxth	r3, r3
 800f342:	e01a      	b.n	800f37a <__sflush_r+0xee>
 800f344:	690f      	ldr	r7, [r1, #16]
 800f346:	2f00      	cmp	r7, #0
 800f348:	d0f6      	beq.n	800f338 <__sflush_r+0xac>
 800f34a:	0793      	lsls	r3, r2, #30
 800f34c:	bf18      	it	ne
 800f34e:	2300      	movne	r3, #0
 800f350:	680e      	ldr	r6, [r1, #0]
 800f352:	bf08      	it	eq
 800f354:	694b      	ldreq	r3, [r1, #20]
 800f356:	1bf6      	subs	r6, r6, r7
 800f358:	600f      	str	r7, [r1, #0]
 800f35a:	608b      	str	r3, [r1, #8]
 800f35c:	2e00      	cmp	r6, #0
 800f35e:	ddeb      	ble.n	800f338 <__sflush_r+0xac>
 800f360:	4633      	mov	r3, r6
 800f362:	463a      	mov	r2, r7
 800f364:	4628      	mov	r0, r5
 800f366:	6a21      	ldr	r1, [r4, #32]
 800f368:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800f36c:	47e0      	blx	ip
 800f36e:	2800      	cmp	r0, #0
 800f370:	dc07      	bgt.n	800f382 <__sflush_r+0xf6>
 800f372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f37a:	f04f 30ff 	mov.w	r0, #4294967295
 800f37e:	81a3      	strh	r3, [r4, #12]
 800f380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f382:	4407      	add	r7, r0
 800f384:	1a36      	subs	r6, r6, r0
 800f386:	e7e9      	b.n	800f35c <__sflush_r+0xd0>
 800f388:	dfbffffe 	.word	0xdfbffffe

0800f38c <_fflush_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	690b      	ldr	r3, [r1, #16]
 800f390:	4605      	mov	r5, r0
 800f392:	460c      	mov	r4, r1
 800f394:	b913      	cbnz	r3, 800f39c <_fflush_r+0x10>
 800f396:	2500      	movs	r5, #0
 800f398:	4628      	mov	r0, r5
 800f39a:	bd38      	pop	{r3, r4, r5, pc}
 800f39c:	b118      	cbz	r0, 800f3a6 <_fflush_r+0x1a>
 800f39e:	6a03      	ldr	r3, [r0, #32]
 800f3a0:	b90b      	cbnz	r3, 800f3a6 <_fflush_r+0x1a>
 800f3a2:	f7fd f997 	bl	800c6d4 <__sinit>
 800f3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0f3      	beq.n	800f396 <_fflush_r+0xa>
 800f3ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3b0:	07d0      	lsls	r0, r2, #31
 800f3b2:	d404      	bmi.n	800f3be <_fflush_r+0x32>
 800f3b4:	0599      	lsls	r1, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_fflush_r+0x32>
 800f3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ba:	f7fd fab4 	bl	800c926 <__retarget_lock_acquire_recursive>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	f7ff ff63 	bl	800f28c <__sflush_r>
 800f3c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3c8:	4605      	mov	r5, r0
 800f3ca:	07da      	lsls	r2, r3, #31
 800f3cc:	d4e4      	bmi.n	800f398 <_fflush_r+0xc>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	059b      	lsls	r3, r3, #22
 800f3d2:	d4e1      	bmi.n	800f398 <_fflush_r+0xc>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3d6:	f7fd faa7 	bl	800c928 <__retarget_lock_release_recursive>
 800f3da:	e7dd      	b.n	800f398 <_fflush_r+0xc>

0800f3dc <__swbuf_r>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	460e      	mov	r6, r1
 800f3e0:	4614      	mov	r4, r2
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	b118      	cbz	r0, 800f3ee <__swbuf_r+0x12>
 800f3e6:	6a03      	ldr	r3, [r0, #32]
 800f3e8:	b90b      	cbnz	r3, 800f3ee <__swbuf_r+0x12>
 800f3ea:	f7fd f973 	bl	800c6d4 <__sinit>
 800f3ee:	69a3      	ldr	r3, [r4, #24]
 800f3f0:	60a3      	str	r3, [r4, #8]
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	071a      	lsls	r2, r3, #28
 800f3f6:	d501      	bpl.n	800f3fc <__swbuf_r+0x20>
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	b943      	cbnz	r3, 800f40e <__swbuf_r+0x32>
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 f82a 	bl	800f458 <__swsetup_r>
 800f404:	b118      	cbz	r0, 800f40e <__swbuf_r+0x32>
 800f406:	f04f 37ff 	mov.w	r7, #4294967295
 800f40a:	4638      	mov	r0, r7
 800f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	6922      	ldr	r2, [r4, #16]
 800f412:	b2f6      	uxtb	r6, r6
 800f414:	1a98      	subs	r0, r3, r2
 800f416:	6963      	ldr	r3, [r4, #20]
 800f418:	4637      	mov	r7, r6
 800f41a:	4283      	cmp	r3, r0
 800f41c:	dc05      	bgt.n	800f42a <__swbuf_r+0x4e>
 800f41e:	4621      	mov	r1, r4
 800f420:	4628      	mov	r0, r5
 800f422:	f7ff ffb3 	bl	800f38c <_fflush_r>
 800f426:	2800      	cmp	r0, #0
 800f428:	d1ed      	bne.n	800f406 <__swbuf_r+0x2a>
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	60a3      	str	r3, [r4, #8]
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	1c5a      	adds	r2, r3, #1
 800f434:	6022      	str	r2, [r4, #0]
 800f436:	701e      	strb	r6, [r3, #0]
 800f438:	6962      	ldr	r2, [r4, #20]
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d004      	beq.n	800f44a <__swbuf_r+0x6e>
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	07db      	lsls	r3, r3, #31
 800f444:	d5e1      	bpl.n	800f40a <__swbuf_r+0x2e>
 800f446:	2e0a      	cmp	r6, #10
 800f448:	d1df      	bne.n	800f40a <__swbuf_r+0x2e>
 800f44a:	4621      	mov	r1, r4
 800f44c:	4628      	mov	r0, r5
 800f44e:	f7ff ff9d 	bl	800f38c <_fflush_r>
 800f452:	2800      	cmp	r0, #0
 800f454:	d0d9      	beq.n	800f40a <__swbuf_r+0x2e>
 800f456:	e7d6      	b.n	800f406 <__swbuf_r+0x2a>

0800f458 <__swsetup_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4b29      	ldr	r3, [pc, #164]	@ (800f500 <__swsetup_r+0xa8>)
 800f45c:	4605      	mov	r5, r0
 800f45e:	6818      	ldr	r0, [r3, #0]
 800f460:	460c      	mov	r4, r1
 800f462:	b118      	cbz	r0, 800f46c <__swsetup_r+0x14>
 800f464:	6a03      	ldr	r3, [r0, #32]
 800f466:	b90b      	cbnz	r3, 800f46c <__swsetup_r+0x14>
 800f468:	f7fd f934 	bl	800c6d4 <__sinit>
 800f46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f470:	0719      	lsls	r1, r3, #28
 800f472:	d422      	bmi.n	800f4ba <__swsetup_r+0x62>
 800f474:	06da      	lsls	r2, r3, #27
 800f476:	d407      	bmi.n	800f488 <__swsetup_r+0x30>
 800f478:	2209      	movs	r2, #9
 800f47a:	602a      	str	r2, [r5, #0]
 800f47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	81a3      	strh	r3, [r4, #12]
 800f486:	e033      	b.n	800f4f0 <__swsetup_r+0x98>
 800f488:	0758      	lsls	r0, r3, #29
 800f48a:	d512      	bpl.n	800f4b2 <__swsetup_r+0x5a>
 800f48c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f48e:	b141      	cbz	r1, 800f4a2 <__swsetup_r+0x4a>
 800f490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f494:	4299      	cmp	r1, r3
 800f496:	d002      	beq.n	800f49e <__swsetup_r+0x46>
 800f498:	4628      	mov	r0, r5
 800f49a:	f7fe f8b9 	bl	800d610 <_free_r>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6063      	str	r3, [r4, #4]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	f043 0308 	orr.w	r3, r3, #8
 800f4b8:	81a3      	strh	r3, [r4, #12]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	b94b      	cbnz	r3, 800f4d2 <__swsetup_r+0x7a>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4c8:	d003      	beq.n	800f4d2 <__swsetup_r+0x7a>
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f000 fc4a 	bl	800fd66 <__smakebuf_r>
 800f4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4d6:	f013 0201 	ands.w	r2, r3, #1
 800f4da:	d00a      	beq.n	800f4f2 <__swsetup_r+0x9a>
 800f4dc:	2200      	movs	r2, #0
 800f4de:	60a2      	str	r2, [r4, #8]
 800f4e0:	6962      	ldr	r2, [r4, #20]
 800f4e2:	4252      	negs	r2, r2
 800f4e4:	61a2      	str	r2, [r4, #24]
 800f4e6:	6922      	ldr	r2, [r4, #16]
 800f4e8:	b942      	cbnz	r2, 800f4fc <__swsetup_r+0xa4>
 800f4ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4ee:	d1c5      	bne.n	800f47c <__swsetup_r+0x24>
 800f4f0:	bd38      	pop	{r3, r4, r5, pc}
 800f4f2:	0799      	lsls	r1, r3, #30
 800f4f4:	bf58      	it	pl
 800f4f6:	6962      	ldrpl	r2, [r4, #20]
 800f4f8:	60a2      	str	r2, [r4, #8]
 800f4fa:	e7f4      	b.n	800f4e6 <__swsetup_r+0x8e>
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e7f7      	b.n	800f4f0 <__swsetup_r+0x98>
 800f500:	20000050 	.word	0x20000050

0800f504 <memmove>:
 800f504:	4288      	cmp	r0, r1
 800f506:	b510      	push	{r4, lr}
 800f508:	eb01 0402 	add.w	r4, r1, r2
 800f50c:	d902      	bls.n	800f514 <memmove+0x10>
 800f50e:	4284      	cmp	r4, r0
 800f510:	4623      	mov	r3, r4
 800f512:	d807      	bhi.n	800f524 <memmove+0x20>
 800f514:	1e43      	subs	r3, r0, #1
 800f516:	42a1      	cmp	r1, r4
 800f518:	d008      	beq.n	800f52c <memmove+0x28>
 800f51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f522:	e7f8      	b.n	800f516 <memmove+0x12>
 800f524:	4601      	mov	r1, r0
 800f526:	4402      	add	r2, r0
 800f528:	428a      	cmp	r2, r1
 800f52a:	d100      	bne.n	800f52e <memmove+0x2a>
 800f52c:	bd10      	pop	{r4, pc}
 800f52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f536:	e7f7      	b.n	800f528 <memmove+0x24>

0800f538 <strncmp>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	b16a      	cbz	r2, 800f558 <strncmp+0x20>
 800f53c:	3901      	subs	r1, #1
 800f53e:	1884      	adds	r4, r0, r2
 800f540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f548:	429a      	cmp	r2, r3
 800f54a:	d103      	bne.n	800f554 <strncmp+0x1c>
 800f54c:	42a0      	cmp	r0, r4
 800f54e:	d001      	beq.n	800f554 <strncmp+0x1c>
 800f550:	2a00      	cmp	r2, #0
 800f552:	d1f5      	bne.n	800f540 <strncmp+0x8>
 800f554:	1ad0      	subs	r0, r2, r3
 800f556:	bd10      	pop	{r4, pc}
 800f558:	4610      	mov	r0, r2
 800f55a:	e7fc      	b.n	800f556 <strncmp+0x1e>

0800f55c <_sbrk_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	2300      	movs	r3, #0
 800f560:	4d05      	ldr	r5, [pc, #20]	@ (800f578 <_sbrk_r+0x1c>)
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	f7f5 f9b6 	bl	80048d8 <_sbrk>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_sbrk_r+0x1a>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_sbrk_r+0x1a>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	20000ad4 	.word	0x20000ad4

0800f57c <nan>:
 800f57c:	2000      	movs	r0, #0
 800f57e:	4901      	ldr	r1, [pc, #4]	@ (800f584 <nan+0x8>)
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	7ff80000 	.word	0x7ff80000

0800f588 <__assert_func>:
 800f588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f58a:	4614      	mov	r4, r2
 800f58c:	461a      	mov	r2, r3
 800f58e:	4b09      	ldr	r3, [pc, #36]	@ (800f5b4 <__assert_func+0x2c>)
 800f590:	4605      	mov	r5, r0
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68d8      	ldr	r0, [r3, #12]
 800f596:	b954      	cbnz	r4, 800f5ae <__assert_func+0x26>
 800f598:	4b07      	ldr	r3, [pc, #28]	@ (800f5b8 <__assert_func+0x30>)
 800f59a:	461c      	mov	r4, r3
 800f59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5a0:	9100      	str	r1, [sp, #0]
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	4905      	ldr	r1, [pc, #20]	@ (800f5bc <__assert_func+0x34>)
 800f5a6:	f000 fba7 	bl	800fcf8 <fiprintf>
 800f5aa:	f000 fc3b 	bl	800fe24 <abort>
 800f5ae:	4b04      	ldr	r3, [pc, #16]	@ (800f5c0 <__assert_func+0x38>)
 800f5b0:	e7f4      	b.n	800f59c <__assert_func+0x14>
 800f5b2:	bf00      	nop
 800f5b4:	20000050 	.word	0x20000050
 800f5b8:	08010ddc 	.word	0x08010ddc
 800f5bc:	08010dae 	.word	0x08010dae
 800f5c0:	08010da1 	.word	0x08010da1

0800f5c4 <_calloc_r>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800f5ca:	b93c      	cbnz	r4, 800f5dc <_calloc_r+0x18>
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	f7fe f891 	bl	800d6f4 <_malloc_r>
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	b928      	cbnz	r0, 800f5e2 <_calloc_r+0x1e>
 800f5d6:	2600      	movs	r6, #0
 800f5d8:	4630      	mov	r0, r6
 800f5da:	bd70      	pop	{r4, r5, r6, pc}
 800f5dc:	220c      	movs	r2, #12
 800f5de:	6002      	str	r2, [r0, #0]
 800f5e0:	e7f9      	b.n	800f5d6 <_calloc_r+0x12>
 800f5e2:	462a      	mov	r2, r5
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	f7fd f920 	bl	800c82a <memset>
 800f5ea:	e7f5      	b.n	800f5d8 <_calloc_r+0x14>

0800f5ec <rshift>:
 800f5ec:	6903      	ldr	r3, [r0, #16]
 800f5ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f5f6:	f100 0414 	add.w	r4, r0, #20
 800f5fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f5fe:	dd46      	ble.n	800f68e <rshift+0xa2>
 800f600:	f011 011f 	ands.w	r1, r1, #31
 800f604:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f608:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f60c:	d10c      	bne.n	800f628 <rshift+0x3c>
 800f60e:	4629      	mov	r1, r5
 800f610:	f100 0710 	add.w	r7, r0, #16
 800f614:	42b1      	cmp	r1, r6
 800f616:	d335      	bcc.n	800f684 <rshift+0x98>
 800f618:	1a9b      	subs	r3, r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	1eea      	subs	r2, r5, #3
 800f61e:	4296      	cmp	r6, r2
 800f620:	bf38      	it	cc
 800f622:	2300      	movcc	r3, #0
 800f624:	4423      	add	r3, r4
 800f626:	e015      	b.n	800f654 <rshift+0x68>
 800f628:	46a1      	mov	r9, r4
 800f62a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f62e:	f1c1 0820 	rsb	r8, r1, #32
 800f632:	40cf      	lsrs	r7, r1
 800f634:	f105 0e04 	add.w	lr, r5, #4
 800f638:	4576      	cmp	r6, lr
 800f63a:	46f4      	mov	ip, lr
 800f63c:	d816      	bhi.n	800f66c <rshift+0x80>
 800f63e:	1a9a      	subs	r2, r3, r2
 800f640:	0092      	lsls	r2, r2, #2
 800f642:	3a04      	subs	r2, #4
 800f644:	3501      	adds	r5, #1
 800f646:	42ae      	cmp	r6, r5
 800f648:	bf38      	it	cc
 800f64a:	2200      	movcc	r2, #0
 800f64c:	18a3      	adds	r3, r4, r2
 800f64e:	50a7      	str	r7, [r4, r2]
 800f650:	b107      	cbz	r7, 800f654 <rshift+0x68>
 800f652:	3304      	adds	r3, #4
 800f654:	42a3      	cmp	r3, r4
 800f656:	eba3 0204 	sub.w	r2, r3, r4
 800f65a:	bf08      	it	eq
 800f65c:	2300      	moveq	r3, #0
 800f65e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f662:	6102      	str	r2, [r0, #16]
 800f664:	bf08      	it	eq
 800f666:	6143      	streq	r3, [r0, #20]
 800f668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66c:	f8dc c000 	ldr.w	ip, [ip]
 800f670:	fa0c fc08 	lsl.w	ip, ip, r8
 800f674:	ea4c 0707 	orr.w	r7, ip, r7
 800f678:	f849 7b04 	str.w	r7, [r9], #4
 800f67c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f680:	40cf      	lsrs	r7, r1
 800f682:	e7d9      	b.n	800f638 <rshift+0x4c>
 800f684:	f851 cb04 	ldr.w	ip, [r1], #4
 800f688:	f847 cf04 	str.w	ip, [r7, #4]!
 800f68c:	e7c2      	b.n	800f614 <rshift+0x28>
 800f68e:	4623      	mov	r3, r4
 800f690:	e7e0      	b.n	800f654 <rshift+0x68>

0800f692 <__hexdig_fun>:
 800f692:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d802      	bhi.n	800f6a0 <__hexdig_fun+0xe>
 800f69a:	3820      	subs	r0, #32
 800f69c:	b2c0      	uxtb	r0, r0
 800f69e:	4770      	bx	lr
 800f6a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f6a4:	2b05      	cmp	r3, #5
 800f6a6:	d801      	bhi.n	800f6ac <__hexdig_fun+0x1a>
 800f6a8:	3847      	subs	r0, #71	@ 0x47
 800f6aa:	e7f7      	b.n	800f69c <__hexdig_fun+0xa>
 800f6ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f6b0:	2b05      	cmp	r3, #5
 800f6b2:	d801      	bhi.n	800f6b8 <__hexdig_fun+0x26>
 800f6b4:	3827      	subs	r0, #39	@ 0x27
 800f6b6:	e7f1      	b.n	800f69c <__hexdig_fun+0xa>
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	4770      	bx	lr

0800f6bc <__gethex>:
 800f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	468a      	mov	sl, r1
 800f6c2:	4690      	mov	r8, r2
 800f6c4:	b085      	sub	sp, #20
 800f6c6:	9302      	str	r3, [sp, #8]
 800f6c8:	680b      	ldr	r3, [r1, #0]
 800f6ca:	9001      	str	r0, [sp, #4]
 800f6cc:	1c9c      	adds	r4, r3, #2
 800f6ce:	46a1      	mov	r9, r4
 800f6d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f6d4:	2830      	cmp	r0, #48	@ 0x30
 800f6d6:	d0fa      	beq.n	800f6ce <__gethex+0x12>
 800f6d8:	eba9 0303 	sub.w	r3, r9, r3
 800f6dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f6e0:	f7ff ffd7 	bl	800f692 <__hexdig_fun>
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d168      	bne.n	800f7bc <__gethex+0x100>
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	4648      	mov	r0, r9
 800f6ee:	499f      	ldr	r1, [pc, #636]	@ (800f96c <__gethex+0x2b0>)
 800f6f0:	f7ff ff22 	bl	800f538 <strncmp>
 800f6f4:	4607      	mov	r7, r0
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d167      	bne.n	800f7ca <__gethex+0x10e>
 800f6fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f6fe:	4626      	mov	r6, r4
 800f700:	f7ff ffc7 	bl	800f692 <__hexdig_fun>
 800f704:	2800      	cmp	r0, #0
 800f706:	d062      	beq.n	800f7ce <__gethex+0x112>
 800f708:	4623      	mov	r3, r4
 800f70a:	7818      	ldrb	r0, [r3, #0]
 800f70c:	4699      	mov	r9, r3
 800f70e:	2830      	cmp	r0, #48	@ 0x30
 800f710:	f103 0301 	add.w	r3, r3, #1
 800f714:	d0f9      	beq.n	800f70a <__gethex+0x4e>
 800f716:	f7ff ffbc 	bl	800f692 <__hexdig_fun>
 800f71a:	fab0 f580 	clz	r5, r0
 800f71e:	f04f 0b01 	mov.w	fp, #1
 800f722:	096d      	lsrs	r5, r5, #5
 800f724:	464a      	mov	r2, r9
 800f726:	4616      	mov	r6, r2
 800f728:	7830      	ldrb	r0, [r6, #0]
 800f72a:	3201      	adds	r2, #1
 800f72c:	f7ff ffb1 	bl	800f692 <__hexdig_fun>
 800f730:	2800      	cmp	r0, #0
 800f732:	d1f8      	bne.n	800f726 <__gethex+0x6a>
 800f734:	2201      	movs	r2, #1
 800f736:	4630      	mov	r0, r6
 800f738:	498c      	ldr	r1, [pc, #560]	@ (800f96c <__gethex+0x2b0>)
 800f73a:	f7ff fefd 	bl	800f538 <strncmp>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d13f      	bne.n	800f7c2 <__gethex+0x106>
 800f742:	b944      	cbnz	r4, 800f756 <__gethex+0x9a>
 800f744:	1c74      	adds	r4, r6, #1
 800f746:	4622      	mov	r2, r4
 800f748:	4616      	mov	r6, r2
 800f74a:	7830      	ldrb	r0, [r6, #0]
 800f74c:	3201      	adds	r2, #1
 800f74e:	f7ff ffa0 	bl	800f692 <__hexdig_fun>
 800f752:	2800      	cmp	r0, #0
 800f754:	d1f8      	bne.n	800f748 <__gethex+0x8c>
 800f756:	1ba4      	subs	r4, r4, r6
 800f758:	00a7      	lsls	r7, r4, #2
 800f75a:	7833      	ldrb	r3, [r6, #0]
 800f75c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f760:	2b50      	cmp	r3, #80	@ 0x50
 800f762:	d13e      	bne.n	800f7e2 <__gethex+0x126>
 800f764:	7873      	ldrb	r3, [r6, #1]
 800f766:	2b2b      	cmp	r3, #43	@ 0x2b
 800f768:	d033      	beq.n	800f7d2 <__gethex+0x116>
 800f76a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f76c:	d034      	beq.n	800f7d8 <__gethex+0x11c>
 800f76e:	2400      	movs	r4, #0
 800f770:	1c71      	adds	r1, r6, #1
 800f772:	7808      	ldrb	r0, [r1, #0]
 800f774:	f7ff ff8d 	bl	800f692 <__hexdig_fun>
 800f778:	1e43      	subs	r3, r0, #1
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b18      	cmp	r3, #24
 800f77e:	d830      	bhi.n	800f7e2 <__gethex+0x126>
 800f780:	f1a0 0210 	sub.w	r2, r0, #16
 800f784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f788:	f7ff ff83 	bl	800f692 <__hexdig_fun>
 800f78c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f790:	fa5f fc8c 	uxtb.w	ip, ip
 800f794:	f1bc 0f18 	cmp.w	ip, #24
 800f798:	f04f 030a 	mov.w	r3, #10
 800f79c:	d91e      	bls.n	800f7dc <__gethex+0x120>
 800f79e:	b104      	cbz	r4, 800f7a2 <__gethex+0xe6>
 800f7a0:	4252      	negs	r2, r2
 800f7a2:	4417      	add	r7, r2
 800f7a4:	f8ca 1000 	str.w	r1, [sl]
 800f7a8:	b1ed      	cbz	r5, 800f7e6 <__gethex+0x12a>
 800f7aa:	f1bb 0f00 	cmp.w	fp, #0
 800f7ae:	bf0c      	ite	eq
 800f7b0:	2506      	moveq	r5, #6
 800f7b2:	2500      	movne	r5, #0
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	b005      	add	sp, #20
 800f7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7bc:	2500      	movs	r5, #0
 800f7be:	462c      	mov	r4, r5
 800f7c0:	e7b0      	b.n	800f724 <__gethex+0x68>
 800f7c2:	2c00      	cmp	r4, #0
 800f7c4:	d1c7      	bne.n	800f756 <__gethex+0x9a>
 800f7c6:	4627      	mov	r7, r4
 800f7c8:	e7c7      	b.n	800f75a <__gethex+0x9e>
 800f7ca:	464e      	mov	r6, r9
 800f7cc:	462f      	mov	r7, r5
 800f7ce:	2501      	movs	r5, #1
 800f7d0:	e7c3      	b.n	800f75a <__gethex+0x9e>
 800f7d2:	2400      	movs	r4, #0
 800f7d4:	1cb1      	adds	r1, r6, #2
 800f7d6:	e7cc      	b.n	800f772 <__gethex+0xb6>
 800f7d8:	2401      	movs	r4, #1
 800f7da:	e7fb      	b.n	800f7d4 <__gethex+0x118>
 800f7dc:	fb03 0002 	mla	r0, r3, r2, r0
 800f7e0:	e7ce      	b.n	800f780 <__gethex+0xc4>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	e7de      	b.n	800f7a4 <__gethex+0xe8>
 800f7e6:	4629      	mov	r1, r5
 800f7e8:	eba6 0309 	sub.w	r3, r6, r9
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	2b07      	cmp	r3, #7
 800f7f0:	dc0a      	bgt.n	800f808 <__gethex+0x14c>
 800f7f2:	9801      	ldr	r0, [sp, #4]
 800f7f4:	f7fe f80a 	bl	800d80c <_Balloc>
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	b940      	cbnz	r0, 800f80e <__gethex+0x152>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	21e4      	movs	r1, #228	@ 0xe4
 800f800:	4b5b      	ldr	r3, [pc, #364]	@ (800f970 <__gethex+0x2b4>)
 800f802:	485c      	ldr	r0, [pc, #368]	@ (800f974 <__gethex+0x2b8>)
 800f804:	f7ff fec0 	bl	800f588 <__assert_func>
 800f808:	3101      	adds	r1, #1
 800f80a:	105b      	asrs	r3, r3, #1
 800f80c:	e7ef      	b.n	800f7ee <__gethex+0x132>
 800f80e:	2300      	movs	r3, #0
 800f810:	f100 0a14 	add.w	sl, r0, #20
 800f814:	4655      	mov	r5, sl
 800f816:	469b      	mov	fp, r3
 800f818:	45b1      	cmp	r9, r6
 800f81a:	d337      	bcc.n	800f88c <__gethex+0x1d0>
 800f81c:	f845 bb04 	str.w	fp, [r5], #4
 800f820:	eba5 050a 	sub.w	r5, r5, sl
 800f824:	10ad      	asrs	r5, r5, #2
 800f826:	6125      	str	r5, [r4, #16]
 800f828:	4658      	mov	r0, fp
 800f82a:	f7fe f8e1 	bl	800d9f0 <__hi0bits>
 800f82e:	016d      	lsls	r5, r5, #5
 800f830:	f8d8 6000 	ldr.w	r6, [r8]
 800f834:	1a2d      	subs	r5, r5, r0
 800f836:	42b5      	cmp	r5, r6
 800f838:	dd54      	ble.n	800f8e4 <__gethex+0x228>
 800f83a:	1bad      	subs	r5, r5, r6
 800f83c:	4629      	mov	r1, r5
 800f83e:	4620      	mov	r0, r4
 800f840:	f7fe fc69 	bl	800e116 <__any_on>
 800f844:	4681      	mov	r9, r0
 800f846:	b178      	cbz	r0, 800f868 <__gethex+0x1ac>
 800f848:	f04f 0901 	mov.w	r9, #1
 800f84c:	1e6b      	subs	r3, r5, #1
 800f84e:	1159      	asrs	r1, r3, #5
 800f850:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f854:	f003 021f 	and.w	r2, r3, #31
 800f858:	fa09 f202 	lsl.w	r2, r9, r2
 800f85c:	420a      	tst	r2, r1
 800f85e:	d003      	beq.n	800f868 <__gethex+0x1ac>
 800f860:	454b      	cmp	r3, r9
 800f862:	dc36      	bgt.n	800f8d2 <__gethex+0x216>
 800f864:	f04f 0902 	mov.w	r9, #2
 800f868:	4629      	mov	r1, r5
 800f86a:	4620      	mov	r0, r4
 800f86c:	f7ff febe 	bl	800f5ec <rshift>
 800f870:	442f      	add	r7, r5
 800f872:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f876:	42bb      	cmp	r3, r7
 800f878:	da42      	bge.n	800f900 <__gethex+0x244>
 800f87a:	4621      	mov	r1, r4
 800f87c:	9801      	ldr	r0, [sp, #4]
 800f87e:	f7fe f805 	bl	800d88c <_Bfree>
 800f882:	2300      	movs	r3, #0
 800f884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f886:	25a3      	movs	r5, #163	@ 0xa3
 800f888:	6013      	str	r3, [r2, #0]
 800f88a:	e793      	b.n	800f7b4 <__gethex+0xf8>
 800f88c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f890:	2a2e      	cmp	r2, #46	@ 0x2e
 800f892:	d012      	beq.n	800f8ba <__gethex+0x1fe>
 800f894:	2b20      	cmp	r3, #32
 800f896:	d104      	bne.n	800f8a2 <__gethex+0x1e6>
 800f898:	f845 bb04 	str.w	fp, [r5], #4
 800f89c:	f04f 0b00 	mov.w	fp, #0
 800f8a0:	465b      	mov	r3, fp
 800f8a2:	7830      	ldrb	r0, [r6, #0]
 800f8a4:	9303      	str	r3, [sp, #12]
 800f8a6:	f7ff fef4 	bl	800f692 <__hexdig_fun>
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	f000 000f 	and.w	r0, r0, #15
 800f8b0:	4098      	lsls	r0, r3
 800f8b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	e7ae      	b.n	800f818 <__gethex+0x15c>
 800f8ba:	45b1      	cmp	r9, r6
 800f8bc:	d8ea      	bhi.n	800f894 <__gethex+0x1d8>
 800f8be:	2201      	movs	r2, #1
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	492a      	ldr	r1, [pc, #168]	@ (800f96c <__gethex+0x2b0>)
 800f8c4:	9303      	str	r3, [sp, #12]
 800f8c6:	f7ff fe37 	bl	800f538 <strncmp>
 800f8ca:	9b03      	ldr	r3, [sp, #12]
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d1e1      	bne.n	800f894 <__gethex+0x1d8>
 800f8d0:	e7a2      	b.n	800f818 <__gethex+0x15c>
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	1ea9      	subs	r1, r5, #2
 800f8d6:	f7fe fc1e 	bl	800e116 <__any_on>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d0c2      	beq.n	800f864 <__gethex+0x1a8>
 800f8de:	f04f 0903 	mov.w	r9, #3
 800f8e2:	e7c1      	b.n	800f868 <__gethex+0x1ac>
 800f8e4:	da09      	bge.n	800f8fa <__gethex+0x23e>
 800f8e6:	1b75      	subs	r5, r6, r5
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	462a      	mov	r2, r5
 800f8ec:	9801      	ldr	r0, [sp, #4]
 800f8ee:	f7fe f9e3 	bl	800dcb8 <__lshift>
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	1b7f      	subs	r7, r7, r5
 800f8f6:	f100 0a14 	add.w	sl, r0, #20
 800f8fa:	f04f 0900 	mov.w	r9, #0
 800f8fe:	e7b8      	b.n	800f872 <__gethex+0x1b6>
 800f900:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f904:	42bd      	cmp	r5, r7
 800f906:	dd6f      	ble.n	800f9e8 <__gethex+0x32c>
 800f908:	1bed      	subs	r5, r5, r7
 800f90a:	42ae      	cmp	r6, r5
 800f90c:	dc34      	bgt.n	800f978 <__gethex+0x2bc>
 800f90e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d022      	beq.n	800f95c <__gethex+0x2a0>
 800f916:	2b03      	cmp	r3, #3
 800f918:	d024      	beq.n	800f964 <__gethex+0x2a8>
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d115      	bne.n	800f94a <__gethex+0x28e>
 800f91e:	42ae      	cmp	r6, r5
 800f920:	d113      	bne.n	800f94a <__gethex+0x28e>
 800f922:	2e01      	cmp	r6, #1
 800f924:	d10b      	bne.n	800f93e <__gethex+0x282>
 800f926:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f92a:	9a02      	ldr	r2, [sp, #8]
 800f92c:	2562      	movs	r5, #98	@ 0x62
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	2301      	movs	r3, #1
 800f932:	6123      	str	r3, [r4, #16]
 800f934:	f8ca 3000 	str.w	r3, [sl]
 800f938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f93a:	601c      	str	r4, [r3, #0]
 800f93c:	e73a      	b.n	800f7b4 <__gethex+0xf8>
 800f93e:	4620      	mov	r0, r4
 800f940:	1e71      	subs	r1, r6, #1
 800f942:	f7fe fbe8 	bl	800e116 <__any_on>
 800f946:	2800      	cmp	r0, #0
 800f948:	d1ed      	bne.n	800f926 <__gethex+0x26a>
 800f94a:	4621      	mov	r1, r4
 800f94c:	9801      	ldr	r0, [sp, #4]
 800f94e:	f7fd ff9d 	bl	800d88c <_Bfree>
 800f952:	2300      	movs	r3, #0
 800f954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f956:	2550      	movs	r5, #80	@ 0x50
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	e72b      	b.n	800f7b4 <__gethex+0xf8>
 800f95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1f3      	bne.n	800f94a <__gethex+0x28e>
 800f962:	e7e0      	b.n	800f926 <__gethex+0x26a>
 800f964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1dd      	bne.n	800f926 <__gethex+0x26a>
 800f96a:	e7ee      	b.n	800f94a <__gethex+0x28e>
 800f96c:	08010d30 	.word	0x08010d30
 800f970:	08010bc4 	.word	0x08010bc4
 800f974:	08010ddd 	.word	0x08010ddd
 800f978:	1e6f      	subs	r7, r5, #1
 800f97a:	f1b9 0f00 	cmp.w	r9, #0
 800f97e:	d130      	bne.n	800f9e2 <__gethex+0x326>
 800f980:	b127      	cbz	r7, 800f98c <__gethex+0x2d0>
 800f982:	4639      	mov	r1, r7
 800f984:	4620      	mov	r0, r4
 800f986:	f7fe fbc6 	bl	800e116 <__any_on>
 800f98a:	4681      	mov	r9, r0
 800f98c:	2301      	movs	r3, #1
 800f98e:	4629      	mov	r1, r5
 800f990:	1b76      	subs	r6, r6, r5
 800f992:	2502      	movs	r5, #2
 800f994:	117a      	asrs	r2, r7, #5
 800f996:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f99a:	f007 071f 	and.w	r7, r7, #31
 800f99e:	40bb      	lsls	r3, r7
 800f9a0:	4213      	tst	r3, r2
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	bf18      	it	ne
 800f9a6:	f049 0902 	orrne.w	r9, r9, #2
 800f9aa:	f7ff fe1f 	bl	800f5ec <rshift>
 800f9ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f9b2:	f1b9 0f00 	cmp.w	r9, #0
 800f9b6:	d047      	beq.n	800fa48 <__gethex+0x38c>
 800f9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d015      	beq.n	800f9ec <__gethex+0x330>
 800f9c0:	2b03      	cmp	r3, #3
 800f9c2:	d017      	beq.n	800f9f4 <__gethex+0x338>
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d109      	bne.n	800f9dc <__gethex+0x320>
 800f9c8:	f019 0f02 	tst.w	r9, #2
 800f9cc:	d006      	beq.n	800f9dc <__gethex+0x320>
 800f9ce:	f8da 3000 	ldr.w	r3, [sl]
 800f9d2:	ea49 0903 	orr.w	r9, r9, r3
 800f9d6:	f019 0f01 	tst.w	r9, #1
 800f9da:	d10e      	bne.n	800f9fa <__gethex+0x33e>
 800f9dc:	f045 0510 	orr.w	r5, r5, #16
 800f9e0:	e032      	b.n	800fa48 <__gethex+0x38c>
 800f9e2:	f04f 0901 	mov.w	r9, #1
 800f9e6:	e7d1      	b.n	800f98c <__gethex+0x2d0>
 800f9e8:	2501      	movs	r5, #1
 800f9ea:	e7e2      	b.n	800f9b2 <__gethex+0x2f6>
 800f9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9ee:	f1c3 0301 	rsb	r3, r3, #1
 800f9f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d0f0      	beq.n	800f9dc <__gethex+0x320>
 800f9fa:	f04f 0c00 	mov.w	ip, #0
 800f9fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa02:	f104 0314 	add.w	r3, r4, #20
 800fa06:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fa0a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fa18:	d01b      	beq.n	800fa52 <__gethex+0x396>
 800fa1a:	3201      	adds	r2, #1
 800fa1c:	6002      	str	r2, [r0, #0]
 800fa1e:	2d02      	cmp	r5, #2
 800fa20:	f104 0314 	add.w	r3, r4, #20
 800fa24:	d13c      	bne.n	800faa0 <__gethex+0x3e4>
 800fa26:	f8d8 2000 	ldr.w	r2, [r8]
 800fa2a:	3a01      	subs	r2, #1
 800fa2c:	42b2      	cmp	r2, r6
 800fa2e:	d109      	bne.n	800fa44 <__gethex+0x388>
 800fa30:	2201      	movs	r2, #1
 800fa32:	1171      	asrs	r1, r6, #5
 800fa34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa38:	f006 061f 	and.w	r6, r6, #31
 800fa3c:	fa02 f606 	lsl.w	r6, r2, r6
 800fa40:	421e      	tst	r6, r3
 800fa42:	d13a      	bne.n	800faba <__gethex+0x3fe>
 800fa44:	f045 0520 	orr.w	r5, r5, #32
 800fa48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa4a:	601c      	str	r4, [r3, #0]
 800fa4c:	9b02      	ldr	r3, [sp, #8]
 800fa4e:	601f      	str	r7, [r3, #0]
 800fa50:	e6b0      	b.n	800f7b4 <__gethex+0xf8>
 800fa52:	4299      	cmp	r1, r3
 800fa54:	f843 cc04 	str.w	ip, [r3, #-4]
 800fa58:	d8d9      	bhi.n	800fa0e <__gethex+0x352>
 800fa5a:	68a3      	ldr	r3, [r4, #8]
 800fa5c:	459b      	cmp	fp, r3
 800fa5e:	db17      	blt.n	800fa90 <__gethex+0x3d4>
 800fa60:	6861      	ldr	r1, [r4, #4]
 800fa62:	9801      	ldr	r0, [sp, #4]
 800fa64:	3101      	adds	r1, #1
 800fa66:	f7fd fed1 	bl	800d80c <_Balloc>
 800fa6a:	4681      	mov	r9, r0
 800fa6c:	b918      	cbnz	r0, 800fa76 <__gethex+0x3ba>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	2184      	movs	r1, #132	@ 0x84
 800fa72:	4b19      	ldr	r3, [pc, #100]	@ (800fad8 <__gethex+0x41c>)
 800fa74:	e6c5      	b.n	800f802 <__gethex+0x146>
 800fa76:	6922      	ldr	r2, [r4, #16]
 800fa78:	f104 010c 	add.w	r1, r4, #12
 800fa7c:	3202      	adds	r2, #2
 800fa7e:	0092      	lsls	r2, r2, #2
 800fa80:	300c      	adds	r0, #12
 800fa82:	f7fc ff60 	bl	800c946 <memcpy>
 800fa86:	4621      	mov	r1, r4
 800fa88:	9801      	ldr	r0, [sp, #4]
 800fa8a:	f7fd feff 	bl	800d88c <_Bfree>
 800fa8e:	464c      	mov	r4, r9
 800fa90:	6923      	ldr	r3, [r4, #16]
 800fa92:	1c5a      	adds	r2, r3, #1
 800fa94:	6122      	str	r2, [r4, #16]
 800fa96:	2201      	movs	r2, #1
 800fa98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa9c:	615a      	str	r2, [r3, #20]
 800fa9e:	e7be      	b.n	800fa1e <__gethex+0x362>
 800faa0:	6922      	ldr	r2, [r4, #16]
 800faa2:	455a      	cmp	r2, fp
 800faa4:	dd0b      	ble.n	800fabe <__gethex+0x402>
 800faa6:	2101      	movs	r1, #1
 800faa8:	4620      	mov	r0, r4
 800faaa:	f7ff fd9f 	bl	800f5ec <rshift>
 800faae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fab2:	3701      	adds	r7, #1
 800fab4:	42bb      	cmp	r3, r7
 800fab6:	f6ff aee0 	blt.w	800f87a <__gethex+0x1be>
 800faba:	2501      	movs	r5, #1
 800fabc:	e7c2      	b.n	800fa44 <__gethex+0x388>
 800fabe:	f016 061f 	ands.w	r6, r6, #31
 800fac2:	d0fa      	beq.n	800faba <__gethex+0x3fe>
 800fac4:	4453      	add	r3, sl
 800fac6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800faca:	f7fd ff91 	bl	800d9f0 <__hi0bits>
 800face:	f1c6 0620 	rsb	r6, r6, #32
 800fad2:	42b0      	cmp	r0, r6
 800fad4:	dbe7      	blt.n	800faa6 <__gethex+0x3ea>
 800fad6:	e7f0      	b.n	800faba <__gethex+0x3fe>
 800fad8:	08010bc4 	.word	0x08010bc4

0800fadc <L_shift>:
 800fadc:	f1c2 0208 	rsb	r2, r2, #8
 800fae0:	0092      	lsls	r2, r2, #2
 800fae2:	b570      	push	{r4, r5, r6, lr}
 800fae4:	f1c2 0620 	rsb	r6, r2, #32
 800fae8:	6843      	ldr	r3, [r0, #4]
 800faea:	6804      	ldr	r4, [r0, #0]
 800faec:	fa03 f506 	lsl.w	r5, r3, r6
 800faf0:	432c      	orrs	r4, r5
 800faf2:	40d3      	lsrs	r3, r2
 800faf4:	6004      	str	r4, [r0, #0]
 800faf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fafa:	4288      	cmp	r0, r1
 800fafc:	d3f4      	bcc.n	800fae8 <L_shift+0xc>
 800fafe:	bd70      	pop	{r4, r5, r6, pc}

0800fb00 <__match>:
 800fb00:	b530      	push	{r4, r5, lr}
 800fb02:	6803      	ldr	r3, [r0, #0]
 800fb04:	3301      	adds	r3, #1
 800fb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb0a:	b914      	cbnz	r4, 800fb12 <__match+0x12>
 800fb0c:	6003      	str	r3, [r0, #0]
 800fb0e:	2001      	movs	r0, #1
 800fb10:	bd30      	pop	{r4, r5, pc}
 800fb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fb1a:	2d19      	cmp	r5, #25
 800fb1c:	bf98      	it	ls
 800fb1e:	3220      	addls	r2, #32
 800fb20:	42a2      	cmp	r2, r4
 800fb22:	d0f0      	beq.n	800fb06 <__match+0x6>
 800fb24:	2000      	movs	r0, #0
 800fb26:	e7f3      	b.n	800fb10 <__match+0x10>

0800fb28 <__hexnan>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	680b      	ldr	r3, [r1, #0]
 800fb30:	4682      	mov	sl, r0
 800fb32:	115e      	asrs	r6, r3, #5
 800fb34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fb38:	f013 031f 	ands.w	r3, r3, #31
 800fb3c:	bf18      	it	ne
 800fb3e:	3604      	addne	r6, #4
 800fb40:	1f37      	subs	r7, r6, #4
 800fb42:	4690      	mov	r8, r2
 800fb44:	46b9      	mov	r9, r7
 800fb46:	463c      	mov	r4, r7
 800fb48:	46ab      	mov	fp, r5
 800fb4a:	b087      	sub	sp, #28
 800fb4c:	6801      	ldr	r1, [r0, #0]
 800fb4e:	9301      	str	r3, [sp, #4]
 800fb50:	f846 5c04 	str.w	r5, [r6, #-4]
 800fb54:	9502      	str	r5, [sp, #8]
 800fb56:	784a      	ldrb	r2, [r1, #1]
 800fb58:	1c4b      	adds	r3, r1, #1
 800fb5a:	9303      	str	r3, [sp, #12]
 800fb5c:	b342      	cbz	r2, 800fbb0 <__hexnan+0x88>
 800fb5e:	4610      	mov	r0, r2
 800fb60:	9105      	str	r1, [sp, #20]
 800fb62:	9204      	str	r2, [sp, #16]
 800fb64:	f7ff fd95 	bl	800f692 <__hexdig_fun>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d151      	bne.n	800fc10 <__hexnan+0xe8>
 800fb6c:	9a04      	ldr	r2, [sp, #16]
 800fb6e:	9905      	ldr	r1, [sp, #20]
 800fb70:	2a20      	cmp	r2, #32
 800fb72:	d818      	bhi.n	800fba6 <__hexnan+0x7e>
 800fb74:	9b02      	ldr	r3, [sp, #8]
 800fb76:	459b      	cmp	fp, r3
 800fb78:	dd13      	ble.n	800fba2 <__hexnan+0x7a>
 800fb7a:	454c      	cmp	r4, r9
 800fb7c:	d206      	bcs.n	800fb8c <__hexnan+0x64>
 800fb7e:	2d07      	cmp	r5, #7
 800fb80:	dc04      	bgt.n	800fb8c <__hexnan+0x64>
 800fb82:	462a      	mov	r2, r5
 800fb84:	4649      	mov	r1, r9
 800fb86:	4620      	mov	r0, r4
 800fb88:	f7ff ffa8 	bl	800fadc <L_shift>
 800fb8c:	4544      	cmp	r4, r8
 800fb8e:	d952      	bls.n	800fc36 <__hexnan+0x10e>
 800fb90:	2300      	movs	r3, #0
 800fb92:	f1a4 0904 	sub.w	r9, r4, #4
 800fb96:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb9a:	461d      	mov	r5, r3
 800fb9c:	464c      	mov	r4, r9
 800fb9e:	f8cd b008 	str.w	fp, [sp, #8]
 800fba2:	9903      	ldr	r1, [sp, #12]
 800fba4:	e7d7      	b.n	800fb56 <__hexnan+0x2e>
 800fba6:	2a29      	cmp	r2, #41	@ 0x29
 800fba8:	d157      	bne.n	800fc5a <__hexnan+0x132>
 800fbaa:	3102      	adds	r1, #2
 800fbac:	f8ca 1000 	str.w	r1, [sl]
 800fbb0:	f1bb 0f00 	cmp.w	fp, #0
 800fbb4:	d051      	beq.n	800fc5a <__hexnan+0x132>
 800fbb6:	454c      	cmp	r4, r9
 800fbb8:	d206      	bcs.n	800fbc8 <__hexnan+0xa0>
 800fbba:	2d07      	cmp	r5, #7
 800fbbc:	dc04      	bgt.n	800fbc8 <__hexnan+0xa0>
 800fbbe:	462a      	mov	r2, r5
 800fbc0:	4649      	mov	r1, r9
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff ff8a 	bl	800fadc <L_shift>
 800fbc8:	4544      	cmp	r4, r8
 800fbca:	d936      	bls.n	800fc3a <__hexnan+0x112>
 800fbcc:	4623      	mov	r3, r4
 800fbce:	f1a8 0204 	sub.w	r2, r8, #4
 800fbd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fbd6:	429f      	cmp	r7, r3
 800fbd8:	f842 1f04 	str.w	r1, [r2, #4]!
 800fbdc:	d2f9      	bcs.n	800fbd2 <__hexnan+0xaa>
 800fbde:	1b3b      	subs	r3, r7, r4
 800fbe0:	f023 0303 	bic.w	r3, r3, #3
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	3401      	adds	r4, #1
 800fbe8:	3e03      	subs	r6, #3
 800fbea:	42b4      	cmp	r4, r6
 800fbec:	bf88      	it	hi
 800fbee:	2304      	movhi	r3, #4
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	4443      	add	r3, r8
 800fbf4:	f843 2b04 	str.w	r2, [r3], #4
 800fbf8:	429f      	cmp	r7, r3
 800fbfa:	d2fb      	bcs.n	800fbf4 <__hexnan+0xcc>
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	b91b      	cbnz	r3, 800fc08 <__hexnan+0xe0>
 800fc00:	4547      	cmp	r7, r8
 800fc02:	d128      	bne.n	800fc56 <__hexnan+0x12e>
 800fc04:	2301      	movs	r3, #1
 800fc06:	603b      	str	r3, [r7, #0]
 800fc08:	2005      	movs	r0, #5
 800fc0a:	b007      	add	sp, #28
 800fc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc10:	3501      	adds	r5, #1
 800fc12:	2d08      	cmp	r5, #8
 800fc14:	f10b 0b01 	add.w	fp, fp, #1
 800fc18:	dd06      	ble.n	800fc28 <__hexnan+0x100>
 800fc1a:	4544      	cmp	r4, r8
 800fc1c:	d9c1      	bls.n	800fba2 <__hexnan+0x7a>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	2501      	movs	r5, #1
 800fc22:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc26:	3c04      	subs	r4, #4
 800fc28:	6822      	ldr	r2, [r4, #0]
 800fc2a:	f000 000f 	and.w	r0, r0, #15
 800fc2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc32:	6020      	str	r0, [r4, #0]
 800fc34:	e7b5      	b.n	800fba2 <__hexnan+0x7a>
 800fc36:	2508      	movs	r5, #8
 800fc38:	e7b3      	b.n	800fba2 <__hexnan+0x7a>
 800fc3a:	9b01      	ldr	r3, [sp, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d0dd      	beq.n	800fbfc <__hexnan+0xd4>
 800fc40:	f04f 32ff 	mov.w	r2, #4294967295
 800fc44:	f1c3 0320 	rsb	r3, r3, #32
 800fc48:	40da      	lsrs	r2, r3
 800fc4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	f846 3c04 	str.w	r3, [r6, #-4]
 800fc54:	e7d2      	b.n	800fbfc <__hexnan+0xd4>
 800fc56:	3f04      	subs	r7, #4
 800fc58:	e7d0      	b.n	800fbfc <__hexnan+0xd4>
 800fc5a:	2004      	movs	r0, #4
 800fc5c:	e7d5      	b.n	800fc0a <__hexnan+0xe2>

0800fc5e <__ascii_mbtowc>:
 800fc5e:	b082      	sub	sp, #8
 800fc60:	b901      	cbnz	r1, 800fc64 <__ascii_mbtowc+0x6>
 800fc62:	a901      	add	r1, sp, #4
 800fc64:	b142      	cbz	r2, 800fc78 <__ascii_mbtowc+0x1a>
 800fc66:	b14b      	cbz	r3, 800fc7c <__ascii_mbtowc+0x1e>
 800fc68:	7813      	ldrb	r3, [r2, #0]
 800fc6a:	600b      	str	r3, [r1, #0]
 800fc6c:	7812      	ldrb	r2, [r2, #0]
 800fc6e:	1e10      	subs	r0, r2, #0
 800fc70:	bf18      	it	ne
 800fc72:	2001      	movne	r0, #1
 800fc74:	b002      	add	sp, #8
 800fc76:	4770      	bx	lr
 800fc78:	4610      	mov	r0, r2
 800fc7a:	e7fb      	b.n	800fc74 <__ascii_mbtowc+0x16>
 800fc7c:	f06f 0001 	mvn.w	r0, #1
 800fc80:	e7f8      	b.n	800fc74 <__ascii_mbtowc+0x16>

0800fc82 <_realloc_r>:
 800fc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc86:	4680      	mov	r8, r0
 800fc88:	4615      	mov	r5, r2
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	b921      	cbnz	r1, 800fc98 <_realloc_r+0x16>
 800fc8e:	4611      	mov	r1, r2
 800fc90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	f7fd bd2e 	b.w	800d6f4 <_malloc_r>
 800fc98:	b92a      	cbnz	r2, 800fca6 <_realloc_r+0x24>
 800fc9a:	f7fd fcb9 	bl	800d610 <_free_r>
 800fc9e:	2400      	movs	r4, #0
 800fca0:	4620      	mov	r0, r4
 800fca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fca6:	f000 f8c4 	bl	800fe32 <_malloc_usable_size_r>
 800fcaa:	4285      	cmp	r5, r0
 800fcac:	4606      	mov	r6, r0
 800fcae:	d802      	bhi.n	800fcb6 <_realloc_r+0x34>
 800fcb0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fcb4:	d8f4      	bhi.n	800fca0 <_realloc_r+0x1e>
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	4640      	mov	r0, r8
 800fcba:	f7fd fd1b 	bl	800d6f4 <_malloc_r>
 800fcbe:	4607      	mov	r7, r0
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d0ec      	beq.n	800fc9e <_realloc_r+0x1c>
 800fcc4:	42b5      	cmp	r5, r6
 800fcc6:	462a      	mov	r2, r5
 800fcc8:	4621      	mov	r1, r4
 800fcca:	bf28      	it	cs
 800fccc:	4632      	movcs	r2, r6
 800fcce:	f7fc fe3a 	bl	800c946 <memcpy>
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	f7fd fc9b 	bl	800d610 <_free_r>
 800fcda:	463c      	mov	r4, r7
 800fcdc:	e7e0      	b.n	800fca0 <_realloc_r+0x1e>

0800fcde <__ascii_wctomb>:
 800fcde:	4603      	mov	r3, r0
 800fce0:	4608      	mov	r0, r1
 800fce2:	b141      	cbz	r1, 800fcf6 <__ascii_wctomb+0x18>
 800fce4:	2aff      	cmp	r2, #255	@ 0xff
 800fce6:	d904      	bls.n	800fcf2 <__ascii_wctomb+0x14>
 800fce8:	228a      	movs	r2, #138	@ 0x8a
 800fcea:	f04f 30ff 	mov.w	r0, #4294967295
 800fcee:	601a      	str	r2, [r3, #0]
 800fcf0:	4770      	bx	lr
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	700a      	strb	r2, [r1, #0]
 800fcf6:	4770      	bx	lr

0800fcf8 <fiprintf>:
 800fcf8:	b40e      	push	{r1, r2, r3}
 800fcfa:	b503      	push	{r0, r1, lr}
 800fcfc:	4601      	mov	r1, r0
 800fcfe:	ab03      	add	r3, sp, #12
 800fd00:	4805      	ldr	r0, [pc, #20]	@ (800fd18 <fiprintf+0x20>)
 800fd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd06:	6800      	ldr	r0, [r0, #0]
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	f7ff f9a7 	bl	800f05c <_vfiprintf_r>
 800fd0e:	b002      	add	sp, #8
 800fd10:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd14:	b003      	add	sp, #12
 800fd16:	4770      	bx	lr
 800fd18:	20000050 	.word	0x20000050

0800fd1c <__swhatbuf_r>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	460c      	mov	r4, r1
 800fd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd24:	4615      	mov	r5, r2
 800fd26:	2900      	cmp	r1, #0
 800fd28:	461e      	mov	r6, r3
 800fd2a:	b096      	sub	sp, #88	@ 0x58
 800fd2c:	da0c      	bge.n	800fd48 <__swhatbuf_r+0x2c>
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	2100      	movs	r1, #0
 800fd32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd36:	bf14      	ite	ne
 800fd38:	2340      	movne	r3, #64	@ 0x40
 800fd3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd3e:	2000      	movs	r0, #0
 800fd40:	6031      	str	r1, [r6, #0]
 800fd42:	602b      	str	r3, [r5, #0]
 800fd44:	b016      	add	sp, #88	@ 0x58
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	466a      	mov	r2, sp
 800fd4a:	f000 f849 	bl	800fde0 <_fstat_r>
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	dbed      	blt.n	800fd2e <__swhatbuf_r+0x12>
 800fd52:	9901      	ldr	r1, [sp, #4]
 800fd54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd5c:	4259      	negs	r1, r3
 800fd5e:	4159      	adcs	r1, r3
 800fd60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd64:	e7eb      	b.n	800fd3e <__swhatbuf_r+0x22>

0800fd66 <__smakebuf_r>:
 800fd66:	898b      	ldrh	r3, [r1, #12]
 800fd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd6a:	079d      	lsls	r5, r3, #30
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	460c      	mov	r4, r1
 800fd70:	d507      	bpl.n	800fd82 <__smakebuf_r+0x1c>
 800fd72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd76:	6023      	str	r3, [r4, #0]
 800fd78:	6123      	str	r3, [r4, #16]
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	6163      	str	r3, [r4, #20]
 800fd7e:	b003      	add	sp, #12
 800fd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd82:	466a      	mov	r2, sp
 800fd84:	ab01      	add	r3, sp, #4
 800fd86:	f7ff ffc9 	bl	800fd1c <__swhatbuf_r>
 800fd8a:	9f00      	ldr	r7, [sp, #0]
 800fd8c:	4605      	mov	r5, r0
 800fd8e:	4639      	mov	r1, r7
 800fd90:	4630      	mov	r0, r6
 800fd92:	f7fd fcaf 	bl	800d6f4 <_malloc_r>
 800fd96:	b948      	cbnz	r0, 800fdac <__smakebuf_r+0x46>
 800fd98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd9c:	059a      	lsls	r2, r3, #22
 800fd9e:	d4ee      	bmi.n	800fd7e <__smakebuf_r+0x18>
 800fda0:	f023 0303 	bic.w	r3, r3, #3
 800fda4:	f043 0302 	orr.w	r3, r3, #2
 800fda8:	81a3      	strh	r3, [r4, #12]
 800fdaa:	e7e2      	b.n	800fd72 <__smakebuf_r+0xc>
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fdb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdb6:	81a3      	strh	r3, [r4, #12]
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	b15b      	cbz	r3, 800fdd6 <__smakebuf_r+0x70>
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdc4:	f000 f81e 	bl	800fe04 <_isatty_r>
 800fdc8:	b128      	cbz	r0, 800fdd6 <__smakebuf_r+0x70>
 800fdca:	89a3      	ldrh	r3, [r4, #12]
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	f043 0301 	orr.w	r3, r3, #1
 800fdd4:	81a3      	strh	r3, [r4, #12]
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	431d      	orrs	r5, r3
 800fdda:	81a5      	strh	r5, [r4, #12]
 800fddc:	e7cf      	b.n	800fd7e <__smakebuf_r+0x18>
	...

0800fde0 <_fstat_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	2300      	movs	r3, #0
 800fde4:	4d06      	ldr	r5, [pc, #24]	@ (800fe00 <_fstat_r+0x20>)
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	4611      	mov	r1, r2
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	f7f4 fd4d 	bl	800488c <_fstat>
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	d102      	bne.n	800fdfc <_fstat_r+0x1c>
 800fdf6:	682b      	ldr	r3, [r5, #0]
 800fdf8:	b103      	cbz	r3, 800fdfc <_fstat_r+0x1c>
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	20000ad4 	.word	0x20000ad4

0800fe04 <_isatty_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	2300      	movs	r3, #0
 800fe08:	4d05      	ldr	r5, [pc, #20]	@ (800fe20 <_isatty_r+0x1c>)
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	f7f4 fd4b 	bl	80048aa <_isatty>
 800fe14:	1c43      	adds	r3, r0, #1
 800fe16:	d102      	bne.n	800fe1e <_isatty_r+0x1a>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	b103      	cbz	r3, 800fe1e <_isatty_r+0x1a>
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	20000ad4 	.word	0x20000ad4

0800fe24 <abort>:
 800fe24:	2006      	movs	r0, #6
 800fe26:	b508      	push	{r3, lr}
 800fe28:	f000 f834 	bl	800fe94 <raise>
 800fe2c:	2001      	movs	r0, #1
 800fe2e:	f7f4 fcde 	bl	80047ee <_exit>

0800fe32 <_malloc_usable_size_r>:
 800fe32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe36:	1f18      	subs	r0, r3, #4
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	bfbc      	itt	lt
 800fe3c:	580b      	ldrlt	r3, [r1, r0]
 800fe3e:	18c0      	addlt	r0, r0, r3
 800fe40:	4770      	bx	lr

0800fe42 <_raise_r>:
 800fe42:	291f      	cmp	r1, #31
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	4605      	mov	r5, r0
 800fe48:	460c      	mov	r4, r1
 800fe4a:	d904      	bls.n	800fe56 <_raise_r+0x14>
 800fe4c:	2316      	movs	r3, #22
 800fe4e:	6003      	str	r3, [r0, #0]
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295
 800fe54:	bd38      	pop	{r3, r4, r5, pc}
 800fe56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe58:	b112      	cbz	r2, 800fe60 <_raise_r+0x1e>
 800fe5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe5e:	b94b      	cbnz	r3, 800fe74 <_raise_r+0x32>
 800fe60:	4628      	mov	r0, r5
 800fe62:	f000 f831 	bl	800fec8 <_getpid_r>
 800fe66:	4622      	mov	r2, r4
 800fe68:	4601      	mov	r1, r0
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe70:	f000 b818 	b.w	800fea4 <_kill_r>
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d00a      	beq.n	800fe8e <_raise_r+0x4c>
 800fe78:	1c59      	adds	r1, r3, #1
 800fe7a:	d103      	bne.n	800fe84 <_raise_r+0x42>
 800fe7c:	2316      	movs	r3, #22
 800fe7e:	6003      	str	r3, [r0, #0]
 800fe80:	2001      	movs	r0, #1
 800fe82:	e7e7      	b.n	800fe54 <_raise_r+0x12>
 800fe84:	2100      	movs	r1, #0
 800fe86:	4620      	mov	r0, r4
 800fe88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe8c:	4798      	blx	r3
 800fe8e:	2000      	movs	r0, #0
 800fe90:	e7e0      	b.n	800fe54 <_raise_r+0x12>
	...

0800fe94 <raise>:
 800fe94:	4b02      	ldr	r3, [pc, #8]	@ (800fea0 <raise+0xc>)
 800fe96:	4601      	mov	r1, r0
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	f7ff bfd2 	b.w	800fe42 <_raise_r>
 800fe9e:	bf00      	nop
 800fea0:	20000050 	.word	0x20000050

0800fea4 <_kill_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	2300      	movs	r3, #0
 800fea8:	4d06      	ldr	r5, [pc, #24]	@ (800fec4 <_kill_r+0x20>)
 800feaa:	4604      	mov	r4, r0
 800feac:	4608      	mov	r0, r1
 800feae:	4611      	mov	r1, r2
 800feb0:	602b      	str	r3, [r5, #0]
 800feb2:	f7f4 fc8c 	bl	80047ce <_kill>
 800feb6:	1c43      	adds	r3, r0, #1
 800feb8:	d102      	bne.n	800fec0 <_kill_r+0x1c>
 800feba:	682b      	ldr	r3, [r5, #0]
 800febc:	b103      	cbz	r3, 800fec0 <_kill_r+0x1c>
 800febe:	6023      	str	r3, [r4, #0]
 800fec0:	bd38      	pop	{r3, r4, r5, pc}
 800fec2:	bf00      	nop
 800fec4:	20000ad4 	.word	0x20000ad4

0800fec8 <_getpid_r>:
 800fec8:	f7f4 bc7a 	b.w	80047c0 <_getpid>

0800fecc <_init>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	bf00      	nop
 800fed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fed2:	bc08      	pop	{r3}
 800fed4:	469e      	mov	lr, r3
 800fed6:	4770      	bx	lr

0800fed8 <_fini>:
 800fed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feda:	bf00      	nop
 800fedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fede:	bc08      	pop	{r3}
 800fee0:	469e      	mov	lr, r3
 800fee2:	4770      	bx	lr
